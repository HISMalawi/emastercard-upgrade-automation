{"version":3,"sources":["webpack:///./src/apps/ANC/Views/Encounters/Vaccination.vue?1d4a","webpack:///./src/apps/ANC/Services/anc_dispensing_service.ts","webpack:///./src/apps/ANC/Views/Encounters/Vaccination.vue","webpack:///./src/apps/ANC/Views/Encounters/Vaccination.vue?4841","webpack:///./src/services/drug_order_service.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/apps/ANC/Services/anc_treatment_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/components/Forms/BaseFormElements.ts","webpack:///./src/components/FormElements lazy ^\\.\\/.*\\.vue$ namespace object"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","fields","formFields","skipSummary","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","AncDispensationService","AppEncounterService","constructor","patientID","providerID","super","saveNoDispensationObs","this","saveValueTextObs","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","handler","getFields","immediate","methods","f","computedData","action","nextTask","id","helpText","type","FieldType","TT_YES_NO","validation","v","computedValue","match","async","AncTreatmentService","createEncounter","updateVaccinationOrder","options","label","values","value","__exports__","DrugOrderService","Service","orders","postJson","getProgramID","dispensations","map","order","getSessionDate","getJson","pageSize","drugID","date","params","patientId","HisStandardForm","patient","providers","facts","sessionDate","apiDate","encounterName","isBdeMode","birthDate","outcome","outcomeStartDate","route","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","deep","computed","patientDashboardUrl","runflowState","state","states","FlowState","SET_PROVIDER","selection","username","split","provider","find","person_id","CONTINUE","CHANGE_SESSION_DATE","$router","push","EXIT","CHANGE_PATIENT_OUTCOME","GO_TO_PATIENT_DASHBOARD","gotoPatientDashboard","findings","matchToGuidelines","ENCOUNTER_GUIDELINES","index","_finding$actions","_finding$actions3","finding","actions","alert","_finding$actions2","status","_finding$actions4","flowState","program","startDate","e","console","error","toastDanger","ProgramService","getCachedApiDate","isBDE","getBirthdate","$route","name","toString","toUpperCase","sort","a","b","usernameA","usernameB","p","_p$person","isEmpty","person","names","_p$person2","latestName","given_name","family_name","toOption","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","mapOptions","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","d","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","conditions","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","required","formData","$emit","DRUG_FREQUENCIES","vaccinationDrugObj","dispensed","dispenseVaccinationDrug","orderID","order_id","updateDispensationOrders","createOrders","create","getEncounterID","drugs","o","buildDrugOrderObj","dispensation","forEach","quantity","frequency","duration","drug_inventory_id","drug","Date","expiryDate","setDate","getDate","dose","dailyEquivalentDose","parseFloat","HisDate","toStandardHisFormat","drug_name","units","dformat","toStandardHisDisplayFormat","priority","infoActionSheet","slot","color","modal","optionsActionSheet","role","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","COMPONENT_REFS","TT_ASYNC_MULTI_SELECT","TT_LINKAGE_CODE","TT_MULTI_SELECT_GRID","TT_AGE_INPUT","TT_BARCODE","TT_NOTE","TT_SELECT","TT_CARD_SELECTOR","TT_MULTIPLE_SELECT","TT_TEXT","TT_NUMBER","TT_MONTHLY_DAYS","TT_ART_REGIMEN_SELECTION","TT_NEXT_VISIT_INTERVAL_SELECTION","TT_TABLE_VIEWER","TT_DOSAGE_INPUT","TT_MULTIPLE_YES_NO","TT_WEIGHT_CHART","TT_VITALS_ENTRY","TT_APPOINTMENTS_ENTRY","TT_COMPLAINTS_PICKER","TT_CLINIC_HOLIDAY_PICKER","TT_SUMMARY","TT_ART_STAGING_SUMMARY","TT_ADHERENCE_INPUT","TT_LAB_ORDERS","TT_PERSON_RESULT_VIEW","TT_PROGRAM_SELECTION","TT_DATE_PICKER","TT_RELATION_SELECTION","TT_FILING_NUMBER_VIEW","TT_PERSON_MATCH_VIEW","TT_FULL_DATE","TT_BATCH_ENTRY","TT_BATCH_VERIFICATION","TT_BATCH_MOVEMENT","TT_IP_ADDRESS","TT_TEXT_BANNER","TT_DISPENSATION_INPUT","TT_DATA_TABLE","TT_GROUP_SELECTOR","TT_ANC_PREGNANCY_INPUT_CONFIG","TT_ANC_PREGNANCY_DETAILS_INPUT","TT_ANC_LMP_DATE_INPUT","TT_DRUG_TRANSFER_IN","TT_GRID_SELECTOR","TT_ANC_DRUGSET_INPUT","TT_RADIOLOGY_PICKER","TT_PRESCRIPTION_INPUT","TT_INFINITE_SCROLL_MULTIPLE_SELECT","TT_DRUG_DISPENSER","webpackAsyncContext","req","__webpack_require__","resolve","Error","code","ids","slice","keys","module","exports"],"mappings":"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","file":"js/chunk-21d15150.0ad43a1c.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.formFields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\n\nexport class AncDispensationService extends AppEncounterService {\n    constructor(patientID: number, providerID: number){\n        super(patientID, 54, providerID)\n    }\n\n    saveNoDispensationObs() {\n        return this.saveValueTextObs(\n            'Tetanus Diphtheria', 'Not dispensed'\n        )\n    }\n\n}\n","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { AncDispensationService} from \"@/apps/ANC/Services/anc_dispensing_service\"\nimport { AncTreatmentService } from \"@/apps/ANC/Services/anc_treatment_service\"\nimport { IonPage } from \"@ionic/vue\"\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    formFields: [] as any,\n    service: {} as any\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.formFields = this.getFields()\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(f: any, computedData: any) {\n      await computedData['prescription'].action()\n      this.nextTask()\n    },\n    getFields() {\n      return [\n        {\n          id: 'prescription',\n          helpText: 'Vaccination',\n          type: FieldType.TT_YES_NO,\n          validation: (v: string) => !v ?  ['Value is required'] : null,\n          computedValue: (v: string) => {\n            if (v.match(/true/i)) {\n              return {\n                action: async () => {\n                  const service = new AncTreatmentService(this.patientID, this.providerID)\n                  await service.createEncounter()\n                  await service.updateVaccinationOrder()\n                }\n              }\n            }\n            return {\n              action: async () => {\n                const service = new AncDispensationService(this.patientID, this.providerID)\n                await service.createEncounter()\n                await service.saveNoDispensationObs()\n              }\n            }\n          },\n          options: () => ([\n            {\n              label: 'TD given today?',\n              values: [\n                {\n                  label: \"yes\",\n                  value: \"true\"\n                },\n                {\n                  label: \"no\",\n                  value: \"false\"\n                }\n              ]\n            }\n          ])\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./Vaccination.vue?vue&type=template&id=7fe4ec23&ts=true\"\nimport script from \"./Vaccination.vue?vue&type=script&lang=ts\"\nexport * from \"./Vaccination.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/anthony/Documents/source/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","\n/**\n * @deprecated moved to useEncounter composable\n * \n */\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/anthony/Documents/source/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { isEmpty } from \"lodash\";\nimport HisDate from \"@/utils/Date\"\n\nexport interface AncTreatmentDrugObject {\n    'id': number;\n    'drug_name': string;\n    'dose': string;\n    'duration': number;\n    'frequency': string;\n    'units': string;\n}\n\nexport const DRUG_FREQUENCIES: Record<string, number> = { \n    'Once a day (OD)' : 1,\n    'Twice a day (BD)': 2,\n    'Three a day (TDS)': 3,\n    'Four times a day (QID)' : 4,\n    'Five times a day (5X/D)' : 5,\n    'Six times a day (Q4HRS)' : 6,\n    'In the morning (QAM)' : 0.5,\n    'Once a week (QWK)' : 0.14,\n    'Once a month' : 0.03,\n    'Twice a month' : 0.071\n}\n\nexport class AncTreatmentService extends AppEncounterService {\n    constructor(patientID: number, providerID: number){\n        super(patientID, 25, providerID)\n    }\n\n    vaccinationDrugObj() {\n        return {\n            'drug_inventory_id': 609,\n            'dose': 0.5,\n            'equivalent_daily_dose': 0.5,\n            'frequency': \"Once a day (od)\",\n            'start_date': this.date,\n            'auto_expire_date': this.date,\n            'instructions': \"Once a day\",\n            'units': \"ml\"\n        }\n    }\n\n    async updateVaccinationOrder() {\n        const dispensed = await this.dispenseVaccinationDrug()\n        if (!isEmpty(dispensed)) {\n            const orderID = dispensed[0].order_id\n            return DrugOrderService.updateDispensationOrders([{'order_id': orderID, 'quantity' : 1}])\n        }\n        throw 'Unable to dispense'\n    }\n\n    dispenseVaccinationDrug() {\n        return this.createOrders([this.vaccinationDrugObj()])\n    }\n\n    createOrders(orders: any) {\n        return DrugOrderService.create({\n            'drug_orders': orders,\n            'encounter_id': this.getEncounterID(),\n        })\n    }\n\n    async submitTreatment(drugs: AncTreatmentDrugObject[]) {\n        await this.createEncounter()\n        const orders = await this.createOrders(drugs.map(o => this.buildDrugOrderObj(o)))\n        const dispensation = new AppEncounterService(this.patientID, 54, this.providerID)\n        await dispensation.createEncounter()\n        drugs.forEach(o => {\n            const quantity: number = DRUG_FREQUENCIES[o.frequency] * o.duration\n            orders.forEach((order: any) => { \n                if (order.drug_inventory_id === o.id) {\n                    order.quantity = quantity\n                }\n            })\n        })\n        await DrugOrderService.updateDispensationOrders(orders)\n    }\n\n    buildDrugOrderObj(drug: AncTreatmentDrugObject) {\n        const startDate = new Date(this.date)\n        const expiryDate = startDate.setDate(startDate.getDate() + parseInt(`${drug.duration}`))\n        const dose: any = drug.dose || DRUG_FREQUENCIES[drug.frequency]\n        const dailyEquivalentDose =  parseFloat(dose) * DRUG_FREQUENCIES[drug.frequency] \n        return {\n            'drug_inventory_id': drug.id,\n            'dose': dose,\n            'equivalent_daily_dose': dailyEquivalentDose,\n            'frequency': drug.frequency,\n            'start_date': this.date,\n            'auto_expire_date': HisDate.toStandardHisFormat(new Date(expiryDate)),\n            'instructions': drug.drug_name + ':' + drug.dose + ' ' + drug.units + ' ' + drug.frequency + 'days',\n            'units': drug.units\n        }\n    }\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: (facts: FactsInterface) => any;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: ConditionsInteface;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\nexport type FactsInterface = Record<string, any>\nexport type ConditionResolver = (value: any, facts: FactsInterface) => boolean | RegExpMatchArray | null\nexport type ConditionsInteface = Record<string, ConditionResolver>\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: FactsInterface, conditions: ConditionsInteface): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: FactsInterface, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","/**\n * Map all formElements/components defined in \"@/components/FormElements\" \n * in the Enum below by their file name.\n * \n * Next step is to add FieldType entry in COMPONENT_REFS in the \n * Array below the FieldType Enum\n */\nexport enum FieldType {\n    TT_ASYNC_MULTI_SELECT = 'AsyncMultiSelect',\n    TT_LINKAGE_CODE = 'LinkageCodeInput',\n    TT_MULTI_SELECT_GRID= 'HisMultiSelectGrid',\n    TT_AGE_INPUT='HisAgeInput',\n    TT_GROUP_SELECTOR = 'HisGroupSelector',\n    TT_DATA_TABLE = 'HisDataTable',\n    TT_GRID_SELECTOR = 'HisGridSelector',\n    TT_NOTE = 'HisNote',\n    TT_BARCODE = 'HisBarcodeInput',\n    TT_MONTHLY_DAYS=\"HisMonthlyDays\",\n    TT_TEXT=\"HisTextInput\",\n    TT_NUMBER = \"HisNumberInput\",\n    TT_DATETIME=\"datetime\",\n    TT_SELECT=\"HisSelect\",\n    TT_MULTIPLE_SELECT=\"HisMultipleSelect\",\n    TT_ART_REGIMEN_SELECTION=\"HisArtRegimenSelection\",\n    TT_NEXT_VISIT_INTERVAL_SELECTION=\"HisNextVisitInterval\",\n    TT_TABLE_VIEWER=\"HisTableViewer\",\n    TT_DOSAGE_INPUT=\"HisDosageInput\",\n    TT_YES_NO=\"YesNoSelect\",\n    TT_MULTIPLE_YES_NO=\"MultiYesNoSelect\",\n    TT_SUMMARY=\"HisSummary\",\n    TT_WEIGHT_CHART = \"HisWeightChart\",\n    TT_VITALS_ENTRY=\"HisVitalsEntry\",\n    TT_ADHERENCE_INPUT = \"HisAdherenceInput\",\n    TT_ART_STAGING_SUMMARY = \"ArtStagingSummary\",\n    TT_LAB_ORDERS = \"HisLabOrders\",\n    TT_APPOINTMENTS_ENTRY = \"HisAppointments\",\n    TT_DISPENSATION_INPUT = 'DrugDispensationSelection',\n    TT_PROGRAM_SELECTION = 'ProgramSelection',\n    TT_DATE_PICKER = 'HisDatePicker',\n    TT_PERSON_RESULT_VIEW = 'PersonSearchView',\n    TT_RELATION_SELECTION = 'RelationsSelection',\n    TT_FILING_NUMBER_VIEW = 'FilingNumberView',\n    TT_CARD_SELECTOR = 'HisCardSelector',\n    TT_PERSON_MATCH_VIEW = 'PersonMatchView',\n    TT_FULL_DATE = 'HisDateInput',\n    TT_BATCH_ENTRY = 'HisBatchEntry',\n    TT_BATCH_VERIFICATION = 'HisBatchVerification',\n    TT_BATCH_MOVEMENT = 'HisBatchMovement',\n    TT_COMPLAINTS_PICKER = 'HisComplaintsPicker',\n    TT_RADIOLOGY_PICKER = 'HisRadiologyPicker',\n    TT_IP_ADDRESS = 'HisIPAddress',\n    TT_TEXT_BANNER = 'HisTextBanner',\n    TT_DRUG_DISPENSER = 'GeneralDrugDispenser',\n    TT_CLINIC_HOLIDAY_PICKER = 'HisClinicHolidayPicker',\n    TT_ANC_PREGNANCY_INPUT_CONFIG = 'AncPregnancyInfoConfig',\n    TT_ANC_PREGNANCY_DETAILS_INPUT = 'AncPregnancyDetailsInput',\n    TT_ANC_LMP_DATE_INPUT = 'AncLmpDateInput',\n    TT_ANC_DRUGSET_INPUT = 'AncDrugSetInput',\n    TT_DRUG_TRANSFER_IN = 'DrugTransferInput',\n    TT_PRESCRIPTION_INPUT = 'HisPrescriptionInput',\n    TT_INFINITE_SCROLL_MULTIPLE_SELECT=\"HisInfiniteScrollMultipleSelect\"\n}\n\n// Register FieldTypes here that will be registered at runtime\nexport const COMPONENT_REFS: FieldType[] = [\n    FieldType.TT_ASYNC_MULTI_SELECT,\n    FieldType.TT_LINKAGE_CODE,\n    FieldType.TT_MULTI_SELECT_GRID,\n    FieldType.TT_AGE_INPUT,\n    FieldType.TT_BARCODE,\n    FieldType.TT_NOTE,\n    FieldType.TT_SELECT,\n    FieldType.TT_CARD_SELECTOR,\n    FieldType.TT_MULTIPLE_SELECT,\n    FieldType.TT_TEXT,\n    FieldType.TT_NUMBER,\n    FieldType.TT_MONTHLY_DAYS,\n    FieldType.TT_ART_REGIMEN_SELECTION,\n    FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n    FieldType.TT_TABLE_VIEWER,\n    FieldType.TT_DOSAGE_INPUT,\n    FieldType.TT_YES_NO,\n    FieldType.TT_MULTIPLE_YES_NO,\n    FieldType.TT_WEIGHT_CHART,\n    FieldType.TT_VITALS_ENTRY,\n    FieldType.TT_APPOINTMENTS_ENTRY,\n    FieldType.TT_COMPLAINTS_PICKER,\n    FieldType.TT_CLINIC_HOLIDAY_PICKER,\n    FieldType.TT_SUMMARY,\n    FieldType.TT_ART_STAGING_SUMMARY,\n    FieldType.TT_ADHERENCE_INPUT,\n    FieldType.TT_LAB_ORDERS,\n    FieldType.TT_PERSON_RESULT_VIEW,\n    FieldType.TT_PROGRAM_SELECTION,\n    FieldType.TT_DATE_PICKER,\n    FieldType.TT_RELATION_SELECTION,\n    FieldType.TT_FILING_NUMBER_VIEW,\n    FieldType.TT_PERSON_MATCH_VIEW,\n    FieldType.TT_FULL_DATE,\n    FieldType.TT_BATCH_ENTRY,\n    FieldType.TT_BATCH_VERIFICATION,\n    FieldType.TT_BATCH_MOVEMENT,\n    FieldType.TT_IP_ADDRESS,\n    FieldType.TT_TEXT_BANNER,\n    FieldType.TT_DISPENSATION_INPUT,\n    FieldType.TT_DATA_TABLE,\n    FieldType.TT_GROUP_SELECTOR,\n    FieldType.TT_ANC_PREGNANCY_INPUT_CONFIG,\n    FieldType.TT_ANC_PREGNANCY_DETAILS_INPUT,\n    FieldType.TT_ANC_LMP_DATE_INPUT,\n    FieldType.TT_DRUG_TRANSFER_IN,\n    FieldType.TT_GRID_SELECTOR,\n    FieldType.TT_ANC_DRUGSET_INPUT,\n    FieldType.TT_RADIOLOGY_PICKER,\n    FieldType.TT_PRESCRIPTION_INPUT,\n    FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n    FieldType.TT_DRUG_DISPENSER\n]\n","var map = {\n\t\"./AncDrugSetInput.vue\": [\n\t\t\"c99f\",\n\t\t\"TouchFormElement0\"\n\t],\n\t\"./AncLmpDateInput.vue\": [\n\t\t\"101a\",\n\t\t\"TouchFormElement1\"\n\t],\n\t\"./AncPregnancyDetailsInput.vue\": [\n\t\t\"b043\",\n\t\t\"TouchFormElement2\"\n\t],\n\t\"./AncPregnancyInfoConfig.vue\": [\n\t\t\"262e\",\n\t\t\"TouchFormElement3\"\n\t],\n\t\"./ArtStagingSummary.vue\": [\n\t\t\"43db\",\n\t\t\"TouchFormElement4\"\n\t],\n\t\"./AsyncMultiSelect.vue\": [\n\t\t\"5de2\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement5\"\n\t],\n\t\"./BaseTextInput.vue\": [\n\t\t\"36ad\",\n\t\t\"TouchFormElement6\"\n\t],\n\t\"./DrugDispensationSelection.vue\": [\n\t\t\"05d5\",\n\t\t\"TouchFormElement7\"\n\t],\n\t\"./DrugTransferInput.vue\": [\n\t\t\"de42\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement8\"\n\t],\n\t\"./FieldMixin.vue\": [\n\t\t\"51c8\",\n\t\t\"TouchFormElement9\"\n\t],\n\t\"./FilingNumberView.vue\": [\n\t\t\"c650\",\n\t\t\"TouchFormElement10\"\n\t],\n\t\"./GeneralDrugDispenser.vue\": [\n\t\t\"7737\",\n\t\t\"TouchFormElement11\"\n\t],\n\t\"./HisAdherenceInput.vue\": [\n\t\t\"f2c3\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement12\"\n\t],\n\t\"./HisAgeInput.vue\": [\n\t\t\"c05f\",\n\t\t\"TouchFormElement13\"\n\t],\n\t\"./HisAppointments.vue\": [\n\t\t\"b2eb\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement14\"\n\t],\n\t\"./HisArtRegimenSelection.vue\": [\n\t\t\"47b9\",\n\t\t\"TouchFormElement15\"\n\t],\n\t\"./HisBarcodeInput.vue\": [\n\t\t\"dd65\",\n\t\t\"TouchFormElement16\"\n\t],\n\t\"./HisBatchEntry.vue\": [\n\t\t\"f2ab\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement17\"\n\t],\n\t\"./HisBatchMovement.vue\": [\n\t\t\"5148\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement18\"\n\t],\n\t\"./HisBatchVerification.vue\": [\n\t\t\"7b0f\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement19\"\n\t],\n\t\"./HisCardSelector.vue\": [\n\t\t\"0734\",\n\t\t\"TouchFormElement20\"\n\t],\n\t\"./HisClinicHolidayPicker.vue\": [\n\t\t\"4030\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement21\"\n\t],\n\t\"./HisComplaintsPicker.vue\": [\n\t\t\"82d1\",\n\t\t\"TouchFormElement22\"\n\t],\n\t\"./HisDataTable.vue\": [\n\t\t\"a6ba\",\n\t\t\"TouchFormElement23\"\n\t],\n\t\"./HisDateInput.vue\": [\n\t\t\"374c\",\n\t\t\"TouchFormElement24\"\n\t],\n\t\"./HisDatePicker.vue\": [\n\t\t\"9b30\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement25\"\n\t],\n\t\"./HisDosageInput.vue\": [\n\t\t\"b34c\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement26\"\n\t],\n\t\"./HisGridSelector.vue\": [\n\t\t\"112a\",\n\t\t\"TouchFormElement27\"\n\t],\n\t\"./HisGroupSelector.vue\": [\n\t\t\"81cf\",\n\t\t\"TouchFormElement28\"\n\t],\n\t\"./HisIPAddress.vue\": [\n\t\t\"2a82\",\n\t\t\"TouchFormElement29\"\n\t],\n\t\"./HisInfiniteScrollMultipleSelect.vue\": [\n\t\t\"52a3\",\n\t\t\"TouchFormElement30\"\n\t],\n\t\"./HisLabOrders.vue\": [\n\t\t\"e614\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement31\"\n\t],\n\t\"./HisMonthlyDays.vue\": [\n\t\t\"69cf\",\n\t\t\"TouchFormElement32\"\n\t],\n\t\"./HisMultiSelectGrid.vue\": [\n\t\t\"0fa3\",\n\t\t\"TouchFormElement33\"\n\t],\n\t\"./HisMultipleSelect.vue\": [\n\t\t\"2fd5\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement34\"\n\t],\n\t\"./HisNextVisitInterval.vue\": [\n\t\t\"3126\",\n\t\t\"TouchFormElement35\"\n\t],\n\t\"./HisNote.vue\": [\n\t\t\"c927\",\n\t\t\"TouchFormElement36\"\n\t],\n\t\"./HisNumberInput.vue\": [\n\t\t\"5e75\",\n\t\t\"TouchFormElement37\"\n\t],\n\t\"./HisPrescriptionInput.vue\": [\n\t\t\"87e5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement38\"\n\t],\n\t\"./HisRadiologyPicker.vue\": [\n\t\t\"adc7\",\n\t\t\"TouchFormElement39\"\n\t],\n\t\"./HisSelect.vue\": [\n\t\t\"d11f\",\n\t\t\"TouchFormElement40\"\n\t],\n\t\"./HisSummary.vue\": [\n\t\t\"e0bd\",\n\t\t\"TouchFormElement41\"\n\t],\n\t\"./HisTableViewer.vue\": [\n\t\t\"8904\",\n\t\t\"TouchFormElement42\"\n\t],\n\t\"./HisTextBanner.vue\": [\n\t\t\"952c\",\n\t\t\"TouchFormElement43\"\n\t],\n\t\"./HisTextInput.vue\": [\n\t\t\"6ef9\",\n\t\t\"TouchFormElement44\"\n\t],\n\t\"./HisVitalsEntry.vue\": [\n\t\t\"e333\",\n\t\t\"TouchFormElement45\"\n\t],\n\t\"./HisWeightChart.vue\": [\n\t\t\"26a1\",\n\t\t\"TouchFormElement46\"\n\t],\n\t\"./LinkageCodeInput.vue\": [\n\t\t\"ac86\",\n\t\t\"TouchFormElement47\"\n\t],\n\t\"./MultiYesNoSelect.vue\": [\n\t\t\"5fd1\",\n\t\t\"TouchFormElement48\"\n\t],\n\t\"./PersonMatchView.vue\": [\n\t\t\"6591\",\n\t\t\"TouchFormElement49\"\n\t],\n\t\"./PersonSearchView.vue\": [\n\t\t\"28b2\",\n\t\t\"TouchFormElement50\"\n\t],\n\t\"./ProgramSelection.vue\": [\n\t\t\"e3b4\",\n\t\t\"TouchFormElement51\"\n\t],\n\t\"./RelationsSelection.vue\": [\n\t\t\"0e57\",\n\t\t\"TouchFormElement52\"\n\t],\n\t\"./SelectMixin.vue\": [\n\t\t\"82a9\",\n\t\t\"TouchFormElement53\"\n\t],\n\t\"./YesNoSelect.vue\": [\n\t\t\"71f2\",\n\t\t\"TouchFormElement54\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"f159\";\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}