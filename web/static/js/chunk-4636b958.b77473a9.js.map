{"version":3,"sources":["webpack:///./src/views/LabResults.vue?3abf","webpack:///./src/views/LabResults.vue","webpack:///./src/views/LabResults.vue?cee8","webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/services/patient_lab_result_service.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","key","hisFormKey","fields","activeField","fieldComponent","skipSummary","onOnIndex","$event","onOnFinish","onFinish","defineComponent","components","HisStandardForm","data","labResult","patient","selectedTest","testOptions","testIndicators","watch","params","patient_id","this","PatientLabResultService","initData","getFields","deep","immediate","methods","_","c","measures","Object","values","filter","d","tag","map","setTestID","value","setResultDate","result_date","createEncounter","createLabResult","Store","invalidate","Math","floor","random","toastSuccess","e","toastDanger","console","error","generateTestIndicatorsFields","reduce","acc","concat","buildTestIndicatorFields","indicatorId","indicatorName","specimen","testId","name","result","modifier","substring","length","OrderService","isValidVLResult","isOk","alertConfirmation","cancelBtnLabel","confirmBtnLabel","alphaValueIsValid","match","numericValueIsValid","isMalariaResult","id","test","fieldIndex","condition","f","find","result_indicators","label","every","Boolean","beforeNext","v","validateVLresults","toString","computedValue","type","charAt","parseInt","t","indicator","helpText","FieldType","TT_SELECT","group","appearInSummary","validation","Validation","required","options","TT_TEXT","onValue","toastWarning","config","customKeyboard","orders","getTestsWithoutResults","i","orderData","testIndex","tests","isEmpty","setTestTypeID","concept_id","indicators","getTestIndicators","push","other","accession","accession_number","orderDate","order_date","TT_TABLE_VIEWER","rows","HisDate","toStandardHisDisplayFormat","action","$nextTick","columns","val","overrideDefaultFooterBtns","nextBtn","onClick","$router","back","hiddenFooterBtns","generateDateFields","estimation","allowUnknown","minDate","toStandardHisFormat","maxDate","Service","getSessionDate","computeValue","date","TT_MULTIPLE_SELECT","__exports__","DEFAULT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","AppEncounterService","constructor","patientId","super","patientID","testTypeID","resultDate","testID","postJson","encounterID","getTestID","getTestTypeID","getOrders","status","getJson","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","_resolveDynamicComponent","formType","cancelDestinationPath","onFinishAction","onIndex","TouchScreenForm","emits","props","Function","default","String","formData","computedData","$emit","EstimationFieldType","getYearField","showUnknown","primaryFunctions","getMonthField","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","async","getDefaultDate","form","field","datePart","defaultValue","year","month","day","split","validateMinMax","computed","min","Date","max","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","includes","buildHelpTextDate","part","parts","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","proxyID","unload","StandardValidations","isNaN","minYear","getYear","summaryMapValue","summaryLabel","ref","keyboardActions","valueEstimateCondition","estimateType","conditions","estimationFieldType","ageEstimateRegex","dayjs","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","MONTH_ESTIMATE_FIELD"],"mappings":"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","file":"js/chunk-4636b958.b77473a9.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    key: _ctx.hisFormKey,\n    fields: _ctx.fields,\n    activeField: _ctx.fieldComponent,\n    skipSummary: true,\n    onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (_ctx.fieldComponent='')),\n    onOnFinish: _ctx.onFinish\n  }, null, 8, [\"fields\", \"activeField\", \"onOnFinish\"]))\n}","\nimport { defineComponent } from 'vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { PatientLabResultService } from \"@/services/patient_lab_result_service\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { toastWarning, toastDanger, toastSuccess, alertConfirmation } from \"@/utils/Alerts\"\nimport { find, isEmpty } from 'lodash';\nimport HisDate from \"@/utils/Date\"\nimport { Service } from \"@/services/service\"\nimport { OrderService } from '@/services/order_service';\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        fieldComponent: '' as string,\n        labResult: {} as any,\n        hisFormKey: 0 as number,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        selectedTest: {} as any,\n        testOptions: [] as Array<any>,\n        testIndicators: [] as Array<any>\n    }),\n    watch: {\n        '$route': {\n            async handler({params}: any) {\n                if (params && params.patient_id) {\n                    this.patient = params.patient_id\n                    this.labResult = new PatientLabResultService(this.patient)\n                    await this.initData()\n                    this.fields = this.getFields()\n                }\n            },\n            deep: true,\n            immediate: true\n        }\n    },\n    methods: {\n        async onFinish(_: any, c: any) {\n            try {\n                const measures = Object.values(c)\n                                    .filter((d: any) => d.tag === 'result_indicator' && d.measures)\n                                    .map((d: any) => d.measures)\n                this.labResult.setTestID(this.selectedTest.value)\n                this.labResult.setResultDate(c.result_date)\n                await this.labResult.createEncounter()\n                await this.labResult.createLabResult(measures)\n                Store.invalidate('PATIENT_LAB_ORDERS')\n                this.testOptions = []\n                this.selectedTest = {}\n                this.testIndicators = []\n                await this.initData()\n                this.hisFormKey = Math.floor(Math.random() * 5000)\n                toastSuccess('Lab result saved!')\n            }catch(e) {\n                toastDanger(`${e}`)\n                console.error(e)\n            }\n        },\n        generateTestIndicatorsFields() {\n          return this.testIndicators.reduce((acc: Field[], data: any) => {\n            return acc.concat(this.buildTestIndicatorFields(\n              data.indicatorId,\n              data.indicatorName,\n              data.specimen,\n              data.testId\n            ))\n          }, [] as Field[])\n        },\n        async validateVLresults(name: string, specimen: string, result: string){\n            if (name !== 'HIV viral load') return true\n            const modifier = result.substring(0, 1)\n            const value = result.substring(1, result.length)\n            if(OrderService.isValidVLResult(specimen, modifier, value)) return true\n            const isOk = await alertConfirmation(`Invalid results for ${specimen} HIV viral load`, {\n                cancelBtnLabel: \"Process result\",\n                confirmBtnLabel: \"Re-enter result\"\n            })\n            return !isOk\n        },\n        alphaValueIsValid(value: string) {\n            try {\n                return value.match(/^(>|<|=)(.*)/) ? true : false\n            }catch (e) {\n                return false\n            }\n        },\n        numericValueIsValid(value: string){\n            try {\n                return value.match(/^(=|<|>)([0-9]*)$/m) ? true : false\n            }catch(e) {\n                return false\n            }\n        },\n        isMalariaResult(name: string) {\n            return name.match(/mrdt|malaria/i) ? true : false\n        },\n        buildTestIndicatorFields(id: number, name: string, specimen: string, test: number): Array<Field> {\n          const fieldIndex = id * test\n            const condition = (f: any) => [\n                this.selectedTest.value === test, \n                find(f.result_indicators, { label: name}) ? true : false\n            ].every(Boolean)\n            const beforeNext = (v: Option) => this.validateVLresults(name, specimen, v.value.toString())\n\n            const computedValue = (v: any, f: any) => {\n                if(v.value === 'Other' && name.match(/HIV viral load/i)) return {}\n                const type = this.isMalariaResult(name) ? 'text' : f[`type_${fieldIndex}`].value\n                const value = this.isMalariaResult(name) ? \"=\" + v.value : v.value.toString()\n                const modifier = value.charAt(0)\n                const result = type === 'numeric' ? parseInt(value.substring(1)) : value.substring(1)\n                const test = f[`result_indicators`].filter((t: any) => t.value === id)[0]\n                return {\n                    tag: 'result_indicator',\n                    measures: {\n                        indicator: {\n                            'concept_id': test.value\n                        },\n                        'value': result,\n                        'value_modifier': modifier,\n                        'value_type': type\n                    },\n                    result,\n                    modifier,\n                    test: test.label\n                }\n            }\n            return [\n                {\n                    id: `type_${fieldIndex}`,\n                    helpText: `Result type (${name})`,\n                    type: FieldType.TT_SELECT,\n                    group: 'test_indicator',\n                    condition: (f: any) => condition(f) && !this.isMalariaResult(name),\n                    appearInSummary: () => false,\n                    validation: (v: Option) => Validation.required(v),\n                    options: () => [\n                        {\n                            label: 'Numeric (numbers only)',\n                            value: 'numeric'\n                        },\n                        {\n                            label: 'Alphanumeric(text and numbers)',\n                            value: 'text'\n                        }\n                    ]\n                },\n                {\n                    id: `num_${fieldIndex}`,\n                    helpText: `Test Result (${name})`,\n                    type: FieldType.TT_TEXT,\n                    group: 'test_indicator',\n                    computedValue,\n                    beforeNext,\n                    onValue: (v: Option) => {\n                        if (v && v.value && !this.numericValueIsValid(v.value.toString())) {\n                            toastWarning('You must enter a modifer and numbers only. i.e =90 / >19 / < 750')\n                            return false\n                        }\n                        return true\n                    },\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && f[`type_${fieldIndex}`].value === 'numeric',\n                    config: {\n                        customKeyboard: [\n                            [\n                                ['1', '2', '3'],\n                                ['4', '5', '6', '=', '<', '>'],\n                                ['7', '8', '9', '.'],\n                                ['',  '0', '']\n                            ],\n                            [\n                                [ 'Delete']\n                            ]\n                        ]\n                    }\n                },\n                {\n                    id: `alpha_${fieldIndex}`,\n                    helpText: `Test Result (${name})`,\n                    type: FieldType.TT_TEXT,\n                    group: 'test_indicator',\n                    onValue: (v: Option) => {\n                        if (v && v.value && !this.alphaValueIsValid(v.value.toString())) {\n                            toastWarning('You must enter a modifier plus result (for example =LDL)')\n                            return false\n                        }\n                        return true\n                    },\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && f[`type_${fieldIndex}`].value === 'text' && !name.match(/HIV viral load/i)\n                },\n                {\n                    id: `VL_alpha_${fieldIndex}`,\n                    helpText: `Select Test Result (${name})`,\n                    type: FieldType.TT_SELECT,\n                    group: 'test_indicator',\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && f[`type_${fieldIndex}`].value === 'text' && name.match(/HIV viral load/i),\n                    options: () => [\n                      {\n                        label: 'Collect Another Sample',\n                        value: '=Collect Another Sample'\n                      },\n                      {\n                        label: '<LDL',\n                        value: '<LDL'\n                      },\n                      {\n                        label: '=LDL',\n                        value: '=LDL'\n                      },\n                      {\n                        value: 'Other',\n                        label: 'Other'\n                      }\n                    ]\n                },\n                {\n                    id: `other_VL_alpha_${fieldIndex}`,\n                    helpText: `Test Result (${name})`,\n                    type: FieldType.TT_TEXT,\n                    group: 'test_indicator',\n                    onValue: (v: Option) => {\n                        if (v && v.value && !this.alphaValueIsValid(v.value.toString())) {\n                            toastWarning('You must enter a modifier plus result (for example =LDL)')\n                            return false\n                        }\n                        return true\n                    },\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => {\n                      return condition(f) && \n                        f[`type_${fieldIndex}`].value === 'text' && \n                        name.match(/HIV viral load/i)\n                        && f[`VL_alpha_${fieldIndex}`].value === 'Other'\n                    }\n                },\n                {\n                    id: `malaria_result_${fieldIndex}`,\n                    helpText: `Select Test Result (${name})`,\n                    type: FieldType.TT_SELECT,\n                    group: 'test_indicator',\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && this.isMalariaResult(name),\n                    options: () => {\n                        if(name.match(/mrdt/i)) {\n                            return [\n                                {\n                                    label: 'Positive',\n                                    value: 'positive'\n                                },\n                                {\n                                    label: 'Negative',\n                                    value: 'negative'\n                                }\n                            ]\n                        }\n                        return [\n                            {\n                                label: 'Parasites seen',\n                                value: 'parasites seen'\n                            },\n                            {\n                                label: 'No parasites seen',\n                                value: 'no parasites seen'\n                            }\n                        ]\n                    }\n                },\n            ]\n        },\n        async initData() {\n            const orders = await this.labResult.getTestsWithoutResults()\n            for(const i in orders) {\n                const orderData = orders[i]\n                for(const testIndex in orderData.tests) {\n                    const test = orderData.tests[testIndex]\n                    if (!isEmpty(test.result)) {\n                        continue\n                    }\n                    this.labResult.setTestTypeID(test.concept_id)\n                    const indicators = await this.labResult.getTestIndicators()\n                    const testIndicators = indicators.map((i: any) =>({\n                        testId: test.id,\n                        indicatorName: i.name,\n                        indicatorId: i.concept_id,\n                        specimen: orderData.specimen.name,\n                    }))\n                    this.testIndicators = [...this.testIndicators, ...testIndicators]\n                    this.testOptions.push({\n                        label: test.name,\n                        value: test.id,\n                        other: {\n                            accession: orderData.accession_number,\n                            specimen: orderData.specimen.name,\n                            test: test.name,\n                            orderDate: orderData.order_date,\n                            testIndicators\n                        }\n                    })\n                }\n            }\n        },\n        getFields(): Array<Field> {\n            return [\n                {\n                  id: 'test_type',\n                  helpText: 'Tests without results',\n                  type: FieldType.TT_TABLE_VIEWER,\n                  options: () => {\n                    const rows = this.testOptions.map((t: Option) => ([\n                        t.other.accession,\n                        t.other.specimen,\n                        t.other.test,\n                        HisDate.toStandardHisDisplayFormat(t.other.orderDate),\n                        {\n                            type: 'button',\n                            name: 'Select',\n                            action: () => {\n                                this.selectedTest = t\n                                this.$nextTick(() => this.fieldComponent = 'year_result_date')\n                            }\n                        }\n                    ]))\n                    return [{\n                        label: '',\n                        value: '',\n                        other: {\n                            rows,\n                            columns:[ 'Acession#', 'Specimen', 'Test', 'Order date']\n                        }\n                    }]\n                  },\n                  validation: (val: Option) => Validation.required(val),\n                  config: {\n                    overrideDefaultFooterBtns: {\n                        nextBtn: {\n                            name: 'Finish',\n                            onClick: () => this.$router.back()\n                        }\n                    },\n                    hiddenFooterBtns: [\n                        'Clear',\n                        'Cancel'\n                    ]\n                  }\n                },\n                ...generateDateFields({\n                    id: 'result_date',\n                    helpText: 'Result',\n                    required: true,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    minDate: () => HisDate.toStandardHisFormat(this.selectedTest.other.orderDate),\n                    maxDate: () => Service.getSessionDate(),\n                    computeValue: (date: string) => date\n                }),\n                {\n                    id: `result_indicators`,\n                    helpText: `Select test result indicators`,\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    validation: (v: Option) => Validation.required(v),\n                    options: () => {                       \n                        return this.selectedTest\n                                .other\n                                .testIndicators\n                                .map((i: any) => ({\n                                    label: i.indicatorName,\n                                    value: i.indicatorId\n                                }))\n                    },\n                },\n                ...this.generateTestIndicatorsFields(),\n                {\n                    id: 'entry_confirmation',\n                    helpText: 'Confirm entry',\n                    type: FieldType.TT_TABLE_VIEWER,\n                    options: (_: any, c: any) => {\n                        const rows = Object.values(c)\n                                           .filter((d: any) => \n                                                typeof d === 'object'\n                                                && d != null\n                                                && d.tag === 'result_indicator'\n                                            )\n                                           .map((d: any) => ([d.test, d.modifier, d.result ]))\n                        return [{\n                            label: '',\n                            value: '',\n                            other: {\n                                rows,\n                                columns:[ 'Test', 'Modifier', 'Result']\n                            }\n                        }]\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./LabResults.vue?vue&type=template&id=1dcfb960&ts=true\"\nimport script from \"./LabResults.vue?vue&type=script&lang=ts\"\nexport * from \"./LabResults.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","import { OrderService } from '@/services/order_service'\nimport { AppEncounterService } from './app_encounter_service';\n\nexport class PatientLabResultService extends AppEncounterService {\n    patientID: number;\n    testTypeID: number;\n    resultDate: string;\n    testID: number;\n    constructor(patientId: number) {\n        super(patientId, 57)\n        this.patientID = patientId\n        this.testTypeID = -1\n        this.resultDate = ''\n        this.testID = -1\n    }\n\n    createLabResult(measures: Array<any>) {\n        return AppEncounterService.postJson(`lab/tests/${this.testID}/results`, {\n            'encounter_id': this.encounterID,\n            date: this.resultDate,\n            measures\n        })\n    }\n\n    getTestID() {\n        return this.testID\n    }\n\n    getTestTypeID() {\n        return this.testTypeID\n    }\n\n    setTestTypeID(test: number) {\n        this.testTypeID = test\n    }\n\n    setResultDate(date: string) {\n        this.resultDate = date\n    }\n\n    setTestID(test: number) {\n        this.testID = test\n    }   \n\n    getTestsWithoutResults() {\n        return OrderService.getOrders(this.patientID, {\n            status: 'drawn'\n        })\n    }\n\n    getTestIndicators() {\n      return OrderService.getJson(\n        `lab/test_result_indicators`, {\n        'test_type_id': this.testTypeID\n      })\n    }\n\n    \n}\n","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])"],"sourceRoot":""}