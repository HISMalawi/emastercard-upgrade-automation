{"version":3,"sources":["webpack:///./src/apps/ART/views/reports/ReportMixin.vue","webpack:///./src/apps/ART/views/reports/ReportMixin.vue?5c96","webpack:///./src/apps/ART/views/ARTStock/StockReport.vue?6f88","webpack:///./src/apps/ART/views/ARTStock/StockReport.vue","webpack:///./src/apps/ART/views/ARTStock/StockReport.vue?cff3","webpack:///./src/apps/ART/services/reports/stock_report_service.ts"],"names":["defineComponent","data","app","App","getActiveApp","fields","report","reportReady","period","startDate","endDate","customFileName","isMilitarySite","drillDownCache","methods","formatGender","gender","fmtGender","toDate","date","HisDate","toStandardHisDisplayFormat","sortByArvNumber","attr","sort","a","b","this","getArvInt","e","console","error","arv","arvNumStr","split","arvNumInt","parseInt","tdARV","params","table","td","sortValue","confirmPatient","patient","$router","push","title","columns","asyncRows","canExport","modal","modalController","create","component","DrilldownTable","cssClass","componentProps","showFilters","rowsPerPage","paginated","showReportStamp","footerColor","onFinish","dismiss","present","rows","rowParser","getDefaultDrillDownTable","thTxt","async","ARV_NUM_INDEX","t","tableRows","map","id","index","isArray","defaultRow","num","key","slice","Patientservice","findByID","row","getArvNumber","getGender","tdDate","getBirthdate","toString","tdBtn","path","Promise","all","runTableDrill","drilldownData","drill","values","length","tdLink","getQuaterOptions","quarters","ArtReportService","getReportQuarters","q","label","name","value","start","other","getDateDurationFields","useQuarter","setCustomQuarterPeriod","maxQuarter","maxDate","Service","getSessionDate","minDate","helpText","type","FieldType","TT_SELECT","condition","validation","val","Validation","required","options","items","generateDateFields","f","quarter","estimation","allowUnknown","computeValue","unload","d","s","c","end_date","_","start_date","init","Store","get","computedValue","v","_this$app","applicationName","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_component_report_template","_resolveComponent","_openBlock","_createBlock","mixins","ReportMixin","components","ReportTemplate","stock","StockReportService","stocks","getStockReport","forEach","product_code","drug_name","units","tdNum","Math","abs","closing_balance","losses","positive_adjustment","negative_adjustment","quantity_used","quantity_received","constructor","super","_defineProperty","getReport","paginate","getJson","getStockCardReport","programID","loadTrail","getTrailDetails","drugId","transactionType","getScCurrReport","getDiscrepancyReport","groupStock","pharmacyData","pack_size","current_quantity","parseFloat","dispensed_quantity","Object","drug","currentQuantity","trunc","drugName","quantintyDispensed","quantityIsTabs"],"mappings":"oTAoBeA,+BAAgB,CAC3BC,KAAMA,KAAA,CACFC,IAAKC,OAAIC,eACTC,OAAQ,GACRC,OAAQ,GACRC,aAAa,EACbC,OAAQ,GACRC,UAAW,GACXC,QAAS,GACTC,eAAgB,GAChBC,gBAAgB,EAChBC,eAAgB,KAEpBC,QAAS,CACLC,aAAaC,GACT,OAAOC,eAAUD,IAErBE,OAAOC,GACH,OAAOC,OAAQC,2BAA2BF,IAE9CG,gBAAgBrB,EAAkBsB,EAAK,cACnC,IACI,OAAOtB,EAAKuB,KAAK,CAACC,EAAQC,IAAWC,KAAKC,UAAUH,EAAEF,IAASI,KAAKC,UAAUF,EAAEH,IAAS,GAAK,GAChG,MAAMM,GAEJ,OADAC,QAAQC,MAAMF,GACP5B,IAGf2B,UAAUI,GACN,GAAmB,kBAARA,EAAkB,CACzB,MAAMC,EAAYD,EAAIE,MAAM,KAAK,GAC3BC,EAAYC,SAASH,GAC3B,MAA4B,kBAAdE,EAAyBA,EAAY,EAEvD,OAAO,GAEXE,MAAML,EAAaM,EAAO,IACtB,OAAOC,OAAMC,GAAGR,EAAK,CAAES,UAAWd,KAAKC,UAAUI,MAASM,KAE9DI,eAAeC,GACX,OAAOhB,KAAKiB,QAAQC,KAAK,+BAA+BF,IAE5D,yBAAyBG,EAAeC,EAAqBC,EAAiCC,GAAU,GACpG,MAAMC,QAAcC,qBAAgBC,OAAO,CACvCC,UAAWC,OACXC,SAAU,cACVC,eAAgB,CACZV,QACAC,UACAC,YACAC,YACAQ,aAAa,EACbC,YAAa,GACbC,WAAW,EACXC,iBAAiB,EACjBC,YAAa,QACbC,SAAUA,IAAMX,qBAAgBY,aAGxCb,EAAMc,WAEV,oBAAoBlB,EAAeC,EAAqBkB,EAAkBC,GACtE,MAAMhB,QAAcC,qBAAgBC,OAAO,CACvCC,UAAWC,OACXC,SAAU,cACVC,eAAgB,CACZV,QACAC,UACAkB,OACAC,YACAR,YAAa,GACbD,aAAa,EACbE,WAAW,EACXC,iBAAiB,EACjBC,YAAa,QACbC,SAAUA,IAAMX,qBAAgBY,aAGxCb,EAAMc,WAEVG,2BACI,MAAMpB,EAAU,CACZ,CACIR,OAAM6B,MAAM,cACZ7B,OAAM6B,MAAM,UACZ7B,OAAM6B,MAAM,cACZ7B,OAAM6B,MAAM,aAGdF,EAAYG,UACd,IAAIC,EAAgB,EACpB,MAAMC,EAAIC,EAAUC,IAAIJ,UACpB,IAAIK,EAAU,KACVC,EAAuB,KAC3B,GAAIC,qBAAQC,GAAa,CACrB,MAAOC,EAAKC,GAAQF,EAEpB,GADAF,EAAQG,EACJC,KAAOpD,KAAKd,eACZ,MAAO,CAAC8D,KAAUhD,KAAKd,eAAekE,GAAKC,MAAM,SAIrD,GADAN,EAAKG,EACDH,KAAM/C,KAAKd,eACX,OAAOc,KAAKd,eAAe6D,GAInC,MAAMzE,QAAagF,OAAeC,SAASR,GACrC/B,EAAU,IAAIsC,OAAehF,GAC7BkF,EAAM,GAaZ,OAZIR,IACAL,EAAgB,EAChBa,EAAItC,KAAK8B,IAEbQ,EAAItC,KAAKlB,KAAKU,MAAMM,EAAQyC,iBAC5BD,EAAItC,KAAKN,OAAMC,GAAGb,KAAKZ,aAAa4B,EAAQ0C,eAC5CF,EAAItC,KAAKN,OAAM+C,OAAO3C,EAAQ4C,eAAeC,aAC7CL,EAAItC,KAAKN,OAAMkD,MAAM,OAAQpB,gBACnBlB,qBAAgBY,QAAQ,IAC9BpC,KAAKiB,QAAQC,KAAK,CAAE6C,KAAM,sBAAsBhB,OAEpD/C,KAAKd,eAAe6D,GAAMS,EACnBA,IAELlB,QAAa0B,QAAQC,IAAIrB,GAC/B,OAAON,EAAKzC,KAAK,CAACC,EAAQC,IAClBD,EAAE6C,GAAe7B,UAAYf,EAAE4C,GAAe7B,UAC5C,GAAK,IAEnB,MAAO,CAAEyB,YAAWnB,YAExB8C,cAAc5F,EAAW6C,EAAM,sBAC3B,MAAM,QAAEC,EAAO,UAAEmB,GAAcvC,KAAKwC,2BACpCxC,KAAKmE,cAAchD,EAAOC,EAAS9C,EAAMiE,IAE7C6B,MAAMC,EAAuBlD,EAAM,eAC/B,OAAIkD,GAAUA,EAAOC,OAAS,EACnB1D,OAAM2D,OACTF,EAAOC,OACP,IAAMtE,KAAKkE,cAAcG,EAAQlD,IAGlCP,OAAMC,GAAG,IAEpB2D,mBACI,MAAMC,EAAWC,OAAiBC,oBAClC,OAAOF,EAAS3B,IAAK8B,IAAM,CACvBC,MAAOD,EAAEE,KAAMC,MAAOH,EAAEI,MAAOC,MAAOL,MAG9CM,sBACIC,GAAW,EACXC,GAAuB,EACvBC,EAAW,EACXC,EAAQC,OAAQC,kBAEhB,MAAMC,EAAU,aAChB,MAAO,CACH,CACI1C,GAAI,UACJ2C,SAAU,iBACVC,KAAMC,OAAUC,UAChBC,UAAWA,IAAMX,EACjBY,WAAaC,GAAgBC,OAAWC,SAASF,GACjDG,QAASA,KACL,MAAM1B,EAAWC,OAAiBC,kBAAkBU,GACpD,IAAIe,EAAuB3B,EAAS3B,IAAK8B,IAAM,CAC3CC,MAAOD,EAAEE,KACTC,MAAOH,EAAEI,MACTC,MAAOL,KAYX,OAVIQ,IACAgB,EAAQ,CACJ,CACIvB,MAAO,oBACPE,MAAO,gBACPE,MAAO,OAERmB,IAGJA,OAGZC,eAAmB,CAClBtD,GAAI,aACJ2C,SAAU,QACVQ,UAAU,EACVJ,UAAYQ,GAAWA,EAAEC,SAA+B,kBAApBD,EAAEC,QAAQxB,QAA8BI,EAC5EM,QAASA,IAAMA,EACfH,QAASA,IAAMA,EACfkB,WAAY,CACRC,cAAc,GAElBC,aAAelH,GAAiBA,OAEjC6G,eAAmB,CAClBtD,GAAI,WACJ2C,SAAU,MACVQ,UAAU,EACVJ,UAAYQ,GAAWA,EAAEC,SAA+B,kBAApBD,EAAEC,QAAQxB,QAA8BI,EAC5EwB,OAAQA,CAACC,EAAQC,EAAQP,EAAQQ,KACnB,SAAND,IACA7G,KAAKjB,QAAU+H,EAAEC,WAGzBtB,QAASA,CAACuB,EAAQF,IAAWA,EAAEG,WAC/B3B,QAASA,IAAMA,EACfkB,WAAY,CACRC,cAAc,GAElBC,aAAelH,GAAiBA,IAEpC,CACIuD,GAAI,aACJ2C,SAAU,eACVC,KAAMC,OAAUC,UAChBqB,KAAMxE,UACF1C,KAAKf,qBAAuBkI,OAAMC,IAAI,qBAC/B,GAEXC,cAAgBC,GAAcA,EAAEvC,MAChCe,UAAWA,KAAA,IAAAyB,EAAA,MAAoC,SAAtB,QAARA,EAAAvH,KAAKzB,WAAG,IAAAgJ,OAAA,EAARA,EAAUC,kBAA6BxH,KAAKf,gBAC7D8G,WAAaC,GAAgBC,OAAWC,SAASF,GACjDG,QAASA,IACE,CACH,CAAEtB,MAAO,MAAOE,MAAO,OACvB,CAAEF,MAAO,WAAYE,MAAO,YAC5B,CAAEF,MAAO,WAAYE,MAAO,mBCrPxD,MAAM0C,EAAc,EAEL,U,2DCHT,SAAUC,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAMC,EAA6BC,8BAAkB,mBAErD,OAAQC,yBAAcC,yBAAaH,EAA4B,CAC7D9G,MAAOwG,EAAKxG,MACZmB,KAAMqF,EAAKrF,KACXlB,QAASuG,EAAKvG,SACb,KAAM,EAAG,CAAC,QAAS,OAAQ,Y,8DCFjB/C,+BAAgB,CAC3BgK,OAAQ,CAACC,QACTC,WAAY,CAAEC,uBACdlK,KAAMA,KAAA,CACF6C,MAAO,eACPmB,KAAM,GACNmG,MAAO,GACPrH,QAAS,CACL,CACIR,OAAM6B,MAAM,gBACZ7B,OAAM6B,MAAM,cACZ7B,OAAM6B,MAAM,SACZ7B,OAAM6B,MAAM,mBACZ7B,OAAM6B,MAAM,UACZ7B,OAAM6B,MAAM,oBACZ7B,OAAM6B,MAAM,oBACZ7B,OAAM6B,MAAM,iBACZ7B,OAAM6B,MAAM,yBAIxB,gBACIzC,KAAKrB,OAAS,IAAI+J,OAClB,MAAMC,QAAsB3I,KAAKrB,OAAOiK,iBACxCD,EAAOE,QAAQhC,IACX7G,KAAKsC,KAAKpB,KAAK,CACXN,OAAMC,GAAGgG,EAAEiC,cAAgB,IAC3BlI,OAAMC,GAAGgG,EAAEkC,WACXnI,OAAMC,GAAGgG,EAAEmC,OACXpI,OAAMqI,MAAMC,KAAKC,IAAItC,EAAEuC,kBACvBxI,OAAMqI,MAAMC,KAAKC,IAAItC,EAAEwC,SACvBzI,OAAMqI,MAAMC,KAAKC,IAAItC,EAAEyC,sBACvB1I,OAAMqI,MAAMC,KAAKC,IAAItC,EAAE0C,sBACvB3I,OAAMqI,MAAMC,KAAKC,IAAItC,EAAE2C,gBACvB5I,OAAMqI,MAAMC,KAAKC,IAAItC,EAAE4C,2B,qBCpCvC,MAAMhC,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,KAErD,gB,kGCLT,MAAOgB,UAA2BhE,OAEpCgF,cACIC,QAAOC,eAAA,qBACP5J,KAAKyI,MAAQ,GAGjB,kBACIzI,KAAKyI,YAAczI,KAAK6J,UAAU,iBAAkB,CAAEC,UAAU,IAIpElB,iBACI,OAAOlE,OAAiBqF,QAAQ,wBAAyB,CAAED,UAAU,IAGzEE,qBACI,OAAOhK,KAAK6J,UAAU,YAAY7J,KAAKiK,gCAG3CC,YACI,OAAOlK,KAAK6J,UAAU,gCAG1BM,gBAAgB3K,EAAc4K,EAAgBC,GAC1C,OAAOrK,KAAK6J,UAAU,uBAAwB,CAC1C,iBAAoBrK,EACpB,QAAW4K,EACX,mBAAsBC,IAI9BC,kBACI,OAAOtK,KAAK6J,UAAU,8BAG1BU,uBACI,OAAOvK,KAAK6J,UAAU,YAAY7J,KAAKiK,wCAI3CO,aACI,MAAMC,EAAoB,GAC1B,IAAK,MAAMzH,KAAShD,KAAKyI,MAAO,CAC5B,MAAMnK,EAAO0B,KAAKyI,MAAMzF,GAClBoH,EAAS9L,EAAK,WAEfmM,EAAaL,KACdK,EAAaL,GAAU,CACnB,iBAAoB,EACpB,mBAAsB,EACtB,UAAa9L,EAAKoM,UAClB,UAAmC,OAAtBpM,EAAK,aAAwBA,EAAK,oBAAsBA,EAAK,eAIpD,IAA1BA,EAAKqM,mBAETF,EAAaL,GAAQ,qBAAuBQ,WAAWtM,EAAKqM,kBACxDrM,EAAKuM,qBACLJ,EAAaL,GAAQ,uBAAyBQ,WAAWtM,EAAKuM,sBAGtE,OAAOC,OAAOzG,OAAOoG,GAAc3H,IAAKiI,IACpC,IAAIC,EAAuB,IAM3B,OAJIA,EADiB,MAAlBD,EAAKL,UACeK,EAAKJ,iBAAmB,SAEzBzB,KAAK+B,MAAMF,EAAKJ,iBAAmBI,EAAKL,WAEvD,CACHQ,SAAUH,EAAKhC,UACfoC,mBAAoBJ,EAAKF,mBACzBG,kBACAI,eAAmC,OAAnBL,EAAKL","file":"js/chunk-45b61551.e52baeda.js","sourcesContent":["\nimport { Service } from \"@/services/service\"\nimport { defineComponent } from 'vue'\nimport { Field } from '@/components/Forms/FieldInterface'\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport { modalController } from \"@ionic/vue\";\nimport DrilldownTable from \"@/apps/ART/views/reports/BasicReportTemplate.vue\"\nimport { ArtReportService } from \"@/apps/ART/services/reports/art_report_service\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport table, { AsyncTableRowHandler } from \"@/components/DataViews/tables/ReportDataTable\"\nimport { isArray } from \"lodash\"\nimport Store from \"@/composables/ApiStore\"\nimport App from \"@/apps/app_lib\"\nimport { formatGender as fmtGender } from \"@/utils/Strs\"\n\n\nexport default defineComponent({\n    data: () => ({\n        app: App.getActiveApp(),\n        fields: [] as Array<Field>,\n        report: {} as any,\n        reportReady: false as boolean,\n        period: '' as string,\n        startDate: '' as string,\n        endDate: '' as string,\n        customFileName: '' as string,\n        isMilitarySite: false as boolean,\n        drillDownCache: {} as Record<number, Array<any>>\n    }),\n    methods: {\n        formatGender(gender: string) {\n            return fmtGender(gender);\n        },\n        toDate(date: string) {\n            return HisDate.toStandardHisDisplayFormat(date)\n        },\n        sortByArvNumber(data: Array<any>, attr='arv_number') {\n            try {\n                return data.sort((a: any, b: any) => this.getArvInt(a[attr]) > this.getArvInt(b[attr]) ? 1 : -1)\n            } catch(e) {\n                console.error(e)\n                return data\n            }\n        },\n        getArvInt(arv: string) {\n            if (typeof arv === 'string') {\n                const arvNumStr = arv.split('-')[2]\n                const arvNumInt = parseInt(arvNumStr)\n                return typeof arvNumInt === 'number' ? arvNumInt : 0 \n            }\n            return 0\n        },\n        tdARV(arv: string, params={}) {\n            return table.td(arv, { sortValue: this.getArvInt(arv), ...params})\n        },\n        confirmPatient(patient: number) {\n            return this.$router.push(`/patients/confirm?person_id=${patient}`)\n        },\n        async drilldownAsyncRows(title: string, columns: Array<any>, asyncRows: AsyncTableRowHandler, canExport=true) {\n            const modal = await modalController.create({\n                component: DrilldownTable,\n                cssClass: 'large-modal',\n                componentProps: { \n                    title, \n                    columns, \n                    asyncRows,\n                    canExport,\n                    showFilters: true,\n                    rowsPerPage: 50,\n                    paginated: true,\n                    showReportStamp: false,\n                    footerColor: 'light',\n                    onFinish: () => modalController.dismiss()\n                }\n            })\n            modal.present()\n        },\n        async drilldownData(title: string, columns: Array<any>, rows: Array<any>, rowParser: any) {\n            const modal = await modalController.create({\n                component: DrilldownTable,\n                cssClass: 'large-modal',\n                componentProps: { \n                    title, \n                    columns, \n                    rows,\n                    rowParser,\n                    rowsPerPage: 50,\n                    showFilters: true,\n                    paginated: true,\n                    showReportStamp: false,\n                    footerColor: 'light',\n                    onFinish: () => modalController.dismiss()\n                }\n            })\n            modal.present()\n        },\n        getDefaultDrillDownTable() {\n            const columns = [\n                [\n                    table.thTxt('ARV number'), \n                    table.thTxt('Gender'),\n                    table.thTxt('Birth Date'), \n                    table.thTxt('Actions')\n                ]\n            ]\n            const rowParser = async (tableRows: Array<any[]>) => {\n                let ARV_NUM_INDEX = 0\n                const t = tableRows.map(async (defaultRow: Array<any>) => {\n                    let id: any = null\n                    let index: null | number = null\n                    if (isArray(defaultRow)) {\n                        const [num, key ] = defaultRow\n                        index = num\n                        if (key in this.drillDownCache) {\n                            return [index, ...this.drillDownCache[key].slice(1)]\n                        }\n                    } else {\n                        id = defaultRow\n                        if (id in this.drillDownCache) {\n                            return this.drillDownCache[id]\n                        }\n                    }\n    \n                    const data = await Patientservice.findByID(id)\n                    const patient = new Patientservice(data)\n                    const row = []\n                    if (index) {\n                        ARV_NUM_INDEX = 1\n                        row.push(index)\n                    } \n                    row.push(this.tdARV(patient.getArvNumber()))\n                    row.push(table.td(this.formatGender(patient.getGender())))\n                    row.push(table.tdDate(patient.getBirthdate().toString()))\n                    row.push(table.tdBtn('Show', async () => {\n                        await modalController.dismiss({})\n                        this.$router.push({ path: `/patient/dashboard/${id}`})\n                    }))\n                    this.drillDownCache[id] = row\n                    return row\n                })\n                const rows = await Promise.all(t)\n                return rows.sort((a: any, b: any) => \n                        a[ARV_NUM_INDEX].sortValue > b[ARV_NUM_INDEX].sortValue \n                        ? 1 : -1)\n            }\n            return { rowParser, columns }\n        },\n        runTableDrill(data: any, title='Drilldown patients') {\n            const { columns, rowParser } = this.getDefaultDrillDownTable()\n            this.drilldownData(title, columns, data, rowParser)\n        },\n        drill(values: Array<number>, title='Drill table') {\n            if (values && values.length > 0) {\n                return table.tdLink(\n                    values.length, \n                    () => this.runTableDrill(values, title)\n                )\n            }\n            return table.td(0)\n        },\n        getQuaterOptions() {\n            const quarters = ArtReportService.getReportQuarters()\n            return quarters.map((q: any) => ({\n                label: q.name, value: q.start, other: q\n            }))\n        },\n        getDateDurationFields(\n            useQuarter=false, \n            setCustomQuarterPeriod=false, \n            maxQuarter=5, \n            maxDate=Service.getSessionDate() as string | null,\n        ): Array<Field> {\n            const minDate = '2000-01-01'\n            return [\n                {\n                    id: 'quarter',\n                    helpText: 'Select Quarter',\n                    type: FieldType.TT_SELECT,\n                    condition: () => useQuarter,\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => {\n                        const quarters = ArtReportService.getReportQuarters(maxQuarter)\n                        let items: Array<Option> = quarters.map((q: any) => ({\n                            label: q.name,\n                            value: q.start,\n                            other: q\n                        }))\n                        if (setCustomQuarterPeriod) {\n                            items = [\n                                {\n                                    label: 'Set custom period',\n                                    value: 'custom_period',\n                                    other: {}\n                                },\n                                ...items\n                            ]\n                        }\n                        return items\n                    }\n                },\n                ...generateDateFields({\n                    id: 'start_date',\n                    helpText: 'Start',\n                    required: true,\n                    condition: (f: any) => f.quarter && f.quarter.value === 'custom_period' || !useQuarter,\n                    minDate: () => minDate,\n                    maxDate: () => maxDate,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string) => date \n                }),\n                ...generateDateFields({\n                    id: 'end_date',\n                    helpText: 'End',\n                    required: true,\n                    condition: (f: any) => f.quarter && f.quarter.value === 'custom_period' || !useQuarter,\n                    unload: (d: any, s: any, f: any, c: any) => {\n                        if (s === 'next') {\n                            this.endDate = c.end_date\n                        }\n                    },\n                    minDate: (_: any, c: any) => c.start_date,\n                    maxDate: () => maxDate,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string) => date\n                }),\n                {\n                    id: 'occupation',\n                    helpText: \"Report Group\",\n                    type: FieldType.TT_SELECT,\n                    init: async () => {\n                        this.isMilitarySite = await Store.get('IS_MILITARY_SITE')\n                        return true\n                    },\n                    computedValue: (v: Option) => v.value, \n                    condition: () => this.app?.applicationName === 'ART' && this.isMilitarySite,\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => {\n                        return [\n                            { label: 'All', value: 'All'},\n                            { label: 'Military', value: 'Military'},\n                            { label: 'Civilian', value: 'Civilian'},\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n})\n","import script from \"./ReportMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./ReportMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_report_template = _resolveComponent(\"report-template\")!\n\n  return (_openBlock(), _createBlock(_component_report_template, {\n    title: _ctx.title,\n    rows: _ctx.rows,\n    columns: _ctx.columns\n  }, null, 8, [\"title\", \"rows\", \"columns\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { StockReportService } from \"@/apps/ART/services/reports/stock_report_service\"\nimport ReportMixin from \"@/apps/ART/views/reports/ReportMixin.vue\"\nimport ReportTemplate from \"@/apps/ART/views/reports/BasicReportTemplate.vue\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\n\nexport default defineComponent({\n    mixins: [ReportMixin],\n    components: { ReportTemplate },\n    data: () => ({\n        title: 'Stock report',\n        rows: [] as Array<any>,\n        stock: [] as Array<any>,\n        columns: [\n            [\n                table.thTxt('Product Code'),\n                table.thTxt('Medication'),\n                table.thTxt('Units'),\n                table.thTxt('Closing Balance'),\n                table.thTxt('Losses'),\n                table.thTxt('(+ve Adjustment)'),\n                table.thTxt('(-ve Adjustment)'),\n                table.thTxt('Quantity Used'),\n                table.thTxt('Quantity Received'),\n            ]\n        ]\n    }),\n    async created() {\n        this.report = new StockReportService()\n        const stocks: any[] = await this.report.getStockReport()\n        stocks.forEach(s => {\n            this.rows.push([\n                table.td(s.product_code || ''),\n                table.td(s.drug_name),\n                table.td(s.units),\n                table.tdNum(Math.abs(s.closing_balance)),\n                table.tdNum(Math.abs(s.losses)),\n                table.tdNum(Math.abs(s.positive_adjustment)),\n                table.tdNum(Math.abs(s.negative_adjustment)),\n                table.tdNum(Math.abs(s.quantity_used)),\n                table.tdNum(Math.abs(s.quantity_received)),\n            ])\n        })\n\n    },\n})\n","import { render } from \"./StockReport.vue?vue&type=template&id=fb31a488&ts=true\"\nimport script from \"./StockReport.vue?vue&type=script&lang=ts\"\nexport * from \"./StockReport.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/projects/malawi-emr/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { ArtReportService } from \"./art_report_service\";\n\nexport class StockReportService extends ArtReportService {\n    stock: Array<any>;\n    constructor() {\n        super()\n        this.stock = []\n    }   \n\n    async loadStock() {\n        this.stock = await this.getReport(`pharmacy/items`, { paginate: false })\n        // this.stock = await ArtReportService.getJson()\n    }\n    \n    getStockReport() {\n        return ArtReportService.getJson(`pharmacy/stock_report`, { paginate: false })\n    }\n\n    getStockCardReport() {\n        return this.getReport(`programs/${this.programID}/reports/stock_card`);\n    }\n\n    loadTrail() {\n        return this.getReport('pharmacy/audit_trail/grouped')\n    }\n\n    getTrailDetails(date: string, drugId: number, transactionType: string) {\n        return this.getReport('pharmacy/audit_trail', {\n            'transaction_date': date,\n            'drug_id': drugId,\n            'transaction_reason': transactionType\n        })\n    }\n\n    getScCurrReport() {\n        return this.getReport('programs/1/reports/sc_curr')\n    }\n\n    getDiscrepancyReport () {\n        return this.getReport(`programs/${this.programID}/reports/discrepancy_report`);\n    }\n\n    /**Code adapted from BHT-Core Art system */\n    groupStock() {\n        const pharmacyData: any = {};\n        for (const index in this.stock) {\n            const data = this.stock[index]\n            const drugId = data[\"drug_id\"];\n\n            if (!pharmacyData[drugId]) {\n                pharmacyData[drugId] = {\n                    'current_quantity': 0,\n                    'dispensed_quantity': 0,\n                    'pack_size': data.pack_size,\n                    'drug_name': data[\"drug_name\"] === null ? data[\"drug_legacy_name\"] : data[\"drug_name\"]\n                }\n            }\n\n            if (data.current_quantity === 0) continue;\n\n            pharmacyData[drugId][\"current_quantity\"] += parseFloat(data.current_quantity);\n            if (data.dispensed_quantity){\n                pharmacyData[drugId][\"dispensed_quantity\"] += parseFloat(data.dispensed_quantity);\n            }\n        }\n        return Object.values(pharmacyData).map((drug: any) => {\n            let currentQuantity: any = '0'\n            if(drug.pack_size == null) {\n                currentQuantity  = drug.current_quantity + '(tabs)';\n            }else {\n                currentQuantity = Math.trunc(drug.current_quantity / drug.pack_size);\n            }\n            return {\n                drugName: drug.drug_name,\n                quantintyDispensed: drug.dispensed_quantity,\n                currentQuantity,\n                quantityIsTabs: drug.pack_size === null,\n            }\n        })\n    }\n}\n"],"sourceRoot":""}