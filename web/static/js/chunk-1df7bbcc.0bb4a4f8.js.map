{"version":3,"sources":["webpack:///./src/views/LabResults.vue?2e87","webpack:///./src/views/LabResults.vue","webpack:///./src/views/LabResults.vue?9c2c","webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/services/patient_lab_result_service.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts","webpack:///./src/components/Forms/BaseFormElements.ts","webpack:///./src/components/FormElements lazy ^\\.\\/.*\\.vue$ namespace object"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","key","hisFormKey","fields","activeField","fieldComponent","skipSummary","onOnIndex","$event","onOnFinish","onFinish","defineComponent","components","HisStandardForm","data","labResult","patient","selectedTest","testOptions","testIndicators","watch","params","patient_id","this","PatientLabResultService","initData","getFields","deep","immediate","methods","_","c","measures","Object","values","filter","d","tag","map","setTestID","value","setResultDate","result_date","createEncounter","createLabResult","Store","invalidate","Math","floor","random","toastSuccess","e","toastDanger","console","error","generateTestIndicatorsFields","reduce","acc","concat","buildTestIndicatorFields","indicatorId","indicatorName","specimen","testId","name","result","modifier","substring","length","OrderService","isValidVLResult","isOk","alertConfirmation","cancelBtnLabel","confirmBtnLabel","alphaValueIsValid","match","numericValueIsValid","isMalariaResult","isUrineLamResult","id","test","fieldIndex","condition","f","find","result_indicators","label","every","Boolean","beforeNext","v","validateVLresults","toString","computedValue","type","charAt","parseInt","t","indicator","helpText","FieldType","TT_SELECT","group","appearInSummary","validation","Validation","required","options","TT_TEXT","onValue","toastWarning","config","customKeyboard","orders","getTestsWithoutResults","i","orderData","testIndex","tests","isEmpty","setTestTypeID","concept_id","indicators","getTestIndicators","push","other","accession","accession_number","orderDate","order_date","TT_TABLE_VIEWER","rows","HisDate","toStandardHisDisplayFormat","action","$nextTick","columns","val","overrideDefaultFooterBtns","nextBtn","onClick","$router","back","hiddenFooterBtns","generateDateFields","estimation","allowUnknown","minDate","toStandardHisFormat","maxDate","Service","getSessionDate","computeValue","date","TT_MULTIPLE_SELECT","__exports__","DEFAULT_KEYPAD","PRESCRIPTION_KEYPAD","FLOAT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","NUMBER_ARROW_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","AppEncounterService","constructor","patientId","super","_defineProperty","patientID","testTypeID","resultDate","testID","postJson","encounterID","getTestID","getTestTypeID","getOrders","status","getJson","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","_resolveDynamicComponent","formType","cancelDestinationPath","onFinishAction","onIndex","TouchScreenForm","emits","props","Function","default","String","formData","computedData","$emit","EstimationFieldType","getYearField","showUnknown","primaryFunctions","getMonthField","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","async","getDefaultDate","form","field","datePart","defaultValue","year","month","day","split","validateMinMax","computed","min","Date","max","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","includes","buildHelpTextDate","part","parts","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","proxyID","unload","StandardValidations","isNaN","minYear","getYear","summaryMapValue","summaryLabel","ref","keyboardActions","valueEstimateCondition","estimateType","conditions","estimationFieldType","ageEstimateRegex","dayjs","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","MONTH_ESTIMATE_FIELD","COMPONENT_REFS","TT_ASYNC_MULTI_SELECT","TT_LINKAGE_CODE","TT_MULTI_SELECT_GRID","TT_AGE_INPUT","TT_BARCODE","TT_NOTE","TT_CARD_SELECTOR","TT_ART_REGIMEN_SELECTION","TT_NEXT_VISIT_INTERVAL_SELECTION","TT_DOSAGE_INPUT","TT_YES_NO","TT_MULTIPLE_YES_NO","TT_WEIGHT_CHART","TT_VITALS_ENTRY","TT_APPOINTMENTS_ENTRY","TT_COMPLAINTS_PICKER","TT_CLINIC_HOLIDAY_PICKER","TT_SUMMARY","TT_ART_STAGING_SUMMARY","TT_ADHERENCE_INPUT","TT_LAB_ORDERS","TT_PERSON_RESULT_VIEW","TT_PROGRAM_SELECTION","TT_DATE_PICKER","TT_RELATION_SELECTION","TT_FILING_NUMBER_VIEW","TT_PERSON_MATCH_VIEW","TT_FULL_DATE","TT_BATCH_ENTRY","TT_BATCH_VERIFICATION","TT_BATCH_MOVEMENT","TT_IP_ADDRESS","TT_TEXT_BANNER","TT_DISPENSATION_INPUT","TT_DATA_TABLE","TT_GROUP_SELECTOR","TT_ANC_PREGNANCY_INPUT_CONFIG","TT_ANC_PREGNANCY_DETAILS_INPUT","TT_ANC_LMP_DATE_INPUT","TT_DRUG_TRANSFER_IN","TT_GRID_SELECTOR","TT_ANC_DRUGSET_INPUT","TT_RADIOLOGY_PICKER","TT_PRESCRIPTION_INPUT","TT_INFINITE_SCROLL_MULTIPLE_SELECT","TT_DRUG_DISPENSER","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","Error","code","ids","all","slice","keys","module","exports"],"mappings":"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d,IAAI1S,EAAM,CACT,wBAAyB,CACxB,OACA,qBAED,wBAAyB,CACxB,OACA,qBAED,iCAAkC,CACjC,OACA,qBAED,+BAAgC,CAC/B,OACA,qBAED,0BAA2B,CAC1B,OACA,qBAED,yBAA0B,CACzB,OACA,iBACA,qBAED,sBAAuB,CACtB,OACA,qBAED,kCAAmC,CAClC,OACA,qBAED,0BAA2B,CAC1B,OACA,iBACA,qBAED,mBAAoB,CACnB,OACA,qBAED,yBAA0B,CACzB,OACA,sBAED,6BAA8B,CAC7B,OACA,sBAED,0BAA2B,CAC1B,OACA,iBACA,sBAED,oBAAqB,CACpB,OACA,sBAED,wBAAyB,CACxB,OACA,iBACA,sBAED,+BAAgC,CAC/B,OACA,sBAED,wBAAyB,CACxB,OACA,sBAED,sBAAuB,CACtB,OACA,iBACA,iBACA,sBAED,yBAA0B,CACzB,OACA,iBACA,iBACA,sBAED,6BAA8B,CAC7B,OACA,iBACA,iBACA,sBAED,wBAAyB,CACxB,OACA,sBAED,+BAAgC,CAC/B,OACA,iBACA,sBAED,4BAA6B,CAC5B,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,sBAAuB,CACtB,OACA,iBACA,sBAED,uBAAwB,CACvB,OACA,iBACA,sBAED,wBAAyB,CACxB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,wCAAyC,CACxC,OACA,sBAED,qBAAsB,CACrB,OACA,iBACA,sBAED,uBAAwB,CACvB,OACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,0BAA2B,CAC1B,OACA,iBACA,sBAED,6BAA8B,CAC7B,OACA,sBAED,gBAAiB,CAChB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,6BAA8B,CAC7B,OACA,iBACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,kBAAmB,CAClB,OACA,sBAED,mBAAoB,CACnB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,sBAAuB,CACtB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,wBAAyB,CACxB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,oBAAqB,CACpB,OACA,sBAED,oBAAqB,CACpB,OACA,uBAGF,SAAS2S,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAE9S,EAAK4S,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIpS,EAAI,IAAIqS,MAAM,uBAAyBN,EAAM,KAEjD,MADA/R,EAAEsS,KAAO,mBACHtS,KAIR,IAAIuS,EAAMpT,EAAI4S,GAAMlQ,EAAK0Q,EAAI,GAC7B,OAAOL,QAAQM,IAAID,EAAIE,MAAM,GAAGtT,IAAI6S,EAAoBhS,IAAIoS,MAAK,WAChE,OAAOJ,EAAoBnQ,MAG7BiQ,EAAoBY,KAAO,WAC1B,OAAO5T,OAAO4T,KAAKvT,IAEpB2S,EAAoBjQ,GAAK,OACzB8Q,EAAOC,QAAUd","file":"js/chunk-1df7bbcc.0bb4a4f8.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    key: _ctx.hisFormKey,\n    fields: _ctx.fields,\n    activeField: _ctx.fieldComponent,\n    skipSummary: true,\n    onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (_ctx.fieldComponent='')),\n    onOnFinish: _ctx.onFinish\n  }, null, 8, [\"fields\", \"activeField\", \"onOnFinish\"]))\n}","\nimport { defineComponent } from 'vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { PatientLabResultService } from \"@/services/patient_lab_result_service\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { toastWarning, toastDanger, toastSuccess, alertConfirmation } from \"@/utils/Alerts\"\nimport { find, isEmpty } from 'lodash';\nimport HisDate from \"@/utils/Date\"\nimport { Service } from \"@/services/service\"\nimport { OrderService } from '@/services/order_service';\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        fieldComponent: '' as string,\n        labResult: {} as any,\n        hisFormKey: 0 as number,\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        selectedTest: {} as any,\n        testOptions: [] as Array<any>,\n        testIndicators: [] as Array<any>\n    }),\n    watch: {\n        '$route': {\n            async handler({params}: any) {\n                if (params && params.patient_id) {\n                    this.patient = params.patient_id\n                    this.labResult = new PatientLabResultService(this.patient)\n                    await this.initData()\n                    this.fields = this.getFields()\n                }\n            },\n            deep: true,\n            immediate: true\n        }\n    },\n    methods: {\n        async onFinish(_: any, c: any) {\n            try {\n                const measures = Object.values(c)\n                                    .filter((d: any) => d.tag === 'result_indicator' && d.measures)\n                                    .map((d: any) => d.measures)\n                this.labResult.setTestID(this.selectedTest.value)\n                this.labResult.setResultDate(c.result_date)\n                await this.labResult.createEncounter()\n                await this.labResult.createLabResult(measures)\n                Store.invalidate('PATIENT_LAB_ORDERS')\n                this.testOptions = []\n                this.selectedTest = {}\n                this.testIndicators = []\n                await this.initData()\n                this.hisFormKey = Math.floor(Math.random() * 5000)\n                toastSuccess('Lab result saved!')\n            }catch(e) {\n                toastDanger(`${e}`)\n                console.error(e)\n            }\n        },\n        generateTestIndicatorsFields() {\n          return this.testIndicators.reduce((acc: Field[], data: any) => {\n            return acc.concat(this.buildTestIndicatorFields(\n              data.indicatorId,\n              data.indicatorName,\n              data.specimen,\n              data.testId\n            ))\n          }, [] as Field[])\n        },\n        async validateVLresults(name: string, specimen: string, result: string){\n            if (name !== 'HIV viral load') return true\n            const modifier = result.substring(0, 1)\n            const value = result.substring(1, result.length)\n            if(OrderService.isValidVLResult(specimen, modifier, value)) return true\n            const isOk = await alertConfirmation(`Invalid results for ${specimen} HIV viral load`, {\n                cancelBtnLabel: \"Process result\",\n                confirmBtnLabel: \"Re-enter result\"\n            })\n            return !isOk\n        },\n        alphaValueIsValid(value: string) {\n            try {\n                return value.match(/^(>|<|=)(.*)/) ? true : false\n            }catch (e) {\n                return false\n            }\n        },\n        numericValueIsValid(value: string){\n            try {\n                return value.match(/^(=|<|>)([0-9]*)$/m) ? true : false\n            }catch(e) {\n                return false\n            }\n        },\n        isMalariaResult(name: string) {\n            return name.match(/mrdt|malaria/i) ? true : false\n        },\n        isUrineLamResult(name: string) {\n            return name.match(/Lam/i) ? true : false\n        },\n        buildTestIndicatorFields(id: number, name: string, specimen: string, test: number): Array<Field> {\n          const fieldIndex = id * test\n            const condition = (f: any) => [\n                this.selectedTest.value === test, \n                find(f.result_indicators, { label: name}) ? true : false\n            ].every(Boolean)\n            const beforeNext = (v: Option) => this.validateVLresults(name, specimen, v.value.toString())\n\n            const computedValue = (v: any, f: any) => {\n                if(v.value === 'Other' && name.match(/HIV viral load/i)) return {}\n                const type = this.isMalariaResult(name) || this.isUrineLamResult(name) ? 'text' : f[`type_${fieldIndex}`].value\n                const value = this.isMalariaResult(name) || this.isUrineLamResult(name) ? \"=\" + v.value : v.value.toString()\n                const modifier = value.charAt(0)\n                const result = type === 'numeric' ? parseInt(value.substring(1)) : value.substring(1)\n                const test = f[`result_indicators`].filter((t: any) => t.value === id)[0]\n                return {\n                    tag: 'result_indicator',\n                    measures: {\n                        indicator: {\n                            'concept_id': test.value\n                        },\n                        'value': result,\n                        'value_modifier': modifier,\n                        'value_type': type\n                    },\n                    result,\n                    modifier,\n                    test: test.label\n                }\n            }\n            return [\n                {\n                    id: `type_${fieldIndex}`,\n                    helpText: `Result type (${name})`,\n                    type: FieldType.TT_SELECT,\n                    group: 'test_indicator',\n                    condition: (f: any) => condition(f) && !this.isMalariaResult(name) && !this.isUrineLamResult(name),\n                    appearInSummary: () => false,\n                    validation: (v: Option) => Validation.required(v),\n                    options: () => [\n                        {\n                            label: 'Numeric (numbers only)',\n                            value: 'numeric'\n                        },\n                        {\n                            label: 'Alphanumeric(text and numbers)',\n                            value: 'text'\n                        }\n                    ]\n                },\n                {\n                    id: `urine_result_${fieldIndex}`,\n                    helpText: `Select Test Result (${name})`,\n                    type: FieldType.TT_SELECT,\n                    group: 'test_indicator',\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && this.isUrineLamResult(name),\n                    options: () => \n                        [\n                            {   \n                                label: 'Positive',\n                                value: 'positive'\n                            },\n                            {\n                                label: 'Negative',\n                                value: 'negative'\n                            }\n                        ]\n                },\n                {\n                    id: `num_${fieldIndex}`,\n                    helpText: `Test Result (${name})`,\n                    type: FieldType.TT_TEXT,\n                    group: 'test_indicator',\n                    computedValue,\n                    beforeNext,\n                    onValue: (v: Option) => {\n                        if (v && v.value && !this.numericValueIsValid(v.value.toString())) {\n                            toastWarning('You must enter a modifer and numbers only. i.e =90 / >19 / < 750')\n                            return false\n                        }\n                        return true\n                    },\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && f[`type_${fieldIndex}`].value === 'numeric',\n                    config: {\n                        customKeyboard: [\n                            [\n                                ['1', '2', '3'],\n                                ['4', '5', '6', '=', '<', '>'],\n                                ['7', '8', '9', '.'],\n                                ['',  '0', '']\n                            ],\n                            [\n                                [ 'Delete']\n                            ]\n                        ]\n                    }\n                },\n                {\n                    id: `alpha_${fieldIndex}`,\n                    helpText: `Test Result (${name})`,\n                    type: FieldType.TT_TEXT,\n                    group: 'test_indicator',\n                    onValue: (v: Option) => {\n                        if (v && v.value && !this.alphaValueIsValid(v.value.toString())) {\n                            toastWarning('You must enter a modifier plus result (for example =LDL)')\n                            return false\n                        }\n                        return true\n                    },\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && f[`type_${fieldIndex}`].value === 'text' && !name.match(/HIV viral load/i)\n                },\n                {\n                    id: `VL_alpha_${fieldIndex}`,\n                    helpText: `Select Test Result (${name})`,\n                    type: FieldType.TT_SELECT,\n                    group: 'test_indicator',\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && f[`type_${fieldIndex}`].value === 'text' && name.match(/HIV viral load/i),\n                    options: () => [\n                      {\n                        label: 'Collect Another Sample',\n                        value: '=Collect Another Sample'\n                      },\n                      {\n                        label: '<LDL',\n                        value: '<LDL'\n                      },\n                      {\n                        label: '=LDL',\n                        value: '=LDL'\n                      },\n                      {\n                        value: 'Other',\n                        label: 'Other'\n                      }\n                    ]\n                },\n                {\n                    id: `other_VL_alpha_${fieldIndex}`,\n                    helpText: `Test Result (${name})`,\n                    type: FieldType.TT_TEXT,\n                    group: 'test_indicator',\n                    onValue: (v: Option) => {\n                        if (v && v.value && !this.alphaValueIsValid(v.value.toString())) {\n                            toastWarning('You must enter a modifier plus result (for example =LDL)')\n                            return false\n                        }\n                        return true\n                    },\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => {\n                      return condition(f) && \n                        f[`type_${fieldIndex}`].value === 'text' && \n                        name.match(/HIV viral load/i)\n                        && f[`VL_alpha_${fieldIndex}`].value === 'Other'\n                    }\n                },\n                {\n                    id: `malaria_result_${fieldIndex}`,\n                    helpText: `Select Test Result (${name})`,\n                    type: FieldType.TT_SELECT,\n                    group: 'test_indicator',\n                    computedValue,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => condition(f) && this.isMalariaResult(name),\n                    options: () => {\n                        if(name.match(/mrdt/i)) {\n                            return [\n                                {\n                                    label: 'Positive',\n                                    value: 'positive'\n                                },\n                                {\n                                    label: 'Negative',\n                                    value: 'negative'\n                                }\n                            ]\n                        }\n                        return [\n                            {\n                                label: 'Parasites seen',\n                                value: 'parasites seen'\n                            },\n                            {\n                                label: 'No parasites seen',\n                                value: 'no parasites seen'\n                            }\n                        ]\n                    }\n                },\n            ]\n        },\n        async initData() {\n            const orders = await this.labResult.getTestsWithoutResults()\n            for(const i in orders) {\n                const orderData = orders[i]\n                for(const testIndex in orderData.tests) {\n                    const test = orderData.tests[testIndex]\n                    if (!isEmpty(test.result)) {\n                        continue\n                    }\n                    this.labResult.setTestTypeID(test.concept_id)\n                    const indicators = await this.labResult.getTestIndicators()\n                    const testIndicators = indicators.map((i: any) =>({\n                        testId: test.id,\n                        indicatorName: i.name,\n                        indicatorId: i.concept_id,\n                        specimen: orderData.specimen.name,\n                    }))\n                    this.testIndicators = [...this.testIndicators, ...testIndicators]\n                    this.testOptions.push({\n                        label: test.name,\n                        value: test.id,\n                        other: {\n                            accession: orderData.accession_number,\n                            specimen: orderData.specimen.name,\n                            test: test.name,\n                            orderDate: orderData.order_date,\n                            testIndicators\n                        }\n                    })\n                }\n            }\n        },\n        getFields(): Array<Field> {\n            return [\n                {\n                  id: 'test_type',\n                  helpText: 'Tests without results',\n                  type: FieldType.TT_TABLE_VIEWER,\n                  options: () => {\n                    const rows = this.testOptions.map((t: Option) => ([\n                        t.other.accession,\n                        t.other.specimen,\n                        t.other.test,\n                        HisDate.toStandardHisDisplayFormat(t.other.orderDate),\n                        {\n                            type: 'button',\n                            name: 'Select',\n                            action: () => {\n                                this.selectedTest = t\n                                this.$nextTick(() => this.fieldComponent = 'year_result_date')\n                            }\n                        }\n                    ]))\n                    return [{\n                        label: '',\n                        value: '',\n                        other: {\n                            rows,\n                            columns:[ 'Acession#', 'Specimen', 'Test', 'Order date']\n                        }\n                    }]\n                  },\n                  validation: (val: Option) => Validation.required(val),\n                  config: {\n                    overrideDefaultFooterBtns: {\n                        nextBtn: {\n                            name: 'Finish',\n                            onClick: () => this.$router.back()\n                        }\n                    },\n                    hiddenFooterBtns: [\n                        'Clear',\n                        'Cancel'\n                    ]\n                  }\n                },\n                ...generateDateFields({\n                    id: 'result_date',\n                    helpText: 'Result',\n                    required: true,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    minDate: () => HisDate.toStandardHisFormat(this.selectedTest.other.orderDate),\n                    maxDate: () => Service.getSessionDate(),\n                    computeValue: (date: string) => date\n                }),\n                {\n                    id: `result_indicators`,\n                    helpText: `Select test result indicators`,\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    validation: (v: Option) => Validation.required(v),\n                    options: () => {                       \n                        return this.selectedTest\n                                .other\n                                .testIndicators\n                                .map((i: any) => ({\n                                    label: i.indicatorName,\n                                    value: i.indicatorId\n                                }))\n                    },\n                },\n                ...this.generateTestIndicatorsFields(),\n                {\n                    id: 'entry_confirmation',\n                    helpText: 'Confirm entry',\n                    type: FieldType.TT_TABLE_VIEWER,\n                    options: (_: any, c: any) => {\n                        const rows = Object.values(c)\n                                           .filter((d: any) => \n                                                typeof d === 'object'\n                                                && d != null\n                                                && d.tag === 'result_indicator'\n                                            )\n                                           .map((d: any) => ([d.test, d.modifier, d.result ]))\n                        return [{\n                            label: '',\n                            value: '',\n                            other: {\n                                rows,\n                                columns:[ 'Test', 'Modifier', 'Result']\n                            }\n                        }]\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./LabResults.vue?vue&type=template&id=1991c2ae&ts=true\"\nimport script from \"./LabResults.vue?vue&type=script&lang=ts\"\nexport * from \"./LabResults.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/projects/malawi-emr/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const PRESCRIPTION_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del', '0', '.'],\n    ['Unknown', '', ''],\n]\nexport const FLOAT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const NUMBER_ARROW_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['←',  '0', '→']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","import { OrderService } from '@/services/order_service'\nimport { AppEncounterService } from './app_encounter_service';\n\nexport class PatientLabResultService extends AppEncounterService {\n    patientID: number;\n    testTypeID: number;\n    resultDate: string;\n    testID: number;\n    constructor(patientId: number) {\n        super(patientId, 57)\n        this.patientID = patientId\n        this.testTypeID = -1\n        this.resultDate = ''\n        this.testID = -1\n    }\n\n    createLabResult(measures: Array<any>) {\n        return AppEncounterService.postJson(`lab/tests/${this.testID}/results`, {\n            'encounter_id': this.encounterID,\n            date: this.resultDate,\n            measures\n        })\n    }\n\n    getTestID() {\n        return this.testID\n    }\n\n    getTestTypeID() {\n        return this.testTypeID\n    }\n\n    setTestTypeID(test: number) {\n        this.testTypeID = test\n    }\n\n    setResultDate(date: string) {\n        this.resultDate = date\n    }\n\n    setTestID(test: number) {\n        this.testID = test\n    }   \n\n    getTestsWithoutResults() {\n        return OrderService.getOrders(this.patientID, {\n            status: 'drawn'\n        })\n    }\n\n    getTestIndicators() {\n      return OrderService.getJson(\n        `lab/test_result_indicators`, {\n        'test_type_id': this.testTypeID\n      })\n    }\n\n    \n}\n","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/projects/malawi-emr/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year as number < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year as number > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, , day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value as number > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","/**\n * Map all formElements/components defined in \"@/components/FormElements\" \n * in the Enum below by their file name.\n * \n * Next step is to add FieldType entry in COMPONENT_REFS in the \n * Array below the FieldType Enum\n */\nexport enum FieldType {\n    TT_ASYNC_MULTI_SELECT = 'AsyncMultiSelect',\n    TT_LINKAGE_CODE = 'LinkageCodeInput',\n    TT_MULTI_SELECT_GRID= 'HisMultiSelectGrid',\n    TT_AGE_INPUT='HisAgeInput',\n    TT_GROUP_SELECTOR = 'HisGroupSelector',\n    TT_DATA_TABLE = 'HisDataTable',\n    TT_GRID_SELECTOR = 'HisGridSelector',\n    TT_NOTE = 'HisNote',\n    TT_BARCODE = 'HisBarcodeInput',\n    TT_MONTHLY_DAYS=\"HisMonthlyDays\",\n    TT_TEXT=\"HisTextInput\",\n    TT_NUMBER = \"HisNumberInput\",\n    TT_DATETIME=\"datetime\",\n    TT_SELECT=\"HisSelect\",\n    TT_MULTIPLE_SELECT=\"HisMultipleSelect\",\n    TT_ART_REGIMEN_SELECTION=\"HisArtRegimenSelection\",\n    TT_NEXT_VISIT_INTERVAL_SELECTION=\"HisNextVisitInterval\",\n    TT_TABLE_VIEWER=\"HisTableViewer\",\n    TT_DOSAGE_INPUT=\"HisDosageInput\",\n    TT_YES_NO=\"YesNoSelect\",\n    TT_MULTIPLE_YES_NO=\"MultiYesNoSelect\",\n    TT_SUMMARY=\"HisSummary\",\n    TT_WEIGHT_CHART = \"HisWeightChart\",\n    TT_VITALS_ENTRY=\"HisVitalsEntry\",\n    TT_ADHERENCE_INPUT = \"HisAdherenceInput\",\n    TT_ART_STAGING_SUMMARY = \"ArtStagingSummary\",\n    TT_LAB_ORDERS = \"HisLabOrders\",\n    TT_APPOINTMENTS_ENTRY = \"HisAppointments\",\n    TT_DISPENSATION_INPUT = 'DrugDispensationSelection',\n    TT_PROGRAM_SELECTION = 'ProgramSelection',\n    TT_DATE_PICKER = 'HisDatePicker',\n    TT_PERSON_RESULT_VIEW = 'PersonSearchView',\n    TT_RELATION_SELECTION = 'RelationsSelection',\n    TT_FILING_NUMBER_VIEW = 'FilingNumberView',\n    TT_CARD_SELECTOR = 'HisCardSelector',\n    TT_PERSON_MATCH_VIEW = 'PersonMatchView',\n    TT_FULL_DATE = 'HisDateInput',\n    TT_BATCH_ENTRY = 'HisBatchEntry',\n    TT_BATCH_VERIFICATION = 'HisBatchVerification',\n    TT_BATCH_MOVEMENT = 'HisBatchMovement',\n    TT_COMPLAINTS_PICKER = 'HisComplaintsPicker',\n    TT_RADIOLOGY_PICKER = 'HisRadiologyPicker',\n    TT_IP_ADDRESS = 'HisIPAddress',\n    TT_TEXT_BANNER = 'HisTextBanner',\n    TT_DRUG_DISPENSER = 'GeneralDrugDispenser',\n    TT_CLINIC_HOLIDAY_PICKER = 'HisClinicHolidayPicker',\n    TT_ANC_PREGNANCY_INPUT_CONFIG = 'AncPregnancyInfoConfig',\n    TT_ANC_PREGNANCY_DETAILS_INPUT = 'AncPregnancyDetailsInput',\n    TT_ANC_LMP_DATE_INPUT = 'AncLmpDateInput',\n    TT_ANC_DRUGSET_INPUT = 'AncDrugSetInput',\n    TT_DRUG_TRANSFER_IN = 'DrugTransferInput',\n    TT_PRESCRIPTION_INPUT = 'HisPrescriptionInput',\n    TT_INFINITE_SCROLL_MULTIPLE_SELECT=\"HisInfiniteScrollMultipleSelect\"\n}\n\n// Register FieldTypes here that will be registered at runtime\nexport const COMPONENT_REFS: FieldType[] = [\n    FieldType.TT_ASYNC_MULTI_SELECT,\n    FieldType.TT_LINKAGE_CODE,\n    FieldType.TT_MULTI_SELECT_GRID,\n    FieldType.TT_AGE_INPUT,\n    FieldType.TT_BARCODE,\n    FieldType.TT_NOTE,\n    FieldType.TT_SELECT,\n    FieldType.TT_CARD_SELECTOR,\n    FieldType.TT_MULTIPLE_SELECT,\n    FieldType.TT_TEXT,\n    FieldType.TT_NUMBER,\n    FieldType.TT_MONTHLY_DAYS,\n    FieldType.TT_ART_REGIMEN_SELECTION,\n    FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n    FieldType.TT_TABLE_VIEWER,\n    FieldType.TT_DOSAGE_INPUT,\n    FieldType.TT_YES_NO,\n    FieldType.TT_MULTIPLE_YES_NO,\n    FieldType.TT_WEIGHT_CHART,\n    FieldType.TT_VITALS_ENTRY,\n    FieldType.TT_APPOINTMENTS_ENTRY,\n    FieldType.TT_COMPLAINTS_PICKER,\n    FieldType.TT_CLINIC_HOLIDAY_PICKER,\n    FieldType.TT_SUMMARY,\n    FieldType.TT_ART_STAGING_SUMMARY,\n    FieldType.TT_ADHERENCE_INPUT,\n    FieldType.TT_LAB_ORDERS,\n    FieldType.TT_PERSON_RESULT_VIEW,\n    FieldType.TT_PROGRAM_SELECTION,\n    FieldType.TT_DATE_PICKER,\n    FieldType.TT_RELATION_SELECTION,\n    FieldType.TT_FILING_NUMBER_VIEW,\n    FieldType.TT_PERSON_MATCH_VIEW,\n    FieldType.TT_FULL_DATE,\n    FieldType.TT_BATCH_ENTRY,\n    FieldType.TT_BATCH_VERIFICATION,\n    FieldType.TT_BATCH_MOVEMENT,\n    FieldType.TT_IP_ADDRESS,\n    FieldType.TT_TEXT_BANNER,\n    FieldType.TT_DISPENSATION_INPUT,\n    FieldType.TT_DATA_TABLE,\n    FieldType.TT_GROUP_SELECTOR,\n    FieldType.TT_ANC_PREGNANCY_INPUT_CONFIG,\n    FieldType.TT_ANC_PREGNANCY_DETAILS_INPUT,\n    FieldType.TT_ANC_LMP_DATE_INPUT,\n    FieldType.TT_DRUG_TRANSFER_IN,\n    FieldType.TT_GRID_SELECTOR,\n    FieldType.TT_ANC_DRUGSET_INPUT,\n    FieldType.TT_RADIOLOGY_PICKER,\n    FieldType.TT_PRESCRIPTION_INPUT,\n    FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n    FieldType.TT_DRUG_DISPENSER\n]\n","var map = {\n\t\"./AncDrugSetInput.vue\": [\n\t\t\"c99f\",\n\t\t\"TouchFormElement0\"\n\t],\n\t\"./AncLmpDateInput.vue\": [\n\t\t\"101a\",\n\t\t\"TouchFormElement1\"\n\t],\n\t\"./AncPregnancyDetailsInput.vue\": [\n\t\t\"b043\",\n\t\t\"TouchFormElement2\"\n\t],\n\t\"./AncPregnancyInfoConfig.vue\": [\n\t\t\"262e\",\n\t\t\"TouchFormElement3\"\n\t],\n\t\"./ArtStagingSummary.vue\": [\n\t\t\"43db\",\n\t\t\"TouchFormElement4\"\n\t],\n\t\"./AsyncMultiSelect.vue\": [\n\t\t\"5de2\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement5\"\n\t],\n\t\"./BaseTextInput.vue\": [\n\t\t\"36ad\",\n\t\t\"TouchFormElement6\"\n\t],\n\t\"./DrugDispensationSelection.vue\": [\n\t\t\"05d5\",\n\t\t\"TouchFormElement7\"\n\t],\n\t\"./DrugTransferInput.vue\": [\n\t\t\"de42\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement8\"\n\t],\n\t\"./FieldMixin.vue\": [\n\t\t\"51c8\",\n\t\t\"TouchFormElement9\"\n\t],\n\t\"./FilingNumberView.vue\": [\n\t\t\"c650\",\n\t\t\"TouchFormElement10\"\n\t],\n\t\"./GeneralDrugDispenser.vue\": [\n\t\t\"7737\",\n\t\t\"TouchFormElement11\"\n\t],\n\t\"./HisAdherenceInput.vue\": [\n\t\t\"f2c3\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement12\"\n\t],\n\t\"./HisAgeInput.vue\": [\n\t\t\"c05f\",\n\t\t\"TouchFormElement13\"\n\t],\n\t\"./HisAppointments.vue\": [\n\t\t\"b2eb\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement14\"\n\t],\n\t\"./HisArtRegimenSelection.vue\": [\n\t\t\"47b9\",\n\t\t\"TouchFormElement15\"\n\t],\n\t\"./HisBarcodeInput.vue\": [\n\t\t\"dd65\",\n\t\t\"TouchFormElement16\"\n\t],\n\t\"./HisBatchEntry.vue\": [\n\t\t\"f2ab\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement17\"\n\t],\n\t\"./HisBatchMovement.vue\": [\n\t\t\"5148\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement18\"\n\t],\n\t\"./HisBatchVerification.vue\": [\n\t\t\"7b0f\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement19\"\n\t],\n\t\"./HisCardSelector.vue\": [\n\t\t\"0734\",\n\t\t\"TouchFormElement20\"\n\t],\n\t\"./HisClinicHolidayPicker.vue\": [\n\t\t\"4030\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement21\"\n\t],\n\t\"./HisComplaintsPicker.vue\": [\n\t\t\"82d1\",\n\t\t\"TouchFormElement22\"\n\t],\n\t\"./HisDataTable.vue\": [\n\t\t\"a6ba\",\n\t\t\"TouchFormElement23\"\n\t],\n\t\"./HisDateInput.vue\": [\n\t\t\"374c\",\n\t\t\"TouchFormElement24\"\n\t],\n\t\"./HisDatePicker.vue\": [\n\t\t\"9b30\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement25\"\n\t],\n\t\"./HisDosageInput.vue\": [\n\t\t\"b34c\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement26\"\n\t],\n\t\"./HisGridSelector.vue\": [\n\t\t\"112a\",\n\t\t\"TouchFormElement27\"\n\t],\n\t\"./HisGroupSelector.vue\": [\n\t\t\"81cf\",\n\t\t\"TouchFormElement28\"\n\t],\n\t\"./HisIPAddress.vue\": [\n\t\t\"2a82\",\n\t\t\"TouchFormElement29\"\n\t],\n\t\"./HisInfiniteScrollMultipleSelect.vue\": [\n\t\t\"52a3\",\n\t\t\"TouchFormElement30\"\n\t],\n\t\"./HisLabOrders.vue\": [\n\t\t\"e614\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement31\"\n\t],\n\t\"./HisMonthlyDays.vue\": [\n\t\t\"69cf\",\n\t\t\"TouchFormElement32\"\n\t],\n\t\"./HisMultiSelectGrid.vue\": [\n\t\t\"0fa3\",\n\t\t\"TouchFormElement33\"\n\t],\n\t\"./HisMultipleSelect.vue\": [\n\t\t\"2fd5\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement34\"\n\t],\n\t\"./HisNextVisitInterval.vue\": [\n\t\t\"3126\",\n\t\t\"TouchFormElement35\"\n\t],\n\t\"./HisNote.vue\": [\n\t\t\"c927\",\n\t\t\"TouchFormElement36\"\n\t],\n\t\"./HisNumberInput.vue\": [\n\t\t\"5e75\",\n\t\t\"TouchFormElement37\"\n\t],\n\t\"./HisPrescriptionInput.vue\": [\n\t\t\"87e5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement38\"\n\t],\n\t\"./HisRadiologyPicker.vue\": [\n\t\t\"adc7\",\n\t\t\"TouchFormElement39\"\n\t],\n\t\"./HisSelect.vue\": [\n\t\t\"d11f\",\n\t\t\"TouchFormElement40\"\n\t],\n\t\"./HisSummary.vue\": [\n\t\t\"e0bd\",\n\t\t\"TouchFormElement41\"\n\t],\n\t\"./HisTableViewer.vue\": [\n\t\t\"8904\",\n\t\t\"TouchFormElement42\"\n\t],\n\t\"./HisTextBanner.vue\": [\n\t\t\"952c\",\n\t\t\"TouchFormElement43\"\n\t],\n\t\"./HisTextInput.vue\": [\n\t\t\"6ef9\",\n\t\t\"TouchFormElement44\"\n\t],\n\t\"./HisVitalsEntry.vue\": [\n\t\t\"e333\",\n\t\t\"TouchFormElement45\"\n\t],\n\t\"./HisWeightChart.vue\": [\n\t\t\"26a1\",\n\t\t\"TouchFormElement46\"\n\t],\n\t\"./LinkageCodeInput.vue\": [\n\t\t\"ac86\",\n\t\t\"TouchFormElement47\"\n\t],\n\t\"./MultiYesNoSelect.vue\": [\n\t\t\"5fd1\",\n\t\t\"TouchFormElement48\"\n\t],\n\t\"./PersonMatchView.vue\": [\n\t\t\"6591\",\n\t\t\"TouchFormElement49\"\n\t],\n\t\"./PersonSearchView.vue\": [\n\t\t\"28b2\",\n\t\t\"TouchFormElement50\"\n\t],\n\t\"./ProgramSelection.vue\": [\n\t\t\"e3b4\",\n\t\t\"TouchFormElement51\"\n\t],\n\t\"./RelationsSelection.vue\": [\n\t\t\"0e57\",\n\t\t\"TouchFormElement52\"\n\t],\n\t\"./SelectMixin.vue\": [\n\t\t\"82a9\",\n\t\t\"TouchFormElement53\"\n\t],\n\t\"./YesNoSelect.vue\": [\n\t\t\"71f2\",\n\t\t\"TouchFormElement54\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"f159\";\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}