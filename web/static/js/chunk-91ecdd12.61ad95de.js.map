{"version":3,"sources":["webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/apps/ART/services/consultation_service.ts","webpack:///./src/apps/ART/services/stock_service.ts","webpack:///./src/apps/ART/services/dispensation_service.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/apps/ART/views/encounters/Consultation.vue?c6ff","webpack:///./src/components/DataViews/VLReminderModal.vue?3776","webpack:///./src/components/DataViews/VLReminderModal.vue","webpack:///./src/components/DataViews/VLReminderModal.vue?a14d","webpack:///./src/apps/ART/services/lab_service.ts","webpack:///./src/components/DataViews/SideEffectsModal.vue?e8f1","webpack:///./src/components/DataViews/SideEffectsModal.vue","webpack:///./src/components/DataViews/SideEffectsModal.vue?d5c5","webpack:///./src/apps/ART/views/encounters/Consultation.vue","webpack:///./src/apps/ART/views/encounters/Consultation.vue?3980","webpack:///./src/services/regimen_service.ts","webpack:///./src/services/drug_order_service.ts","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts","webpack:///./src/components/DataViews/VLReminderModal.vue?947f","webpack:///./src/apps/ART/services/prescription_service.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts","webpack:///./src/components/DataViews/SideEffectsModal.vue?ca65"],"names":["DEFAULT_KEYPAD","PRESCRIPTION_KEYPAD","FLOAT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","ConsultationService","AppEncounterService","constructor","patientID","providerID","super","getFamilyPlanningMethods","getJson","this","obs","ObservationService","getFirstObs","value_text","match","obsInValidPeriod","getDrugSideEffects","getProgramID","date","getClient","getFirstValueCoded","req","id","isEmpty","lastScreened","duration","dayjs","diff","secondCheck","getFirstValueText","isTL","value_coded","tlObs","fpObs","drugs","uniqueDrugs","forEach","drug","drug_inventory_id","familyPlanningMethods","label","values","familyPlanningLogic","selected","map","data","value","isChecked","disabled","StockService","Service","drugId","stock","length","reduce","accum","pharm","current_quantity","DRUG_PACK_SIZES","DispensationService","drugHistory","currentDrugOrder","useDrugManagement","setIsDrugManagementEnabled","isEnabled","ART_PROP","drugManagementEnabled","getDrugHistory","getCurrentOrder","buildDispensations","orderId","tabs","totalPacks","dispensations","i","push","quantity","saveDispensations","postJson","void","res","DrugOrderService","getDrugOrderHistory","e","console","warn","getDrugOrders","async","d","fetchAvailableDrugStock","drug_id","Promise","all","getDrugPackSizes","calcCompletePack","units","drugOrderBarcodes","barcodes","sort","a","b","parseInt","completePack","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","_component_ion_title","_component_ion_toolbar","_component_ion_header","_component_ion_content","_component_ion_button","_component_ion_footer","_createElementBlock","_Fragment","_createVNode","default","_withCtx","_createTextVNode","_","style","overflowY","background","_createElementVNode","_toDisplayString","artStartDate","monthsOnART","lastOrder","currentRegimen","regimenStartDate","slot","color","size","onClick","$event","closeModal","defineComponent","name","props","VLData","type","Object","required","HisDate","toStandardHisDisplayFormat","earliest_start_date","period_on_art","last_order_date","current_regimen","date_started","methods","val","modalController","dismiss","content","components","IonHeader","IonToolbar","IonTitle","IonContent","IonFooter","IonButton","__exports__","ARTLabService","milestone","concept","getConceptID","coded","_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_1","_hoisted_2","class","_hoisted_3","_hoisted_4","_hoisted_5","_component_ion_label","_component_ion_item","_component_ion_list","_component_ion_col","_component_ion_radio","_component_ion_radio_group","_component_ion_row","_component_ion_grid","height","_renderList","sides","index","key","selectSideEffect","detail","_normalizeStyle","activeIndex","modelValue","_createCommentVNode","postSideEffects","allSelected","sideEffects","Array","computed","filter","side","mounted","extendedLabsEnabled","appActivities","specimens","reasons","IonLabel","IonList","IonItem","IonRadioGroup","IonRow","mixins","AdherenceMixinVue","HisStandardForm","currentWeight","weightTrail","customRegimens","labOrders","weightLossPercentageNum","lostTenPercentBodyWeight","CxCaEnabled","CxCaStartAge","CxCaMaxAge","DueForCxCa","currentlyPregnant","currentlyBreastfeeding","patientHitMenopause","hasPregnancyObsToday","autoSelect3HP","labOrderFieldContext","consultation","prescription","dispensation","completed3HP","hasTbHistoryObs","allergicToSulphur","TBSuspected","presentedTBSymptoms","askAdherence","lastDrugsReceived","sideEffectsHistory","onPermanentFPMethods","reasonForDecliningTPTObs","malawiSideEffectReasonObs","otherSideEffectReasonObs","wasTransferredIn","dateStartedArt","clientHadAHysterectomy","isNoneClientPatient","tptStatus","customDrugs","watch","ready","handler","PrescriptionService","getFields","immediate","f","computedData","encounter","createEncounter","toastWarning","computedObs","resolveObs","secondaryObs","savedObs","saveObservationList","drugObs","saveAdherence","toastSuccess","refer_to_clinician","gotoPatientDashboard","nextTask","formData","drugFilters","tptHistory","routine_tb_therapy","RegimenService","getCustomIngridients","includes","other","receivedArvs","transferLetterObs","toStandardHisFormat","obs_datetime","getDate","dateStarted","getFirstValueDatetime","action","infoActionSheet","vals","ProgramService","getPatientVLInfo","eligibile","modal","create","component","VLReminderModal","backdropDismiss","cssClass","componentProps","present","onDidDismiss","launchOrderSelection","waitForVL","orderService","observations","buildDefferedOrder","canScreenCxCa","age","patient","getAge","isFemale","pregnancyEligible","isChildBearing","showCurrentContraceptionMethods","isPregnant","isANCclient","showNewContraceptionMethods","isOnTubalLigation","pregnant_breastfeeding","inArray","p","isBreastFeeding","current_fp_methods","listData","infoAlert","noneIndex","findIndex","currentIndex","disablePrescriptions","buildMedicationOrders","options","o","buildValueCoded","priscribed","medications","declinedFPM","fp_methods","riskOfUnplannedPregnancy","reason_for_no_fpm","showOtherSideEffects","side_effects","hasTBSymptoms","tb_side_effects","isTBSuspect","toString","isAllergicToSulphur","attr","sideEffectReasons","getSideEffectsReasons","undefined","drugInducedConcept","ConceptService","getCachedConceptID","isOtherReason","reason","r","allYes","s","SideEffectsModalVue","getFPMethods","exclusionList","preChecked","filtered","method","getOptions","preValues","preValue","find","yesNoOptions","getContraindications","contraIndications","getConceptsByCategory","getOtherContraindications","lastElement","pop","getTBSymptoms","getReasonsForNoCxcaOptions","c","runAppendOptionParams","prechecked","checkedOptions","appendOptionParams","appendedOptions","option","didCompleted3HP","patientOnTpt","test","tpt","tptAutoSelectionMode","curOption","is3HPorTPT","ipt3HPConflict","checkedDrugs","item","noTpTPresent","every","Boolean","optionsActionSheet","role","buildValueText","selection","medicationOrderOptions","completedTpt","everTakenTpt","isCurrentlyBreastfeeding","disableOption","text","description","show","toOption","tb_treatment","completed","OrderService","formatLabs","Store","get","getSuspendedProgram","proxyID","helpText","FieldType","TT_MULTIPLE_SELECT","init","isGuardian","PatientTypeService","isDrugRefillPatient","Number","getRecentWeight","getTptTreatmentStatus","validation","Validation","computedValue","v","tag","onValueUpdate","list","on3HPValueUpdate","cd","l","condition","exitsForm","generateDateFields","getTransferInStatus","getDateStartedArt","minDate","maxDate","computeValue","setDate","buildValueDate","estimation","allowUnknown","getARVs","config","showKeyboard","TT_NEXT_VISIT_INTERVAL_SELECTION","nextAppointment","intervals","setNextVisitInterval","calculateDateFromInterval","TT_DRUG_TRANSFER_IN","validateSeries","pillsBrought","some","drugID","buildObs","drug_interval","child","date_last_received_arvs","previous_arvs_received","drugName","prevValue","qty","rmndr","TT_LAB_ORDERS","getVlLabData","unload","checkVLReminder","noGivenResults","result_given","alertConfirmation","enc","result","resultIds","encounterID","encounter_id","saveObs","resultID","onload","fieldContext","printOrder","orderID","PatientPrintoutService","printLabOrderLbl","hiddenFooterBtns","footerBtns","visible","isBreastfeeding","getTLObs","TT_MULTIPLE_YES_NO","anyEmpty","concat","TT_WEIGHT_CHART","getWeightHistory","getWeightLossPercentageFromTrail","bmi","getBMI","x","y","weight","TT_TEXT_BANNER","mapStrToOptions","disableFPMethods","checked","TT_SELECT","offer_contraceptives","cervicalCancerScreeningEnabled","start","end","cervicalCancerScreeningAgeBounds","clientDueForCxCa","clientHasHadAHysterectomy","offer_cxca","getBirthdate","getSessionDate","reason_for_no_cxca","isEstimate","buildValueDateEstimated","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","TT_DATA_TABLE","columns","table","thTxt","rows","keys","k","tdDate","td","drug_induced","cur","getPreviousDrugs","beforeNext","buildSideEffectObs","onValue","checkIfWeightLossIsControlled","onConditionFalse","TT_NOTE","other_side_effects","on_tb_treatment","defaultValue","hasTreatmentHistoryObs","TT_ADHERENCE_INPUT","getTptDrugs","date_started_tpt","titles","getFacilities","isFilterDataViaApi","log","yesNoUnknownOptions","getAdherenceFields","UserService","isNurse","currentOptions","onClickComponentEvents","refreshOptions","btnEvent","btnOutput","patientId","onTbTreatment","orders","order","pageSize","params","getYearField","showUnknown","primaryFunctions","appearInSummary","TT_TEXT","customKeyboard","getMonthField","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","getDefaultDate","form","field","datePart","year","month","day","split","validateMinMax","min","Date","max","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","buildHelpTextDate","part","parts","partValues","dpart","wl","join","updateHelpTextOnValue","StandardValidations","isNaN","minYear","getYear","summaryMapValue","summaryLabel","ref","keyboardActions","valueEstimateCondition","estimateType","conditions","ageEstimateRegex","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","AdverseEffectsCategories","nextVisitInterval","fastTrack","regimenExtras","fastTrackMedications","hangingPills","medicationOrders","treatmentState","contraindications","tptPrescriptionCount","lastSideEffectDate","getHangingPills","getMedicationOrders","getCachedConceptName","getTptPrescriptionCount","getLastSideEffectDate","getSideEffects","getRegimenExtras","getPatientRegimens","getRegimens","getFastTrackMedications","getTreatmentState","isFastTrack","medicationOrdersAvailable","shouldPrescribeArvs","arvs","shouldPrescribeExtras","extras","extrasAvailable","concept_id","getRegimenStarterpack","regimenCode","patientWeight","regimen","contraindication","getObs","drugInduced","value_drug","count","yes","meds","pills","getAll","value_numeric","drug_order","getLastDrugsReceived","withDosages","dosage","getDrugDosages","am","noon","pm","frequency","findAndGroupDrugSideEffects","allSideEffects","calculatePillsPerDay","parseFloat","estimatePackSize","pillsPerDay","packSize","packs","roundedPacks","Math","round","calculateDosage","morningTabs","eveningTabs","dose","calculateEquivalentDosage","dateObj","getDrugPackSize","pack_size","getInstructions","toOrderObj","drugOrders","response","saveValueTextObs","reasonForSwitch","facilities","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id","getVillagesByName","page","getLandmarks","landmarks","landmark","code"],"mappings":"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","file":"js/chunk-91ecdd12.61ad95de.js","sourcesContent":["export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const PRESCRIPTION_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del', '0', '.'],\n    ['Unknown', '', ''],\n]\nexport const FLOAT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","import { DrugInterface } from \"@/interfaces/Drug\";\nimport { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { ObservationService } from \"@/services/observation_service\";\nimport dayjs from \"dayjs\";\nimport { isEmpty } from \"lodash\";\nimport { DrugOrderService } from \"@/services/drug_order_service\"\n\nexport class ConsultationService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 53, providerID);\n  }\n  getFamilyPlanningMethods() {\n    return [\n      \"ORAL CONTRACEPTIVE PILLS\",\n      \"DEPO-PROVERA\",\n      \"INTRAUTERINE CONTRACEPTION\",\n      \"CONTRACEPTIVE IMPLANT\",\n      \"MALE CONDOMS\",\n      \"FEMALE CONDOMS\",\n      \"TUBAL LIGATION\",\n      \"NONE\",\n    ];\n  }\n\n  async getTptTreatmentStatus() {\n    return AppEncounterService.getJson(`/patients/${this.patientID}/tpt_status`)\n  }\n\n  async patientHitMenopause() {\n    const obs = await ObservationService.getFirstObs(\n      this.patientID, 'Why does the woman not use birth control', \n    )\n    return obs && typeof obs?.value_text === 'string'\n      ? (obs.value_text.match(/menopause/i) ? true : false)\n      && AppEncounterService.obsInValidPeriod(obs)\n      : false\n  }\n\n  async hasTreatmentHistoryObs() {\n    const obs = await ObservationService.getFirstObs(this.patientID, 'Previous TB treatment history')\n    return obs && AppEncounterService.obsInValidPeriod(obs)\n  }\n\n  getDrugSideEffects() {\n    return AppEncounterService.getJson(`programs/${AppEncounterService.getProgramID()}/patients/${this.patientID}/medication_side_effects`, { \n      date: this.date \n    })\n  }\n\n  getClient() {\n    return AppEncounterService.getFirstValueCoded(this.patientID, 'Patient present');\n  }\n\n  async clientDueForCxCa() {\n    const req: any = await AppEncounterService.getJson(`last_cxca_screening_details`, {\n      id: this.patientID, date: this.date\n    })\n    if (!isEmpty(req)) {\n      const lastScreened = req['date_screened']\n      const duration = dayjs(this.date).diff(lastScreened, 'years')\n      return duration >= 1\n    }\n    return true\n  }\nasync clientHasHadAHysterectomy() {\n    const req: any = await AppEncounterService.getFirstValueCoded(this.patientID, 'Reason for NOT offering CxCa'); \n    if(req === \"Hysterectomy\") {\n      return true\n    }\n    const secondCheck: any = await AppEncounterService.getFirstValueText(this.patientID, 'Treatment'); \n    if(secondCheck === \"Hysterectomy\") {\n      return true\n    }\n    return false\n  }\n  async getTLObs() {\n    const isTL = ((obs: any) => obs && obs.value_coded === 'Tubal ligation' && AppEncounterService.obsInValidPeriod(obs))\n    const tlObs = await AppEncounterService.getFirstObs(this.patientID, 'Family planning')\n    if (isTL(tlObs)) {\n      return isTL(tlObs)\n    } else  {\n      const fpObs = await AppEncounterService.getFirstObs(this.patientID, 'Method of family planning')\n      return isTL(fpObs)\n    }\n  }\n  async getPreviousDrugs() {\n\n    const drugs = await AppEncounterService.getJson(\n      `patients/${this.patientID}/drugs_received`\n    )\n\n    if (!drugs) return\n\n    const uniqueDrugs = {} as any\n    drugs.forEach((drug: DrugInterface) => {\n      uniqueDrugs[drug.drug_inventory_id] = drug;\n    })\n    return uniqueDrugs;\n  }\n  familyPlanningMethods(label: string, values: any[]) {\n    const familyPlanningLogic: any = {\n      \"ORAL CONTRACEPTIVE PILLS\": {\n        \"DEPO-PROVERA\": 'N', \"INTRAUTERINE CONTRACEPTION\": 'N', 'CONTRACEPTIVE IMPLANT': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"DEPO-PROVERA\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"INTRAUTERINE CONTRACEPTION\": 'N', 'CONTRACEPTIVE IMPLANT': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"INTRAUTERINE CONTRACEPTION\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'CONTRACEPTIVE IMPLANT': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"CONTRACEPTIVE IMPLANT\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"MALE CONDOMS\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'Y', \"DEPO-PROVERA\": 'Y', 'INTRAUTERINE CONTRACEPTION': 'Y',\n        'CONTRACEPTIVE IMPLANT': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'Y', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'Y'\n      },\n      \"FEMALE CONDOMS\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'Y', \"DEPO-PROVERA\": 'Y', 'INTRAUTERINE CONTRACEPTION': 'Y',\n        'CONTRACEPTIVE IMPLANT': 'Y', 'MALE CONDOMS': 'Y', 'RYTHM METHOD': 'Y', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'Y'\n      },\n      \"RYTHM METHOD\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'CONTRACEPTIVE IMPLANT': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"TUBAL LIGATION\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'N', 'FEMALE CONDOMS': 'N', 'CONTRACEPTIVE IMPLANT': 'N', 'RYTHM METHOD': 'N',\n        'VASECTOMY': 'N',\n      },\n      \"VASECTOMY\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'Y', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'N', 'CONTRACEPTIVE IMPLANT': 'Y', 'RYTHM METHOD': 'N',\n        'TUBAL LIGATION': 'N'\n      },\n      \"NONE\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'N', 'FEMALE CONDOMS': 'N', 'CONTRACEPTIVE IMPLANT': 'N', 'RYTHM METHOD': 'N',\n        'TUBAL LIGATION': 'N'\n      }\n    }\n    const selected = familyPlanningLogic[label];\n    return values.map(data => {\n      if (selected[data.label] === \"N\") {\n        return {\n          label: data.label,\n          value: data.value,\n          isChecked: false,\n          disabled: true,\n        }\n      }\n      else {\n        return {\n          label: data.label,\n          value: data.value,\n          isChecked: data.isChecked,\n          disabled: false,\n        }\n      }\n\n    })\n  }\n\n}","import { Service } from \"@/services/service\";\n\nexport class StockService extends Service {\n    constructor() {\n        super()\n    }\n\n    static async fetchAvailableDrugStock(drugId: number) {\n        const stock = await this.getJson('pharmacy/items', { 'drug_id': drugId })\n        if (stock && stock.length > 0) {\n            return stock.reduce((accum: number, pharm: any) => accum + pharm.current_quantity, 0);\n        }\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { StockService } from \"./stock_service\";\nimport ART_PROP from '@/apps/ART/art_global_props';\n// ripped from old ART system\nexport const DRUG_PACK_SIZES: Record<string, any> = {\n    '11': [ 30 ],\n    '21': [ 25 ],\n    '22': [ 60 ],\n    '24': [ 30, 60, 90, 100 ],\n    '30': [ 90 ],\n    '39': [ 60 ],\n    '73': [ 120 ],\n    '74': [ 60 ],\n    '76': [ 1000 ],\n    '297': [ 30, 60, 90 ],\n    '576': [ 30, 60, 90 ],\n    '613': [ 60 ],\n    '731': [ 60 ],\n    '732': [ 60 ],\n    '733': [ 60 ],\n    '734': [ 30 ],\n    '735': [ 30 ],\n    '736': [ 60 ],\n    '738': [ 60 ],\n    '931': [ 12, 30, 60 ],\n    '932': [ 30 ],\n    '954': [ 60 ],\n    '963': [ 30, 60, 90 ],\n    '968': [ 60 ],\n    '969': [ 30 ],\n    '971': [ 30,60,90 ],\n    '976': [ 60 ],\n    '977': [ 30 ],\n    '982': [ 30 ],\n    '983': [ 30, 90 ],\n    '1039': [ 30,60,90 ],\n    '1043': [ 60 ],\n    '1044': [ 30],\n    '1056': [ 24 ],\n    '1216': [3, 6, 8, 12]\n}\n\nexport class DispensationService extends AppEncounterService {\n    drugHistory: Array<any>;\n    currentDrugOrder: Array<any>;\n    useDrugManagement: boolean; \n    constructor(patientID: number, providerID: number) {\n        super(patientID, 54, providerID)\n        this.drugHistory = []\n        this.currentDrugOrder = []\n        this.useDrugManagement = false\n    }\n\n    setIsDrugManagementEnabled(isEnabled: boolean) {\n        this.useDrugManagement = isEnabled\n    }\n\n    async loadDrugManagementEnabled() {\n        this.useDrugManagement = await ART_PROP.drugManagementEnabled()\n    }\n\n    getDrugHistory() {\n        return this.drugHistory\n    }\n\n    getCurrentOrder() {\n        return this.currentDrugOrder\n    }\n\n    buildDispensations(orderId: number, tabs: number, totalPacks: number) {\n        const dispensations = []\n        for(let i=0; i < totalPacks; i++) {\n            dispensations.push({\n                'drug_order_id': orderId,\n                date: this.date,\n                quantity: (tabs / totalPacks)\n            })\n        }\n        return dispensations\n    }\n\n    saveDispensations(dispensations: Array<any>) {\n        return AppEncounterService.postJson('/dispensations', { \n            dispensations, \n            'program_id': AppEncounterService.getProgramID()\n        })\n    }\n\n    async voidOrder(orderId: number) {\n        return AppEncounterService.void(`/dispensations/${orderId}`, {})\n    }\n\n    async loadDrugHistory() {\n        try {\n            const res = await DrugOrderService.getDrugOrderHistory(this.patientID)\n            if (res) this.drugHistory = res\n        } catch (e) {\n            console.warn(e)\n        }\n    }\n\n    async loadCurrentDrugOrder() {\n        const res = await DrugOrderService.getDrugOrders(this.patientID)\n        if (res) {\n            if (this.useDrugManagement) {\n                const drugs = res.map(async (d: any) => {\n                    d['available_stock'] = await StockService.fetchAvailableDrugStock(d.drug.drug_id)\n                    return d\n                })\n                this.currentDrugOrder = await Promise.all(drugs)\n                return\n            }\n            this.currentDrugOrder = res\n        }\n    }\n\n    getDrugPackSizes(drugId: number) {\n        if (drugId in DRUG_PACK_SIZES) {\n            return DRUG_PACK_SIZES[drugId]\n        }\n        return [30, 60, 90]\n    }\n\n    // Ripped from old ART system for backwards compatibility purposes\n    calcCompletePack(drug: any, units: number) {\n        //sorting in an ascending order by tabs\n        const drugOrderBarcodes = drug.barcodes.sort((a: any, b: any) => a.tabs - b.tabs); \n        if (drugOrderBarcodes.length == 0 || units == 0.0) return units;\n        for (const i in drugOrderBarcodes) {\n            const { tabs } = drugOrderBarcodes[i]\n            if (parseInt(tabs) >= units) return tabs;\n        }\n        const completePack = parseInt(drugOrderBarcodes[drugOrderBarcodes.length - 1].tabs)\n        return completePack\n    }\n}\n","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_title = _resolveComponent(\"ion-title\")!\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")!\n  const _component_ion_header = _resolveComponent(\"ion-header\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_ion_button = _resolveComponent(\"ion-button\")!\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createVNode(_component_ion_header, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_title, null, {\n              default: _withCtx(() => [\n                _createTextVNode(\"VL milestone has been reached\")\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_content, { style: { overflowY: 'hidden', background: 'grey' } }, {\n      default: _withCtx(() => [\n        _createElementVNode(\"p\", null, \"ART start date : \" + _toDisplayString(_ctx.artStartDate), 1),\n        _createElementVNode(\"p\", null, \"Months on ART: \" + _toDisplayString(_ctx.monthsOnART), 1),\n        _createElementVNode(\"p\", null, \"Last VL order date \" + _toDisplayString(_ctx.lastOrder), 1),\n        _createElementVNode(\"p\", null, \"Current regimen / start date: \" + _toDisplayString(_ctx.currentRegimen) + \" - \" + _toDisplayString(_ctx.regimenStartDate), 1)\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_footer, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_button, {\n              slot: \"end\",\n              color: \"success\",\n              size: \"large\",\n              onClick: _cache[0] || (_cache[0] = ($event: any) => (_ctx.closeModal('order')))\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Order VL\")\n              ]),\n              _: 1\n            }),\n            _createVNode(_component_ion_button, {\n              slot: \"end\",\n              size: \"large\",\n              onClick: _cache[1] || (_cache[1] = ($event: any) => (_ctx.closeModal('wait')))\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Wait till next milestone\")\n              ]),\n              _: 1\n            }),\n            _createVNode(_component_ion_button, {\n              slot: \"start\",\n              color: \"danger\",\n              size: \"large\",\n              onClick: _cache[2] || (_cache[2] = ($event: any) => (_ctx.closeModal('later')))\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Remind me later \")\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    })\n  ], 64))\n}","\nimport {\n  IonContent,\n  IonButton,\n  IonHeader,\n  IonTitle,\n  IonToolbar,\n  modalController,\n  IonFooter\n} from \"@ionic/vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport HisDate from \"@/utils/Date\";\n\nexport default defineComponent({\n  name: \"Modal\",\n  props: {\n    VLData: {\n      type: Object as any,\n      required: true\n    },\n    \n  },\n  async created() {\n    this.artStartDate = HisDate.toStandardHisDisplayFormat(this.VLData.earliest_start_date);\n    this.monthsOnART = this.VLData.period_on_art;\n    this.lastOrder = this.VLData.last_order_date ? HisDate.toStandardHisDisplayFormat(this.VLData.last_order_date) : 'N/A';\n    this.currentRegimen = this.VLData.current_regimen.name ? this.VLData.current_regimen.name : 'Other';\n    this.regimenStartDate = HisDate.toStandardHisDisplayFormat(this.VLData.current_regimen.date_started);\n  },\n  methods: {\n   async closeModal(val: string) {\n    await modalController.dismiss(val);\n   } \n  },\n  data() {\n    return {\n      content: \"Content\",\n      artStartDate: \"\",\n      monthsOnART: \"\",\n      lastOrder: \"\",\n      currentRegimen: \"\",\n      regimenStartDate: \"\" \n    };\n  },\n  components: {\n    IonHeader,\n    IonToolbar,\n    IonTitle,\n    IonContent,\n    IonFooter,\n    IonButton,\n  },\n});\n","import { render } from \"./VLReminderModal.vue?vue&type=template&id=10a26cd2&scoped=true&ts=true\"\nimport script from \"./VLReminderModal.vue?vue&type=script&lang=ts\"\nexport * from \"./VLReminderModal.vue?vue&type=script&lang=ts\"\n\nimport \"./VLReminderModal.vue?vue&type=style&index=0&id=10a26cd2&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-10a26cd2\"]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nexport class ARTLabService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 13, providerID);\n  }\n  async buildDefferedOrder(milestone: any) {\n    const concept = await AppEncounterService.getConceptID(\"HIV viral load\");\n    const coded = await AppEncounterService.getConceptID(\"Delayed milestones\");\n\n    return [\n      {\n        'concept_id': concept,\n        'value_text': \"Wait till next milestone\",\n        'value_coded': coded,\n        'value_numeric': milestone,\n      }]\n  }\n}","import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, createBlock as _createBlock, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-546674a2\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { style: {} }\nconst _hoisted_2 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"side-title\" }, \" Select reason \", -1))\nconst _hoisted_3 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Current Medication\", -1))\nconst _hoisted_4 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Previous Medication\", -1))\nconst _hoisted_5 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_title = _resolveComponent(\"ion-title\")!\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")!\n  const _component_ion_header = _resolveComponent(\"ion-header\")!\n  const _component_ion_label = _resolveComponent(\"ion-label\")!\n  const _component_ion_item = _resolveComponent(\"ion-item\")!\n  const _component_ion_list = _resolveComponent(\"ion-list\")!\n  const _component_ion_col = _resolveComponent(\"ion-col\")!\n  const _component_ion_radio = _resolveComponent(\"ion-radio\")!\n  const _component_ion_radio_group = _resolveComponent(\"ion-radio-group\")!\n  const _component_ion_row = _resolveComponent(\"ion-row\")!\n  const _component_ion_grid = _resolveComponent(\"ion-grid\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_ion_button = _resolveComponent(\"ion-button\")!\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createVNode(_component_ion_header, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_title, null, {\n              default: _withCtx(() => [\n                _createTextVNode(\"Side effects suspected causes\")\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_content, { style: { overflowY: 'hidden', background: 'grey' } }, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_grid, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_row, null, {\n              default: _withCtx(() => [\n                _createVNode(_component_ion_col, { size: \"4\" }, {\n                  default: _withCtx(() => [\n                    _createVNode(_component_ion_list, { style: {overflowY: 'auto', height:'78vh'} }, {\n                      default: _withCtx(() => [\n                        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.sides, (data, index) => {\n                          return (_openBlock(), _createBlock(_component_ion_item, {\n                            key: data,\n                            onClick: ($event: any) => (_ctx.selectSideEffect(index)),\n                            detail: true,\n                            style: _normalizeStyle(_ctx.activeIndex === index ? 'color: green': 'color: black')\n                          }, {\n                            default: _withCtx(() => [\n                              _createVNode(_component_ion_label, null, {\n                                default: _withCtx(() => [\n                                  _createTextVNode(_toDisplayString(data.label), 1)\n                                ]),\n                                _: 2\n                              }, 1024)\n                            ]),\n                            _: 2\n                          }, 1032, [\"onClick\", \"style\"]))\n                        }), 128))\n                      ]),\n                      _: 1\n                    })\n                  ]),\n                  _: 1\n                }),\n                _createVNode(_component_ion_col, { style: {overflowY: 'auto', height:'78vh'} }, {\n                  default: _withCtx(() => [\n                    _createElementVNode(\"div\", _hoisted_1, [\n                      _createVNode(_component_ion_list, null, {\n                        default: _withCtx(() => [\n                          (_ctx.activeIndex !== null)\n                            ? (_openBlock(), _createBlock(_component_ion_radio_group, {\n                                key: 0,\n                                modelValue: _ctx.sides[_ctx.activeIndex]['reason'],\n                                \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((_ctx.sides[_ctx.activeIndex]['reason']) = $event))\n                              }, {\n                                default: _withCtx(() => [\n                                  _hoisted_2,\n                                  _hoisted_3,\n                                  (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.drugs, (drug, i) => {\n                                    return (_openBlock(), _createBlock(_component_ion_item, { key: i }, {\n                                      default: _withCtx(() => [\n                                        _createVNode(_component_ion_label, null, {\n                                          default: _withCtx(() => [\n                                            _createTextVNode(_toDisplayString(drug.drug.name), 1)\n                                          ]),\n                                          _: 2\n                                        }, 1024),\n                                        _createVNode(_component_ion_radio, {\n                                          slot: \"start\",\n                                          value: drug.drug_inventory_id\n                                        }, null, 8, [\"value\"])\n                                      ]),\n                                      _: 2\n                                    }, 1024))\n                                  }), 128)),\n                                  _hoisted_4,\n                                  _createVNode(_component_ion_item, null, {\n                                    default: _withCtx(() => [\n                                      _createVNode(_component_ion_label, null, {\n                                        default: _withCtx(() => [\n                                          _createTextVNode(\"Other, not drug related\")\n                                        ]),\n                                        _: 1\n                                      }),\n                                      _createVNode(_component_ion_radio, {\n                                        slot: \"start\",\n                                        value: \"other\"\n                                      })\n                                    ]),\n                                    _: 1\n                                  }),\n                                  _createVNode(_component_ion_item, null, {\n                                    default: _withCtx(() => [\n                                      _createVNode(_component_ion_label, null, {\n                                        default: _withCtx(() => [\n                                          _createTextVNode(\"Drug side effect\")\n                                        ]),\n                                        _: 1\n                                      }),\n                                      _createVNode(_component_ion_radio, {\n                                        slot: \"start\",\n                                        value: \"drug\"\n                                      })\n                                    ]),\n                                    _: 1\n                                  })\n                                ]),\n                                _: 1\n                              }, 8, [\"modelValue\"]))\n                            : _createCommentVNode(\"\", true)\n                        ]),\n                        _: 1\n                      })\n                    ]),\n                    _hoisted_5\n                  ]),\n                  _: 1\n                })\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_footer, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_button, {\n              onClick: _ctx.closeModal,\n              slot: \"end\",\n              color: \"danger\"\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Close \")\n              ]),\n              _: 1\n            }, 8, [\"onClick\"]),\n            _createVNode(_component_ion_button, {\n              onClick: _ctx.postSideEffects,\n              slot: \"end\",\n              disabled: !_ctx.allSelected\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Save \")\n              ]),\n              _: 1\n            }, 8, [\"onClick\", \"disabled\"])\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    })\n  ], 64))\n}","\nimport {\n  IonContent,\n  IonButton,\n  IonHeader,\n  IonTitle,\n  IonToolbar,\n  IonLabel,\n  modalController,\n  IonList,\n  IonItem,\n  IonRadioGroup,\n  IonRow,\n} from \"@ionic/vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { ActivityInterface } from \"@/apps/interfaces/AppInterface\"\n\nexport default defineComponent({\n  name: \"Modal\",\n  props: {\n    sideEffects: {\n      type: Object as PropType<ActivityInterface[]>,\n      required: true\n    },\n    drugs: {\n      type: Array as any, \n      default: []\n    },\n  },\n  methods: {\n    closeModal() {\n      modalController.dismiss()\n    },\n    async postSideEffects() {\n      await modalController.dismiss(this.sides);\n    },\n    selectSideEffect(index: number) {\n      this.activeIndex = index;\n    },\n    \n  },\n  computed: {\n    allSelected(): any {\n      return this.sides.filter((side: any) => side['reason']).length === this.sides.length\n    }\n  },\n  mounted() {\n    this.sides = this.sideEffects;\n  },\n  data() {\n    return {\n      content: \"Content\",\n      extendedLabsEnabled: false as boolean,\n      appActivities: [] as Array<ActivityInterface>,\n      sides: [] as any,\n      specimens: [],\n      reasons: ['Routine', 'Targeted', 'Confirmatory', 'Stat', 'Repeat / Missing'],\n      activeIndex: null as any\n    };\n  },\n  components: {\n    IonButton,\n    IonContent,\n    IonHeader,\n    IonTitle,\n    IonToolbar,\n    IonLabel,\n    IonList,\n    IonItem,\n    IonRadioGroup,\n    IonRow,\n  },\n});\n","import { render } from \"./SideEffectsModal.vue?vue&type=template&id=546674a2&scoped=true&ts=true\"\nimport script from \"./SideEffectsModal.vue?vue&type=script&lang=ts\"\nexport * from \"./SideEffectsModal.vue?vue&type=script&lang=ts\"\n\nimport \"./SideEffectsModal.vue?vue&type=style&index=0&id=546674a2&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-546674a2\"]])\n\nexport default __exports__","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { FooterBtnEvent, Option } from \"@/components/Forms/FieldInterface\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { alertConfirmation, infoAlert, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport HisDate from \"@/utils/Date\";\nimport { findIndex, isEmpty, find } from \"lodash\";\nimport { ConsultationService } from \"@/apps/ART/services/consultation_service\";\nimport { UserService } from \"@/services/user_service\";\nimport { OrderService } from \"@/services/order_service\";\nimport { ConceptService } from \"@/services/concept_service\";\nimport AdherenceMixinVue from \"./AdherenceMixin.vue\";\nimport { modalController } from \"@ionic/vue\";\nimport VLReminderModal from \"@/components/DataViews/VLReminderModal.vue\";\nimport { ProgramService } from \"@/services/program_service\";\nimport { ARTLabService } from \"../../services/lab_service\";\nimport { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport SideEffectsModalVue from \"@/components/DataViews/SideEffectsModal.vue\";\nimport ART_PROP from \"@/apps/ART/art_global_props\";\nimport { generateDateFields, EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport { PatientTypeService } from \"../../services/patient_type_service\";\nimport { PrescriptionService } from \"../../services/prescription_service\";\nimport { DispensationService } from \"../../services/dispensation_service\";\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\nimport { AppEncounterService } from \"@/services/app_encounter_service\";\nimport Store from \"@/composables/ApiStore\"\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { RegimenService } from \"@/services/regimen_service\";\n\nexport default defineComponent({\n  mixins: [AdherenceMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    fields: [] as any,\n    currentWeight: -1 as any,\n    weightTrail: [] as any,\n    customRegimens: [] as any,\n    labOrders: [] as any,\n    weightLossPercentageNum: 0 as number,\n    lostTenPercentBodyWeight: false as boolean,\n    CxCaEnabled: false as boolean,\n    CxCaStartAge: -1 as number,\n    CxCaMaxAge: -1 as number,\n    DueForCxCa: false as boolean,\n    currentlyPregnant: false as boolean,\n    currentlyBreastfeeding: false,\n    patientHitMenopause: false as boolean,\n    hasPregnancyObsToday: false as boolean,\n    autoSelect3HP: false as boolean,\n    labOrderFieldContext: {} as any,\n    consultation: {} as any,\n    prescription: {} as any,\n    dispensation: {} as any,\n    completed3HP: false as boolean,\n    hasTbHistoryObs: false,\n    allergicToSulphur: false as boolean | null,\n    TBSuspected: false,\n    presentedTBSymptoms: false,\n    askAdherence: false as boolean,\n    lastDrugsReceived: [] as any,\n    sideEffectsHistory: {} as any,\n    onPermanentFPMethods: false,\n    reasonForDecliningTPTObs: {} as any,\n    malawiSideEffectReasonObs: [] as any,\n    otherSideEffectReasonObs: [] as any,\n    wasTransferredIn: false as boolean,\n    dateStartedArt: '' as string,\n    clientHadAHysterectomy: false as any,\n    isNoneClientPatient: false as boolean,\n    tptStatus: {} as Record<string, any>,\n    customDrugs: [] as any\n  }),\n  watch: {\n    ready: {\n      handler(value: boolean) {\n        if (value) {\n          this.consultation = new ConsultationService(this.patientID, this.providerID)\n          this.prescription = new PrescriptionService(this.patientID, this.providerID)\n          this.dispensation = new DispensationService(this.patientID, this.providerID)\n          this.fields = this.getFields();\n        }\n      },\n      immediate: true\n    },\n  },\n  methods: {\n    async onFinish(f: any, computedData: any) {\n      const encounter = await this.consultation.createEncounter();  \n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n\n      const computedObs = await this.resolveObs(computedData, 'consultation')\n\n      const secondaryObs = (await Promise.all([\n        ...this.malawiSideEffectReasonObs,\n        ...this.otherSideEffectReasonObs,\n        this.reasonForDecliningTPTObs\n      ])).filter((d) => !isEmpty(d))\n\n      const savedObs = await this.consultation.saveObservationList([\n        ...computedObs, ...secondaryObs\n      ])\n\n      if (!isEmpty(this.drugObs) && !this.isNoneClientPatient) await this.saveAdherence();\n\n      if (!savedObs) return toastWarning(\"Unable to save patient observations\");\n\n      toastSuccess(\"Observations and encounter created!\");\n\n      if (f.refer_to_clinician && f.refer_to_clinician.value ==='Yes') {\n        this.gotoPatientDashboard()\n        return\n      }\n      this.nextTask();\n    },\n    async getTptDrugs(formData: any){\n      const drugFilters: string[] = []\n      const tptHistory = formData.routine_tb_therapy.value\n      if (isEmpty(this.customDrugs)) {\n        this.customDrugs = await RegimenService.getCustomIngridients()\n      }\n      if(tptHistory.match(/ipt/i)) {\n        drugFilters.push(\"INH or H (Isoniazid 300mg tablet)\")\n      } else if(tptHistory.includes(\"3HP (RFP + INH)\")){\n        drugFilters.push('INH or H (Isoniazid 300mg tablet)')\n        drugFilters.push('Rifapentine (150mg)')\n      } else if(tptHistory.includes(\"INH 300 / RFP 300 (3HP)\")){\n        drugFilters.push(\"INH 300 / RFP 300 (3HP)\")\n      }\n      return !isEmpty(drugFilters) \n        ? this.customDrugs.filter((drug: any) => drugFilters.includes(drug.name))\n          .map((drug: any) => ({\n            label: drug.name,\n            value: '',\n            other: drug\n          }))\n        : []\n    },\n    async getTransferInStatus() {\n      const receivedArvs = await ConsultationService.getFirstValueCoded(\n        this.patientID, 'Ever received ART'\n      )\n      const transferLetterObs = await ConsultationService.getFirstObs(\n        this.patientID, 'Has transfer letter'\n      )\n      const date = transferLetterObs ? HisDate.toStandardHisFormat(transferLetterObs.obs_datetime) : ''\n      return receivedArvs \n        && receivedArvs.match(/yes/i) \n        && transferLetterObs \n        && `${transferLetterObs.value_coded}`.match(/yes/i)\n        && date === this.consultation.getDate()\n    },\n    async getDateStartedArt() {\n      const dateStarted = await ConsultationService.getFirstValueDatetime(this.patientID, 'Date ART started')\n      return dateStarted ? HisDate.toStandardHisFormat(dateStarted) : ''\n    },\n    async checkIfWeightLossIsControlled(val: any) {\n      if (this.lostTenPercentBodyWeight\n        && `${val.label}`.match(/malnutrition/i)\n        && `${val.value}`.match(/no/i)) {\n        const action = await infoActionSheet(\n          'Recommendation',\n          `Patient's weight has dropped by ${this.weightLossPercentageNum}% , is this controlled weight loss??`,\n          'Please verify',\n          [\n            { name: 'Confirm weight loss', slot: 'start', color: 'success'},\n            { name: 'Confirm controlled', slot: 'end', color: 'primary'}\n          ]\n        )\n        val.value = action === 'Confirm weight loss' ? 'Yes' : 'No'\n      }\n    },\n    async checkVLReminder() {\n      const vals = await ProgramService.getPatientVLInfo(this.patientID);\n      if (vals.eligibile === true) {\n        const modal = await modalController.create({\n          component: VLReminderModal,\n          backdropDismiss: false,\n          cssClass: \"large-modal\",\n          componentProps: { VLData: vals },\n        });\n        modal.present();\n        const { data } = await modal.onDidDismiss();\n        switch (data) {\n          case \"order\":\n            await this.labOrderFieldContext.launchOrderSelection();\n            break;\n          case \"wait\":\n            await this.waitForVL();\n            break;\n          case \"later\":\n            break;\n          default:\n            break;\n        }\n      }\n    },\n    async waitForVL(milestone: any = null) {\n      const orderService = new ARTLabService(this.patientID, this.providerID);\n      const encounter = await orderService.createEncounter();\n      const observations = await orderService.buildDefferedOrder(milestone);\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      await orderService.saveObservationList(observations);\n    },\n    canScreenCxCa() {\n      const age = this.patient.getAge()\n      return this.patient.isFemale()\n        && this.DueForCxCa\n        && this.CxCaEnabled \n        && age >= this.CxCaStartAge \n        && age <= this.CxCaMaxAge\n        && !this.clientHadAHysterectomy\n    },\n    pregnancyEligible() {\n      return this.patient.isChildBearing() && !this.onPermanentFPMethods\n    },\n    showCurrentContraceptionMethods(formData: any) {\n      return (this.pregnancyEligible()\n        && !this.patientHitMenopause \n        && !this.isPregnant(formData))\n        && !this.isANCclient()\n    },\n    showNewContraceptionMethods(formData: any) {\n      return (\n        this.pregnancyEligible() &&\n        !this.patientHitMenopause &&\n        !this.isPregnant(formData) &&\n        !this.isOnTubalLigation(formData)\n        && !this.isANCclient()\n      )\n    },\n    isPregnant(formData: any) {\n      if (formData.pregnant_breastfeeding) {\n        return this.inArray(formData.pregnant_breastfeeding, \n          p => p.label === 'Pregnant' && p.value === 'Yes'\n        )\n      }\n      return this.currentlyPregnant\n    },\n    isBreastFeeding(formData: any) {\n      if (formData.pregnant_breastfeeding) {\n        return this.inArray(formData.pregnant_breastfeeding, \n          p => p.label === 'Breastfeeding' && p.value === 'Yes'\n        )\n      }\n      return this.currentlyBreastfeeding\n    },\n    isOnTubalLigation(formData: any) {\n      return this.inArray(formData.current_fp_methods, d => d.value === \"TUBAL LIGATION\")\n    },\n    async disableFPMethods(listData: Array<Option>, value: Option) {\n      if (value.isChecked && value.label === \"NONE\") {\n        return listData.map((i) => {\n          if (i.label != \"NONE\") {\n            i.isChecked = false;\n            i.disabled = false;\n          }\n          return i;\n        });\n      } else if (value.label != \"NONE\" && value.isChecked) {\n        if (value.label.match(/condom/gi)) infoAlert(\"Combine with other modern methods of family planning\") \n        const noneIndex = findIndex(listData, { label: \"NONE\" });\n        listData[noneIndex].isChecked = false;\n        const vals = this.consultation.familyPlanningMethods(\n          value.label,\n          listData\n        );\n        const currentIndex = findIndex(vals, { label: value.label });\n        vals[currentIndex].isChecked = true;\n        return vals;\n      } else {\n        return listData.map((i) => {\n          i.disabled = false;\n          return i;\n        });\n      }\n    },\n    disablePrescriptions(listData: Array<Option>, value: Option) {\n      if (value.isChecked && value.label === \"NONE OF THE ABOVE\") {\n        return listData.map((i) => {\n          if (i.label != \"NONE OF THE ABOVE\") i.isChecked = false;\n          return i;\n        });\n      } else if (value.label != \"NONE OF THE ABOVE\" && value.isChecked) {\n        const noneIndex = findIndex(listData, { label: \"NONE OF THE ABOVE\" });\n        listData[noneIndex].isChecked = false;\n      }\n      return listData;\n    },\n    buildMedicationOrders(options: Option[]) {\n      if (this.inArray(options, o => o.label === \"NONE OF THE ABOVE\")) {\n        return this.consultation.buildValueCoded('Prescribe drugs', 'No')\n      }\n      const priscribed = this.consultation.buildValueCoded('Prescribe drugs', 'Yes')\n      const medications = options.map( o => this.consultation.buildValueCoded(\n        'Medication orders', o.label\n      ))\n      return [priscribed, ...medications]\n    },\n    declinedFPM(formData: any) {\n      return this.inArray(formData.fp_methods, d => d.value === \"NONE\")\n        && this.inArray(formData.current_fp_methods, d => d.value === \"NONE\")\n    },\n    riskOfUnplannedPregnancy(formData: any) {\n      return formData.reason_for_no_fpm.value === \"At risk of unplanned pregnancy\"\n    },\n    showOtherSideEffects(formData: any) {\n      return this.inArray(formData.side_effects, d => d.label === \"Other\" && d.value === \"Yes\")\n    },\n    hasTBSymptoms(formData: any) {\n      this.presentedTBSymptoms = this.inArray(formData.tb_side_effects, d => d.value === \"Yes\")\n      return this.presentedTBSymptoms\n    },\n    isTBSuspect(data: any){\n      this.TBSuspected = data.value.toString().match(/Yes|TB Suspected/i) ? true : false\n      return this.TBSuspected\n    },\n    isAllergicToSulphur (data: any) {\n      this.allergicToSulphur = data.value.match(/unknown/i) ? null : data.value.match(/yes/i) ? true : false\n      return this.allergicToSulphur\n    },\n    async buildSideEffectObs(data: Option[], attr: 'malawiSideEffectReasonObs' | 'otherSideEffectReasonObs'): Promise<boolean> {\n      const sideEffectReasons  = await this.getSideEffectsReasons(data)\n\n      this[attr] = [] //Clear this incase side effects no longer exist\n  \n      if (sideEffectReasons === undefined) return false\n\n      if (sideEffectReasons != -1) {\n        const drugInducedConcept = ConceptService.getCachedConceptID('Drug induced', true)\n        const isOtherReason = (reason: string) => `${reason}`.match(/other|drug/i) ? true : false\n        this[attr] = sideEffectReasons.map((r: any) => ({\n          'concept_id': drugInducedConcept,\n          'value_coded': ConceptService.getCachedConceptID(r.label, true),\n          'value_text': isOtherReason(r.reason) ? 'Past medication history' : null,\n          'value_drug': !isOtherReason(r.reason) ? r.reason : null //Reason is drug ID number if caused by specific drug\n        }))\n      }\n      return true\n    },\n    async getSideEffectsReasons(sideEffects: Option[]) {\n      const allYes = sideEffects.filter(s => !(`${s.label}`.match(/other/i)) && s.value==='Yes')\n      if (allYes.length > 0) {\n        const modal = await modalController.create({\n          component: SideEffectsModalVue,\n          backdropDismiss: false,\n          cssClass: \"large-modal\",\n          componentProps: { sideEffects: allYes, drugs: this.lastDrugsReceived },\n        });\n        modal.present();\n        const { data } = await modal.onDidDismiss();\n        return data;\n      }\n      return -1\n    },\n    getFPMethods(exclusionList: string[] = [], preChecked: Array<Option>) {\n      const methods = this.consultation.getFamilyPlanningMethods();\n      const filtered = methods.filter(\n        (data: string) => !exclusionList.includes(data)\n      )\n      return filtered.map((method: any) => ({\n        label: method,\n        value: method,\n        isChecked: preChecked.map((i) => i.label).includes(method),\n      }))\n    },\n    getOptions(options: string[], preValues: Array<Option>) {\n      return options.map((data: any) => {\n        const preValue = find(preValues, { label: data });\n        return {\n          label: data,\n          value: preValue ? preValue.value : \"\",\n          other: {\n            values: this.yesNoOptions(),\n          },\n        };\n      });\n    },\n    getContraindications(preValues: Array<Option>) {\n      const contraIndications = ConceptService.getConceptsByCategory(\n        \"contraindication\", true\n      ).map((data) => data.name);\n      return this.getOptions([...contraIndications, \"Other\"], preValues);\n    },\n    getOtherContraindications(preValues: Array<Option>) {\n      const contraIndications = ConceptService.getConceptsByCategory(\n        \"side_effect\", true\n      ).map((data) => data.name);\n      /**\n       * HACK ALERT!!!\n       * Dont want to show Other (Specify) as a last element\n       */\n      const lastElement = contraIndications.pop()\n      return this.getOptions([...contraIndications, \"Other (Specify)\", `${lastElement}`], preValues)\n    },\n    getTBSymptoms(preValues: Array<Option>) {\n      const contraIndications = ConceptService.getConceptsByCategory(\n        \"tb_symptom\", true\n      ).map((data) => data.name)\n      return this.getOptions([...contraIndications], preValues);\n    },\n    getReasonsForNoCxcaOptions() {\n      return ConceptService.getConceptsByCategory(\"reason_for_no_cxca\")\n        .map((c: any) => ({\n          label: c.name,\n          value: c.name,\n          other: {\n            c\n          }\n        }))\n    },\n    runAppendOptionParams(options: Option[], prechecked: Option[]) {\n      const checkedOptions = prechecked.filter(o => o.isChecked).map(o => o.label)\n      return options.map(o => {\n        if (typeof o?.other?.appendOptionParams === 'function') {\n          const appendedOptions = o?.other?.appendOptionParams()\n          if (typeof appendedOptions === 'object')  {\n            const option: Option = {\n              label: o.label,\n              value: o.value,\n              other: o.other\n            }\n            if (appendedOptions.isChecked) {\n              option.isChecked = appendedOptions.isChecked\n              delete appendedOptions.isChecked\n            } else {\n              option.isChecked = checkedOptions.includes(o.label)\n            }\n            return { ...option, ...appendedOptions}\n          }\n        }\n        return o\n      })\n    },\n    /**\n     * Checks formdata and previous observation state if a patient completed 3HP\n     */\n    didCompleted3HP(formData: any) {\n      return !this.completed3HP \n        ? formData.routine_tb_therapy \n        && formData.routine_tb_therapy.value.match(/complete/i) ? true : false\n        : true\n    },\n    patientOnTpt(formData: any) {\n      if (formData.routine_tb_therapy != null) {\n        return /Currently/i.test(formData.routine_tb_therapy.value)\n      }\n      return this.tptStatus.tpt !== null && !this.completed3HP\n    },\n    /**\n     * Checks if 3HP can be auto selected based on FormData and \n     * if  it is enabled in global preferences\n     */\n    tptAutoSelectionMode(formData: any) {\n      return this.autoSelect3HP && !this.didCompleted3HP(formData)\n    },\n    /**\n     * Provides validations for TPT selections and value updates\n     */\n    async on3HPValueUpdate(listData: Option[], curOption: Option, formData: any) {\n      const is3HPorTPT = (i: Option) => i.label.match(/IPT|3HP/i) ? true : false\n\n      //Checks if IPT and 3HP are both selected and returns a boolean\n      const ipt3HPConflict: boolean = (() => {\n        const checkedDrugs = listData.reduce(\n        (checkedDrugs: string[], item: Option) => {\n          if (is3HPorTPT(item) \n            && !(item.label in checkedDrugs) \n            && item.isChecked) {\n            checkedDrugs.push(item.label)\n          }\n          return checkedDrugs\n        }, [])\n        return checkedDrugs.includes('IPT') \n          && (checkedDrugs.includes('3HP (RFP + INH)') \n          || checkedDrugs.includes('INH 300 / RFP 300 (3HP)'))\n      })()\n\n      // check if no tpt is present\n      const noTpTPresent = is3HPorTPT(curOption) \n        && listData.filter(i => is3HPorTPT(i)).map(i => !i.isChecked)\n          .every(Boolean)\n  \n      if (noTpTPresent && this.patientOnTpt(formData)) {\n        const modal = await optionsActionSheet(\n          'Reasons for declining TPT', \n          '',\n          [\n            'Patient declined',\n            'Side-effects (previous or current)',\n            'Stock-out',\n            'Starting TB treatment',\n            'Other'\n          ],\n          [\n            { name : 'Done', slot: 'start', role: 'action'}\n          ]\n        )\n        this.reasonForDecliningTPTObs = this.consultation.buildValueText(\n          'Other reason for not seeking services', modal.selection\n        )\n      } else {\n        this.reasonForDecliningTPTObs = {}\n      }\n\n      if (ipt3HPConflict) {\n        const action = await infoActionSheet(\n          \"IPT / 3HP conflict\",\n          \"IPT and 3HP can NOT be prescribed together\",\n          \"Please pick either one\",\n          [\n            { name: \"Prescribe 3HP\", slot: \"start\", color: \"primary\" },\n            { name: \"Prescribe IPT\", slot: \"end\", color: \"primary\" },\n          ]\n        )\n        return listData.map(i => {\n          if (is3HPorTPT(i)) {\n            i.isChecked =\n              action === 'Prescribe IPT' && i.label === 'IPT' || \n              action ==='Prescribe 3HP' && i.label === 'INH 300 / RFP 300 (3HP)'\n          }\n          return i\n        })\n      }\n      return listData.map(i => {\n        // By default, toggle between variants of 3HP. All of them cant be selected at once\n        if (curOption.label === '3HP (RFP + INH)' \n          && i.label === 'INH 300 / RFP 300 (3HP)'\n          && curOption.isChecked) {\n          i.isChecked = false\n        } else if (curOption.label === 'INH 300 / RFP 300 (3HP)' \n          && i.label === '3HP (RFP + INH)'\n          && curOption.isChecked ) {\n            i.isChecked = false\n        }\n        return i\n      })\n    },\n    medicationOrderOptions(formData: any, prechecked=[] as Option[]): Option[] {\n      const completedTpt = this.didCompleted3HP(formData)\n      const everTakenTpt = this.tptStatus.tpt !== null\n      const autoSelect3HP = this.tptAutoSelectionMode(formData)\n      const isCurrentlyBreastfeeding = this.isBreastFeeding(formData)\n\n      const disableOption = (text: string) => ({\n        disabled: true,\n        isChecked: false,\n        description: {\n          color: \"danger\",\n          show: \"always\",\n          text\n        }\n      })\n\n      return this.runAppendOptionParams([\n        this.toOption('ARVs', {\n          appendOptionParams: () => ({ \n            isChecked: autoSelect3HP && !this.TBSuspected\n          })\n        }),\n        this.toOption('CPT', {\n          appendOptionParams: () => {\n            if (autoSelect3HP && !this.TBSuspected \n              && !this.allergicToSulphur) {\n              return { isChecked : true }\n            }\n            return this.allergicToSulphur \n              ? disableOption('Allergic to CPT')\n              : { disabled: false }\n          }\n        }),\n        this.toOption('3HP (RFP + INH)', {\n          appendOptionParams: () => {\n            if (completedTpt) return disableOption(`Completed TPT treatment`)\n            if (this.tptStatus.tb_treatment) return disableOption(`Completed/on TB treatment`)\n            if (this.TBSuspected) return disableOption('TB Suspect')\n            if (this.currentlyPregnant) return disableOption('Pregnant patient')\n            if (isCurrentlyBreastfeeding) return disableOption('Patient is breast feeding')\n            if (this.currentWeight < 20) return disableOption('Weight below regulation')\n            if (everTakenTpt && this.tptStatus.tpt !== '3HP (RFP + INH)' && !this.tptStatus.completed) {\n              return disableOption(`On ${this.tptStatus.tpt} treatment`)\n            }\n            if (this.tptStatus.tpt === '3HP (RFP + INH)' && !this.tptStatus.completed) return { isChecked: true }\n          }\n        }),\n        this.toOption('INH 300 / RFP 300 (3HP)', {\n          appendOptionParams: () => { \n            if (completedTpt) return disableOption(`Completed TPT treatment`)\n            if (this.tptStatus.tb_treatment) return disableOption(`Completed/on TB treatment`)\n            if (this.TBSuspected) return disableOption('TB Suspect')\n            if (this.currentlyPregnant) return disableOption('Pregnant patient')\n            if (isCurrentlyBreastfeeding) return disableOption('Patient is breast feeding')\n            if (this.currentWeight < 30) return disableOption('Weight below regulation') \n            if (everTakenTpt && this.tptStatus.tpt !== 'INH 300 / RFP 300 (3HP)' && !this.tptStatus.completed) {\n              return disableOption(`On ${this.tptStatus.tpt} treatment`)\n            }\n            if (this.tptStatus.tpt === 'INH 300 / RFP 300 (3HP)' && !this.tptStatus.completed) return { isChecked: true }\n            return { isChecked: autoSelect3HP }\n          }\n        }),\n        this.toOption('IPT', {\n          appendOptionParams: () => {\n            if (completedTpt) return disableOption(`Completed TPT treatment`)\n            if (this.tptStatus.tb_treatment) return disableOption(`Completed/on TB treatment`)\n            if (this.TBSuspected) return disableOption('TB Suspect')\n            if (this.currentlyPregnant) return disableOption('Pregnant patient')\n            if (isCurrentlyBreastfeeding) return disableOption('Patient is breast feeding')\n            if (everTakenTpt && this.tptStatus.tpt !== 'IPT' && !this.tptStatus.completed) {\n              return disableOption(`On ${this.tptStatus.tpt} treatment`)\n            }\n            if (this.tptStatus.tpt === 'IPT' && !this.tptStatus.completed) return { isChecked: true }\n          }\n        }),\n        this.toOption('NONE OF THE ABOVE')\n      ], prechecked)\n    },\n    async getVlLabData() {\n      return OrderService.formatLabs((await Store.get('GET_LAB_ORDERS_WITH_GIVEN_RESULT_STATUS', { patientID: this.patientID })));\n    },\n    isANCclient() {\n      return ProgramService.getSuspendedProgram() === 'ANC'\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"other_patient_prescription\",\n          proxyID: \"prescription\",\n          helpText: \"Medication to prescribe during this visit\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          init: async () => {\n            const isGuardian = (await this.consultation.getClient()) === \"No\";\n            if (isGuardian) {\n              this.isNoneClientPatient = true\n            } else {\n              this.isNoneClientPatient = (await PatientTypeService.isDrugRefillPatient(this.patientID))\n                ? true : false\n            }\n            if (this.isNoneClientPatient) {\n              this.currentWeight = Number((await this.patient.getRecentWeight()))\n              this.autoSelect3HP = await Store.get('ART_AUTO_3HP_SELECTION')\n              this.tptStatus = await this.consultation.getTptTreatmentStatus()\n              this.completed3HP = this.tptStatus.tpt !== null && this.tptStatus.completed\n            }\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          computedValue: (v: Option[]) => ({ \n            tag: 'consultation',\n            obs: this.buildMedicationOrders(v)\n          }),\n          onValueUpdate: (listData: Array<Option>, value: Option, f: any) => {          \n            const list = this.disablePrescriptions(listData, value);\n            return this.on3HPValueUpdate(list, value, f)\n          },\n          options: (formData: any, c: Array<Option>, cd: any, l: any) => {\n            return !isEmpty(l) ? l : this.medicationOrderOptions(formData)\n          },\n          condition: () => this.isNoneClientPatient,\n          exitsForm: () => true\n        },\n        /**\n        * DRUG TRANSFER IN INITIATION \n        */\n        ...generateDateFields({\n          id: 'date_last_received_arvs',\n          helpText: 'Last ARV Dispensation',\n          required: true,\n          init: async () => {\n            this.wasTransferredIn = (await this.getTransferInStatus()) || false\n            this.dateStartedArt = await this.getDateStartedArt()\n            return true\n          },\n          condition: () => this.wasTransferredIn,\n          minDate: () => this.dateStartedArt,\n          maxDate: () => this.consultation.getDate(),\n          computeValue: (date: string) => {\n            this.prescription.setDate(date)\n            return {\n              tag: 'consultation',\n              date,\n              obs: this.consultation.buildValueDate(\n                'Date drug received from previous facility', date\n              )\n            }\n          },\n          estimation: {\n            allowUnknown: false\n          }\n        }, this.consultation.getDate()),\n        {\n          id: 'previous_arvs_received',\n          helpText: 'Last ARV drugs dispensed',\n          type: FieldType.TT_MULTIPLE_SELECT,\n          computedValue: (v: Option[]) => v.map(d => d.other),\n          validation: (v: Option[]) => Validation.required(v),\n          options: async () => {\n            if (!isEmpty(this.customRegimens)) return this.customRegimens\n            const p = new PrescriptionService(this.patientID, this.providerID)\n            this.customRegimens = (await p.getARVs())\n              .map((drug: any ) => ({\n                label: drug.name,\n                value: drug.drug_id,\n                other: { ...drug }\n              })) as Option[]\n            return this.customRegimens\n          },\n          config: {\n            showKeyboard: true\n          },\n          condition: () => this.wasTransferredIn\n        },\n        {\n          id: 'drug_interval',\n          helpText: 'Duration period for last received ARVs',\n          type: FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n          condition: () => this.wasTransferredIn,\n          validation: (val: Option) => Validation.required(val),\n          computedValue: (d: Option) => d.other.nextAppointment,\n          options: () => {\n            const intervals = [\n              { label: '2 weeks', value: 14 },\n              { label: '1 month', value: 28 },\n              { label: '2 months', value: 56 },\n              { label: '3 months', value: 84 },\n              { label: '4 months', value: 112 },\n              { label: '5 months', value: 140 },\n              { label: '6 months', value: 168 },\n              { label: '7 months', value: 196 },\n              { label: '8 months', value: 224 },\n              { label: '9 months', value: 252 },\n              { label: '10 months', value: 280 },\n              { label: '11 months', value: 308 },                        \n              { label: '12 months', value: 336 }\n            ]\n            return intervals.map(({label, value}: Option) => {\n              this.prescription.setNextVisitInterval(value)\n              const nextAppointment = this.prescription.calculateDateFromInterval()\n              return {\n                label,\n                value,\n                other: {\n                  label: 'Medication run-out date:',\n                  value: HisDate.toStandardHisDisplayFormat(nextAppointment),\n                  nextAppointment,\n                  other: {\n                    label: \"\",\n                    value: []\n                  }\n                }\n              }\n            })\n          }\n        },\n        {\n          id: 'arv_quantities',\n          helpText: 'Amount of drugs dispensed (From last ART Facility)',\n          type: FieldType.TT_DRUG_TRANSFER_IN,\n          validation: (v: Option[]) => this.validateSeries([\n            () => Validation.required(v),\n            () => v.map((i: Option) => i.value === '' || i?.other?.pillsBrought === '')\n              .some(Boolean) ? ['Some Drugs are missing values'] : null\n          ]),\n          computedValue: (v: Option[], f: any, c: any) => ({\n            tag: 'consultation',\n            obs:  v.map(async (d: any) => {\n              const drugID: number = d?.other?.drug?.drug_id || 0\n              return { \n                ...(await this.consultation.buildObs(\n                  'Drug received from previous facility', {\n                    'value_drug': drugID,\n                    'value_datetime': c?.drug_interval || null,\n                    'value_numeric': d?.value || 0\n                    }\n                )),\n                child: [\n                  await this.consultation.buildObs(\n                    'Number of tablets brought to clinic', {\n                      'value_drug': drugID,\n                      'value_numeric': d?.other?.pillsBrought || -1,\n                      'value_datetime': c?.date_last_received_arvs?.date || null\n                    }\n                  )\n                ]\n              }\n            })\n          }),\n          options: (_: any, c: any, listData: Option) => {\n            return c.previous_arvs_received\n              .map((d: any) => {\n                const drugName = d['alternative_drug_name'] || d['drug_name'] || d['name']\n                const prevValue = find(listData, { label: drugName })\n                let qty = ''\n                let rmndr = ''\n                if (prevValue) {\n                  qty = prevValue?.value\n                  rmndr = prevValue?.other?.pillsBrought\n                }\n                return {\n                  label: drugName,\n                  value: qty,\n                  other: {\n                    drug: d,\n                    pillsBrought: rmndr\n                  }\n                }\n              })\n          },\n          condition: () => this.wasTransferredIn\n        },\n        /**\n        * END OF DRUG TRANSFER IN\n        */\n        {\n          id: \"patient_lab_orders\",\n          helpText: \"Lab orders\",\n          type: FieldType.TT_LAB_ORDERS,\n          init: async () => {\n            this.labOrders = await this.getVlLabData()\n            return true\n          },\n          unload: async () => {\n            await this.checkVLReminder()\n            // Check if released results were given to the patient\n            const noGivenResults = this.labOrders.filter((r: any) => r.result_given === 'No')\n            if (noGivenResults.length && (await alertConfirmation('Result(s) Given to Client?'))) {\n              const enc = new AppEncounterService(this.patientID, -1, this.providerID)\n              // flatten array and save observations for results given\n              const obs = noGivenResults.reduce((all: any, result: any) => [\n                ...all, ...(result.resultIds.map(async (resultID: number) =>{\n                  enc.encounterID = result.encounter_id\n                  return enc.saveObs((await enc.buildObs(\"Result Given to Client\", {\n                      \"value_coded\": \"Yes\",\n                      \"obs_group_id\": resultID\n                    })))\n                })) \n              ], [])\n              await Promise.all(obs)\n            }\n            // refresh data\n            this.labOrders = await this.getVlLabData()\n          },\n          onload: (fieldContext: any) =>  this.labOrderFieldContext = fieldContext,\n          options: () => {\n            return [\n              {\n                label: \"Lab orders\",\n                value: \"order trail\",\n                other: {\n                  values: this.labOrders\n                }\n              }\n            ]\n          },\n          config: {\n            printOrder: (orderID: number) => {\n              return new PatientPrintoutService(this.patientID).printLabOrderLbl(orderID)\n            },\n            hiddenFooterBtns: [\"Clear\"],\n            footerBtns: [\n              {\n                name: \"Order\",\n                size: \"large\",\n                slot: \"end\",\n                color: \"primary\",\n                visible: true,\n                onClick: async () => {\n                  if (!isEmpty(this.labOrderFieldContext)) {\n                    await this.labOrderFieldContext.launchOrderSelection();\n                  }\n                }\n              }\n            ]\n          },\n        },\n        {\n          id: \"pregnant_breastfeeding\",\n          helpText: `Patient Pregnant or breastfeeding?`,\n          init: async () => {\n            if (this.patient.isFemale()) {\n              if (this.patient.isChildBearing()) {\n                this.hasPregnancyObsToday = await this.patient.hasPregnancyObsToday()\n                this.currentlyPregnant = await this.patient.isPregnant()\n                this.currentlyBreastfeeding = await this.patient.isBreastfeeding();\n              }\n              this.onPermanentFPMethods = await this.consultation.getTLObs();\n            }\n            return true\n          },\n          condition: () => !this.hasPregnancyObsToday && this.pregnancyEligible(),\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data),\n            ]),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(d => this.consultation.buildValueCoded(d.other.concept, d.value)).concat(\n              this.isANCclient() ? [this.consultation.buildValueCoded('Is patient pregnant', 'Yes')] : []\n            ),\n          }),\n          options: (formData: any) => {\n            const options = []\n            // Because ANC clients are always Pregnant!\n            if (!this.isANCclient()) options.push({\n              label: \"Pregnant\",\n              value: \"\",\n              other: {\n                values: this.yesNoOptions(),\n                concept: \"Is patient pregnant\",\n              }\n            })\n\n            options.push({\n              label: \"Breastfeeding\",\n              value: \"\",\n              other: {\n                values: this.yesNoOptions(),\n                concept: \"Is patient breast feeding\",\n              }\n            })\n\n            return formData.pregnant_breastfeeding || options\n          }\n        },\n        {\n          id: \"patient_weight_chart\",\n          helpText: \"Patient weight chart\",\n          type: FieldType.TT_WEIGHT_CHART,\n          init: async () => {\n            this.weightTrail = await this.patient.getWeightHistory()\n            this.weightLossPercentageNum = this.patient.getWeightLossPercentageFromTrail(this.weightTrail)\n            this.lostTenPercentBodyWeight = this.weightLossPercentageNum >= 10\n            return true\n          },\n          options: async () => {\n            const bmi = await this.patient.getBMI();\n            const values = this.weightTrail;\n            return [\n              {\n                label: \"Weight for patient\",\n                value: \"Weight trail\",\n                other: {\n                  bmi,\n                  values: values.map((d: any) => ({\n                    x: HisDate.toStandardHisDisplayFormat(d.date),\n                    y: d.weight,\n                  })),\n                  age: this.patient.getAge(),\n                },\n              },\n            ];\n          },\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n        {\n          id: \"has_fp_methods\",\n          helpText: \"\",\n          type: FieldType.TT_TEXT_BANNER,\n          condition: () => this.onPermanentFPMethods,\n          options: () => this.mapStrToOptions([\n            \"Patient is on Tubal ligation method\"\n          ])\n        },\n        {\n          id: \"current_fp_methods\",\n          helpText: \"What method are you currently on?\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          init: async () => {\n            if (this.patient.isFemale()) {\n              this.patientHitMenopause = await this.consultation.patientHitMenopause()\n            }\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          onValueUpdate: (listData: Array<Option>, value: Option) => {\n            return this.disableFPMethods(listData, value);\n          },\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(d => this.consultation.buildValueCoded('Family planning method', d.value))\n          }),\n          condition: (formData: any) => this.showCurrentContraceptionMethods(formData),\n          options: (_: any, checked: Array<Option>) =>this.getFPMethods([], checked),\n        },\n        {\n          id: \"fp_methods\",\n          helpText: \"What method are you providing today?\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          condition: (formData: any) => this.showNewContraceptionMethods(formData),\n          validation: (data: any) => Validation.required(data),\n          onValueUpdate: (listData: Array<Option>, value: Option) => {\n            return this.disableFPMethods(listData, value);\n          },\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map((d: Option) => this.consultation.buildValueCoded('Family planning, action to take', d.value))\n          }),\n          options: (_: any, checked: Array<Option>) => this.getFPMethods([], checked)\n        },\n        {\n          id: \"reason_for_no_fpm\",\n          helpText: \"Main reason for not using family planning methods\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => this.declinedFPM(formData),\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueText(\"Why does the woman not use birth control\", v.value) \n          }),\n          options: () => this.mapStrToOptions([\n            \"Not Sexually active\",\n            \"Patient want to get pregnant\",\n            \"Not needed for medical reasons\",\n            \"At risk of unplanned pregnancy\",\n            \"Menopause\"\n          ])\n        },\n        {\n          id: \"specific_reason_for_no_fpm\",\n          helpText: \"Specific reason for not using family planning methods\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueText(\"Reason for not using contraceptives\", v.value)\n          }),\n          condition: (formData: any) => this.riskOfUnplannedPregnancy(formData),\n          options: () => this.mapStrToOptions([\n            \"Following wishes of spouse\",\n            \"Religious reasons\",\n            \"Afraid of side effects\",\n            \"Never though about it\",\n            \"Indifferent (does not mind getting pregnant)\"\n          ])\n        },\n        {\n          id: \"offer_contraceptives\",\n          helpText: \"Offer contraceptives\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => this.riskOfUnplannedPregnancy(formData),\n          computedValue: (v: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Family planning, action to take\", v.value)\n          }),\n          options: () => [\n            { label: \"Accepted\", value: \"Yes\" },\n            { label: \"Declined\", value: \"No\" },\n            { label: \"Discuss with spouse\", value: \"Discuss with spouse\" },\n          ]\n        },\n        {\n          id: \"offered_intervention\",\n          helpText: \"Offered intervention\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => formData.offer_contraceptives.value === \"Accepted\",\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(d => this.consultation.buildValueCoded(d.label, d.value))\n          }),\n          options: (_: any, checked: Array<Option>) => this.getFPMethods([\"NONE\"], checked),\n        },\n        {\n          id: \"offer_cxca\",\n          helpText: \"Refer client for CxCa screening\",\n          type: FieldType.TT_SELECT,\n          init: async () => {\n            if (this.patient.isFemale()) {\n              this.CxCaEnabled = await ART_PROP.cervicalCancerScreeningEnabled()\n              if (this.CxCaEnabled) {\n                const { start, end } = await ART_PROP.cervicalCancerScreeningAgeBounds()\n                this.CxCaMaxAge = end\n                this.CxCaStartAge = start\n                this.DueForCxCa = await this.consultation.clientDueForCxCa()\n                this.clientHadAHysterectomy =  await this.consultation.clientHasHadAHysterectomy();\n              }\n            }\n            return true\n          },\n          validation: (v: Option) => Validation.required(v),\n          condition: (f: any) => this.canScreenCxCa() && !this.isPregnant(f),\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded('Offer CxCa', v.value)\n          }),\n          options: () => this.yesNoOptions()\n        },\n        {\n          id: \"reason_for_no_cxca\",\n          helpText: \"Reason for NOT offering CxCa\",\n          type: FieldType.TT_SELECT,\n          validation: (v: Option) => Validation.required(v),\n          condition: (f: any) => f.offer_cxca.value === 'No',\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Reason for NOT offering CxCa\", v.value)\n          }),\n          options: () => this.getReasonsForNoCxcaOptions(),\n        },\n        ...generateDateFields({\n          id: 'previous_cxca_test_date',\n          helpText: 'Previous CxCa test',\n          required: true,\n          minDate: () => this.patient.getBirthdate(),\n          maxDate: () => ConsultationService.getSessionDate(),\n          condition: (f: any) => f.reason_for_no_cxca.value === 'Not due for screening',\n          computeValue: (date: string, isEstimate: boolean) => {\n            if (isEstimate) {\n              return {\n                tag: 'consultation',\n                obs: this.consultation.buildValueDateEstimated('CxCa test date', date)\n              }\n            } else {\n              return {\n                tag: 'consultation',\n                obs: this.consultation.buildValueDate('CxCa test date', date) \n              }\n            }\n          },\n          estimation: {\n            allowUnknown: true,\n            estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n          }\n        }),\n        {\n          id: 'previous_side_effects',\n          helpText: 'Side effects / Contraindications history',\n          type: FieldType.TT_DATA_TABLE,\n          init: async () => {\n            this.sideEffectsHistory = await this.consultation.getDrugSideEffects()\n            return true\n          },\n          config: {\n            columns: () => [\n              [\n                table.thTxt('Date'),\n                table.thTxt('Condition'),\n                table.thTxt('Drug induced'),\n                table.thTxt('Drug')\n              ]\n            ],\n            rows: () => {\n              return Object.keys(this.sideEffectsHistory)\n              .map((k: string) =>\n                Object.values(this.sideEffectsHistory[k])\n                .filter((d: any) => !isEmpty(d.name))\n                .map((d: any) => [\n                  table.tdDate(k),\n                  table.td(d.name),\n                  table.td(d.drug_induced ? 'Yes' : 'No'),\n                  table.td(d.drug)\n              ]))\n              .reduce((accum, cur) => accum.concat(cur), [])\n            }\n          }\n        },\n        {\n          id: \"side_effects\",\n          helpText: \"Contraindications / Side effects (select either 'Yes' or 'No')\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          init: async () => {\n            this.lastDrugsReceived = await this.consultation.getPreviousDrugs();\n            return true\n          },\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data),\n            ]),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(async (d) => ({\n              ...(await this.consultation.buildValueCoded('Malawi ART side effects', d.label)),\n              child: [await this.consultation.buildValueCoded(d.label, d.value)]\n            }))\n          }),\n          beforeNext: (data: Option[]) => this.buildSideEffectObs(data, 'malawiSideEffectReasonObs'),\n          options: (_: any, checked: Array<Option>) => this.getContraindications(checked)\n        },\n        {\n          id: \"other_side_effects\",\n          helpText: \"Other Contraindications / Side effects (select either 'Yes' or 'No')\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          onValue: async (val: any) => {\n            await this.checkIfWeightLossIsControlled(val)\n            return true\n          },\n          condition: (formData: any) => this.showOtherSideEffects(formData),\n          onConditionFalse: () => this.otherSideEffectReasonObs = [],\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data),\n            ]),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.filter(d => d.label != 'Other (Specify)')\n              .map(async (d) => ({\n              ...(await this.consultation.buildValueCoded('Other side effect', d.label)),\n              child: [await this.consultation.buildValueCoded(d.label, d.value)]\n            }))\n          }),\n          beforeNext: (data: Option[]) => this.buildSideEffectObs(data, 'otherSideEffectReasonObs'),\n          options: (_: any, checked: Array<Option>) => this.getOtherContraindications(checked),\n        },\n        {\n          id: 'other_side_effect_specify',\n          helpText: \"Other Contraindications / Side effects (specify)\",\n          type: FieldType.TT_NOTE,\n          computedValue: async (v: Option) => ({\n            tag: 'consultation',\n            obs: {\n              ...(await this.consultation.buildValueCoded('Other side effect', 'Other (Specify)')),\n              child: [await this.consultation.buildValueText('Other (Specify)', v.value )]\n            }\n          }),\n          condition: (f: any) => this.inArray(\n            f.other_side_effects, d => d.label === \"Other (Specify)\" && d.value === 'Yes'\n          ),\n          validation: (v: Option) => Validation.required(v)\n        },\n        {\n          id: \"on_tb_treatment\",\n          helpText: \"On TB Treatment?\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          computedValue: (data: any) => ({ \n            tag: 'consultation', \n            obs: [ this.consultation.buildValueCoded(\"TB treatment\", data.value)].concat(this.isTBSuspect(data) \n              ? [this.consultation.buildValueCoded(\"TB Status\", \"Confirmed TB on treatment\")] \n              : []) \n          }),\n          options: () => this.yesNoOptions()\n        },\n        {\n          id: \"tb_side_effects\",\n          helpText: \"TB Associated symptoms\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          onValue: async (val: any) => {\n            await this.checkIfWeightLossIsControlled(val)\n            return true\n          },\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data)\n          ]), \n          condition: (formData: any) => formData.on_tb_treatment.value.match(/no/i),\n          options: (_: any, checked: Array<Option>) => this.getTBSymptoms(checked),\n          computedValue: (vals: Option[], formData: any) => ({\n            tag: 'consultation',\n            obs: vals.map(async (data: Option) => ({\n              ...(await this.consultation.buildValueCoded(\"Routine TB Screening\", data.label)),\n              child: [await this.consultation.buildValueCoded(data.label, data.value)]\n            })).concat(this.hasTBSymptoms(formData) ? [] : [this.consultation.buildValueCoded(\"TB Status\", \"TB NOT suspected\")])\n          })\n        },\n        {\n          id: \"tb_status\",\n          helpText: \"TB Status\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => this.hasTBSymptoms(formData),\n          onConditionFalse: () => this.TBSuspected = false,\n          defaultValue: () => 'TB Suspected',\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"TB Status\", data.value)\n          }),\n          beforeNext: async (data: Option) => {\n            if (this.isTBSuspect(data)) {\n              const action = await infoActionSheet(\n                \"Lab Order\",\n                \"The patient is a TB suspect. Do you want to take lab orders?\",\n                \"\",\n                [\n                  { name: \"Order now\", slot: \"start\", color: \"success\" },\n                  { name: \"NOT now\", slot: \"end\", color: \"danger\" },\n                ]\n              )\n              if (action === 'Order now') this.labOrderFieldContext.launchOrderSelection([\n                'TB Microscopic Exam', \n                'GeneXpert', \n                'Culture & Sensitivity',\n                'TB Tests'\n              ])\n            }\n            return true\n          },\n          options: () => this.mapStrToOptions([\n            \"TB NOT suspected\",\n            \"TB Suspected\",\n            \"Confirmed TB Not on treatment\",\n          ])\n        },\n        {\n          id: \"routine_tb_therapy\",\n          helpText: \"TB preventive therapy (TPT) history\",\n          type: FieldType.TT_SELECT,\n          init: async () => {\n            this.hasTbHistoryObs = await this.consultation.hasTreatmentHistoryObs()\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          condition: () => !this.hasTbHistoryObs,\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueText(\"Previous TB treatment history\", data.value)\n          }),\n          options: (f: any) => {\n            let options: string[] = []\n            if(/no/i.test(f.on_tb_treatment.value)) {\n              options = [\n                \"Currently on IPT\",\n                \"Currently on 3HP (RFP + INH)\",\n                \"Currently on INH 300 / RFP 300 (3HP)\"\n              ]\n            }\n            options = options.concat([\n              \"Complete course of 3HP in the past (3 months RFP+INH)\",\n              \"Complete course of IPT in the past (min. 6 months of INH)\",\n              \"Aborted course of 3HP (RFP + INH) in the past\",\n              \"Aborted course of INH 300 / RFP 300 (3HP) in the past\",\n              \"Aborted course of IPT in the past\",\n              \"Never taken IPT or 3HP\"\n            ])\n            return this.mapStrToOptions(options)\n          }\n        },\n        ...generateDateFields({\n          id: 'date_started_tpt',\n          helpText: 'Started TPT Treatment',\n          required: true,\n          minDate: () => this.patient.getBirthdate(),\n          maxDate: () => ConsultationService.getSessionDate(),\n          condition: (f: any) => f.routine_tb_therapy.value.match(/currently/i),\n          computeValue: (date: string) => date,\n          estimation: {\n            allowUnknown: true,\n            estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n          }\n        }),\n        {\n          id: \"tpt_drugs_received\",\n          helpText: \"TPT Drugs Received\",\n          required: true,\n          condition: (f: any) => f.routine_tb_therapy.value.match(/currently/i),\n          type: FieldType.TT_ADHERENCE_INPUT,\n          options: (f: any) => this.getTptDrugs(f),\n          computedValue: (drugs: Option[], f: any, c: any) => ({\n            tag: 'consultation',\n            obs:  drugs.map(async (drug: any) => this.consultation.buildObs(\n              'TPT Drugs Received', \n              {\n                'value_drug': drug?.other?.drug_id || 0,\n                'value_datetime': c?.date_started_tpt || null,\n                'value_numeric': drug?.value || 0\n              }\n            ))\n          }),\n          config: {\n            titles: {\n              label: 'Drug name',\n              value: 'Tablets received'\n            }\n          }\n        },\n        {\n          id: 'tpt_tranfer_from',\n          helpText: 'Facility client is transferring in from',\n          type: FieldType.TT_SELECT,\n          computedValue: ({label}: Option) => ({\n            tag:'consultation',\n            obs: this.consultation.buildValueText(\n              'Location TPT last received', label\n            )\n          }),\n          validation: (val: any) => Validation.required(val),\n          condition: (f: any) => f.routine_tb_therapy.value.match(/currently/i),\n          options: (_: any, filter='') => getFacilities(filter),\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true\n          }\n        },\n        {\n          id: \"allergic_to_sulphur\",\n          helpText: \"Allergic to Cotrimoxazole\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Allergic to sulphur\", data.value)\n          }),\n          beforeNext: (data: any) => {\n            this.isAllergicToSulphur(data);\n            console.log(this.allergicToSulphur)\n            return true;\n          },\n          options: () => this.yesNoUnknownOptions()\n        },\n        ...this.getAdherenceFields(true),\n        {\n          id: \"refer_to_clinician\",\n          helpText: \"Refer to clinician\",\n          type: FieldType.TT_SELECT,\n          condition: () => UserService.isNurse(),\n          validation: (data: any) => Validation.required(data),\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Refer to clinician\", data.value)\n          }),\n          options: () => this.yesNoOptions(),\n        },\n        {\n          id: \"medication_to_prescribe\",\n          proxyID: \"prescription\",\n          helpText: \"Medication to prescribe during this visit\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          init: async () => {\n            if (!this.isNoneClientPatient) {\n              this.currentWeight = Number((await this.patient.getRecentWeight()))\n              this.autoSelect3HP = await Store.get('ART_AUTO_3HP_SELECTION')\n              this.tptStatus = await this.consultation.getTptTreatmentStatus()\n              this.completed3HP = this.tptStatus.tpt !== null && this.tptStatus.completed\n            }\n            return true\n          },\n          condition: (f: any) => !f.refer_to_clinician || `${f.refer_to_clinician.value}`.match(/no/i),\n          validation: (data: Option) => Validation.required(data),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation', \n            obs: this.buildMedicationOrders(v)\n          }),\n          onValueUpdate: (listData: Array<Option>, value: Option, formData: any) => {\n            const list =  this.disablePrescriptions(listData, value)\n            return this.on3HPValueUpdate(list, value, formData)\n          },\n          options: (formData: any, c: Array<Option>, cd: any, currentOptions: any) => {\n            return this.medicationOrderOptions(formData, currentOptions)\n          },\n          config: {\n            footerBtns: [\n              {\n                name: \"Update allergic to CPT\",\n                onClickComponentEvents: {\n                  refreshOptions: (btnEvent: FooterBtnEvent, options: Option[], formData: any): Option[] => {\n                    this.allergicToSulphur = btnEvent.btnOutput === 'Allergic'\n                    return this.medicationOrderOptions(formData, options)\n                  }\n                },\n                onClick: () => {\n                  return infoActionSheet(\n                    \"Allergic to Cotrimoxazole update\",\n                    `Is the patient allergic to cotrimoxazole.`,\n                    \"\",\n                    [\n                      { name: \"Allergic\", slot: \"start\", color: \"success\" },\n                      { name: \"NOT Allergic\", slot: \"end\" },\n                    ]\n                  )\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./Consultation.vue?vue&type=template&id=19f2cf63&ts=true\"\nimport script from \"./Consultation.vue?vue&type=script&lang=ts\"\nexport * from \"./Consultation.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Service } from \"./service\";\n\nexport class RegimenService extends Service {\n    constructor() {\n        super()\n    } \n\n    static getAllArvRegimens() {\n        return this.getJson(`programs/${this.getProgramID()}/all_arv_regimens`)\n    }\n\n    static getRegimens(patientId: number) {\n        return this.getJson(`programs/${this.getProgramID()}/regimens`, {'patient_id': patientId})\n    }\n\n    static getRegimensByWeight(weight: number, onTbTreatment = false) {\n        return this.getJson(`programs/${this.getProgramID()}/regimens`, {\n            weight,\n            'tb_dosage': onTbTreatment,\n        })\n    }\n\n    static getCustomIngridients() {\n        return this.getJson(`programs/${this.getProgramID()}/custom_regimen_ingredients`)\n    }\n\n    static getCurrentRegimen(patientId: number, date=this.getSessionDate()) {\n        return this.getJson(`programs/${this.getProgramID()}/${patientId}`, {date})   \n    }\n\n    static getRegimenExtras(name: string, weight: number) {\n        return this.getJson(`programs/${this.getProgramID()}/regimen_extras`, {name, weight})\n    }\n}","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./VLReminderModal.vue?vue&type=style&index=0&id=10a26cd2&scoped=true&lang=css\"","import { DrugInterface } from \"@/interfaces/Drug\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { Observation } from \"@/interfaces/observation\";\nimport HisDate from \"@/utils/Date\"\nimport { RegimenService } from \"@/services/regimen_service\";\nimport { isEmpty } from \"lodash\"\nimport { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport enum AdverseEffectsCategories {\n    CONTRAINDICATION = \"contraindication\",\n    SIDE_EFFECT = \"side_effect\"\n}\n\nexport class PrescriptionService extends AppEncounterService {\n    nextVisitInterval: number;\n    fastTrack: boolean;\n    regimenExtras: Array<Record<string, any>>;\n    hangingPills: Array<Record<string, any>>;\n    fastTrackMedications: Array<Record<string, any>>;\n    medicationOrders: Array<number>;\n    treatmentState: string;\n    contraindications: Record<string, any>;\n    sideEffects: Record<string, any>;\n    tptPrescriptionCount: number;\n    lastSideEffectDate: string;\n\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 25, providerID) //TODO: Use encounter type reference name\n        this.nextVisitInterval = 0\n        this.fastTrack = false\n        this.regimenExtras = []\n        this.fastTrackMedications = []\n        this.hangingPills = []\n        this.medicationOrders = []\n        this.treatmentState = ''\n        this.contraindications = {}\n        this.sideEffects = {}\n        this.tptPrescriptionCount = 0\n        this.lastSideEffectDate = ''\n    }\n\n    setNextVisitInterval(nextVisitInterval: number) {\n        this.nextVisitInterval = nextVisitInterval\n    }\n\n    getHangingPills() {\n        return this.hangingPills\n    }\n\n    getMedicationOrders() {\n        return this.medicationOrders.map((i: number) => {\n            return AppEncounterService.getCachedConceptName(i)\n        })\n    }\n\n    getTptPrescriptionCount() {\n        return this.tptPrescriptionCount\n    }\n\n    getLastSideEffectDate() {\n        return this.lastSideEffectDate\n    }\n\n    getContraindications() { return this.contraindications }\n\n    getSideEffects() { return this.sideEffects }\n\n    getRegimenExtras() { return this.regimenExtras }\n\n    getPatientRegimens() { return RegimenService.getRegimens(this.patientID) }\n\n    getARVs() {\n        return RegimenService.getJson('arv_drugs')\n    }\n\n    getCustomIngridients() { return RegimenService.getCustomIngridients() }\n\n    getFastTrackMedications() { return this.fastTrackMedications }\n\n    getTreatmentState() { return this.treatmentState }\n\n    isFastTrack() { return this.fastTrack }\n\n    medicationOrdersAvailable() { return !isEmpty(this.medicationOrders) }\n\n    shouldPrescribeArvs() { \n        const arvs = AppEncounterService.getCachedConceptID(\"Antiretroviral drugs\")\n        return this.medicationOrders.includes(arvs)\n    }\n\n    shouldPrescribeExtras() {\n        const extras = AppEncounterService.getConceptsByCategory('art_extra_medication_order')\n        const extrasAvailable = extras.map((i: any) => this.medicationOrders.includes(i.concept_id))\n        return extrasAvailable.some(Boolean)\n    }\n\n    getRegimenStarterpack(regimenCode: number, patientWeight: number) {\n        const params = { weight: patientWeight, regimen: regimenCode }\n\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimen_starter_packs`,\n            params\n        )\n    }\n\n    async getLvpDrugsByType(type: string, regimen: number) {\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimens/${regimen}`,\n            {\n                'patient_id': this.patientID,\n                'lpv_drug_type': type\n            }\n        )\n    }\n\n    async loadContraindications() {\n        const contraindication = await AppEncounterService.getConceptID('Contraindications')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': contraindication, 'person_id': this.patientID \n        })\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.contraindications[date]) this.contraindications[date] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.contraindications[date].push(concept)\n        })\n    }\n\n    async loadDrugInduced() {\n        const drugInduced = await AppEncounterService.getConceptID('Drug induced')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': drugInduced, 'person_id': this.patientID \n        })\n\n        if (!obs) return\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.lastSideEffectDate) this.lastSideEffectDate = date\n\n            if (!o.value_drug || !o.value_coded) return\n\n            if (!this.sideEffects[date]) this.sideEffects[date] = {}\n\n            if (!this.sideEffects[date][o.value_drug]) this.sideEffects[date][o.value_drug] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.sideEffects[date][o.value_drug].push(concept)\n        })\n    }\n\n    async loadTptPrescriptionCount() {\n        const res = await AppEncounterService.getJson(\n            `tpt_prescription_count`, {\n                'patient_id': this.patientID,\n                'date': this.date\n            }\n        )\n\n        if (res) {\n            const count = res.count + 1\n            this.tptPrescriptionCount = count > 3 ? 3 : count\n        } \n    }\n\n    async loadFastTrackStatus() {\n        const isFastTrack = await AppEncounterService.getFirstValueCoded(this.patientID, 'Fast track')\n        const yes = await AppEncounterService.getConceptID('yes')\n\n        if (isFastTrack) this.fastTrack = isFastTrack === yes\n    }\n    \n    async loadRegimenExtras(date=this.date) {\n        const meds = await RegimenService.getJson(\n            `programs/${RegimenService.getProgramID()}/patients/${this.patientID}/dosages`,\n            {date}\n        )\n        if (meds) this.regimenExtras = Object.values(meds)\n    }\n\n    async loadMedicationOrders() {\n        const medicationOrders = await AppEncounterService.getConceptID(\"Medication orders\")\n        const orders = await AppEncounterService.getObs({\n            'concept_id': medicationOrders,\n            'date': this.date,\n            'person_id': this.patientID,\n            'page_size': 5\n        })\n        this.medicationOrders = orders.map((i: Observation) => i.value_coded)\n    }\n\n    async loadHangingPills() {\n        const pills = await AppEncounterService.getAll(this.patientID, 'Pills brought')\n        if (pills) {\n            this.hangingPills = pills.filter((o: any) => o.value_numeric >= 1 && o.order)\n                                    .map((o: any) => o.order.drug_order.drug_inventory_id)\n        }\n    }\n\n    async loadFastTrackMedications() {\n        const drugs = await DrugOrderService.getLastDrugsReceived(this.patientID)\n        const withDosages = drugs.map(async(data: any) => {\n            const { drug } = data\n            const dosage = await DrugOrderService.getDrugDosages(this.patientID, drug.drug_id)\n            return {\n                'drug_id': drug.drug_id,\n                'drug_name': drug.name,\n                'units': drug.units,\n                'am': dosage.am,\n                'noon': dosage.noon,\n                'pm': dosage.pm,\n                'frequency': data.frequency\n            }\n        })\n        this.fastTrackMedications = await Promise.all(withDosages)\n    }\n\n    async loadTreatmentState() {\n        const params = { date: this.date }\n\n        const req = await AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/patients/${this.patientID}/status`,\n            params\n        )\n\n        if (req) this.treatmentState = req['status']\n    }\n\n    findAndGroupDrugSideEffects(drugs: Array<number>) {\n        const allSideEffects: any = {}\n\n        for (const date in this.sideEffects) {\n            const drugInduced = this.sideEffects[date]\n\n            for(const drug in drugInduced) {\n                if (!drugs.includes(parseInt(drug))) continue\n\n                if (!allSideEffects[date]) allSideEffects[date] = []\n\n                allSideEffects[date] = [\n                    ...allSideEffects[date], ...drugInduced[drug]\n                ]\n            }\n        }\n        return allSideEffects\n    }\n\n    calculatePillsPerDay(am: number, noon: number, pm: number) {\n        return parseFloat(am.toString()) + noon + pm\n    }\n\n    estimatePackSize(pillsPerDay: number, packSize=0) {\n        const packs = (pillsPerDay * this.nextVisitInterval) / packSize\n        \n        let roundedPacks = Math.round(packs)\n\n        if (roundedPacks <= 0) roundedPacks += 1\n\n        return roundedPacks\n    }\n\n    calculateDosage(morningTabs: number, eveningTabs: number): number {\n        let dose = 0\n        if (eveningTabs === 0) dose = morningTabs\n\n        if (morningTabs == 0) dose = eveningTabs\n\n        if (morningTabs > 0 && eveningTabs  > 0) {\n            dose = (morningTabs + eveningTabs) / 2\n        }\n        return dose\n    }\n    \n    calculateEquivalentDosage(morningTabs: number, eveningTabs: number): number {\n        return morningTabs + eveningTabs\n    }\n\n    calculateDateFromInterval() {\n        const dateObj = new Date(this.date)\n        dateObj.setDate(dateObj.getDate() + this.nextVisitInterval)\n        return HisDate.toStandardHisFormat(dateObj)\n    }\n\n    getDrugPackSize(drug: any) {\n        if (drug.pack_size) return drug.pack_size\n        try{\n            return drug.barcodes[0].tabs\n        }catch(e) {\n            return 30\n        }\n    }\n\n    getInstructions(drugName: string, morningTabs: number, eveningTabs: number, units: string): string {\n        return `${drugName} :- Morning: ${morningTabs} ${units}, Evening: ${eveningTabs} ${units}`\n    }\n\n    toOrderObj(id: number, name: string, units: string, am=0, pm=0, frequency=''): DrugInterface {\n        return {\n            'drug_inventory_id': id,\n            'equivalent_daily_dose': this.calculateEquivalentDosage(am, pm),\n            'start_date': this.date,\n            'auto_expire_date': this.calculateDateFromInterval(), \n            'units': units,\n            'instructions': this.getInstructions(name, am, pm, units),\n            'dose': this.calculateDosage(am, pm),\n            'frequency': frequency\n        }\n    }\n\n    async getReasonForRegimenSwitch() {\n        const reason = await AppEncounterService.getFirstValueText(this.patientID, 'Reason for ARV switch')\n        return reason ? reason : 'N/A'\n    }\n\n    async createDrugOrder(drugOrders: Array<DrugInterface>) {\n        return DrugOrderService.create({\n            'encounter_id': this.encounterID,\n            'drug_orders': drugOrders\n        })\n    }\n\n    async createHangingPillsObs(response: string) {\n        return this.saveValueTextObs('appointment type', response)\n    }\n\n    async createRegimenSwitchObs(reasonForSwitch: string): Promise<Observation> {\n        return this.saveValueTextObs('Reason for ARV switch', reasonForSwitch)\n    }\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport async function getVillagesByName(name='a', page=1): Promise<Option[]> {\n    const villages = await LocationService.getVillagesByName(name, page)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport function getLandmarks(): Option[] {\n    const landmarks = [\n        'Catholic Church',\n        'CCAP',\n        'Seventh Day',\n        'Mosque',\n        'Primary School',\n        'Borehole',\n        'Secondary School',\n        'College',\n        'Market',\n        'Football Ground',\n        'Other'\n    ]\n\n    return landmarks.map(landmark =>({\n        label: landmark,\n        value: landmark,\n        other: {\n            code: landmark\n        }\n    }))\n}\n","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./SideEffectsModal.vue?vue&type=style&index=0&id=546674a2&scoped=true&lang=css\""],"sourceRoot":""}