{"version":3,"sources":["webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/components/Forms/BaseFormElements.ts","webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue?3299","webpack:///./src/apps/CxCa/services/CxCaAssessmentService.ts","webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaTest.vue?ba10","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts","webpack:///./src/components/FormElements lazy ^\\.\\/.*\\.vue$ namespace object"],"names":["DEFAULT_KEYPAD","PRESCRIPTION_KEYPAD","FLOAT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","NUMBER_ARROW_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","providers","facts","sessionDate","apiDate","encounterName","isBdeMode","birthDate","outcome","outcomeStartDate","ready","watch","handler","route","params","patient_id","this","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","FlowState","SET_PROVIDER","selection","username","split","provider","find","person_id","CONTINUE","CHANGE_SESSION_DATE","$router","push","EXIT","CHANGE_PATIENT_OUTCOME","GO_TO_PATIENT_DASHBOARD","gotoPatientDashboard","findings","matchToGuidelines","ENCOUNTER_GUIDELINES","index","_finding$actions","_finding$actions3","finding","actions","alert","_finding$actions2","status","_finding$actions4","flowState","value","program","startDate","e","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","isBDE","getBirthdate","$route","name","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","isEmpty","person","names","_p$person2","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","d","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","conditions","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","dformat","HisDate","toStandardHisDisplayFormat","priority","async","action","infoActionSheet","slot","color","modal","optionsActionSheet","role","EstimationFieldType","getYearField","id","showUnknown","primaryFunctions","helpText","appearInSummary","FieldType","TT_TEXT","config","customKeyboard","getMonthField","TT_SELECT","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","getDefaultDate","form","field","datePart","defaultValue","date","year","month","day","validateMinMax","minDate","min","Date","maxDate","max","generateDateFields","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","estimation","allowUnknown","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","f","includes","buildHelpTextDate","part","parts","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","proxyID","unload","v","validation","c","StandardValidations","match","isNaN","minYear","getYear","summaryMapValue","summaryLabel","_","ref","computedValue","val","computeValue","beforeNext","keyboardActions","valueEstimateCondition","estimateType","estimationFieldType","every","ageEstimateRegex","dayjs","Service","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","MONTH_ESTIMATE_FIELD","isCondition","ignored","prop","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","COMPONENT_REFS","TT_ASYNC_MULTI_SELECT","TT_LINKAGE_CODE","TT_MULTI_SELECT_GRID","TT_AGE_INPUT","TT_BARCODE","TT_NOTE","TT_CARD_SELECTOR","TT_MULTIPLE_SELECT","TT_ART_REGIMEN_SELECTION","TT_NEXT_VISIT_INTERVAL_SELECTION","TT_TABLE_VIEWER","TT_DOSAGE_INPUT","TT_YES_NO","TT_MULTIPLE_YES_NO","TT_WEIGHT_CHART","TT_VITALS_ENTRY","TT_APPOINTMENTS_ENTRY","TT_COMPLAINTS_PICKER","TT_CLINIC_HOLIDAY_PICKER","TT_SUMMARY","TT_ART_STAGING_SUMMARY","TT_ADHERENCE_INPUT","TT_LAB_ORDERS","TT_PERSON_RESULT_VIEW","TT_PROGRAM_SELECTION","TT_DATE_PICKER","TT_RELATION_SELECTION","TT_FILING_NUMBER_VIEW","TT_PERSON_MATCH_VIEW","TT_FULL_DATE","TT_BATCH_ENTRY","TT_BATCH_VERIFICATION","TT_BATCH_MOVEMENT","TT_IP_ADDRESS","TT_TEXT_BANNER","TT_DISPENSATION_INPUT","TT_DATA_TABLE","TT_GROUP_SELECTOR","TT_ANC_PREGNANCY_INPUT_CONFIG","TT_ANC_PREGNANCY_DETAILS_INPUT","TT_ANC_LMP_DATE_INPUT","TT_DRUG_TRANSFER_IN","TT_GRID_SELECTOR","TT_ANC_DRUGSET_INPUT","TT_RADIOLOGY_PICKER","TT_PRESCRIPTION_INPUT","TT_INFINITE_SCROLL_MULTIPLE_SELECT","TT_DRUG_DISPENSER","_component_his_standard_form","_resolveComponent","AssessmentService","AppEncounterService","constructor","super","_defineProperty","hivStatus","artStatus","arvNumber","arvStartDate","getHivStatus","getArtStatus","getArvNumber","getArvStartDate","isHivPositive","res","getJson","mixins","EncounterMixinVue","assessment","showHIVQuestions","alreadyOnTreatment","offerCxCa","patientPreviousTreatment","patientPreviousVisitHIVStatus","ObservationService","getFirstValueCoded","getProgramInformation","patientAlreadyOnTreatment","ConceptService","getConceptsByCategory","loadArtStatus","setOfferCxCa","getFields","skipTreatmentSelection","medicalProcedures","normalizedTreatment","skipHIVStatusSelection","normalizedPatientHIVStatus","toLowerCase","isNullOrUndefined","str","_formData","encounter","createEncounter","toastWarning","vals","keys","forEach","element","saveObservationList","toastSuccess","buildValueCoded","hasHIVStatus","enterPreviousCxCaData","everHadCxCa","ever_had_cxca","resultsAvailable","results_available","getFacilities","getReasonsForNoCxcaOptions","Validation","hiv_status","getDate","isEstimate","buildValueDate","reason_for_visit","showKeyboard","isFilterDataViaApi","buildValueText","offer_CxCa","facilities","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id","getVillagesByName","page","getLandmarks","landmarks","landmark","code","webpackAsyncContext","req","__webpack_require__","o","resolve","Error","ids","slice","module","exports"],"mappings":"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,EAAQC,WACf1V,MAAOyV,KAIRnR,eAAeqR,EAAkB/W,EAAK,IAAKgX,EAAK,GACnD,MAAMJ,QAAiB5B,OAAgB+B,kBAAkB/W,EAAMgX,GAC/D,OAAOJ,EAASpW,IAAKqW,IAAY,CAC7B1V,MAAO0V,EAAQ7W,KACfb,MAAO0X,EAAQC,WACf1V,MAAOyV,KAIT,SAAUI,IACZ,MAAMC,EAAY,CACd,kBACA,OACA,cACA,SACA,iBACA,WACA,mBACA,UACA,SACA,kBACA,SAGJ,OAAOA,EAAU1W,IAAI2W,IAAQ,CACzBhW,MAAOgW,EACPhY,MAAOgY,EACP/V,MAAO,CACHgW,KAAMD,Q,qBC5GlB,IAAI3W,EAAM,CACT,wBAAyB,CACxB,OACA,qBAED,wBAAyB,CACxB,OACA,qBAED,iCAAkC,CACjC,OACA,qBAED,+BAAgC,CAC/B,OACA,qBAED,0BAA2B,CAC1B,OACA,qBAED,yBAA0B,CACzB,OACA,iBACA,qBAED,sBAAuB,CACtB,OACA,qBAED,kCAAmC,CAClC,OACA,qBAED,0BAA2B,CAC1B,OACA,iBACA,qBAED,mBAAoB,CACnB,OACA,qBAED,yBAA0B,CACzB,OACA,sBAED,6BAA8B,CAC7B,OACA,sBAED,0BAA2B,CAC1B,OACA,iBACA,sBAED,oBAAqB,CACpB,OACA,sBAED,wBAAyB,CACxB,OACA,iBACA,sBAED,+BAAgC,CAC/B,OACA,sBAED,wBAAyB,CACxB,OACA,sBAED,sBAAuB,CACtB,OACA,iBACA,iBACA,sBAED,yBAA0B,CACzB,OACA,iBACA,iBACA,sBAED,6BAA8B,CAC7B,OACA,iBACA,iBACA,sBAED,wBAAyB,CACxB,OACA,sBAED,+BAAgC,CAC/B,OACA,iBACA,sBAED,4BAA6B,CAC5B,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,sBAAuB,CACtB,OACA,iBACA,sBAED,uBAAwB,CACvB,OACA,iBACA,sBAED,wBAAyB,CACxB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,wCAAyC,CACxC,OACA,sBAED,qBAAsB,CACrB,OACA,iBACA,sBAED,uBAAwB,CACvB,OACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,0BAA2B,CAC1B,OACA,iBACA,sBAED,6BAA8B,CAC7B,OACA,sBAED,gBAAiB,CAChB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,6BAA8B,CAC7B,OACA,iBACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,kBAAmB,CAClB,OACA,sBAED,mBAAoB,CACnB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,sBAAuB,CACtB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,wBAAyB,CACxB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,oBAAqB,CACpB,OACA,sBAED,oBAAqB,CACpB,OACA,uBAGF,SAAS6W,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEhX,EAAK8W,GAC9B,OAAOzU,QAAQ4U,UAAUhb,MAAK,WAC7B,IAAI6C,EAAI,IAAIoY,MAAM,uBAAyBJ,EAAM,KAEjD,MADAhY,EAAE8X,KAAO,mBACH9X,KAIR,IAAIqY,EAAMnX,EAAI8W,GAAMlR,EAAKuR,EAAI,GAC7B,OAAO9U,QAAQC,IAAI6U,EAAIC,MAAM,GAAGpX,IAAI+W,EAAoBjY,IAAI7C,MAAK,WAChE,OAAO8a,EAAoBnR,MAG7BiR,EAAoB9D,KAAO,WAC1B,OAAOnR,OAAOmR,KAAK/S,IAEpB6W,EAAoBjR,GAAK,OACzByR,EAAOC,QAAUT","file":"js/chunk-a2a01466.82c8e8ef.js","sourcesContent":["export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const PRESCRIPTION_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del', '0', '.'],\n    ['Unknown', '', ''],\n]\nexport const FLOAT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const NUMBER_ARROW_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['←',  '0', '→']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","\n/**\n * @deprecated moved to useEncounter composable\n * \n */\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/anthony/Documents/source/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year as number < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year as number > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, , day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value as number > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: (facts: FactsInterface) => any;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: ConditionsInteface;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\nexport type FactsInterface = Record<string, any>\nexport type ConditionResolver = (value: any, facts: FactsInterface) => boolean | RegExpMatchArray | null\nexport type ConditionsInteface = Record<string, ConditionResolver>\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: FactsInterface, conditions: ConditionsInteface): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: FactsInterface, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","/**\n * Map all formElements/components defined in \"@/components/FormElements\" \n * in the Enum below by their file name.\n * \n * Next step is to add FieldType entry in COMPONENT_REFS in the \n * Array below the FieldType Enum\n */\nexport enum FieldType {\n    TT_ASYNC_MULTI_SELECT = 'AsyncMultiSelect',\n    TT_LINKAGE_CODE = 'LinkageCodeInput',\n    TT_MULTI_SELECT_GRID= 'HisMultiSelectGrid',\n    TT_AGE_INPUT='HisAgeInput',\n    TT_GROUP_SELECTOR = 'HisGroupSelector',\n    TT_DATA_TABLE = 'HisDataTable',\n    TT_GRID_SELECTOR = 'HisGridSelector',\n    TT_NOTE = 'HisNote',\n    TT_BARCODE = 'HisBarcodeInput',\n    TT_MONTHLY_DAYS=\"HisMonthlyDays\",\n    TT_TEXT=\"HisTextInput\",\n    TT_NUMBER = \"HisNumberInput\",\n    TT_DATETIME=\"datetime\",\n    TT_SELECT=\"HisSelect\",\n    TT_MULTIPLE_SELECT=\"HisMultipleSelect\",\n    TT_ART_REGIMEN_SELECTION=\"HisArtRegimenSelection\",\n    TT_NEXT_VISIT_INTERVAL_SELECTION=\"HisNextVisitInterval\",\n    TT_TABLE_VIEWER=\"HisTableViewer\",\n    TT_DOSAGE_INPUT=\"HisDosageInput\",\n    TT_YES_NO=\"YesNoSelect\",\n    TT_MULTIPLE_YES_NO=\"MultiYesNoSelect\",\n    TT_SUMMARY=\"HisSummary\",\n    TT_WEIGHT_CHART = \"HisWeightChart\",\n    TT_VITALS_ENTRY=\"HisVitalsEntry\",\n    TT_ADHERENCE_INPUT = \"HisAdherenceInput\",\n    TT_ART_STAGING_SUMMARY = \"ArtStagingSummary\",\n    TT_LAB_ORDERS = \"HisLabOrders\",\n    TT_APPOINTMENTS_ENTRY = \"HisAppointments\",\n    TT_DISPENSATION_INPUT = 'DrugDispensationSelection',\n    TT_PROGRAM_SELECTION = 'ProgramSelection',\n    TT_DATE_PICKER = 'HisDatePicker',\n    TT_PERSON_RESULT_VIEW = 'PersonSearchView',\n    TT_RELATION_SELECTION = 'RelationsSelection',\n    TT_FILING_NUMBER_VIEW = 'FilingNumberView',\n    TT_CARD_SELECTOR = 'HisCardSelector',\n    TT_PERSON_MATCH_VIEW = 'PersonMatchView',\n    TT_FULL_DATE = 'HisDateInput',\n    TT_BATCH_ENTRY = 'HisBatchEntry',\n    TT_BATCH_VERIFICATION = 'HisBatchVerification',\n    TT_BATCH_MOVEMENT = 'HisBatchMovement',\n    TT_COMPLAINTS_PICKER = 'HisComplaintsPicker',\n    TT_RADIOLOGY_PICKER = 'HisRadiologyPicker',\n    TT_IP_ADDRESS = 'HisIPAddress',\n    TT_TEXT_BANNER = 'HisTextBanner',\n    TT_DRUG_DISPENSER = 'GeneralDrugDispenser',\n    TT_CLINIC_HOLIDAY_PICKER = 'HisClinicHolidayPicker',\n    TT_ANC_PREGNANCY_INPUT_CONFIG = 'AncPregnancyInfoConfig',\n    TT_ANC_PREGNANCY_DETAILS_INPUT = 'AncPregnancyDetailsInput',\n    TT_ANC_LMP_DATE_INPUT = 'AncLmpDateInput',\n    TT_ANC_DRUGSET_INPUT = 'AncDrugSetInput',\n    TT_DRUG_TRANSFER_IN = 'DrugTransferInput',\n    TT_PRESCRIPTION_INPUT = 'HisPrescriptionInput',\n    TT_INFINITE_SCROLL_MULTIPLE_SELECT=\"HisInfiniteScrollMultipleSelect\"\n}\n\n// Register FieldTypes here that will be registered at runtime\nexport const COMPONENT_REFS: FieldType[] = [\n    FieldType.TT_ASYNC_MULTI_SELECT,\n    FieldType.TT_LINKAGE_CODE,\n    FieldType.TT_MULTI_SELECT_GRID,\n    FieldType.TT_AGE_INPUT,\n    FieldType.TT_BARCODE,\n    FieldType.TT_NOTE,\n    FieldType.TT_SELECT,\n    FieldType.TT_CARD_SELECTOR,\n    FieldType.TT_MULTIPLE_SELECT,\n    FieldType.TT_TEXT,\n    FieldType.TT_NUMBER,\n    FieldType.TT_MONTHLY_DAYS,\n    FieldType.TT_ART_REGIMEN_SELECTION,\n    FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n    FieldType.TT_TABLE_VIEWER,\n    FieldType.TT_DOSAGE_INPUT,\n    FieldType.TT_YES_NO,\n    FieldType.TT_MULTIPLE_YES_NO,\n    FieldType.TT_WEIGHT_CHART,\n    FieldType.TT_VITALS_ENTRY,\n    FieldType.TT_APPOINTMENTS_ENTRY,\n    FieldType.TT_COMPLAINTS_PICKER,\n    FieldType.TT_CLINIC_HOLIDAY_PICKER,\n    FieldType.TT_SUMMARY,\n    FieldType.TT_ART_STAGING_SUMMARY,\n    FieldType.TT_ADHERENCE_INPUT,\n    FieldType.TT_LAB_ORDERS,\n    FieldType.TT_PERSON_RESULT_VIEW,\n    FieldType.TT_PROGRAM_SELECTION,\n    FieldType.TT_DATE_PICKER,\n    FieldType.TT_RELATION_SELECTION,\n    FieldType.TT_FILING_NUMBER_VIEW,\n    FieldType.TT_PERSON_MATCH_VIEW,\n    FieldType.TT_FULL_DATE,\n    FieldType.TT_BATCH_ENTRY,\n    FieldType.TT_BATCH_VERIFICATION,\n    FieldType.TT_BATCH_MOVEMENT,\n    FieldType.TT_IP_ADDRESS,\n    FieldType.TT_TEXT_BANNER,\n    FieldType.TT_DISPENSATION_INPUT,\n    FieldType.TT_DATA_TABLE,\n    FieldType.TT_GROUP_SELECTOR,\n    FieldType.TT_ANC_PREGNANCY_INPUT_CONFIG,\n    FieldType.TT_ANC_PREGNANCY_DETAILS_INPUT,\n    FieldType.TT_ANC_LMP_DATE_INPUT,\n    FieldType.TT_DRUG_TRANSFER_IN,\n    FieldType.TT_GRID_SELECTOR,\n    FieldType.TT_ANC_DRUGSET_INPUT,\n    FieldType.TT_RADIOLOGY_PICKER,\n    FieldType.TT_PRESCRIPTION_INPUT,\n    FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n    FieldType.TT_DRUG_DISPENSER\n]\n","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: false,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class AssessmentService extends AppEncounterService {\n    \n    hivStatus: string;\n    artStatus: string;\n    arvNumber: string;\n    arvStartDate: string;\n    constructor(patientID: number, providerID: number){\n        super(patientID, 181, providerID) //TODO: Use encounter type reference name'\n        this.hivStatus = ''\n        this.artStatus = ''\n        this.arvNumber = ''\n        this.arvStartDate = ''\n    }\n\n    getHivStatus() {\n        return this.hivStatus\n    }\n\n    getArtStatus() {\n        return this.artStatus\n    }\n\n    getArvNumber() {\n        return this.arvNumber\n    } \n\n    getArvStartDate() {\n        return this.arvStartDate\n    }\n\n    isHivPositive() {\n        return this.hivStatus.match(/positive/i) ? true : false\n    }\n\n    async loadArtStatus() {\n        const res = await AppEncounterService.getJson(`programs/12/patients/${this.patientID}/art_hiv_status`)\n        if (res) {\n            this.hivStatus = res['hiv_status'] || this.hivStatus\n            this.artStatus = res['art_status'] || ''\n            this.arvNumber = res['arv_number'] || ''\n            this.arvStartDate = res['arv_start_date'] || ''\n        }\n    }\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { AssessmentService } from \"@/apps/CxCa/services/CxCaAssessmentService\";\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport { generateDateFields, EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\";\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { ConceptService } from \"@/services/concept_service\";\nimport { ProgramService } from \"@/services/program_service\";\nimport { ObservationService } from '@/services/observation_service';\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    assessment: {} as any,\n    obs: [] as any,\n    showHIVQuestions: true,\n    alreadyOnTreatment: false,\n    offerCxCa: false,\n    patientPreviousTreatment: \"\",\n    patientPreviousVisitHIVStatus: \"\",\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.assessment = new AssessmentService(\n          this.patientID,\n          this.providerID\n        );\n        // Retrieving previous treatment if available\n        this.patientPreviousTreatment = await ObservationService.getFirstValueCoded(this.patientID, 'Treatment')\n        // Retrieving HIV Status if available\n        this.patientPreviousVisitHIVStatus = await ObservationService.getFirstValueCoded(this.patientID, 'HIV status')\n\n        //test here \n        const program = await ProgramService.getProgramInformation(this.patientID)\n\n        // patient already enrolled\n        this.alreadyOnTreatment = this.patientAlreadyOnTreatment()\n\n        ConceptService.getConceptsByCategory(\"reason_for_no_cxca\")\n\n        await this.assessment.loadArtStatus();\n        \n        if (this.assessment.getHivStatus() !== '') {\n          this.showHIVQuestions = false;\n        }\n\n        if(this.assessment.getHivStatus() === \"Positive\"){\n          this.showHIVQuestions = false;\n        }\n\n        await this.setOfferCxCa();\n        this.fields = await this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    // Used to skip treatment field for a client on any of the three below\n    skipTreatmentSelection(): boolean {\n      const medicalProcedures = [\"Chemotherapy\", \"Hysterectomy\", \"Palliative Care\"];\n      if (this.patientPreviousTreatment) {\n        const normalizedTreatment = this.patientPreviousTreatment;\n        return medicalProcedures.includes(normalizedTreatment);\n      }else{\n        return false;\n      }\n    },\n    // Used to skip HIV Status field for a client who's positive\n    skipHIVStatusSelection(): boolean {\n      const medicalProcedures = [\"positive on art\", \"positive not on art\"];\n      if (this.patientPreviousVisitHIVStatus) {\n        const normalizedPatientHIVStatus = this.patientPreviousVisitHIVStatus.toLowerCase();\n        return medicalProcedures.includes(normalizedPatientHIVStatus.toLowerCase());\n      } else {\n        return false;\n      }\n    },\n    \n    patientAlreadyOnTreatment(){\n      return !(this.isNullOrUndefined(this.patientPreviousTreatment))\n    },\n    isNullOrUndefined(str: string | null | undefined): boolean {\n      return typeof str === 'undefined' || str === null;\n    },\n\n    async onFinish(_formData: any, computed: any) {\n      \n      const encounter = await this.assessment.createEncounter();\n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      const vals: any = [];\n      Object.keys(computed).forEach(element => {\n        vals.push(computed[element].obs);\n      });\n      const data = await Promise.all([...this.obs, ...vals]);\n\n      const obs = await this.assessment.saveObservationList(data);\n\n      if (!obs) return toastWarning(\"Unable to save patient observations\");\n\n      toastSuccess(\"Observations and encounter created!\");\n\n      this.nextTask();\n    },\n    async setOfferCxCa() {\n      const data = await this.assessment.getFirstValueCoded(\"Offer CxCa\");\n      this.offerCxCa = data && data === \"Yes\";\n      if (!this.offerCxCa) {\n        this.obs.push(this.assessment.buildValueCoded(\"Ever had CxCa\", \"No\"));\n      }\n      return true;\n    },\n    hasHIVStatus() {\n      return this.assessment.getHivStatus !== \"\"\n    },\n    enterPreviousCxCaData(formData: any) {\n      const everHadCxCa = formData.ever_had_cxca.value === \"Yes\";\n      const resultsAvailable = formData.results_available.value === \"Yes\";\n      return everHadCxCa && resultsAvailable;\n    },\n    getFacilities(filter = \"\") {\n      return getFacilities(filter);\n    },\n    getReasonsForNoCxcaOptions() {\n      return ConceptService.getConceptsByCategory(\"reason_for_no_cxca\")\n        .map((c: any) => ({\n          label: c.name,\n          value: c.name,\n          other: {\n            c\n          }\n        }))\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"reason_for_visit\",\n          helpText: \"Reason for visit\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Initial screening\",\n              value: \"Initial screening\",\n            },\n            {\n              label: \"Postponed treatmment\",\n              value: \"Postponed treatment\",\n            },\n            {\n              label: \"One year subsequent check-up after treatment\",\n              value: \"One year subsequent check-up after treatment\",\n            },\n            {\n              label: \"Subsequent screening\",\n              value: \"Subsequent screening\",\n            },\n            {\n              label: \"Problem visit after treatment\",\n              value: \"Problem visit after treatment\",\n            },\n            {\n              label: \"Referral\",\n              value: \"Referral\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Reason for visit\", value.value)\n          })\n        },\n        {\n          id: \"hiv_status\",\n          helpText: \"HIV status\",\n          type: FieldType.TT_SELECT,\n          condition: () => this.showHIVQuestions && !this.skipHIVStatusSelection(),\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Positive on ART\",\n              value: \"Positive on ART\",\n            },\n            {\n              label: \"Positive Not on ART\",\n              value: \"Positive Not on ART\",\n            },\n            {\n              label: \"Negative\",\n              value: \"Negative\",\n            },\n            {\n              label: \"Never tested\",\n              value: \"Never tested\",\n            },\n            {\n              label: \"Prefers Not to disclose\",\n              value: \"Undisclosed\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"HIV status\", value.value)\n          })\n        },\n        ...generateDateFields(\n          {\n            id: \"hiv_test_date\",\n            helpText: \"HIV test result date\",\n            required: true,\n            condition: (formData: any) =>\n              formData.hiv_status.value.match(/Negative|ART/i),\n            minDate: () => this.patient.getBirthdate(),\n            maxDate: () => this.assessment.getDate(),\n            //I've allowed for unknown dates to address the issue of the date picker not allowing for unknown dates\n            //this was a requirement from the client and analyst team\n            estimation: {\n              allowUnknown: true,\n              estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n              return {\n                date,\n                tag: \"cxca screening\",\n                isEstimate,\n                obs: this.assessment.buildValueDate(\"HIV test date\", date, isEstimate),\n              };\n            },\n          }\n        ),\n        {\n          id: \"ever_had_cxca\",\n          helpText: \"Ever had CxCa screening\",\n          type: FieldType.TT_SELECT,\n          condition: (formData: any) =>\n            formData.reason_for_visit.value !== \"Initial screening\" && !this.alreadyOnTreatment,\n          options: () => this.yesNoOptions(),\n          validation: (val: any) => Validation.required(val),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Ever had CxCa\", value.value)\n          })\n        },\n        {\n          id: \"results_available\",\n          helpText: \"Results available?\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          \n          condition: (formData: any) =>\n            formData.reason_for_visit.value !== \"Initial screening\" && formData.ever_had_cxca.value !== \"No\",\n          options: () => this.yesNoOptions(),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"CxCa test results\", value.value)\n          })\n        },\n        {\n          id: \"location\",\n          helpText: \"CxCa screening location\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: (_: any, filter = \"\") => this.getFacilities(filter),\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true,\n          },\n          condition: (formData: any) => this.enterPreviousCxCaData(formData),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueText(\"Previous CxCa location\", value.value)\n          })\n        },\n        ...generateDateFields(\n          {\n            id: \"cxca_date\",\n            helpText: \"Previous CxCa test\",\n            required: true,\n            minDate: () => this.patient.getBirthdate(),\n            maxDate: () => this.assessment.getDate(),\n            estimation: {\n              allowUnknown: false,\n            },\n            condition: (formData: any) => this.enterPreviousCxCaData(formData),\n            computeValue: (date: string, isEstimate: boolean) => {\n              return {\n                date,\n                tag: \"cxca screening\",\n                isEstimate,\n                obs: this.assessment.buildValueDate(\"cxca test date\", date),\n              };\n            },\n          }\n        ),\n        {\n          id: \"previous_screening_method\",\n          helpText: \"Previous screening method\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) => this.enterPreviousCxCaData(formData),\n          options: () => [\n            {\n              label: \"VIA\",\n              value: \"VIA\",\n            },\n            {\n              label: \"PAP Smear\",\n              value: \"PAP Smear\",\n            },\n            {\n              label: \"HPV DNA\",\n              value: \"HPV DNA\",\n            },\n            {\n              label: \"Speculum Exam\",\n              value: \"Speculum Exam\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Previous CxCa screening method\", value.value)\n          })\n        },\n        {\n          id: \"offer_CxCa\",\n          helpText: \"Offer CxCa screening today\",\n          type: FieldType.TT_SELECT,\n          condition: this.skipTreatmentSelection(),\n          validation: (val: any) => Validation.required(val),\n          options: () => this.yesNoOptions(),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Offer CxCa\", value.value)\n          })\n        },\n        {\n          id: \"screening_method\",\n          helpText: \"Screening method being offered\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) => formData.offer_CxCa.value === \"Yes\",\n          options: () => [\n            {\n              label: \"VIA\",\n              value: \"VIA\",\n            },\n            {\n              label: \"PAP Smear\",\n              value: \"PAP Smear\",\n            },\n            {\n              label: \"HPV DNA\",\n              value: \"HPV DNA\",\n            },\n            {\n              label: \"Speculum Exam\",\n              value: \"Speculum Exam\",\n            },\n          ],\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"CxCa screening method\", value.value)\n          }),\n        },\n        /*added new fields for family planning\n        */\n        {\n          id: 'offer_family_planning',\n          helpText: 'Offer Family Planning ?',\n          type: FieldType.TT_SELECT,\n          condition: (formData: any) => formData.offer_CxCa.value !== \"No\",\n          validation: (val: any) => Validation.required(val),\n          options: () => this.yesNoOptions(),\n          computedValue: (value: any) => ({\n          obs: this.assessment.buildValueCoded('Family planning', value.label)\n          })\n        },\n        {\n          id: \"reason_for_no_cxca\",\n          helpText: \"Reason for NOT offering CxCa screening\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (formData: any) => formData.offer_CxCa.value === \"No\",\n          options: () => this.getReasonsForNoCxcaOptions(),\n          computedValue: (value: any) => ({\n            obs: this.assessment.buildValueCoded(\"Reason for NOT offering CxCa\", value.value)\n          }),\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaTest.vue?vue&type=template&id=4a3a7426&ts=true\"\nimport script from \"./CxCaTest.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaTest.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/anthony/Documents/source/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport async function getVillagesByName(name='a', page=1): Promise<Option[]> {\n    const villages = await LocationService.getVillagesByName(name, page)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport function getLandmarks(): Option[] {\n    const landmarks = [\n        'Catholic Church',\n        'CCAP',\n        'Seventh Day',\n        'Mosque',\n        'Primary School',\n        'Borehole',\n        'Secondary School',\n        'College',\n        'Market',\n        'Football Ground',\n        'Other'\n    ]\n\n    return landmarks.map(landmark =>({\n        label: landmark,\n        value: landmark,\n        other: {\n            code: landmark\n        }\n    }))\n}\n","var map = {\n\t\"./AncDrugSetInput.vue\": [\n\t\t\"c99f\",\n\t\t\"TouchFormElement0\"\n\t],\n\t\"./AncLmpDateInput.vue\": [\n\t\t\"101a\",\n\t\t\"TouchFormElement1\"\n\t],\n\t\"./AncPregnancyDetailsInput.vue\": [\n\t\t\"b043\",\n\t\t\"TouchFormElement2\"\n\t],\n\t\"./AncPregnancyInfoConfig.vue\": [\n\t\t\"262e\",\n\t\t\"TouchFormElement3\"\n\t],\n\t\"./ArtStagingSummary.vue\": [\n\t\t\"43db\",\n\t\t\"TouchFormElement4\"\n\t],\n\t\"./AsyncMultiSelect.vue\": [\n\t\t\"5de2\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement5\"\n\t],\n\t\"./BaseTextInput.vue\": [\n\t\t\"36ad\",\n\t\t\"TouchFormElement6\"\n\t],\n\t\"./DrugDispensationSelection.vue\": [\n\t\t\"05d5\",\n\t\t\"TouchFormElement7\"\n\t],\n\t\"./DrugTransferInput.vue\": [\n\t\t\"de42\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement8\"\n\t],\n\t\"./FieldMixin.vue\": [\n\t\t\"51c8\",\n\t\t\"TouchFormElement9\"\n\t],\n\t\"./FilingNumberView.vue\": [\n\t\t\"c650\",\n\t\t\"TouchFormElement10\"\n\t],\n\t\"./GeneralDrugDispenser.vue\": [\n\t\t\"7737\",\n\t\t\"TouchFormElement11\"\n\t],\n\t\"./HisAdherenceInput.vue\": [\n\t\t\"f2c3\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement12\"\n\t],\n\t\"./HisAgeInput.vue\": [\n\t\t\"c05f\",\n\t\t\"TouchFormElement13\"\n\t],\n\t\"./HisAppointments.vue\": [\n\t\t\"b2eb\",\n\t\t\"chunk-d64a144c\",\n\t\t\"TouchFormElement14\"\n\t],\n\t\"./HisArtRegimenSelection.vue\": [\n\t\t\"47b9\",\n\t\t\"TouchFormElement15\"\n\t],\n\t\"./HisBarcodeInput.vue\": [\n\t\t\"dd65\",\n\t\t\"TouchFormElement16\"\n\t],\n\t\"./HisBatchEntry.vue\": [\n\t\t\"f2ab\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement17\"\n\t],\n\t\"./HisBatchMovement.vue\": [\n\t\t\"5148\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement18\"\n\t],\n\t\"./HisBatchVerification.vue\": [\n\t\t\"7b0f\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement19\"\n\t],\n\t\"./HisCardSelector.vue\": [\n\t\t\"0734\",\n\t\t\"TouchFormElement20\"\n\t],\n\t\"./HisClinicHolidayPicker.vue\": [\n\t\t\"4030\",\n\t\t\"chunk-d64a144c\",\n\t\t\"TouchFormElement21\"\n\t],\n\t\"./HisComplaintsPicker.vue\": [\n\t\t\"82d1\",\n\t\t\"TouchFormElement22\"\n\t],\n\t\"./HisDataTable.vue\": [\n\t\t\"a6ba\",\n\t\t\"TouchFormElement23\"\n\t],\n\t\"./HisDateInput.vue\": [\n\t\t\"374c\",\n\t\t\"TouchFormElement24\"\n\t],\n\t\"./HisDatePicker.vue\": [\n\t\t\"9b30\",\n\t\t\"chunk-d64a144c\",\n\t\t\"TouchFormElement25\"\n\t],\n\t\"./HisDosageInput.vue\": [\n\t\t\"b34c\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement26\"\n\t],\n\t\"./HisGridSelector.vue\": [\n\t\t\"112a\",\n\t\t\"TouchFormElement27\"\n\t],\n\t\"./HisGroupSelector.vue\": [\n\t\t\"81cf\",\n\t\t\"TouchFormElement28\"\n\t],\n\t\"./HisIPAddress.vue\": [\n\t\t\"2a82\",\n\t\t\"TouchFormElement29\"\n\t],\n\t\"./HisInfiniteScrollMultipleSelect.vue\": [\n\t\t\"52a3\",\n\t\t\"TouchFormElement30\"\n\t],\n\t\"./HisLabOrders.vue\": [\n\t\t\"e614\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement31\"\n\t],\n\t\"./HisMonthlyDays.vue\": [\n\t\t\"69cf\",\n\t\t\"TouchFormElement32\"\n\t],\n\t\"./HisMultiSelectGrid.vue\": [\n\t\t\"0fa3\",\n\t\t\"TouchFormElement33\"\n\t],\n\t\"./HisMultipleSelect.vue\": [\n\t\t\"2fd5\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement34\"\n\t],\n\t\"./HisNextVisitInterval.vue\": [\n\t\t\"3126\",\n\t\t\"TouchFormElement35\"\n\t],\n\t\"./HisNote.vue\": [\n\t\t\"c927\",\n\t\t\"TouchFormElement36\"\n\t],\n\t\"./HisNumberInput.vue\": [\n\t\t\"5e75\",\n\t\t\"TouchFormElement37\"\n\t],\n\t\"./HisPrescriptionInput.vue\": [\n\t\t\"87e5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement38\"\n\t],\n\t\"./HisRadiologyPicker.vue\": [\n\t\t\"adc7\",\n\t\t\"TouchFormElement39\"\n\t],\n\t\"./HisSelect.vue\": [\n\t\t\"d11f\",\n\t\t\"TouchFormElement40\"\n\t],\n\t\"./HisSummary.vue\": [\n\t\t\"e0bd\",\n\t\t\"TouchFormElement41\"\n\t],\n\t\"./HisTableViewer.vue\": [\n\t\t\"8904\",\n\t\t\"TouchFormElement42\"\n\t],\n\t\"./HisTextBanner.vue\": [\n\t\t\"952c\",\n\t\t\"TouchFormElement43\"\n\t],\n\t\"./HisTextInput.vue\": [\n\t\t\"6ef9\",\n\t\t\"TouchFormElement44\"\n\t],\n\t\"./HisVitalsEntry.vue\": [\n\t\t\"e333\",\n\t\t\"TouchFormElement45\"\n\t],\n\t\"./HisWeightChart.vue\": [\n\t\t\"26a1\",\n\t\t\"TouchFormElement46\"\n\t],\n\t\"./LinkageCodeInput.vue\": [\n\t\t\"ac86\",\n\t\t\"TouchFormElement47\"\n\t],\n\t\"./MultiYesNoSelect.vue\": [\n\t\t\"5fd1\",\n\t\t\"TouchFormElement48\"\n\t],\n\t\"./PersonMatchView.vue\": [\n\t\t\"6591\",\n\t\t\"TouchFormElement49\"\n\t],\n\t\"./PersonSearchView.vue\": [\n\t\t\"28b2\",\n\t\t\"TouchFormElement50\"\n\t],\n\t\"./ProgramSelection.vue\": [\n\t\t\"e3b4\",\n\t\t\"TouchFormElement51\"\n\t],\n\t\"./RelationsSelection.vue\": [\n\t\t\"0e57\",\n\t\t\"TouchFormElement52\"\n\t],\n\t\"./SelectMixin.vue\": [\n\t\t\"82a9\",\n\t\t\"TouchFormElement53\"\n\t],\n\t\"./YesNoSelect.vue\": [\n\t\t\"71f2\",\n\t\t\"TouchFormElement54\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"f159\";\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}