{"version":3,"sources":["webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/apps/ART/views/reports/inconsistencies/DataCleaningVerification.vue?4fd2","webpack:///./src/apps/ART/views/reports/inconsistencies/DataCleaningVerification.vue","webpack:///./src/apps/ART/views/reports/inconsistencies/DataCleaningVerification.vue?c676","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ART/services/reports/data_cleaning_report_service.ts"],"names":["defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","providers","facts","sessionDate","apiDate","encounterName","isBdeMode","birthDate","outcome","outcomeStartDate","ready","watch","handler","route","params","patient_id","this","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","FlowState","SET_PROVIDER","selection","username","split","provider","find","person_id","CONTINUE","CHANGE_SESSION_DATE","$router","push","EXIT","CHANGE_PATIENT_OUTCOME","GO_TO_PATIENT_DASHBOARD","gotoPatientDashboard","findings","matchToGuidelines","ENCOUNTER_GUIDELINES","index","_finding$actions","_finding$actions3","finding","actions","alert","_finding$actions2","status","_finding$actions4","flowState","value","program","startDate","e","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","isBDE","getBirthdate","$route","name","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","isEmpty","person","names","_p$person2","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","d","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","conditions","condition","__exports__","dformat","HisDate","toStandardHisDisplayFormat","priority","async","action","infoActionSheet","slot","color","modal","optionsActionSheet","role","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","onFinishAction","onFinish","skipSummary","cancelDestinationPath","_","mixins","EncounterMixinVue","IonPage","created","id","helpText","type","FieldType","TT_FULL_DATE","computedValue","v","validation","Validation","required","field","PersonHelper","getGivenNameField","proxyID","getFamilyNameField","f","ok","DataCleaningReportService","saveDataCleaningVerification","back","isCondition","ignored","undefined","prop","includes","every","Boolean","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","CtIndicator","ArtReportService","constructor","super","postJson","getCleaningToolReport","indicator","getReport","getEnrolledOnArtBeforeBirth","getJson","getIncompleteVisits"],"mappings":"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","file":"js/chunk-e2dc92b0.2a9b60a2.js","sourcesContent":["\n/**\n * @deprecated moved to useEncounter composable\n * \n */\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        skipSummary: true,\n        cancelDestinationPath: \"/\"\n      }, null, 8, [\"fields\", \"onFinishAction\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from \"vue\";\nimport { DataCleaningReportService, DataCleaningVerificationData } from \"@/apps/ART/services/reports/data_cleaning_report_service\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { IonPage } from \"@ionic/vue\";\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { Option } from \"@/components/Forms/FieldInterface\";\nimport PersonHelper from \"@/utils/HisFormHelpers/PersonFieldHelper\"\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { IonPage },\n  created() {\n    this.fields = [\n        {\n            id: \"data_cleaning_datetime\",\n            helpText: \"Date data cleaning done\",\n            type: FieldType.TT_FULL_DATE,\n            computedValue: (v: Option) => v.value,\n            validation: (v: Option) => Validation.required(v)\n        },\n        (() => {\n            const field = PersonHelper.getGivenNameField()\n            field.helpText = \"Verifier's First name\"\n            field.proxyID = 'supervisors'\n            return field\n        })(),\n        (() => {\n            const field = PersonHelper.getFamilyNameField()\n            field.helpText = \"Verifier's Last name\"\n            field.proxyID = 'supervisors'\n            field.computedValue = (v: Option, f: any) => [`${f.given_name.value} ${v.value}`]\n            return field\n        })()\n    ]\n  },\n  methods: {\n    async onFinish(_: any, data: DataCleaningVerificationData) {\n        const ok = await new DataCleaningReportService().saveDataCleaningVerification(data)\n        if (ok) this.$router.back()\n    }\n  }\n})\n","import { render } from \"./DataCleaningVerification.vue?vue&type=template&id=4ea1f6f2&ts=true\"\nimport script from \"./DataCleaningVerification.vue?vue&type=script&lang=ts\"\nexport * from \"./DataCleaningVerification.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/anthony/Documents/source/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: (facts: FactsInterface) => any;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: ConditionsInteface;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\nexport type FactsInterface = Record<string, any>\nexport type ConditionResolver = (value: any, facts: FactsInterface) => boolean | RegExpMatchArray | null\nexport type ConditionsInteface = Record<string, ConditionResolver>\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: FactsInterface, conditions: ConditionsInteface): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: FactsInterface, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { ArtReportService } from \"./art_report_service\";\n\nexport enum CtIndicator {\n    DobMoreThanEnrolledDate = 'DOB MORE THAN DATE ENROLLED',\n    ClientsWithEncountersAfterDeath = 'CLIENTS WITH ENCOUNTERS AFTER DECLARED DEAD',\n    DateEnrolledLessThanEarliestStartDate = 'DATE ENROLLED LESS THAN EARLIEST START DATE',\n    MalesWithFemaleObs = 'MALE CLIENTS WITH FEMALE OBS',\n    PrescriptionWithoutDispensation = 'PRESCRIPTION WITHOUT DISPENSATION',\n    MissingDemographics = 'MISSING DEMOGRAPHICS',\n    MissingStartReasons = 'MISSING START REASONS',\n    MultipleStartReasons = 'MULTIPLE START REASONS',\n    PreArtOrUnknownOutcomes ='PRE ART OR UNKNOWN OUTCOMES',\n    MissingVlResults = 'MISSING VL RESULTS'\n}\n\nexport interface DataCleaningVerificationData {\n    'data_cleaning_datetime': string;\n    'supervisors': string[];\n}\n\nexport class DataCleaningReportService extends ArtReportService {\n    constructor() {\n        super()\n    }\n    \n    saveDataCleaningVerification(data: DataCleaningVerificationData) {\n        return ArtReportService.postJson('data_cleaning_confirmation', data)\n    }\n\n    getCleaningToolReport(indicator: CtIndicator) {\n        return this.getReport('art_data_cleaning_tools', { \n            'report_name' : indicator \n        })\n    }\n\n    getEnrolledOnArtBeforeBirth() {\n        return ArtReportService.getJson('enrolled_on_art_before_birth')\n    }\n\n    getIncompleteVisits() {\n        return this.getReport('incomplete_visits', {\n            'tool_name': 'INCOMPLETE VISITS'\n        })\n    }\n}\n"],"sourceRoot":""}