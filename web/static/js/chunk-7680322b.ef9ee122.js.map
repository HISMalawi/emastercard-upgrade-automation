{"version":3,"sources":["webpack:///./src/apps/OPD/views/encounters/Dispensing.vue?1e6c","webpack:///./src/apps/OPD/services/dispensation_service.ts","webpack:///./src/apps/OPD/views/encounters/Dispensing.vue","webpack:///./src/apps/OPD/views/encounters/Dispensing.vue?2950","webpack:///./src/services/drug_order_service.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/components/Forms/BaseFormElements.ts","webpack:///./src/components/FormElements lazy ^\\.\\/.*\\.vue$ namespace object"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","skipSummary","cancelDestinationPath","cancelDestination","fields","DispensationService","AppEncounterService","constructor","patientID","providerID","super","_defineProperty","this","drugHistory","currentDrugOrder","getDrugHistory","getCurrentOrder","buildDispensations","orderId","quantity","date","saveDispensations","dispensations","postJson","getProgramID","void","res","DrugOrderService","getDrugOrderHistory","getDrugOrders","Promise","all","calcCompletePack","drug","units","drugOrderBarcodes","barcodes","sort","a","b","tabs","length","i","parseInt","smallestAvailableTab","completePack","defineComponent","mixins","EncounterMixinVue","data","dispensation","watch","patient","getID","loadCurrentDrugOrder","loadDrugHistory","getFields","deep","methods","item","other","order_id","value","buildMedicationHistory","dateA","Date","order","start_date","dateB","map","d","medication","name","HisDate","toStandardHisDisplayFormat","amount","buildOrderOptions","label","drug_id","calculateCompletePack","getPackSizesRows","drugId","availableStock","packs","getDrugPackSizes","packSize","parseFloat","amount_needed","isDoneDispensing","orders","o","every","Boolean","option","isOk","totalTabs","toString","amountNeeded","percentageGiven","alertConfirmation","id","helpText","type","FieldType","TT_DRUG_DISPENSER","onValueUpdate","async","l","gotoPatientDashboard","onValue","isBarcodeScanned","voided","voidOrder","isValidDispensation","dispensed","toastWarning","config","medicationHistory","toolbarInfo","getFullName","getGender","getBirthdate","hiddenFooterBtns","options","__exports__","Service","getSessionDate","getJson","pageSize","drugID","params","patientId","components","HisStandardForm","providers","facts","sessionDate","apiDate","encounterName","isBdeMode","birthDate","outcome","outcomeStartDate","ready","handler","route","patient_id","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","computed","patientDashboardUrl","runflowState","state","states","FlowState","SET_PROVIDER","selection","username","split","provider","find","person_id","CONTINUE","CHANGE_SESSION_DATE","$router","push","EXIT","CHANGE_PATIENT_OUTCOME","GO_TO_PATIENT_DASHBOARD","findings","matchToGuidelines","ENCOUNTER_GUIDELINES","index","_finding$actions","_finding$actions3","finding","actions","alert","_finding$actions2","status","_finding$actions4","flowState","program","startDate","e","console","error","toastDanger","ProgramService","getCachedApiDate","isBDE","$route","toUpperCase","usernameA","usernameB","p","_p$person","isEmpty","person","names","_p$person2","latestName","given_name","family_name","toOption","mapStrToOptions","items","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","inArray","arr","expression","validateSeries","conditions","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","default","String","required","formData","computedData","$emit","dformat","priority","action","infoActionSheet","slot","color","modal","optionsActionSheet","role","isCondition","ignored","undefined","prop","includes","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","COMPONENT_REFS","TT_ASYNC_MULTI_SELECT","TT_LINKAGE_CODE","TT_MULTI_SELECT_GRID","TT_AGE_INPUT","TT_BARCODE","TT_NOTE","TT_SELECT","TT_CARD_SELECTOR","TT_MULTIPLE_SELECT","TT_TEXT","TT_NUMBER","TT_MONTHLY_DAYS","TT_ART_REGIMEN_SELECTION","TT_NEXT_VISIT_INTERVAL_SELECTION","TT_TABLE_VIEWER","TT_DOSAGE_INPUT","TT_YES_NO","TT_MULTIPLE_YES_NO","TT_WEIGHT_CHART","TT_VITALS_ENTRY","TT_APPOINTMENTS_ENTRY","TT_COMPLAINTS_PICKER","TT_CLINIC_HOLIDAY_PICKER","TT_SUMMARY","TT_ART_STAGING_SUMMARY","TT_ADHERENCE_INPUT","TT_LAB_ORDERS","TT_PERSON_RESULT_VIEW","TT_PROGRAM_SELECTION","TT_DATE_PICKER","TT_RELATION_SELECTION","TT_FILING_NUMBER_VIEW","TT_PERSON_MATCH_VIEW","TT_FULL_DATE","TT_BATCH_ENTRY","TT_BATCH_VERIFICATION","TT_BATCH_MOVEMENT","TT_IP_ADDRESS","TT_TEXT_BANNER","TT_DISPENSATION_INPUT","TT_DATA_TABLE","TT_GROUP_SELECTOR","TT_ANC_PREGNANCY_INPUT_CONFIG","TT_ANC_PREGNANCY_DETAILS_INPUT","TT_ANC_LMP_DATE_INPUT","TT_DRUG_TRANSFER_IN","TT_GRID_SELECTOR","TT_ANC_DRUGSET_INPUT","TT_RADIOLOGY_PICKER","TT_PRESCRIPTION_INPUT","TT_INFINITE_SCROLL_MULTIPLE_SELECT","webpackAsyncContext","req","__webpack_require__","resolve","Error","code","ids","slice","keys","module","exports"],"mappings":"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,eACVlN,EAAUmN,sBACVnN,EAAUoN,sBACVpN,EAAUqN,qBACVrN,EAAUsN,aACVtN,EAAUuN,eACVvN,EAAUwN,sBACVxN,EAAUyN,kBACVzN,EAAU0N,cACV1N,EAAU2N,eACV3N,EAAU4N,sBACV5N,EAAU6N,cACV7N,EAAU8N,kBACV9N,EAAU+N,8BACV/N,EAAUgO,+BACVhO,EAAUiO,sBACVjO,EAAUkO,oBACVlO,EAAUmO,iBACVnO,EAAUoO,qBACVpO,EAAUqO,oBACVrO,EAAUsO,sBACVtO,EAAUuO,mCACVvO,EAAUC,oB,qBCpHd,IAAInC,EAAM,CACT,wBAAyB,CACxB,OACA,qBAED,wBAAyB,CACxB,OACA,qBAED,iCAAkC,CACjC,OACA,qBAED,+BAAgC,CAC/B,OACA,qBAED,0BAA2B,CAC1B,OACA,qBAED,yBAA0B,CACzB,OACA,iBACA,qBAED,sBAAuB,CACtB,OACA,qBAED,kCAAmC,CAClC,OACA,qBAED,0BAA2B,CAC1B,OACA,iBACA,qBAED,mBAAoB,CACnB,OACA,qBAED,yBAA0B,CACzB,OACA,sBAED,6BAA8B,CAC7B,OACA,sBAED,0BAA2B,CAC1B,OACA,iBACA,sBAED,oBAAqB,CACpB,OACA,sBAED,wBAAyB,CACxB,OACA,iBACA,sBAED,+BAAgC,CAC/B,OACA,sBAED,wBAAyB,CACxB,OACA,sBAED,sBAAuB,CACtB,OACA,iBACA,iBACA,sBAED,yBAA0B,CACzB,OACA,iBACA,iBACA,sBAED,6BAA8B,CAC7B,OACA,iBACA,iBACA,sBAED,wBAAyB,CACxB,OACA,sBAED,+BAAgC,CAC/B,OACA,iBACA,sBAED,4BAA6B,CAC5B,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,sBAAuB,CACtB,OACA,iBACA,sBAED,uBAAwB,CACvB,OACA,iBACA,sBAED,wBAAyB,CACxB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,wCAAyC,CACxC,OACA,sBAED,qBAAsB,CACrB,OACA,iBACA,sBAED,uBAAwB,CACvB,OACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,0BAA2B,CAC1B,OACA,iBACA,sBAED,6BAA8B,CAC7B,OACA,sBAED,gBAAiB,CAChB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,6BAA8B,CAC7B,OACA,iBACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,kBAAmB,CAClB,OACA,sBAED,mBAAoB,CACnB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,sBAAuB,CACtB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,wBAAyB,CACxB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,oBAAqB,CACpB,OACA,sBAED,oBAAqB,CACpB,OACA,uBAGF,SAAS0Q,EAAoBC,GAC5B,IAAIC,EAAoBvP,EAAErB,EAAK2Q,GAC9B,OAAOlT,QAAQoT,UAAU7L,MAAK,WAC7B,IAAIwC,EAAI,IAAIsJ,MAAM,uBAAyBH,EAAM,KAEjD,MADAnJ,EAAEuJ,KAAO,mBACHvJ,KAIR,IAAIwJ,EAAMhR,EAAI2Q,GAAM5O,EAAKiP,EAAI,GAC7B,OAAOvT,QAAQC,IAAIsT,EAAIC,MAAM,GAAGjR,IAAI4Q,EAAoBpJ,IAAIxC,MAAK,WAChE,OAAO4L,EAAoB7O,MAG7B2O,EAAoBQ,KAAO,WAC1B,OAAOzH,OAAOyH,KAAKlR,IAEpB0Q,EAAoB3O,GAAK,OACzBoP,EAAOC,QAAUV","file":"js/chunk-7680322b.ef9ee122.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields\n  }, null, 8, [\"cancelDestinationPath\", \"fields\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\n\nexport class DispensationService extends AppEncounterService {\n  drugHistory: Array<any>;\n  currentDrugOrder: Array<any>;\n\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 54, providerID)\n    this.drugHistory = []\n    this.currentDrugOrder = []\n  }\n\n  getDrugHistory() {\n    return this.drugHistory\n  }\n\n  getCurrentOrder() {\n    return this.currentDrugOrder\n  }\n\n  buildDispensations(orderId: number, quantity: number) {\n    return [{\n      'drug_order_id': orderId,\n      date: this.date,\n      quantity: quantity\n    }]\n  }\n\n  saveDispensations(dispensations: Array<any>) {\n    return AppEncounterService.postJson('/dispensations', { \n      dispensations, \n      'program_id': AppEncounterService.getProgramID()\n    })\n  }\n\n  async voidOrder(orderId: number) {\n    return AppEncounterService.void(`/dispensations/${orderId}`, {})\n  }\n\n  async loadDrugHistory() {\n    const res = await DrugOrderService.getDrugOrderHistory(this.patientID)\n    if (res) {\n      this.drugHistory = res\n    }\n  }\n\n  async loadCurrentDrugOrder() {\n    const res = await DrugOrderService.getDrugOrders(this.patientID)\n    if (res) {\n      this.currentDrugOrder = await Promise.all(res)        \n    }\n  }\n\n  calcCompletePack(drug: any, units: number) {\n     //sorting in an ascending order by tabs\n    const drugOrderBarcodes = drug.barcodes.sort(function (a: any, b: any) {\n      return a.tabs - b.tabs;\n    });\n    if (drugOrderBarcodes.length == 0 || units == 0.0) {\n      return units;\n    }\n    for (let i = 0; i <= drugOrderBarcodes.length - 1; i++) {\n      if (parseInt(drugOrderBarcodes[i].tabs) >= units) {\n        return drugOrderBarcodes[i].tabs;\n      }\n    }\n    const smallestAvailableTab = parseInt(drugOrderBarcodes[0].tabs)\n    let completePack = parseInt(drugOrderBarcodes[drugOrderBarcodes.length - 1].tabs)\n    while (completePack < units) {\n      completePack += smallestAvailableTab\n    }\n    return completePack\n  }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { toastWarning, alertConfirmation } from \"@/utils/Alerts\"\nimport { DispensationService } from \"@/apps/OPD/services/dispensation_service\"\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport HisDate from \"@/utils/Date\"\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    dispensation: {} as any\n  }),\n  watch: {\n    patient: {\n      async handler(patient: any){\n        this.dispensation = new DispensationService(patient.getID(), this.providerID)\n        await this.dispensation.loadCurrentDrugOrder()\n        await this.dispensation.loadDrugHistory()\n        this.fields = this.getFields()\n      },\n      deep: true\n    }\n  },\n  methods: {\n    saveDispensations(item: Option) {\n      const dispensations = this.buildDispensations(item)\n      return this.dispensation.saveDispensations(dispensations)    \n    },\n    buildDispensations(item: Option) {\n      return this.dispensation.buildDispensations(\n        item.other.order_id, item.value\n      )\n    },\n    buildMedicationHistory() {\n      return this.dispensation.getDrugHistory()\n      .sort((a: any, b: any) => {\n        const dateA: any = new Date(a.order.start_date)\n        const dateB: any = new Date(b.order.start_date)\n        return dateB - dateA\n      })\n      .map((d: any) => ({\n        medication: d.drug.name,\n        date: HisDate.toStandardHisDisplayFormat(d.order.start_date),\n        amount: d.quantity\n      }))\n    },\n    buildOrderOptions() {\n      return this.dispensation.getCurrentOrder().map((d: any) => ({\n        label: d.drug.name,\n        value: d.quantity || 0,\n        other: {\n          'drug_id': d.drug.drug_id,\n          'order_id': d.order.order_id,\n          'amount_needed': this.calculateCompletePack(d),\n        }\n      }))\n    },\n    getPackSizesRows(drugId: number, availableStock: number) {\n      const packs = this.dispensation.getDrugPackSizes(drugId)\n      return packs.map((packSize: number) => {\n        const packs = availableStock > 0 ? (availableStock / packSize) : '-'\n        return [packSize, packs, 0, 0]\n      })\n    },\n    calculateCompletePack(order: any) {\n      const units = parseFloat(order.amount_needed) - (order.quantity || 0)\n      const completePack = this.dispensation.calcCompletePack(order, units)\n      return completePack < 0 ? 0 : completePack\n    },\n    isDoneDispensing(orders: Array<Option>) {\n      return orders.map(o => o.value != 0).every(Boolean)\n    },\n    async isValidDispensation(option: Option) {\n      let isOk = true\n      const totalTabs = parseInt(option.value.toString())\n      const amountNeeded = option.other['amount_needed']\n      const percentageGiven = (totalTabs / amountNeeded) * 100\n      if (percentageGiven > 110) {\n        isOk = await alertConfirmation('Are you sure you want to dispense over 110% of the prescribed pill count?')\n      }\n      if (percentageGiven < 100) {\n        isOk = await alertConfirmation('Are you sure you want to dispense less than 100% of the prescribe amount?')\n      }\n      return isOk\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: 'dispenses',\n          helpText: 'Dispensation',\n          type: FieldType.TT_DRUG_DISPENSER,\n          onValueUpdate: async(i: Option, l: Option[]) => {\n            if(i.value != -1 && this.isDoneDispensing(l)) {\n              return this.gotoPatientDashboard()\n            }\n            i.other['amount_needed'] = 0\n            await this.dispensation.loadCurrentDrugOrder()\n            return this.buildOrderOptions()\n          },\n          onValue: async (i: Option, isBarcodeScanned: boolean) => {\n            if (i.value  === -1) {\n              const voided = await this.dispensation.voidOrder(i.other.order_id)\n              return voided? true : false\n            }\n            if (!isBarcodeScanned) {\n              const isValidDispensation = await this.isValidDispensation(i)\n              if (!isValidDispensation) return false\n            }\n            const dispensed = await this.saveDispensations(i)\n            if (dispensed) return true\n            toastWarning('Unable to save dispensation')\n            return false\n          },\n          config: {\n            medicationHistory: this.buildMedicationHistory(),\n            toolbarInfo: [\n              { label: 'Name', value: this.patient.getFullName() },\n              { label: 'Gender', value: this.patient.getGender() },\n              { label: 'Date Of Birth', value: HisDate.toStandardHisDisplayFormat(\n                this.patient.getBirthdate()\n              )}\n            ],\n            hiddenFooterBtns: [ \n              'Clear',\n              'Finish'\n            ]\n          },\n          options: () => this.buildOrderOptions()\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./Dispensing.vue?vue&type=template&id=1e367495&ts=true\"\nimport script from \"./Dispensing.vue?vue&type=script&lang=ts\"\nexport * from \"./Dispensing.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/anthony/Documents/source/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","\n/**\n * @deprecated moved to useEncounter composable\n * \n */\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/anthony/Documents/source/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: (facts: FactsInterface) => any;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: ConditionsInteface;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\nexport type FactsInterface = Record<string, any>\nexport type ConditionResolver = (value: any, facts: FactsInterface) => boolean | RegExpMatchArray | null\nexport type ConditionsInteface = Record<string, ConditionResolver>\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: FactsInterface, conditions: ConditionsInteface): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: FactsInterface, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","/**\n * Map all formElements/components defined in \"@/components/FormElements\" \n * in the Enum below by their file name.\n * \n * Next step is to add FieldType entry in COMPONENT_REFS in the \n * Array below the FieldType Enum\n */\nexport enum FieldType {\n    TT_ASYNC_MULTI_SELECT = 'AsyncMultiSelect',\n    TT_LINKAGE_CODE = 'LinkageCodeInput',\n    TT_MULTI_SELECT_GRID= 'HisMultiSelectGrid',\n    TT_AGE_INPUT='HisAgeInput',\n    TT_GROUP_SELECTOR = 'HisGroupSelector',\n    TT_DATA_TABLE = 'HisDataTable',\n    TT_GRID_SELECTOR = 'HisGridSelector',\n    TT_NOTE = 'HisNote',\n    TT_BARCODE = 'HisBarcodeInput',\n    TT_MONTHLY_DAYS=\"HisMonthlyDays\",\n    TT_TEXT=\"HisTextInput\",\n    TT_NUMBER = \"HisNumberInput\",\n    TT_DATETIME=\"datetime\",\n    TT_SELECT=\"HisSelect\",\n    TT_MULTIPLE_SELECT=\"HisMultipleSelect\",\n    TT_ART_REGIMEN_SELECTION=\"HisArtRegimenSelection\",\n    TT_NEXT_VISIT_INTERVAL_SELECTION=\"HisNextVisitInterval\",\n    TT_TABLE_VIEWER=\"HisTableViewer\",\n    TT_DOSAGE_INPUT=\"HisDosageInput\",\n    TT_YES_NO=\"YesNoSelect\",\n    TT_MULTIPLE_YES_NO=\"MultiYesNoSelect\",\n    TT_SUMMARY=\"HisSummary\",\n    TT_WEIGHT_CHART = \"HisWeightChart\",\n    TT_VITALS_ENTRY=\"HisVitalsEntry\",\n    TT_ADHERENCE_INPUT = \"HisAdherenceInput\",\n    TT_ART_STAGING_SUMMARY = \"ArtStagingSummary\",\n    TT_LAB_ORDERS = \"HisLabOrders\",\n    TT_APPOINTMENTS_ENTRY = \"HisAppointments\",\n    TT_DISPENSATION_INPUT = 'DrugDispensationSelection',\n    TT_PROGRAM_SELECTION = 'ProgramSelection',\n    TT_DATE_PICKER = 'HisDatePicker',\n    TT_PERSON_RESULT_VIEW = 'PersonSearchView',\n    TT_RELATION_SELECTION = 'RelationsSelection',\n    TT_FILING_NUMBER_VIEW = 'FilingNumberView',\n    TT_CARD_SELECTOR = 'HisCardSelector',\n    TT_PERSON_MATCH_VIEW = 'PersonMatchView',\n    TT_FULL_DATE = 'HisDateInput',\n    TT_BATCH_ENTRY = 'HisBatchEntry',\n    TT_BATCH_VERIFICATION = 'HisBatchVerification',\n    TT_BATCH_MOVEMENT = 'HisBatchMovement',\n    TT_COMPLAINTS_PICKER = 'HisComplaintsPicker',\n    TT_RADIOLOGY_PICKER = 'HisRadiologyPicker',\n    TT_IP_ADDRESS = 'HisIPAddress',\n    TT_TEXT_BANNER = 'HisTextBanner',\n    TT_DRUG_DISPENSER = 'GeneralDrugDispenser',\n    TT_CLINIC_HOLIDAY_PICKER = 'HisClinicHolidayPicker',\n    TT_ANC_PREGNANCY_INPUT_CONFIG = 'AncPregnancyInfoConfig',\n    TT_ANC_PREGNANCY_DETAILS_INPUT = 'AncPregnancyDetailsInput',\n    TT_ANC_LMP_DATE_INPUT = 'AncLmpDateInput',\n    TT_ANC_DRUGSET_INPUT = 'AncDrugSetInput',\n    TT_DRUG_TRANSFER_IN = 'DrugTransferInput',\n    TT_PRESCRIPTION_INPUT = 'HisPrescriptionInput',\n    TT_INFINITE_SCROLL_MULTIPLE_SELECT=\"HisInfiniteScrollMultipleSelect\"\n}\n\n// Register FieldTypes here that will be registered at runtime\nexport const COMPONENT_REFS: FieldType[] = [\n    FieldType.TT_ASYNC_MULTI_SELECT,\n    FieldType.TT_LINKAGE_CODE,\n    FieldType.TT_MULTI_SELECT_GRID,\n    FieldType.TT_AGE_INPUT,\n    FieldType.TT_BARCODE,\n    FieldType.TT_NOTE,\n    FieldType.TT_SELECT,\n    FieldType.TT_CARD_SELECTOR,\n    FieldType.TT_MULTIPLE_SELECT,\n    FieldType.TT_TEXT,\n    FieldType.TT_NUMBER,\n    FieldType.TT_MONTHLY_DAYS,\n    FieldType.TT_ART_REGIMEN_SELECTION,\n    FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n    FieldType.TT_TABLE_VIEWER,\n    FieldType.TT_DOSAGE_INPUT,\n    FieldType.TT_YES_NO,\n    FieldType.TT_MULTIPLE_YES_NO,\n    FieldType.TT_WEIGHT_CHART,\n    FieldType.TT_VITALS_ENTRY,\n    FieldType.TT_APPOINTMENTS_ENTRY,\n    FieldType.TT_COMPLAINTS_PICKER,\n    FieldType.TT_CLINIC_HOLIDAY_PICKER,\n    FieldType.TT_SUMMARY,\n    FieldType.TT_ART_STAGING_SUMMARY,\n    FieldType.TT_ADHERENCE_INPUT,\n    FieldType.TT_LAB_ORDERS,\n    FieldType.TT_PERSON_RESULT_VIEW,\n    FieldType.TT_PROGRAM_SELECTION,\n    FieldType.TT_DATE_PICKER,\n    FieldType.TT_RELATION_SELECTION,\n    FieldType.TT_FILING_NUMBER_VIEW,\n    FieldType.TT_PERSON_MATCH_VIEW,\n    FieldType.TT_FULL_DATE,\n    FieldType.TT_BATCH_ENTRY,\n    FieldType.TT_BATCH_VERIFICATION,\n    FieldType.TT_BATCH_MOVEMENT,\n    FieldType.TT_IP_ADDRESS,\n    FieldType.TT_TEXT_BANNER,\n    FieldType.TT_DISPENSATION_INPUT,\n    FieldType.TT_DATA_TABLE,\n    FieldType.TT_GROUP_SELECTOR,\n    FieldType.TT_ANC_PREGNANCY_INPUT_CONFIG,\n    FieldType.TT_ANC_PREGNANCY_DETAILS_INPUT,\n    FieldType.TT_ANC_LMP_DATE_INPUT,\n    FieldType.TT_DRUG_TRANSFER_IN,\n    FieldType.TT_GRID_SELECTOR,\n    FieldType.TT_ANC_DRUGSET_INPUT,\n    FieldType.TT_RADIOLOGY_PICKER,\n    FieldType.TT_PRESCRIPTION_INPUT,\n    FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n    FieldType.TT_DRUG_DISPENSER\n]\n","var map = {\n\t\"./AncDrugSetInput.vue\": [\n\t\t\"c99f\",\n\t\t\"TouchFormElement0\"\n\t],\n\t\"./AncLmpDateInput.vue\": [\n\t\t\"101a\",\n\t\t\"TouchFormElement1\"\n\t],\n\t\"./AncPregnancyDetailsInput.vue\": [\n\t\t\"b043\",\n\t\t\"TouchFormElement2\"\n\t],\n\t\"./AncPregnancyInfoConfig.vue\": [\n\t\t\"262e\",\n\t\t\"TouchFormElement3\"\n\t],\n\t\"./ArtStagingSummary.vue\": [\n\t\t\"43db\",\n\t\t\"TouchFormElement4\"\n\t],\n\t\"./AsyncMultiSelect.vue\": [\n\t\t\"5de2\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement5\"\n\t],\n\t\"./BaseTextInput.vue\": [\n\t\t\"36ad\",\n\t\t\"TouchFormElement6\"\n\t],\n\t\"./DrugDispensationSelection.vue\": [\n\t\t\"05d5\",\n\t\t\"TouchFormElement7\"\n\t],\n\t\"./DrugTransferInput.vue\": [\n\t\t\"de42\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement8\"\n\t],\n\t\"./FieldMixin.vue\": [\n\t\t\"51c8\",\n\t\t\"TouchFormElement9\"\n\t],\n\t\"./FilingNumberView.vue\": [\n\t\t\"c650\",\n\t\t\"TouchFormElement10\"\n\t],\n\t\"./GeneralDrugDispenser.vue\": [\n\t\t\"7737\",\n\t\t\"TouchFormElement11\"\n\t],\n\t\"./HisAdherenceInput.vue\": [\n\t\t\"f2c3\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement12\"\n\t],\n\t\"./HisAgeInput.vue\": [\n\t\t\"c05f\",\n\t\t\"TouchFormElement13\"\n\t],\n\t\"./HisAppointments.vue\": [\n\t\t\"b2eb\",\n\t\t\"chunk-d64a144c\",\n\t\t\"TouchFormElement14\"\n\t],\n\t\"./HisArtRegimenSelection.vue\": [\n\t\t\"47b9\",\n\t\t\"TouchFormElement15\"\n\t],\n\t\"./HisBarcodeInput.vue\": [\n\t\t\"dd65\",\n\t\t\"TouchFormElement16\"\n\t],\n\t\"./HisBatchEntry.vue\": [\n\t\t\"f2ab\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement17\"\n\t],\n\t\"./HisBatchMovement.vue\": [\n\t\t\"5148\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement18\"\n\t],\n\t\"./HisBatchVerification.vue\": [\n\t\t\"7b0f\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement19\"\n\t],\n\t\"./HisCardSelector.vue\": [\n\t\t\"0734\",\n\t\t\"TouchFormElement20\"\n\t],\n\t\"./HisClinicHolidayPicker.vue\": [\n\t\t\"4030\",\n\t\t\"chunk-d64a144c\",\n\t\t\"TouchFormElement21\"\n\t],\n\t\"./HisComplaintsPicker.vue\": [\n\t\t\"82d1\",\n\t\t\"TouchFormElement22\"\n\t],\n\t\"./HisDataTable.vue\": [\n\t\t\"a6ba\",\n\t\t\"TouchFormElement23\"\n\t],\n\t\"./HisDateInput.vue\": [\n\t\t\"374c\",\n\t\t\"TouchFormElement24\"\n\t],\n\t\"./HisDatePicker.vue\": [\n\t\t\"9b30\",\n\t\t\"chunk-d64a144c\",\n\t\t\"TouchFormElement25\"\n\t],\n\t\"./HisDosageInput.vue\": [\n\t\t\"b34c\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement26\"\n\t],\n\t\"./HisGridSelector.vue\": [\n\t\t\"112a\",\n\t\t\"TouchFormElement27\"\n\t],\n\t\"./HisGroupSelector.vue\": [\n\t\t\"81cf\",\n\t\t\"TouchFormElement28\"\n\t],\n\t\"./HisIPAddress.vue\": [\n\t\t\"2a82\",\n\t\t\"TouchFormElement29\"\n\t],\n\t\"./HisInfiniteScrollMultipleSelect.vue\": [\n\t\t\"52a3\",\n\t\t\"TouchFormElement30\"\n\t],\n\t\"./HisLabOrders.vue\": [\n\t\t\"e614\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement31\"\n\t],\n\t\"./HisMonthlyDays.vue\": [\n\t\t\"69cf\",\n\t\t\"TouchFormElement32\"\n\t],\n\t\"./HisMultiSelectGrid.vue\": [\n\t\t\"0fa3\",\n\t\t\"TouchFormElement33\"\n\t],\n\t\"./HisMultipleSelect.vue\": [\n\t\t\"2fd5\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement34\"\n\t],\n\t\"./HisNextVisitInterval.vue\": [\n\t\t\"3126\",\n\t\t\"TouchFormElement35\"\n\t],\n\t\"./HisNote.vue\": [\n\t\t\"c927\",\n\t\t\"TouchFormElement36\"\n\t],\n\t\"./HisNumberInput.vue\": [\n\t\t\"5e75\",\n\t\t\"TouchFormElement37\"\n\t],\n\t\"./HisPrescriptionInput.vue\": [\n\t\t\"87e5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement38\"\n\t],\n\t\"./HisRadiologyPicker.vue\": [\n\t\t\"adc7\",\n\t\t\"TouchFormElement39\"\n\t],\n\t\"./HisSelect.vue\": [\n\t\t\"d11f\",\n\t\t\"TouchFormElement40\"\n\t],\n\t\"./HisSummary.vue\": [\n\t\t\"e0bd\",\n\t\t\"TouchFormElement41\"\n\t],\n\t\"./HisTableViewer.vue\": [\n\t\t\"8904\",\n\t\t\"TouchFormElement42\"\n\t],\n\t\"./HisTextBanner.vue\": [\n\t\t\"952c\",\n\t\t\"TouchFormElement43\"\n\t],\n\t\"./HisTextInput.vue\": [\n\t\t\"6ef9\",\n\t\t\"TouchFormElement44\"\n\t],\n\t\"./HisVitalsEntry.vue\": [\n\t\t\"e333\",\n\t\t\"TouchFormElement45\"\n\t],\n\t\"./HisWeightChart.vue\": [\n\t\t\"26a1\",\n\t\t\"TouchFormElement46\"\n\t],\n\t\"./LinkageCodeInput.vue\": [\n\t\t\"ac86\",\n\t\t\"TouchFormElement47\"\n\t],\n\t\"./MultiYesNoSelect.vue\": [\n\t\t\"5fd1\",\n\t\t\"TouchFormElement48\"\n\t],\n\t\"./PersonMatchView.vue\": [\n\t\t\"6591\",\n\t\t\"TouchFormElement49\"\n\t],\n\t\"./PersonSearchView.vue\": [\n\t\t\"28b2\",\n\t\t\"TouchFormElement50\"\n\t],\n\t\"./ProgramSelection.vue\": [\n\t\t\"e3b4\",\n\t\t\"TouchFormElement51\"\n\t],\n\t\"./RelationsSelection.vue\": [\n\t\t\"0e57\",\n\t\t\"TouchFormElement52\"\n\t],\n\t\"./SelectMixin.vue\": [\n\t\t\"82a9\",\n\t\t\"TouchFormElement53\"\n\t],\n\t\"./YesNoSelect.vue\": [\n\t\t\"71f2\",\n\t\t\"TouchFormElement54\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"f159\";\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}