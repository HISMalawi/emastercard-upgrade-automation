{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/apps/ART/guidelines/staging_guidelines.ts","webpack:///./src/apps/ART/services/staging_service.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ART/views/encounters/StagingMixin.vue","webpack:///./src/apps/ART/views/encounters/StagingMixin.vue?d80f"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","facts","ready","watch","handler","route","params","patient_id","this","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","e","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","CD4_AS_START_REASON_CUTOFF_DATE","ADULT_WHO_STAGE_CRITERIA","concept","stage","reasonForArt","reason","CHILD_WHO_STAGE_CRITERIA","CONTRADICTING_STAGE_DEFINITIONS_ALERTS","alertConfirmation","bmi","confirmBtnLabel","cancelBtnLabel","selectedCondition","keepAsymptomatic","selectedConditions","stageThreeConditions","stageFourConditions","stageTwoConditions","RECOMMENDED_CHILD_STAGING_CONDITIONS","isChecked","description","show","info","weightPercentile","disabled","includes","RECOMMENDED_ADULT_STAGING_CONDITIONS","CHILD_ART_ELIGIBILITY","ageInMonths","age","pshdConditions","ConceptService","getConceptsByCategory","pshdCondition","testType","cd4Date","date","Date","cd4","cd4Modifier","modifier","gender","breastFeeding","answer","pregnant","ADULT_ART_ELIGIBILITY","severeSymp","found","total","symp","StagingCategory","StagingService","AppEncounterService","constructor","super","confirmatoryTest","isAdult","isPedaid","setAge","getFacilities","LocationService","getConfirmatoryTestType","cd4CountIsValid","match","getAlertGuidelines","getWhoStageGuidelines","getProgramEligibilityGuidelines","getRecommendedConditionGuidelines","getStagingConditions","category","getStagingCategoryByNum","getAllWhoStages","getAllReasonsForART","registrationDate","isMale","buildWhoStageObs","buildValueCoded","buildWhoCriteriaObs","buildReasonForArtObs","stageNumber","ADULT_STAGE_1","PEDAID_STAGE_1","ADULT_STAGE_2","PEDAID_STAGE_2","ADULT_STAGE_3","PEDAID_STAGE_3","ADULT_STAGE_4","PEDAID_STAGE_4","test","getFirstValueCoded","isCondition","ignored","undefined","prop","every","Boolean","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","text","mixins","EncounterMixinVue","staging","showStagingWeightChart","canShowStagingFields","bmiObj","stagingFacts","isChildBearing","stageOneConditions","whoStage","v","getID","getAge","loadHivConfirmatoryTestType","getBMI","getAgeInMonths","calculateWeightPercentile","computedValues","encounter","createEncounter","stagingObservations","derivedObservations","saveObservationList","ok","updateStagingFacts","curIndex","buildStagingOptions","previouslySelected","conceptFinding","concept_id","setWhoStage","setReasonForArt","notAsymptomatic","f","stageOneC","stage_1_conditions","asymptomatics","hasTransferLater","has_transfer_letter","hasStaging","getStagingSummaryField","helpText","id","type","FieldType","TT_ART_STAGING_SUMMARY","onload","config","hiddenFooterBtns","isANCclient","getSuspendedProgram","getStagingFields","TT_MULTIPLE_YES_NO","validation","Validation","anyEmpty","summaryMapValue","computedValue","factID","pregnancy_status","TT_WEIGHT_CHART","getWeightHistory","x","y","TT_MULTIPLE_SELECT","onValue","onStagingCondition","unload","onConditionFalse","val","TT_SELECT","required","TT_TEXT","charAt","count","substring","buildValueNumber","s","computedData","isCd4","customKeyboard","CD4_COUNT_PAD_LO","cd4_available","generateDateFields","minDate","maxDate","getDate","estimation","allowUnknown","computeValue","isEstimate","buildValueDate","defaultValue","getLocationName","buildValueText","_","showKeyboard","isFilterDataViaApi"],"mappings":"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","file":"js/chunk-4bce2b45.f2fef02f.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { ConceptService } from \"@/services/concept_service\"\nimport { alertConfirmation } from \"@/utils/Alerts\"\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\"\n\nexport const CD4_AS_START_REASON_CUTOFF_DATE = \"2014-04-01\";\n\nexport const ADULT_WHO_STAGE_CRITERIA: Record<string, GuideLineInterface> = {\n    'Adults with stage 4 conditions': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4,\n        }\n    },\n    'Classify as stage 4 when reason for ART is WHO STAGE 4': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 2,\n        conditions: {\n            reasonForArt: (reason: string) => reason === 'WHO STAGE IV ADULT'\n        }\n    },\n    'Adults with stage 3 conditions': {\n        concept: 'WHO STAGE III ADULT',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3\n        }\n    },\n    'Adults with stage 2 conditions': {\n        concept: 'WHO STAGE II ADULT',\n        priority: 4,\n        conditions: {\n            stage: (stage: number) => stage === 2,\n        }\n    },\n    'Adults with stage 1 conditions': {\n        concept: 'WHO STAGE I ADULT',\n        priority: 5,\n        conditions: {\n            stage: (stage: number) => stage === 1\n        }\n    }\n}\n\nexport const CHILD_WHO_STAGE_CRITERIA: Record<string, GuideLineInterface> = {\n    'Children with stage 4 conditions': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4,\n        }\n    },\n    'Classify as stage 4 when reason for ART is WHO STAGE 4': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 2,\n        conditions: {\n            reasonForArt: (reason: string) => reason === 'WHO STAGE IV PEDS'\n        }\n    },\n    'For children with stage 3 conditions': {\n        concept: 'WHO STAGE III PEDS',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3\n        }\n    },\n    'Children with stage 2 conditions': {\n        concept: 'WHO STAGE II PEDS',\n        priority: 4,\n        conditions: {\n            stage: (stage: number) => stage === 2\n        }\n    },\n    'Children with stage 1 conditions': {\n        concept: 'WHO STAGE I PEDS',\n        priority: 5,\n        conditions: {\n            stage: (stage: number) => stage === 1\n        }\n    }\n}\n\nexport const CONTRADICTING_STAGE_DEFINITIONS_ALERTS: Record<string, GuideLineInterface> = {\n    \"Warn if Severe weight loss is selected when actual patient BMI is acceptable\": {\n        priority: 1,\n        actions: {\n            alert: async (facts: any) => await alertConfirmation(`Patient's BMI of ${facts.bmi} greater than 18.5, do you wish to proceed?`, {\n                confirmBtnLabel: 'Yes, keep severe weightloss',\n                cancelBtnLabel: 'No, cancel'\n            }),\n        },\n        conditions: {\n            selectedCondition (condition: string) {\n                return condition === 'Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained'\n            },\n            bmi:(bmi: number) => bmi > 18.5\n        }\n    },\n    \"Warn for contradicting stage defining conditions\": {\n        priority: 1,\n        actions: {\n            alert: async (facts: any) => {\n                const keepAsymptomatic = await alertConfirmation('CONTRADICTING STAGE DEFINING CONDITIONS', {\n                    confirmBtnLabel: \"Keep Asymptomatic\",\n                    cancelBtnLabel: 'Keep other(s)'\n                })\n                if(keepAsymptomatic) {\n                    facts.stage = 1\n                    facts.selectedConditions = []\n                    facts.stageThreeConditions = []\n                    facts.stageFourConditions = []\n                    facts.stageTwoConditions = []\n                    return true\n                }\n                return false\n            },\n        },\n        conditions: {\n            selectedCondition(condition: string){\n                return condition === 'Asymptomatic HIV infection'\n            },\n            stage: (stage: number) => stage >= 2\n        }\n    },\n}\n\nexport const RECOMMENDED_CHILD_STAGING_CONDITIONS: Record<string, GuideLineInterface> = {\n    'For children whose current weight percentile is less than 70' : {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Child has a low weight percentile of ${facts.weightPercentile}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Severe unexplained wasting or malnutrition not responding to treatment (weight-for-height/ -age <70% or MUAC less than 11cm or oedema)'\n            },\n            weightPercentile(weightPercentile: number){\n                return weightPercentile < 70\n            }\n        }\n    },\n    'Enable Moderate unexplained malnutrition for children whose weight for height is 70-79%': {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Child has weight percentile of ${facts.weightPercentile}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate unexplained wasting/malnutrition not responding to treatment (weight-for-height/ -age 70-79% or muac 11-12 cm)'\n            },\n            weightPercentile(weightPercentile: number){\n                return weightPercentile >= 70 && weightPercentile <= 79\n            }\n        }\n    },\n    'Disable moderate weight loss when Severe unexplained weight loss is chosen': {\n        priority: 2,\n        actions: {\n            isChecked: false,\n            disabled: true\n        },\n        description: {\n            color: 'secondary',\n            show: 'always',\n            info: () => 'Severe weight loss/manutrition was already selected',\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate unexplained wasting/malnutrition not responding to treatment (weight-for-height/ -age 70-79% or muac 11-12 cm)'\n            },\n            selectedConditions(conditions: Array<string>) {\n                return conditions.includes('Severe unexplained wasting or malnutrition not responding to treatment (weight-for-height/ -age <70% or MUAC less than 11cm or oedema)')\n            }\n        }\n    }\n}\n\nexport const RECOMMENDED_ADULT_STAGING_CONDITIONS: Record<string, GuideLineInterface> = {\n    'Adults with a BMI less than 16': {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Adult has a low BMI of ${facts.bmi}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained'\n            },\n            bmi: (bmi: number) => bmi < 16\n        }\n    },\n    'Adults whose BMI is between 16 and 18': {\n        priority: 3,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'warning',\n            show: 'onChecked',\n            info: (facts: any) => `BMI of ${facts.bmi} is between 16 and 18`,\n        },\n        conditions: {\n            selectedCondition: (condition: string) => condition === 'Moderate weight loss less than or equal to 10 percent, unexplained',\n            bmi: (bmi: number) => bmi >= 16.0 && bmi <= 18.5\n        }\n    },\n    \"Disable Moderate weight loss if severe weightloss is selected\": {\n        priority: 2,\n        actions: {\n            isChecked: false,\n            disabled: true\n        },\n        description: {\n            color: 'secondary',\n            show: 'always',\n            info: () => 'Severe weight loss was already selected',\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate weight loss less than or equal to 10 percent, unexplained'\n            },\n            selectedConditions(conditions: Array<string>) {\n                return conditions.includes('Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained')\n            }\n        }\n    }\n}\n\nexport const CHILD_ART_ELIGIBILITY: Record<string, GuideLineInterface> = {\n    'Has stage 4 conditions': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4\n        }\n    },\n    'Has stage 3 conditions': {\n        concept: 'WHO STAGE III PEDS',\n        priority: 2,\n        conditions: {\n            stage: (stage: number) => stage === 3,\n        }\n    },\n    'Children under twelve months who tested positive on Rapid test and have presumed severe HIV': {\n        concept: 'PRESUMED SEVERE HIV',\n        priority: 3,\n        conditions: {\n            ageInMonths(age: number){\n                return age < 12 \n            },\n            selectedConditions: (conditions: Array<string>) => {\n                const pshdConditions = ConceptService.getConceptsByCategory('pshd_condition')\n                for (const pshdCondition in pshdConditions) {\n                    if (conditions.includes(pshdCondition)) return true\n                }\n                return false\n            },\n            testType(testType: string){\n                return testType === 'HIV rapid test'\n            },\n        }\n    },\n    \"Children under twelve who tested positive via HIV DNA Polymerase Chain Reaction test\": {\n        concept: 'HIV DNA polymerase chain reaction',\n        priority: 4,\n        conditions: {\n            ageInMonths: (age: number) => age < 12,\n            testType: (testType: string) => testType === \"HIV DNA polymerase chain reaction\",\n        }\n    },\n    \"Children who are less than 24 months\": {\n        concept: 'HIV infected',\n        priority: 5,\n        conditions: {\n            ageInMonths: (age: number) => age < 24\n        }\n    },\n    \"Children between 24 and 56 months who have stage 2 or 1 conditions\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 750',\n        priority: 6,\n        conditions: {\n            ageInMonths(age: number) {\n                return age >= 24 && age <= 56\n            },\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 750\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            },\n            stage(stage: number) {\n                return stage <= 2\n            }\n        }\n    },\n    \"Children with CD4 count less than 500 and have stage 1 and stage 2 conditions\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 500',\n        priority: 7,\n        conditions: {\n            cd4(cd4: number){\n                return cd4 <= 500\n            },\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4Modifier(modifier: string){\n                return modifier === '<' || modifier === '='\n            },\n            stage(stage: number) {\n                return stage <= 2\n            }\n        }\n    },\n    \"Children over the date 2014-04-01 who are more than five years old and have cd4 count less than 500\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 500',\n        priority: 9,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            age(age: number) {\n                return age > 5\n            },\n            cd4(cd4: number) {\n                return cd4 <= 500\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    \"Children over date 2014-04-01 and less than Five years old\": {\n        concept: 'HIV infected',\n        priority: 10,\n        conditions: {\n            date(date: string) {\n                return date >= '2014-04-01'\n            },\n            age(age: number) {\n                return age <= 5\n            }\n        }\n    },\n    'Women who are breast feeding': {\n        concept: 'BREASTFEEDING',\n        priority: 11,\n        conditions: {\n            gender(gender: string){\n                return gender === 'F'\n            },\n            breastFeeding(answer: string){\n                return  answer === 'Yes'\n            },\n            stage: (stage: number) => stage <= 2\n        }\n    },\n    'Women who are pregnant': {\n        concept: 'PATIENT PREGNANT',\n        priority: 12,\n        conditions: {\n            gender(gender: string) {\n                return gender === 'F'\n            },\n            pregnant(answer: string){\n                return answer === 'Yes'\n            },\n            stage(stage: number) {\n                return stage <= 2\n            },\n        }\n    },\n    \"Asymptomatic patient with either stage one or stage two conditions\": {\n        concept: 'Asymptomatic',\n        priority: 13,\n        conditions: {\n            stage: (stage: number) => stage <= 2\n        }\n    }\n}\n\nexport const ADULT_ART_ELIGIBILITY: Record<string, GuideLineInterface> = {\n    'Has stage 4 conditions': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4\n        }\n    },\n    'Has HIV wasting syndrome identified in stage 3': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 2,\n        conditions: {\n            selectedConditions: (conditions: Array<string>) => {\n                const severeSymp = ConceptService.getConceptsByCategory('severe_hiv_wasting_syndrome')\n                const found = severeSymp.reduce((total, symp) => conditions.includes(symp.name) ? total + 1 : 0, 0)\n                return found >= 2\n            }\n        }\n    },\n    'Has stage 3 conditions': {\n        concept: 'WHO STAGE III ADULT',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3,\n        }\n    },\n    'CD4 less than 350 for adults before 2014': {\n        concept: 'cd4 less than or equal to 350',\n        priority: 4,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 350\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 250 for adults after 2014': {\n        concept: 'cd4 less than or equal to 250',\n        priority: 4,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 250\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 350 for adults after 2014': {\n        concept: 'cd4 less than or equal to 350',\n        priority: 5,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 350\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 500 for adults after 2014': {\n        concept: 'cd4 less than or equal to 500',\n        priority: 6,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number){\n                return cd4 <= 500\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'Women who are breast feeding': {\n        concept: 'BREASTFEEDING',\n        priority: 8,\n        conditions: {\n            gender(gender: string){\n                return gender === 'F'\n            },\n            breastFeeding(answer: string){\n                return  answer === 'Yes'\n            },\n            stage: (stage: number) => stage <= 2\n        }\n    },\n    'Women who are pregnant': {\n        concept: 'PATIENT PREGNANT',\n        priority: 7,\n        conditions: {\n            gender(gender: string) {\n                return gender === 'F'\n            },\n            pregnant(answer: string){\n                return answer === 'Yes'\n            },\n            stage(stage: number) {\n                return stage <= 2\n            },\n        }\n    },\n    \"Asymptomatic patient with either stage one or stage two conditions\": {\n        concept: 'Asymptomatic',\n        priority: 9,\n        conditions: {\n            stage: (stage: number) => stage <= 2,\n        }\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { LocationService } from \"@/services/location_service\"\nimport {\n    RECOMMENDED_ADULT_STAGING_CONDITIONS,\n    CHILD_ART_ELIGIBILITY,\n    ADULT_ART_ELIGIBILITY,\n    ADULT_WHO_STAGE_CRITERIA,\n    CHILD_WHO_STAGE_CRITERIA,\n    CONTRADICTING_STAGE_DEFINITIONS_ALERTS,\n    RECOMMENDED_CHILD_STAGING_CONDITIONS,\n    CD4_AS_START_REASON_CUTOFF_DATE\n} from \"@/apps/ART/guidelines/staging_guidelines\"\n\n/**\n * Enable for filtering staging categories in ConceptName Dictionary\n */\nenum StagingCategory {\n    ADULT_STAGE_4 = 'stage_4_conditions_adults',\n    ADULT_STAGE_3 = 'stage_3_conditions_adults',\n    ADULT_STAGE_2 = 'stage_2_conditions_adults',\n    ADULT_STAGE_1 = 'stage_1_conditions_adults',\n    PEDAID_STAGE_4 = 'stage_4_conditions_pedaids',\n    PEDAID_STAGE_3 = 'stage_3_conditions_pedaids',\n    PEDAID_STAGE_2 = 'stage_2_conditions_pedaids',\n    PEDAID_STAGE_1 = 'stage_1_conditions_pedaids'\n}\n\nexport class StagingService extends AppEncounterService {\n    age: number\n    confirmatoryTest: string | null;\n    constructor(patientID: number, age: number, providerID: number) {\n        super(patientID, 52, providerID) //TODO: Use encounter type reference name\n        this.age = age\n        this.confirmatoryTest = null\n    }\n\n    isAdult() { return this.age >= 15 }\n\n    isPedaid() { return this.age <= 14 }\n\n    setAge(age: number) {\n        this.age = age\n    }\n\n    getFacilities (filter='') { return LocationService.getFacilities({name: filter}) }\n    \n    getConfirmatoryTestType() { return this.confirmatoryTest }\n\n    cd4CountIsValid(value: string) {\n        try {\n            return value.match(/^(=|<|>)([0-9]*)$/m) ? true : false\n        }catch(e) {\n            return false\n        }\n    }\n\n    getAlertGuidelines() {\n        return CONTRADICTING_STAGE_DEFINITIONS_ALERTS\n    }\n\n    getWhoStageGuidelines() {\n        return this.isAdult() ? ADULT_WHO_STAGE_CRITERIA : CHILD_WHO_STAGE_CRITERIA\n    }\n\n    getProgramEligibilityGuidelines() {\n        return this.isAdult() ? ADULT_ART_ELIGIBILITY: CHILD_ART_ELIGIBILITY\n    }\n\n    getRecommendedConditionGuidelines() {\n        return this.isAdult() ? RECOMMENDED_ADULT_STAGING_CONDITIONS: RECOMMENDED_CHILD_STAGING_CONDITIONS\n    }\n\n    getStagingConditions(stage: number) {\n        const category = this.getStagingCategoryByNum(stage)\n        return AppEncounterService.getConceptsByCategory(category)\n    }\n\n    getAllWhoStages() {\n        return AppEncounterService.getConceptsByCategory('whole_staging_numbers')\n    }\n\n    getAllReasonsForART(registrationDate = this.date, isMale = false) {\n        return AppEncounterService.getConceptsByCategory('reason_for_art')\n            .filter(reason => {\n                if(new Date(registrationDate) > new Date(CD4_AS_START_REASON_CUTOFF_DATE) && reason.name.match(/cd4/i)) return false\n                if(isMale && reason.name.match(/breastfeeding|pregnant/i)) return false\n                return true\n            })\n    }\n\n    buildWhoStageObs(stage: string) {\n        return this.buildValueCoded('Who stage', stage)\n    }\n    \n    buildWhoCriteriaObs(condition: string) {\n        return this.buildValueCoded('Who stages criteria present', condition)\n    }\n\n    buildReasonForArtObs(reason: string) {\n        return this.buildValueCoded('Reason for ART eligibility', reason)\n    }\n\n    private getStagingCategoryByNum(stageNumber: number) {\n        switch(stageNumber) {\n            case 1:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_1 : StagingCategory.PEDAID_STAGE_1\n            case 2:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_2 : StagingCategory.PEDAID_STAGE_2\n            case 3:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_3 : StagingCategory.PEDAID_STAGE_3\n            case 4:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_4 : StagingCategory.PEDAID_STAGE_4\n            default: \n                return ''\n        }\n    }\n\n    async loadHivConfirmatoryTestType() {\n        const test = await AppEncounterService.getFirstValueCoded(\n            this.patientID, 'Confirmatory hiv test type'\n        )\n        if (test) this.confirmatoryTest = test\n    }\n}\n","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { StagingService } from \"@/apps/ART/services/staging_service\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from \"lodash\"\nimport { CD4_COUNT_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport {\n    getFacilities\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        staging: {} as any,\n        showStagingWeightChart: true,\n        canShowStagingFields: true as boolean,\n        bmiObj: {} as any, \n        stagingFacts : {\n            age: -1 as number,\n            bmi: -1 as number,\n            gender: '' as 'M' | 'F',\n            stage: -1 as number,\n            cd4: -1 as number,\n            cd4Date: '' as string,\n            date: '' as string,\n            isChildBearing: false as boolean,\n            stageOneConditions: [] as Array<string>,\n            stageTwoConditions: [] as Array<string>,\n            stageThreeConditions: [] as Array<string>,\n            stageFourConditions: [] as Array<string>,\n            reasonForArt: '' as string,\n            testType: '' as string,\n            pregnant: '' as 'Yes' | 'No',\n            breastFeeding: '' as 'Yes' | 'No',\n            selectedCondition: '' as string,\n            selectedConditions: [] as Array<string>,\n            weightPercentile: -1 as number,\n            ageInMonths: -1 as number,\n            cd4Modifier: '' as string,\n            whoStage: '' as string\n        }\n    }),\n    watch: {\n        ready : {\n            handler(v) {\n                if (v) {\n                    this.staging = new StagingService(this.patient.getID(), this.patient.getAge(), this.providerID)\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async initStaging(patient: any) {\n            await this.staging.loadHivConfirmatoryTestType()\n            this.bmiObj = await patient.getBMI()\n            this.stagingFacts.age = patient.getAge()\n            this.stagingFacts.bmi = this.bmiObj['index']\n            this.stagingFacts.date = StagingService.getSessionDate()\n            this.stagingFacts.gender = patient.isMale() ? 'M' : 'F' \n            this.stagingFacts.testType = this.staging.getConfirmatoryTestType()\n            this.stagingFacts.ageInMonths = patient.getAgeInMonths()\n            this.stagingFacts.isChildBearing = patient.isChildBearing()\n\n            if (this.staging.isPedaid()) {\n                this.stagingFacts.weightPercentile = await patient.calculateWeightPercentile()\n            }\n        },\n        async submitStaging(computedValues: any) {\n            const encounter = await this.staging.createEncounter()\n\n            if (!encounter) throw 'Unable to create staging encounter'\n\n            const stagingObservations = await this.resolveObs(computedValues, 'staging')\n            const derivedObservations = await Promise.all([\n                this.buildReasonForArtObs(), this.buildWhoStageObs()\n            ])\n\n            const obs = await this.staging.saveObservationList([\n                ...stagingObservations, ...derivedObservations\n            ])\n\n            if (!obs) throw 'Unable to save patient observations'\n        },\n        async onStagingCondition({ label }: Option) {\n            this.stagingFacts.selectedCondition = label\n \n            const guidelines =  this.staging.getAlertGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n\n            if (isEmpty(findings)) \n                return true\n\n            if (findings[0]?.actions && findings[0]?.actions.alert) {\n                const ok = await findings[0]?.actions.alert(this.stagingFacts)\n                return ok ? true : false\n            }\n            return true\n        },\n        getFacilities(filter='') {\n            return getFacilities(filter)\n        },\n        updateStagingFacts() {\n            const conditions = [\n                this.stagingFacts.stageOneConditions,\n                this.stagingFacts.stageTwoConditions,\n                this.stagingFacts.stageThreeConditions,\n                this.stagingFacts.stageFourConditions, \n            ]\n            this.stagingFacts.stage = conditions.reduce(\n                (stage, conditions: string[], curIndex) =>\n                    isEmpty(conditions) ? stage : curIndex + 1\n                , 0)\n            this.stagingFacts.selectedConditions = conditions.reduce(\n                (accum, cur) => accum.concat(cur), []\n            )\n        },\n        buildReasonForArtObs() {\n            return this.staging.buildReasonForArtObs(this.stagingFacts.reasonForArt)\n        },\n        buildWhoStageObs() {\n            return this.staging.buildWhoStageObs(this.stagingFacts.whoStage)\n        },\n        buildStagingOptions(stage: number, previouslySelected=[] as Array<string>) {\n            const guidelines = this.staging.getRecommendedConditionGuidelines()\n\n            return this.staging.getStagingConditions(stage).map((concept: any) => {\n                let disabled = false\n                let description: unknown\n                let isChecked = previouslySelected.includes(concept.name)\n                this.stagingFacts.selectedCondition = concept.name\n\n                const findings = matchToGuidelines(this.stagingFacts, guidelines)\n\n                if (!isEmpty(findings)) {\n                    const conceptFinding = findings[0] //get the first item only\n                    if (conceptFinding?.actions?.isChecked) {\n                        isChecked = true\n                    }\n                    if (conceptFinding?.actions?.disabled) {\n                        disabled = true\n                    }\n                    description = conceptFinding.description\n                }\n                return {\n                    label: concept.name,\n                    value: concept.concept_id,\n                    isChecked,\n                    disabled,\n                    description\n                }\n            })\n        },\n        setWhoStage() {\n            const guidelines = this.staging.getWhoStageGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n            this.stagingFacts.whoStage = findings[0]?.concept || ''\n        },\n        setReasonForArt() {\n            const guidelines = this.staging.getProgramEligibilityGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n            this.stagingFacts.reasonForArt = findings[0]?.concept || ''\n        },\n        notAsymptomatic(f: any) {\n            const stageOneC = f.stage_1_conditions\n            if (stageOneC) {\n                const asymptomatics = stageOneC.filter((i: Option) => {\n                    return i.label.match(/asymptomatic/i) && i.isChecked\n                })\n                return isEmpty(asymptomatics)\n            }\n            return true\n        },\n        hasTransferLater(f: Record<string, any>): boolean {\n            if ('has_transfer_letter' in f) {\n                return f.has_transfer_letter && f.has_transfer_letter.value === 'Yes'\n            }\n            return false\n        },\n        hasStaging(f: Record<string, any>) {\n            // For components that have Optional staging\n            if (this.hasTransferLater(f)) {\n                return true\n            }\n            return this.canShowStagingFields\n        },\n        getStagingSummaryField(helpText=\"Summary\" as string) {\n            return {\n                id: 'summary',\n                helpText,\n                type: FieldType.TT_ART_STAGING_SUMMARY,\n                condition: (f: any) => this.hasStaging(f),\n                onload: () => {\n                    this.setReasonForArt()\n                    this.setWhoStage()\n                },\n                options: () => [\n                    { \n                        label: 'WHO Stage', \n                        value: this.stagingFacts.whoStage,\n                        other: {\n                            type: 'title-section'\n                        }\n                    },\n                    { \n                        label: 'Condition on starting ART', \n                        value: this.stagingFacts.reasonForArt,\n                        other: {\n                            type: 'title-section'\n                        } \n                    },\n                    ...this.stagingFacts.selectedConditions.map((i: string) => ({ label: i, value: i }))\n                ],\n                config: {\n                    title: 'Selected stage defining conditions',\n                    hiddenFooterBtns: [\n                        'Clear'\n                    ]\n                }\n            }\n        },\n        isANCclient() {\n            return StagingService.getSuspendedProgram() === 'ANC'\n        },\n        getStagingFields(): Array<Field> {\n            return [\n                {\n                    id: 'pregnancy_status',\n                    helpText: 'Pregnant / Breastfeeding',\n                    type: FieldType.TT_MULTIPLE_YES_NO,\n                    validation: (v: any) => Validation.anyEmpty(v),\n                    summaryMapValue: (d: Option) => ({ \n                        label: d.label, \n                        value: d.value \n                    }),\n                    computedValue: (data: Array<Option>, f: Record<string, any>) => {\n                        let obs = []\n                        // For ANC clients, mark pregnancy status as 'Yes' always!!\n                        // The assumption here is also that the pregnancy option is not available for selection\n                        if (this.isANCclient() && !this.hasTransferLater(f)) {\n                            this.stagingFacts['pregnant'] = 'Yes' \n                            obs.push(this.staging.buildValueCoded('Is patient pregnant', 'Yes'))\n                        }\n                        obs = obs.concat(data.map(d => {\n                            const  { value, other } = d\n\n                            const factID: 'pregnant' | 'breastFeeding' = other.factID\n\n                            this.stagingFacts[factID] = `${value}`.match(/Yes/i) ? 'Yes' : 'No'\n\n                            return this.staging.buildValueCoded(other.concept, value)\n                        }))\n                        return {\n                            obs,\n                            tag: 'staging'\n                        }\n                    },\n                    options: (f: any) => {\n                        if (!isEmpty(f.pregnancy_status)) {\n                            return f.pregnancy_status\n                        } else {\n                            const options = []\n                            // Hide pregnancy option for ANC clients who are not transferr in\n                            if (!this.isANCclient() || this.hasTransferLater(f)) {\n                                options.push({\n                                    label: 'Pregnant?',\n                                    value: '',\n                                    other: {\n                                        values: this.yesNoOptions(),\n                                        concept: 'Is patient pregnant',\n                                        factID: 'pregnant'\n                                    }\n                                })\n                            }\n                            options.push({\n                                label: 'Breastfeeding?',\n                                value: '',\n                                other: {\n                                    values: this.yesNoOptions(),\n                                    concept: 'Is patient breast feeding',\n                                    factID: 'breastFeeding'\n                                }\n                            })\n                            return options\n                        }\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.stagingFacts.isChildBearing,\n                },\n                {\n                    id: 'patient_weight_chart',\n                    helpText: 'Weight history',\n                    type: FieldType.TT_WEIGHT_CHART,\n                    options: async () => {\n                        let values = await this.patient.getWeightHistory()\n                        values = values.map((d: any) => ({ \n                            x: HisDate.toStandardHisDisplayFormat(d.date), \n                            y: d.weight\n                        }))\n                        return [\n                            {\n                                label: \"Weight for patient\",\n                                value: \"Weight trail\",\n                                other: {\n                                    values,\n                                    age: this.patient.getAge(),\n                                    bmi: this.bmiObj\n                                }\n                            }\n                        ]\n                    },\n                    config: {\n                        hiddenFooterBtns: [\n                            'Clear'\n                        ]\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.showStagingWeightChart\n                },\n                {\n                    id: 'stage_4_conditions',\n                    helpText: 'Stage 4 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(4, this.stagingFacts.stageFourConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageFourConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageFourConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_3_conditions',\n                    helpText: 'Stage 3 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(3, this.stagingFacts.stageThreeConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageThreeConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageThreeConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_2_conditions',\n                    helpText: 'Stage 2 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(2, this.stagingFacts.stageTwoConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Option[]) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageTwoConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageTwoConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_1_conditions',\n                    helpText: 'Stage 1 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    validation: (val: any) => {\n                        if (isEmpty(val) && isEmpty(this.stagingFacts.selectedConditions))\n                            return ['Please provide atleast one staging condition']\n                    },\n                    options: () => this.buildStagingOptions(1, this.stagingFacts.stageOneConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        const data = d.map(i => i.label)\n                        this.stagingFacts.stageOneConditions = data\n                        this.updateStagingFacts()\n                        return {\n                            tag: 'staging',\n                            obs: data.map(i => this.staging.buildWhoCriteriaObs(i))\n                        }\n                    },\n                    condition: (f: any) => this.hasStaging(f),\n                },\n                {\n                    id: 'cd4_available',\n                    helpText: 'Recent CD4 count results available?',\n                    type: FieldType.TT_SELECT,\n                    condition: (f: any) => this.hasStaging(f),\n                    validation: (val: any) => Validation.required(val),\n                    options: () => this.yesNoOptions()\n                },\n                {\n                    id: 'cd4_count',\n                    helpText: 'CD4 Count',\n                    type: FieldType.TT_TEXT,\n                    computedValue: (d: Option) => {\n                        const value = d.value.toString()\n                        const modifier = value.charAt(0)\n                        const count = parseInt(value.substring(1))\n                        return {\n                            tag: 'staging',\n                            modifier,\n                            count,\n                            obs: this.staging.buildValueNumber(\n                                'CD4 count', count, modifier\n                            )\n                        }\n                    },\n                    unload: (d: any, s: any, f: any, computedData: any) => {\n                        const { count, modifier } = computedData['cd4_count']\n                        this.stagingFacts.cd4 = count\n                        this.stagingFacts.cd4Modifier = modifier\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.cd4 = -1\n                        this.stagingFacts.cd4Modifier = ''\n                    },\n                    validation: (val: any) => {\n                        const isCd4 = () => this.staging.cd4CountIsValid(val.value)\n                        return this.validateSeries([\n                            () => Validation.required(val),\n                            () => !isCd4() ? ['Please start with either modifier first: >, <, or ='] : null\n                        ])\n                    },\n                    config: {\n                        customKeyboard: [\n                            CD4_COUNT_PAD_LO,\n                            [\n                                ['Unknown', 'Delete']\n                            ]\n                        ]\n                    },\n                    condition: (f: any) => this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                },\n                ...generateDateFields({\n                    id: 'cd4_result_date',\n                    helpText: 'Cd4 Results',\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    condition: (f: any) =>  this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        this.stagingFacts.cd4Date = date\n                        return {\n                            date,\n                            tag: 'staging',\n                            isEstimate,\n                            obs: this.staging.buildValueDate('Cd4 count datetime', date) \n                        }\n                    }\n                }, this.staging.getDate()),\n                {\n                    id: 'location',\n                    helpText: 'CD4 Location',\n                    type: FieldType.TT_SELECT,\n                    defaultValue: () => StagingService.getLocationName(),\n                    computedValue: ({ label }: Option) => ({\n                        tag: 'staging',\n                        obs: this.staging.buildValueText('Cd4 count location', label)\n                    }),\n                    validation: (val: any) => Validation.required(val),\n                    options: (_, filter='') => this.getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    },\n                    condition: (f: any) => this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                }\n            ]\n        }\n    }\n})\n","import script from \"./StagingMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./StagingMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"sourceRoot":""}