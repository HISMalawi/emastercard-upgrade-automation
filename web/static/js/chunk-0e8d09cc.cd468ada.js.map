{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ART/views/encounters/FastTrack.vue?cd0b","webpack:///./src/apps/ART/services/fast_track_service.ts","webpack:///./src/apps/ART/views/encounters/FastTrack.vue","webpack:///./src/apps/ART/views/encounters/FastTrack.vue?54ac"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","facts","ready","watch","handler","route","params","patient_id","this","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","e","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","_component_his_standard_form","_resolveComponent","FastTrackService","AppEncounterService","constructor","super","getAssessmentValues","getConceptsByCategory","mixins","EncounterMixinVue","fastTrack","gender","init","encounter","createEncounter","toastWarning","buildObs","observations","saveObservationList","toastSuccess","getGender","getID","getYesNo","getOptions","getFields","buildValueCoded","ft_assessment","ft_questions","forEach","element","book_client","match","id","helpText","FieldType","TT_SELECT","validation","val","Validation","TT_MULTIPLE_YES_NO","anyEmpty"],"mappings":"wIAIYA,E,yEAAZ,SAAYA,GACRA,iCACAA,+CACAA,uDACAA,6CACAA,yBACAA,kBANJ,CAAYA,MAAS,KAQrB,MAAMC,EAAWC,GAAcC,OAAQC,2BAA2BF,GAErDG,EAA2D,CACpE,qEAAsE,CAClEC,SAAU,EACVC,QAAS,CACLC,MAAOC,OAASC,uBACZ,MAAMC,QAAeC,eACjB,6BACA,mBAAmBX,EAAQS,GAC3B,qEACA,CACI,CAAEG,KAAM,SAAUC,KAAM,MAAOC,MAAO,WACtC,CAAEF,KAAM,iBAAkBC,KAAM,MAAOC,MAAO,WAC9C,CAAEF,KAAM,kBAAmBC,KAAM,MAAOC,MAAO,YAGvD,MAAkB,WAAXJ,EACDX,EAAUgB,wBACC,mBAAXL,EACAX,EAAUiB,uBACVjB,EAAUkB,WAGxBC,WAAY,CACRC,QAAQA,GACJ,MAAmB,iBAAZA,GAEXV,iBAAiBW,GAAmB,YAAEC,IAClC,OAAOA,GAAeD,KAIlC,+DAAgE,CAC5Df,SAAU,EACVC,QAAS,CACLC,MAAOC,OAASc,YAAWD,kBACvB,MAAMX,QAAeC,eACjB,6BAA8B,GAC9B,gBAAgBX,EAAQqB,iCAA2CrB,EAAQsB,KAC3E,CACI,CAAEV,KAAM,SAAUC,KAAM,MAAOC,MAAO,UACtC,CAAEF,KAAM,sBAAuBC,KAAM,MAAOC,MAAO,aAG3D,MAAkB,wBAAXJ,EACDX,EAAUwB,oBACVxB,EAAUgB,0BAGxBG,WAAY,CACRI,UAAUA,GAAmB,YAAED,IAC3B,OAAOA,EAAcC,KAIjC,oDAAqD,CACjDjB,SAAU,EACVC,QAAS,CACLkB,UAAWhB,OAASiB,YAAWC,gBAAeL,cAAaM,cACvD,MAAMC,QAAcC,eAChB,gCAAgCH,EAChC,QAAQ1B,EAAQqB,iBAA2BrB,EAAQ2B,KACnDF,EACA,CACI,CAAEb,KAAM,SAAUE,MAAO,SAAUD,KAAM,QAASiB,KAAM,WACxD,CAAElB,KAAM,UAAWC,KAAM,MAAOiB,KAAM,YAG9C,MAAwB,WAAjBF,EAAMlB,OACP,CAAEqB,OAAQ,EAAGC,UAAWjC,EAAUgB,yBAClC,CAAEgB,MAAOH,EAAMJ,UAAWQ,UAAWjC,EAAUkC,gBAG7Df,WAAY,CACRgB,UAAUC,GACN,OAAOA,M,oDC5ERC,+BAAgB,CAC3BC,WAAY,CAAEC,wBACdC,KAAM,KAAM,CACRC,QAAS,GACTC,OAAQ,GACRC,UAAW,GACXC,YAAa,EACblB,UAAW,GACXmB,MAAO,CACHvB,YAAa,GACbM,QAAS,GACTD,cAAe,MACfD,UAAW,GACXS,WAAW,EACXZ,UAAW,GACXH,QAAS,GACTV,iBAAkB,IAEtBoC,OAAO,IAEXC,MAAO,CACJ,OAAU,CACLC,QAAQC,GACDA,EAAMC,OAAOC,YAAcC,KAAKT,WAAaM,EAAMC,OAAOC,aACzDC,KAAKT,UAAYU,SAASJ,EAAMC,OAAOC,YACvCG,OAAMC,IAAI,iBAAkB,CAAEZ,UAAWS,KAAKT,YACzCa,KAAKC,IACFL,KAAKX,QAAUgB,EACfL,KAAKM,oBAAoBF,KAAK,KAC1BJ,KAAKO,2BAA2BH,KAAK,KACjCJ,KAAKN,OAAQ,UAMrCc,WAAW,EACXC,MAAM,IAGdC,SAAU,CACNC,oBACI,OAAOX,KAAKY,wBAGpBC,QAAS,CACLC,aAAaC,EAAkBjB,EAAO,MAClC,MAAMkB,EAAc,GAmBpB,GAlBAA,EAAOpE,EAAUkC,cAAiBT,IAC9B,MAAQ4C,GAAa5C,EAAU6C,MAAM,KAC/BC,EAAWC,kBAAKpB,KAAK1B,UAAW,CAAE2C,aAExC,OADIE,IAAUnB,KAAKR,WAAa2B,EAASE,WAClCzE,EAAUkB,UAErBkD,EAAOpE,EAAUwB,qBAAuB,KACpC4B,KAAKsB,QAAQC,KAAK,kDAAkDvB,KAAKT,WAClE3C,EAAU4E,MAErBR,EAAOpE,EAAUiB,wBAA0B,KACvCmC,KAAKsB,QAAQC,KAAK,qBAAqBvB,KAAKT,WACrC3C,EAAU4E,MAErBR,EAAOpE,EAAUgB,yBAA2B,KACxCoC,KAAKyB,uBACE7E,EAAU4E,MAEjBT,KAASC,EACT,OAAOA,EAAOD,GAAOjB,IAG7B,iCACI,MAAM4B,EAAWC,eAAkB3B,KAAKP,MAAOxC,GAC/C,IAAI,MAAM2E,KAASF,EAAU,SACzB,MAAMG,EAAUH,EAASE,GACzB,GAAW,OAAPC,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAAS1E,eAAO,OAAhB,EAAkBC,MAAO,OACzB,MAAM0E,EAAS9B,KAAKc,mBAA2B,OAAPe,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAAS1E,eAAO,WAAT,EAAP,EAAkBC,MAAM4C,KAAKP,SACrE,GAAIqC,IAAWlF,EAAU4E,KAAM,OAEnC,GAAW,OAAPK,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAAS1E,eAAO,OAAhB,EAAkBkB,UAAW,OAC7B,MAAMA,QAAyB,OAAPwD,QAAO,IAAPA,GAAgB,QAAT,EAAPA,EAAS1E,eAAO,WAAT,EAAP,EAAkBkB,UAAU2B,KAAKP,QACzDO,KAAKc,aAAazC,EAAUQ,UAAWR,EAAUO,UAI7D,0BACI,IACI,MAAMmD,QAAgB7B,OAAMC,IAAI,kBAAmB,CAAEZ,UAAWS,KAAKT,YACrES,KAAKP,MAAMzB,QAAU+D,EAAQ/D,QAC7BgC,KAAKP,MAAMnC,iBAAmByE,EAAQ9D,UACxC,MAAO+D,GACLC,QAAQC,MAAMF,GACdG,eAAY,GAAGH,GAEnBhC,KAAKP,MAAMvB,YAAckE,OAAeC,iBACxCrC,KAAKP,MAAMjB,QAAU4D,OAAeE,mBACpCtC,KAAKP,MAAMV,UAAYqD,OAAepD,QACtCgB,KAAKP,MAAMtB,UAAY6B,KAAKX,QAAQkD,eACpCvC,KAAKP,MAAMlB,cAAgByB,KAAKwC,OAAO/E,KACjCuC,KAAKwC,OAAO/E,KAAKgF,WAAWC,cAC5B,MACFN,OAAepD,UACfgB,KAAK1B,gBAAkB4B,OAAMC,IAAI,aACjCH,KAAKP,MAAMnB,UAAY0B,KAAK1B,UACvBqE,KAAK,CAACC,EAAQC,KACX,MAAMC,EAAYF,EAAE3B,SAASyB,cACvBK,EAAYF,EAAE5B,SAASyB,cAC7B,OAAOI,EAAYC,GAAa,EAAID,EAAYC,EAAa,EAAI,IAEpEC,IAAKC,IAAU,MACZ,IAAIxF,EAAO,GAAGwF,EAAEhC,SAChB,IAAKiC,qBAAS,OAADD,QAAC,IAADA,GAAS,QAAR,EAADA,EAAGE,cAAM,WAAR,EAAD,EAAWC,OAAQ,OAC5B,MAAQC,IAAuB,QAAR,EAAAJ,EAAEE,cAAM,aAAR,EAAUC,QAAS,GAC1C3F,GAAQ,KAAK4F,EAAWC,cAAcD,EAAWE,eAErD,OAAO9F,MAIvB+F,SAASC,EAAeC,EAAM,IAC1B,MAAO,CACHD,QACA7E,MAAO6E,EACPC,UAGRC,gBAAgBC,GACZ,OAAOA,EAAMZ,IAAIa,IAAK,CAAEJ,MAAOI,EAAGjF,MAAOiF,MAE7CjD,sBACI,MAAO,sBAAsBZ,KAAKT,WAEtCkC,uBACI,OAAOzB,KAAKsB,QAAQC,KAAK,CAACuC,KAAM9D,KAAKY,yBAEzCmD,WACI,OAAOA,eAAS/D,KAAKT,UAAWS,KAAKsB,UAEzC0C,eACI,MAAO,CACH,CAAEP,MAAO,MAAO7E,MAAO,OACvB,CAAE6E,MAAO,KAAM7E,MAAO,QAG9BqF,cAAcR,EAAeC,EAAW,IACpC,MAAO,CACHD,QACA7E,MAAO,GACP8E,MAAO,IACAA,EACHQ,OAAQlE,KAAKgE,kBAIzBG,WAAWC,GACP,OAAOA,EAAQpB,IAAKqB,IACT,CAAEZ,MAAOY,EAAQzF,MAAOyF,MAGvCC,sBACI,MAAO,CACH,CAAEb,MAAO,MAAO7E,MAAO,OACvB,CAAE6E,MAAO,KAAM7E,MAAO,MACtB,CAAE6E,MAAO,UAAW7E,MAAO,aAGnC2F,WAAWC,EAAUC,EAAI,IACrB,MAAMP,EAAcQ,OAAOR,OAAOM,GAC7BG,OAAQ7H,GAAWA,IAAMA,EAAE2H,MAAQA,GAAe,KAARA,IAC1CG,OAAO,CAACC,EAAYC,KACjB,MAAM1F,EAAO0F,EAAIN,IAAMM,EAAIN,IAAMM,EAQjC,OAPIC,MAAMC,QAAQ5F,GACdyF,EAAQA,EAAMI,OAAO7F,GACE,oBAATA,EACdyF,EAAMtD,KAAKnC,KAEXyF,EAAMtD,KAAKnC,GAERyF,GACJ,IACX,OAAOK,QAAQC,IAAIjB,IAEvBkB,QAAQC,EAAiBC,GACrB,IACI,OAAOD,EAAIV,OAAQd,GAAWyB,EAAWzB,IAAI0B,OAAS,EACxD,MAAOvD,GACL,OAAO,IAGfwD,eAAezH,GACX,IACI,IAAI,MAAM8F,KAAK9F,EAAY,CACvB,MAAM0H,EAAY1H,EAAW8F,KAE7B,GAAI4B,EAAW,OAAOA,GAE5B,MAAOzD,GACL,MAAO,CAACA,QC7MxB,MAAM0D,EAAc,EAEL,U,kDCHT,SAAUC,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,OAAQC,yBAAcC,yBAAaC,qCAAyBR,EAAKS,UAAW,CAC1E/G,OAAQsG,EAAKtG,OACbgH,YAAaV,EAAKU,YAClBC,YAAaX,EAAKW,YAClBC,sBAAuBZ,EAAKY,sBAC5BC,WAAYb,EAAKc,SACjBA,SAAUd,EAAKe,eACfC,UAAWhB,EAAKiB,SACf,KAAM,GAAI,CAAC,SAAU,cAAe,cAAe,wBAAyB,aAAc,WAAY,c,gBCN5F5H,+BAAgB,CAC3BxB,KAAM,kBACNyB,WAAY,CAAE4H,wBACdC,MAAO,CACH,WACA,WAEJ3H,KAAM,KAAM,CACRiH,SAAU,sBAEdW,MAAO,CACHL,eAAgB,CACZM,KAAMC,UAEVZ,YAAa,CACTW,KAAME,QACNC,SAAS,GAEbb,YAAa,CACTU,KAAMI,QAEV/H,OAAQ,CACJ2H,KAAMvC,OACN4C,UAAU,GAEdd,sBAAuB,CACnBS,KAAMI,OACNC,UAAU,IAGlBzG,QAAS,CACL6F,SAASa,EAAeC,GACpBxH,KAAKyH,MAAM,WAAYF,EAAUC,IAErCX,QAAQhD,GACJ7D,KAAKyH,MAAM,UAAW5D,O,qBCnClC,MAAM6B,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,KAErD,U,8ECsBf,SAAS+B,EAAYjI,EAA4B1B,GAC7C,MAAMgD,EAAQ,GACR4G,EAAU,EAAE,EAAG,GAAI,UAAMC,GAE/B,IAAI,MAAMC,KAAQ9J,EAAY,CAC1B,KAAM8J,KAAQpI,GACV,SAEJ,MAAMb,EAAQa,EAAMoI,GAChBF,EAAQG,SAASlJ,GACjBmC,EAAMQ,MAAK,GAIfR,EAAMQ,KAAKxD,EAAW8J,GAAMjJ,EAAOa,IAEvC,OAAOsB,EAAMgH,MAAMZ,SAQvB,SAASa,EAAetG,GACpB,OAAOA,EAASiB,KAAK,CAACC,EAAGC,IAAOD,EAAE1F,UAAY2F,EAAE3F,UAAa0F,EAAE1F,SAAW2F,EAAE3F,UAAY,EAAI,GAGhG,SAAS+K,EAAavG,GAClB,OAAOA,EAASiB,KAAK,CAACC,EAAGC,IAAOD,EAAEsF,QAAUrF,EAAEqF,QAAWtF,EAAEsF,OAASrF,EAAEqF,QAAU,EAAI,GAgBlF,SAAUvG,EACZlC,EACA0I,EACAC,EAAO,GACPC,EAAY,GACZC,EAAO,YACP,MAAMC,EAAU,GAChB,IAAI,MAAMC,KAAkBL,EAAY,CACpC,MAAM/I,EAA2B+I,EAAWK,GACtCC,EAAoB,CACrBrJ,EAAKgJ,QAAUA,GAAUhJ,EAAKgJ,QAAUA,EACxChJ,EAAKiJ,aAAeA,GACdjJ,EAAKiJ,aAAeA,GAG3BI,EAAkBC,KAAKvB,UAIvBO,EAAYjI,EAAOL,EAAKrB,cACxBqB,EAAKuJ,MAAQH,EACTpJ,EAAKwJ,cACLxJ,EAAKwJ,YAAYC,KAAOzJ,EAAKwJ,YAAYE,KAAKrJ,IAElD8I,EAAQhH,KAAKnC,IAGrB,MAAkB,aAAXkJ,EAAwBN,EAAeO,GAAWN,EAAaM,K,yDCnGpE,SAAU5C,EAAOC,EAAUC,EAAYC,EAAYC,EAAYC,EAAWC,GAC9E,MAAM8C,EAA+BC,8BAAkB,qBAEvD,OAAQ9C,yBAAcC,yBAAa4C,EAA8B,CAC/DzJ,OAAQsG,EAAKtG,OACbqH,eAAgBf,EAAKc,SACrBJ,aAAa,EACbE,sBAAuBZ,EAAKjF,mBAC3B,KAAM,EAAG,CAAC,SAAU,iBAAkB,0B,0ECTrC,MAAOsI,UAAyBC,OACpCC,YAAY5J,EAAmBC,GAC7B4J,MAAM7J,EAAW,IAAKC,GAExB6J,sBACE,OAAOH,OAAoBI,sBAAsB,e,gBCGtCrK,+BAAgB,CAC7BsK,OAAQ,CAACC,QACTtK,WAAY,CAAEC,wBACdC,KAAM,KAAM,CACVE,OAAQ,GACRmK,UAAW,GACXrF,QAAS,GACTF,OAAQ,GACRwF,OAAQ,OAEV/J,MAAO,CACLD,MAAO,CACL,cAAcA,GACRA,GAAOM,KAAK2J,KAAK3J,KAAKX,UAE5BmB,WAAW,IAGfK,QAAS,CACP,eAAe0G,GACb,MAAMqC,QAAkB5J,KAAKyJ,UAAUI,kBACvC,IAAID,EASF,OAAOE,eAAa,yCATP,CACb,MAAMtF,QAAYxE,KAAK+J,SAASxC,GAC1ByC,QAAqBhK,KAAKyJ,UAAUQ,oBAAoBzF,GAC9D,IAAKwF,EACH,OAAOF,eAAa,uCAEtBI,eAAa,uCACblK,KAAK+D,aAKT,WAAW1E,GACTW,KAAK0J,OAASrK,EAAQ8K,YACtBnK,KAAKyJ,UAAY,IAAIR,EAAiB5J,EAAQ+K,QAASpK,KAAKR,YAC5DQ,KAAKkE,aAAelE,KAAKqK,WACzBrK,KAAKoE,cAAgBpE,KAAKsK,aAC1BtK,KAAKV,OAASU,KAAKuK,aAErB,eAAehD,GACb,MAAMyC,EAAe,GAqBrB,OApBAA,EAAazI,WACLvB,KAAKyJ,UAAUe,gBACnB,wBACAjD,EAASkD,cAAc7L,QAGvB2I,EAASmD,qBACLnD,EAASmD,aAAaC,QAAQtN,UAClC2M,EAAazI,WACLvB,KAAKyJ,UAAUe,gBAAgBI,EAAQnH,MAAOmH,EAAQhM,UAIhEoL,EAAazI,WACLvB,KAAKyJ,UAAUe,gBACnB,aACAjD,EAASsD,YAAYjM,SAIpBoL,GAET,mBACE,MAAM9F,EAASlE,KAAKqK,WACdjG,QAAgBpE,KAAKyJ,UACxBJ,oBAAoB,cACpBrG,IAAK5D,IACG,CACLqE,MAAOrE,EAAK3B,KACZmB,MAAO,GACP8E,MAAO,CACLQ,OAAQA,MAIhB,MAAoB,MAAhBlE,KAAK0J,OACAtF,EAAQO,OAAQvF,IACbA,EAAKqE,MAAMqH,MAAM,cAGtB1G,GAETiG,WACE,MAAO,CACL,CACE5G,MAAO,MACP7E,MAAO,OAET,CACE6E,MAAO,KACP7E,MAAO,QAIb2L,YACE,MAAO,CACL,CACEQ,GAAI,gBACJC,SAAU,uBACV/D,KAAMgE,OAAUC,UAChBC,WAAaC,GAAaC,OAAW/D,SAAS8D,GAC9ChH,QAAS,IAAMpE,KAAKqK,YAEtB,CACEU,GAAI,eACJC,SAAU,uBACV/D,KAAMgE,OAAUK,mBAChB7F,UAAU8B,GACR,MAAwC,QAAjCA,EAASkD,cAAc7L,OAEhCuM,WAAaC,GAAaC,OAAWE,SAASH,GAC9ChH,QAAS,IACApE,KAAKoE,SAGhB,CACE2G,GAAI,cACJC,SAAU,+BACV/D,KAAMgE,OAAUC,UAChBzF,UAAU8B,GACR,MAAwC,QAAjCA,EAASkD,cAAc7L,OAEhCuM,WAAaC,GAAaC,OAAW/D,SAAS8D,GAC9ChH,QAAS,IAAM,CACb,CACEX,MAAO,aACP7E,MAAO,MAET,CACE6E,MAAO,eACP7E,MAAO,a,qBCxIrB,MAAM8G,EAA2B,IAAgB,EAAQ,CAAC,CAAC,SAASC,KAErD","file":"js/chunk-0e8d09cc.cd468ada.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\nexport class FastTrackService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 156, providerID);\n  }\n  getAssessmentValues() {\n    return AppEncounterService.getConceptsByCategory(\"fast_track\")\n  }\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { FastTrackService } from \"@/apps/ART/services/fast_track_service\";\nimport { toastSuccess, toastWarning } from \"@/utils/Alerts\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    fields: [] as any,\n    fastTrack: {} as any,\n    options: [] as any,\n    values: [] as any,\n    gender: null as any,\n  }),\n  watch: {\n    ready: {\n      async handler(ready: any) {\n        if (ready) this.init(this.patient);\n      },\n      immediate: true\n    },\n  },\n  methods: {\n    async onFinish(formData: any) {\n      const encounter = await this.fastTrack.createEncounter();\n      if (encounter) {\n        const obs = await this.buildObs(formData);\n        const observations = await this.fastTrack.saveObservationList(obs);\n        if (!observations)\n          return toastWarning(\"Unable to save patient observations\");\n\n        toastSuccess(\"Observations and encounter created!\");\n        this.nextTask();\n      } else {\n        return toastWarning(\"Unable to create fast track encounter\");\n      }\n    },\n    async init(patient: any) {\n      this.gender = patient.getGender();\n      this.fastTrack = new FastTrackService(patient.getID(), this.providerID);\n      this.values = await this.getYesNo();\n      this.options = await this.getOptions();\n      this.fields = this.getFields();\n    },\n    async buildObs(formData: any) {\n      const observations = [];\n      observations.push(\n        await this.fastTrack.buildValueCoded(\n          \"Assess for fast track\",\n          formData.ft_assessment.value\n        )\n      );\n      if (formData.ft_questions) {\n        await formData.ft_questions.forEach(async (element: any) => {\n          observations.push(\n            await this.fastTrack.buildValueCoded(element.label, element.value)\n          );\n        });\n\n        observations.push(\n          await this.fastTrack.buildValueCoded(\n            \"Fast track\",\n            formData.book_client.value\n          )\n        );\n      }\n      return observations;\n    },\n    async getOptions() {\n      const values = this.getYesNo();\n      const options = await this.fastTrack\n        .getAssessmentValues(\"fast_track\")\n        .map((data: any) => {\n          return {\n            label: data.name,\n            value: \"\",\n            other: {\n              values: values,\n            },\n          };\n        });\n      if (this.gender === \"M\") {\n        return options.filter((data: any) => {\n          return !data.label.match(/Pregnant/i);\n        });\n      }\n      return options;\n    },\n    getYesNo() {\n      return [\n        {\n          label: \"yes\",\n          value: \"Yes\",\n        },\n        {\n          label: \"no\",\n          value: \"No\",\n        },\n      ];\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"ft_assessment\",\n          helpText: `Assess client for FT`,\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          options: () => this.getYesNo(),\n        },\n        {\n          id: \"ft_questions\",\n          helpText: \"Assess client for FT\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          condition(formData: any) {\n            return formData.ft_assessment.value === \"Yes\";\n          },\n          validation: (val: any) => Validation.anyEmpty(val),\n          options: () => {\n            return this.options;\n          },\n        },\n        {\n          id: \"book_client\",\n          helpText: \"Select type of visit to book\",\n          type: FieldType.TT_SELECT,\n          condition(formData: any) {\n            return formData.ft_assessment.value === \"Yes\";\n          },\n          validation: (val: any) => Validation.required(val),\n          options: () => [\n            {\n              label: \"Fast track\",\n              value: \"No\",\n            },\n            {\n              label: \"Normal visit\",\n              value: \"No\",\n            },\n          ],\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./FastTrack.vue?vue&type=template&id=1b5fd420&ts=true\"\nimport script from \"./FastTrack.vue?vue&type=script&lang=ts\"\nexport * from \"./FastTrack.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}