{"version":3,"sources":["webpack:///./src/apps/ANC/Views/DataManagement/AncDrugSet.vue?b273","webpack:///./src/apps/ANC/Views/DataManagement/AncDrugSet.vue","webpack:///./src/apps/ANC/Views/DataManagement/AncDrugSet.vue?cc9c","webpack:///./src/services/drug_order_service.ts","webpack:///./src/services/drug_service.ts","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/apps/ANC/Services/anc_treatment_service.ts","webpack:///./src/apps/ANC/Services/anc_drug_set.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","key","hisFormKey","activeField","fieldComponent","skipSummary","fields","onOnIndex","$event","onOnFinish","onFinish","_","defineComponent","components","HisStandardForm","IonPage","data","allDrugs","service","created","this","getFields","methods","computedData","AncDrugSetService","saveDrugSet","toastSuccess","$router","back","toastWarning","e","id","helpText","type","FieldType","TT_TEXT","computedValue","v","value","validation","Validation","validateSeries","required","match","TT_MULTIPLE_SELECT","config","showKeyboard","options","async","isEmpty","DrugService","getDrugs","map","d","label","name","other","TT_ANC_DRUGSET_INPUT","quantity","frequency","every","Boolean","fdata","drug_selection","drugFrequencies","Object","keys","DRUG_FREQUENCIES","k","__exports__","DrugOrderService","Service","constructor","super","orders","postJson","getProgramID","dispensations","order","getSessionDate","patientID","getJson","pageSize","drugID","date","params","patientId","_resolveDynamicComponent","formType","cancelDestinationPath","onFinishAction","onIndex","TouchScreenForm","emits","props","Function","String","formData","$emit","i","AncTreatmentService","AppEncounterService","providerID","vaccinationDrugObj","dispensed","dispenseVaccinationDrug","orderID","order_id","updateDispensationOrders","createOrders","create","getEncounterID","drugs","createEncounter","o","buildDrugOrderObj","dispensation","forEach","duration","drug_inventory_id","drug","startDate","Date","expiryDate","setDate","getDate","parseInt","dose","dailyEquivalentDose","parseFloat","HisDate","toStandardHisFormat","drug_name","units","drugSet","setID","void","reduce","sets","setKey","description","push","a"],"mappings":"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","file":"js/chunk-56873b06.81360e81.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, withCtx as _withCtx } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      (_openBlock(), _createBlock(_component_his_standard_form, {\n        key: _ctx.hisFormKey,\n        activeField: _ctx.fieldComponent,\n        skipSummary: true,\n        fields: _ctx.fields,\n        onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (_ctx.fieldComponent='')),\n        onOnFinish: _ctx.onFinish\n      }, null, 8, [\"activeField\", \"fields\", \"onOnFinish\"]))\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {\n    IonPage\n} from \"@ionic/vue\"\nimport { isEmpty } from 'lodash';\nimport { DrugService } from '@/services/drug_service';\nimport { DRUG_FREQUENCIES } from \"@/apps/ANC/Services/anc_treatment_service\";\nimport { NewDrugSet, AncDrugSetService } from \"@/apps/ANC/Services/anc_drug_set\";\nimport { toastSuccess, toastWarning } from '@/utils/Alerts';\n\nexport default defineComponent({\n    components: { HisStandardForm, IonPage },\n    data: () => ({\n        hisFormKey: 0 as number,\n        fields: [] as Array<Field>,\n        allDrugs: [] as Array<Option>,\n        fieldComponent: '' as string,\n        service: {} as any\n    }),\n    created() {\n        this.fields = this.getFields()\n    },\n    methods: {\n        async onFinish(_: any, computedData: NewDrugSet) {\n            try {\n                if ((await AncDrugSetService.saveDrugSet(computedData))) {\n                    toastSuccess('Drugset saved successfully');\n                    return this.$router.back()\n                }\n                toastWarning('Unable to save drugset')\n            } catch (e) {\n                toastWarning(`${e}`)\n            }\n        },\n        getFields() {\n            return [\n                {\n                    id: 'name',\n                    helpText: 'Enter drug set name',\n                    type: FieldType.TT_TEXT,\n                    computedValue: (v: Option) => v.value,\n                    validation: (v: Option) => Validation.validateSeries([\n                        () => Validation.required(v),\n                        () => !`${v.value}`.match(/^([a-zA-Z_ ]{2,17})'?-?([a-zA-Z_ ]{1,17})$/)\n                            ? ['Enter a valid drug set name.']\n                            : null\n                    ]),\n\n                },\n                {\n                    id: 'description',\n                    helpText: 'Drug set description',\n                    type: FieldType.TT_TEXT,\n                    computedValue: (v: Option) => v.value,\n                    validation: (v: Option) => Validation.validateSeries([\n                        () => Validation.required(v),\n                        () => !`${v.value}`.match(/^([a-zA-Z_ ]{2,100})'?-?([a-zA-Z_ ]{1,100})$/)\n                            ? ['Enter a valid drug set description']\n                            : null\n                    ]) \n                },\n                {\n                    id: 'drug_selection',\n                    helpText: 'Select drugs to add',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    validation: (v: Option[]) => Validation.required(v),\n                    config: {\n                        showKeyboard: true\n                    },\n                    options: async () => {\n                        if (isEmpty(this.allDrugs)) {\n                            this.allDrugs = (await DrugService.getDrugs({\n                                'page_size': 1000\n                            })).map((d: any) => ({\n                                label: d.name,\n                                value: d.id,\n                                other: {\n                                    'drug': d.name,\n                                    'quantity': 0,\n                                    'frequency': '',\n                                }\n                            }))\n                        }\n                        return this.allDrugs as Option[]\n                    }\n                },\n                {\n                    id: 'drugs',\n                    helpText: 'Set drugs',\n                    type: FieldType.TT_ANC_DRUGSET_INPUT,\n                    computedValue: (v: Option[]) => v.map(d => d.other), \n                    validation: (v: Option[]) => Validation.validateSeries([\n                        () =>  Validation.required(v),\n                        () => !v.map(d => d.other.quantity && d.other.frequency).every(Boolean)\n                                ? ['Data is not complete']\n                                : null\n                    ]),\n                    options: (fdata: any) => fdata.drug_selection as Option[],\n                    config: {\n                        drugFrequencies: Object.keys(DRUG_FREQUENCIES)\n                            .map((k: string) => ({ label: k, value: k }))\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./AncDrugSet.vue?vue&type=template&id=a2705bc2&ts=true\"\nimport script from \"./AncDrugSet.vue?vue&type=script&lang=ts\"\nexport * from \"./AncDrugSet.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { Service } from \"./service\";\n\nexport class DrugService extends Service {\n    constructor() {\n        super()\n    }\n\n    \n    static getDrugs(params={} as Record<string, string | number>) {\n        return super.getJson('/drugs', params)\n    }\n}","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { find, isEmpty } from \"lodash\";\nimport HisDate from \"@/utils/Date\"\n\nexport interface AncTreatmentDrugObject {\n    'id': number;\n    'drug_name': string;\n    'dose': string;\n    'duration': number;\n    'frequency': string;\n    'units': string;\n}\n\nexport const DRUG_FREQUENCIES: Record<string, number> = { \n    'Once a day (OD)' : 1,\n    'Twice a day (BD)': 2,\n    'Three a day (TDS)': 3,\n    'Four times a day (QID)' : 4,\n    'Five times a day (5X/D)' : 5,\n    'Six times a day (Q4HRS)' : 6,\n    'In the morning (QAM)' : 0.5,\n    'Once a week (QWK)' : 0.14,\n    'Once a month' : 0.03,\n    'Twice a month' : 0.071\n}\n\nexport class AncTreatmentService extends AppEncounterService {\n    constructor(patientID: number, providerID: number){\n        super(patientID, 25, providerID)\n    }\n\n    vaccinationDrugObj() {\n        return {\n            'drug_inventory_id': 609,\n            'dose': 0.5,\n            'equivalent_daily_dose': 0.5,\n            'frequency': \"Once a day (od)\",\n            'start_date': this.date,\n            'auto_expire_date': this.date,\n            'instructions': \"Once a day\",\n            'units': \"ml\"\n        }\n    }\n\n    async updateVaccinationOrder() {\n        const dispensed = await this.dispenseVaccinationDrug()\n        if (!isEmpty(dispensed)) {\n            const orderID = dispensed[0].order_id\n            return DrugOrderService.updateDispensationOrders([{'order_id': orderID, 'quantity' : 1}])\n        }\n        throw 'Unable to dispense'\n    }\n\n    dispenseVaccinationDrug() {\n        return this.createOrders([this.vaccinationDrugObj()])\n    }\n\n    createOrders(orders: any) {\n        return DrugOrderService.create({\n            'drug_orders': orders,\n            'encounter_id': this.getEncounterID(),\n        })\n    }\n\n    async submitTreatment(drugs: AncTreatmentDrugObject[]) {\n        await this.createEncounter()\n        const orders = await this.createOrders(drugs.map(o => this.buildDrugOrderObj(o)))\n        const dispensation = new AppEncounterService(this.patientID, 54, this.providerID)\n        await dispensation.createEncounter()\n        drugs.forEach(o => {\n            const quantity: number = DRUG_FREQUENCIES[o.frequency] * o.duration\n            orders.forEach((order: any) => { \n                if (order.drug_inventory_id === o.id) {\n                    order.quantity = quantity\n                }\n            })\n        })\n        await DrugOrderService.updateDispensationOrders(orders)\n    }\n\n    buildDrugOrderObj(drug: AncTreatmentDrugObject) {\n        const startDate = new Date(this.date)\n        const expiryDate = startDate.setDate(startDate.getDate() + parseInt(`${drug.duration}`))\n        const dose: any = drug.dose || DRUG_FREQUENCIES[drug.frequency]\n        const dailyEquivalentDose =  parseFloat(dose) * DRUG_FREQUENCIES[drug.frequency] \n        return {\n            'drug_inventory_id': drug.id,\n            'dose': dose,\n            'equivalent_daily_dose': dailyEquivalentDose,\n            'frequency': drug.frequency,\n            'start_date': this.date,\n            'auto_expire_date': HisDate.toStandardHisFormat(new Date(expiryDate)),\n            'instructions': drug.drug_name + ':' + drug.dose + ' ' + drug.units + ' ' + drug.frequency + 'days',\n            'units': drug.units\n        }\n    }\n}","import { Service } from \"@/services/service\";\n\nexport interface AncDrugSetDrugs {\n    drug: number;\n    drug_name?: string;\n    quantity: number;\n    duration?: number;\n    frequency: string;\n}\n\nexport interface NewDrugSet {\n    id?: number;\n    datetime?: string;\n    name: string;\n    description: string;\n    drugs: AncDrugSetDrugs[];\n}\n\nexport class AncDrugSetService extends Service {\n    static saveDrugSet(drugSet: NewDrugSet) {\n        const data  = {...drugSet}\n        data['datetime'] = Service.getSessionDate()\n        return this.postJson('/drug_sets', drugSet)\n    }\n\n    static voidDrugSet(setID: number) {\n        return this.void(`/drug_sets/${setID}`, { date: this.getSessionDate()})\n    }\n\n    static async getDrugSets() {\n        const data = await this.getJson('drug_sets')\n        if (data) {\n            return Object.keys(data['set_names'])\n                .reduce((sets: Array<any>, setKey: string) => {\n                    const name = data['set_names'][setKey]\n                    const description = data['set_descriptions'][setKey]\n                    const drugs = data['drug_sets'][setKey]\n                    sets.push({\n                        id: parseInt(setKey),\n                        name,\n                        description,\n                        drugs: Object.keys(drugs).reduce(\n                            (a: any, k: string) => [\n                                ...a, { \n                                    'id': parseInt(k), ...drugs[k],\n                                    'drug_name': drugs[k].drug_name,\n                                    'duration': parseInt(drugs[k].duration),\n                                    'frequency': drugs[k].frequency,\n                                    'units': drugs[k].units,\n                                }], []\n                        )\n                    })\n                    return sets\n                }, [])\n        }\n        return []\n    }\n}"],"sourceRoot":""}