{"version":3,"sources":["webpack:///./src/apps/ART/views/reports/moh/CohortReport/MohCohort.vue?1948","webpack:///./src/apps/ART/views/reports/moh/CohortReport/MohCohort.vue","webpack:///./src/apps/ART/views/reports/moh/CohortReport/MohCohort.vue?2ce1","webpack:///./src/apps/ART/views/reports/ReportMixin.vue","webpack:///./src/apps/ART/views/reports/ReportMixin.vue?5c96","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176"],"names":["_hoisted_1","id","_hoisted_2","_createElementVNode","render","_ctx","_cache","$props","$setup","$data","$options","_component_ion_loading","_resolveComponent","_component_his_standard_form","_component_cohort_v","_component_cohort_h","_component_cohort_ft","_component_ion_content","_component_his_footer","_component_ion_page","_openBlock","_createElementBlock","_Fragment","_createVNode","isLoading","message","reportReady","_createCommentVNode","_createBlock","key","onOnFinish","onPeriod","skipSummary","fields","default","_withCtx","componentKey","indicators","reportparams","period","clinicName","onOnClickIndicator","onDrillDown","_","btns","defineComponent","mixins","ReportMixinVue","components","IonLoading","CohortH","CohortV","CohortFt","HisStandardForm","HisFooter","IonPage","IonContent","data","formData","computedFormData","cohort","reportID","MohCohortReportService","getLocationName","disaggregatedReportParams","startDate","endDate","quarter","onGenerateTempCallback","created","this","getBtns","getDateDurationFields","methods","form","config","regenerate","report","setRegenerate","value","start_date","end_date","label","HisDate","toStandardHisFormat","other","start","end","setOccupation","occupation","setQuarter","setStartDate","setEndDate","getDateIntervalPeriod","datePeriodRequestParams","qaurterRequestParams","Url","parameterizeObjToString","request","requestCohort","ok","interval","setInterval","async","state","status","json","values","toIndicators","cacheCohort","clearInterval","action","params","reduce","indicator","name","parseInt","contents","indicatorName","find","resourceId","columns","table","thTxt","exportable","asyncRows","persons","sortByArvNumber","getCohortDrillDown","row","map","person","tdARV","td","formatGender","toStandardHisDisplayFormat","getAgeInYears","tdBtn","modalController","dismiss","$router","push","path","person_id","length","alertConfirmation","setTimeout","getTop","then","v","drilldownAsyncRows","description","exportToCsv","headers","rows","Object","keys","k","reportTitle","Service","toCsv","dayjs","format","match","getCoreVersion","getApiVersion","getSiteUUID","printSpec","content","document","getElementById","toPDFfromHTML","innerHTML","size","slot","color","visible","onClick","__exports__","app","App","getActiveApp","customFileName","isMilitarySite","drillDownCache","gender","fmtGender","toDate","date","attr","sort","a","b","getArvInt","e","console","error","arv","arvNumStr","split","arvNumInt","sortValue","confirmPatient","patient","title","canExport","modal","create","component","DrilldownTable","cssClass","componentProps","showFilters","rowsPerPage","paginated","showReportStamp","footerColor","onFinish","present","rowParser","getDefaultDrillDownTable","ARV_NUM_INDEX","t","tableRows","index","isArray","defaultRow","num","slice","Patientservice","findByID","getArvNumber","getGender","tdDate","getBirthdate","toString","Promise","all","runTableDrill","drilldownData","drill","tdLink","getQuaterOptions","quarters","ArtReportService","getReportQuarters","q","useQuarter","setCustomQuarterPeriod","maxQuarter","maxDate","getSessionDate","minDate","helpText","type","FieldType","TT_SELECT","condition","validation","val","Validation","required","options","items","generateDateFields","f","estimation","allowUnknown","computeValue","unload","d","s","c","init","Store","get","computedValue","_this$app","applicationName","_resolveDynamicComponent","formType","activeField","cancelDestinationPath","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","computedData","$emit","i"],"mappings":"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","file":"js/chunk-82881052.ca2088ed.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, withCtx as _withCtx, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = { id: \"report-content\" }\nconst _hoisted_2 = /*#__PURE__*/_createElementVNode(\"div\", { id: \"print\" }, null, -1)\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_loading = _resolveComponent(\"ion-loading\")!\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_cohort_v = _resolveComponent(\"cohort-v\")!\n  const _component_cohort_h = _resolveComponent(\"cohort-h\")!\n  const _component_cohort_ft = _resolveComponent(\"cohort-ft\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_his_footer = _resolveComponent(\"his-footer\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createVNode(_component_ion_loading, {\n      \"is-open\": _ctx.isLoading,\n      message: \"Please wait...\"\n    }, null, 8, [\"is-open\"]),\n    (!_ctx.reportReady)\n      ? (_openBlock(), _createBlock(_component_his_standard_form, {\n          key: 0,\n          onOnFinish: _ctx.onPeriod,\n          skipSummary: true,\n          fields: _ctx.fields\n        }, null, 8, [\"onOnFinish\", \"fields\"]))\n      : _createCommentVNode(\"\", true),\n    (_ctx.reportReady)\n      ? (_openBlock(), _createBlock(_component_ion_page, { key: 1 }, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_content, null, {\n              default: _withCtx(() => [\n                (_openBlock(), _createBlock(_component_cohort_v, {\n                  key: _ctx.componentKey,\n                  indicators: _ctx.indicators\n                }, null, 8, [\"indicators\"])),\n                _createElementVNode(\"div\", _hoisted_1, [\n                  (_openBlock(), _createBlock(_component_cohort_h, {\n                    key: _ctx.componentKey,\n                    reportparams: _ctx.period,\n                    clinicName: _ctx.clinicName\n                  }, null, 8, [\"reportparams\", \"clinicName\"])),\n                  (_openBlock(), _createBlock(_component_cohort_ft, {\n                    key: _ctx.componentKey,\n                    onOnClickIndicator: _ctx.onDrillDown,\n                    indicators: _ctx.indicators\n                  }, null, 8, [\"onOnClickIndicator\", \"indicators\"]))\n                ])\n              ]),\n              _: 1\n            }),\n            _createVNode(_component_his_footer, { btns: _ctx.btns }, null, 8, [\"btns\"])\n          ]),\n          _: 1\n        }))\n      : _createCommentVNode(\"\", true),\n    _hoisted_2\n  ], 64))\n}","\nimport { defineComponent } from \"vue\";\nimport HisFooter from \"@/components/HisDynamicNavFooter.vue\";\nimport { IonPage, IonContent, IonLoading } from \"@ionic/vue\"\nimport { Field } from '@/components/Forms/FieldInterface'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport ReportMixinVue from \"../../ReportMixin.vue\";\nimport { MohCohortReportService } from \"@/apps/ART/services/reports/moh_cohort_service\"\nimport CohortH from \"@/apps/ART/views/reports/moh/CohortReport/CohortHeader.vue\"\nimport CohortV from \"@/apps/ART/views/reports/moh/CohortReport/CohortValidation.vue\"\nimport CohortFt from \"@/apps/ART/views/reports/moh/CohortReport/CohortFT.vue\"\nimport HisDate from \"@/utils/Date\"\nimport Url from \"@/utils/Url\"\nimport { modalController } from \"@ionic/vue\";\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport dayjs from \"dayjs\";\nimport { Service } from \"@/services/service\";\nimport { toCsv, toPDFfromHTML } from \"@/utils/Export\"\nimport { find } from \"lodash\";\nimport { alertConfirmation } from \"@/utils/Alerts\";\n\nexport default defineComponent({\n  mixins: [ReportMixinVue],\n  components: { IonLoading, CohortH, CohortV, CohortFt, HisStandardForm, HisFooter, IonPage, IonContent },\n  data: () => ({\n    formData: {} as any,\n    componentKey: 0 as number,\n    computedFormData: {} as any,\n    indicators: {} as any,\n    cohort: {} as any,\n    btns: [] as Array<any>,\n    isLoading: false as boolean,\n    fields: [] as Array<Field>,\n    reportID: -1 as any,\n    clinicName: MohCohortReportService.getLocationName(),\n    reportReady: false as boolean,\n    disaggregatedReportParams: '' as string,\n    startDate: '' as string,\n    endDate: '' as string,\n    quarter: '' as string,\n    onGenerateTempCallback: null as any\n  }),\n  created() {\n    this.btns = this.getBtns()\n    this.fields = this.getDateDurationFields(true, true, 21, null)\n  },\n  methods: {\n    async onPeriod(form: any, config: any, regenerate=false) {\n      this.componentKey += 1\n      this.formData = form\n      this.computedFormData = config\n      this.reportReady = true \n      this.isLoading = true\n      this.report = new MohCohortReportService()\n      this.report.setRegenerate(regenerate)\n      let data: any = {}\n      if (form.quarter.value === 'custom_period') {\n        this.quarter = 'Custom'\n        this.startDate = config.start_date\n        this.endDate = config.end_date\n      } else {\n        this.quarter = form.quarter.label\n        this.startDate = HisDate.toStandardHisFormat(form.quarter.other.start)\n        this.endDate = HisDate.toStandardHisFormat(form.quarter.other.end)\n      }\n      this.report.setOccupation(config.occupation)\n      this.report.setQuarter(this.quarter)\n      this.report.setStartDate(this.startDate)\n      this.report.setEndDate(this.endDate)\n\n      if (this.quarter === 'Custom') {\n        this.period = `Custom ${this.report.getDateIntervalPeriod()}`\n        data = this.report.datePeriodRequestParams()\n      } else {\n        this.period = this.quarter\n        data = this.report.qaurterRequestParams()\n      }\n      this.disaggregatedReportParams = Url.parameterizeObjToString({ \n        'start_date': this.startDate,\n        'end_date': this.endDate,\n        'quarter': this.quarter,\n        'occupation': config.occupation\n      })\n      const request = await this.report.requestCohort(data)\n      if (request.ok) {\n        // Check the backend if background task is complete\n        const interval = setInterval(async () => {\n          data.regenerate = false\n          const state = await this.report.requestCohort(data)\n          if (state.status === 200) {\n            const data = await state.json()\n            this.reportID = data.id\n            this.cohort = data.values\n            this.indicators = this.toIndicators(data.values)\n            this.isLoading = false\n            this.report.cacheCohort(data.values)\n            clearInterval(interval)\n            // Run any temporary callback functions and clear them afterwards\n            if (typeof this.onGenerateTempCallback === 'function') {\n              const action = this.onGenerateTempCallback\n              action()\n              this.onGenerateTempCallback = null\n            }\n          }\n        }, 3000)\n      }\n    },\n    /**\n     * Transform indicators from array to a simple key value pair object\n    */ \n    toIndicators(params: any) {\n      return params.reduce((data: Record<string, number>, indicator: any) => {\n        data[indicator.name] = parseInt(indicator.contents)\n        return data\n      }, {})\n    },\n    regenerate() {\n      return this.onPeriod(this.formData, this.computedFormData, true)\n    },\n    async onDrillDown(indicatorName: string) {\n      const indicator = find(this.cohort, {name: indicatorName})\n      if (!indicator) return\n      const resourceId = indicator.id\n      const columns = [\n        [\n          table.thTxt('ARV number'),\n          table.thTxt('Name', { exportable: false }),\n          table.thTxt('Gender'),\n          table.thTxt('Birth Date'),\n          table.thTxt('Outcome'),\n          table.thTxt('Action')\n        ]\n      ]\n      const asyncRows = async () => {\n        const persons = this.sortByArvNumber((await this.report.getCohortDrillDown(resourceId)) as Array<any> || [], 'arv_number')\n        const row = persons.map((person: any) => ([\n          this.tdARV(person['arv_number']),\n          table.td(`${person['given_name']} ${person['family_name']}`),\n          table.td(this.formatGender(person['gender'])),\n          table.td(`${HisDate.toStandardHisDisplayFormat(person['birthdate'])} (${HisDate.getAgeInYears(person['birthdate'])})`),\n          table.td(person['outcome'] || 'N/A'),\n          table.tdBtn('Select', async () => {\n            await modalController.dismiss({})\n            this.$router.push({ path:`/patient/dashboard/${person.person_id}`})\n          })\n        ]))\n        /**\n         * Hack to fix Empty drilldown result-set.\n         * \n         * This hack addresses an issue where the cohort report indicator is counting\n         * patients but isnt able to fetch them during drilldown. This is a caching issue on the report\n         * and requires a regeneration to solve this...\n         */\n        if (parseInt(indicator.contents) > 0 && row.length <= 0) {\n          // user has to confirm if they want to rebuild\n          if (await alertConfirmation(\"Unable to fetch drilldown patients, Do you want to rebuild cohort to resolve this?\")) {\n            setTimeout(() => {\n              // Close the drilldown dialogue so that we can load the next one if it's ready\n              modalController.getTop().then(v => v ? modalController.dismiss() : null)\n              // Reload the drilldown table with updated data\n              this.onGenerateTempCallback = () => this.onDrillDown(indicatorName)\n              this.regenerate()\n            }, 100)\n          }\n        }\n        return row\n      }\n      await this.drilldownAsyncRows(indicator.description, columns, asyncRows)\n    },\n    exportToCsv() {\n      const headers = ['Indicator', 'Value']\n      const rows = Object.keys(this.indicators).map(k => [k, this.indicators[k]])\n      const reportTitle = `${Service.getLocationName()} cohort report ${this.period}`\n      toCsv([headers], [\n        ...rows,\n        [`Date Created: ${dayjs().format('DD/MMM/YYYY HH:MM:ss')}`],\n        ['Quarter: ' + (this.quarter.match(/custom/i) \n          ? `${this.startDate} - ${this.endDate}` \n          : this.quarter)\n        ],\n        [`HIS-Core Version: ${Service.getCoreVersion()}`],\n        [`API Version: ${Service.getApiVersion()}`],\n        [`Site: ${Service.getLocationName()}`],\n        [`Site UUID: ${Service.getSiteUUID()}`]\n      ], reportTitle)\n    },\n    printSpec() {\n      const content = document.getElementById('report-content')\n      if (content) {\n        toPDFfromHTML(`\n          <html>\n            <head>\n              <title>Print Cohort</title>\n              <style> \n                .numbers {\n                  width: 2.5%;\n                  text-align: center;\n                  border-width: 0px 1px 0px 0px;\n                  border-style: dotted;\n                }\n                .row-title {\n                  width: 17.75%;\n                  text-align: left;\n                  padding-left: 5px;\n                  border-style: dotted;\n                }\n                .signatures {\n                  width: 39.875%;\n                  text-align: left;\n                  padding-left: 5px;\n                  border-style: dotted;\n                }\n                .row-name {\n                  width: 39.875%;\n                  text-align: left;\n                  padding-left: 5px;\n                  border-style: dotted;\n                  border-left-style: solid;\n                }\n                .no-borders {\n                  border-width: 0px;\n                }\n                #version-row td {\n                  height: 30px;\n                }\n                #version {\n                  text-align: right;\n                  padding-right: 5px;\n                  font-size: 10px;\n                }\n                #consistency_check div {\n                  color: red;\n                  padding-bottom: 10px;\n                }\n                a {\n                  color: black;\n                  text-decoration: none;\n                }\n                table {\n                  width: 100%;\n                  border-collapse: collapse;\n                  margin-top: 10px;\n                }\n                tr {\n                  height: 45px;\n                }\n                .vertical-separator {\n                  border-width: 0px;\n                }\n                td {\n                  border-style: solid;\n                  border-width: 1px;\n                  padding: 1em;\n                  text-align: center;\n                }\n                .section-description td {\n                  border-width: 0px;\n                }\n                .horisonatl-separator td {\n                  border-width: 0px;\n                }\n                .numbers {\n                  width: 2.5%;\n                  text-align: center;\n                  border-width: 0px 1px 0px 0px;\n                  border-style: dotted;\n                }\n                .sum-arrows {\n                  width: 75px;\n                  height: 55px;\n                }\n                .postfixes {\n                  font-size: x-small;\n                  font-weight: bold;\n                  position: relative;\n                  top: -15px;\n                  left: -40px;\n                }\n                .granules {\n                  width: 100%;\n                  height: 32px;\n                  margin: 10px;\n                  display: table;\n                }\n                .granules-row {\n                  display: table-row;\n                }\n                .granules-cell {\n                  display: table-cell;\n                  text-align: center;\n                }\n                .granules span{\n                  font-size: 10px;\n                }\n                .granules-right-td {\n                  border-right-style: dotted !important;\n                  border-right-width: 1px;\n                }\n\n                @media print\n                {\n                  table { page-break-after:auto }\n                  tr    { page-break-inside:avoid; page-break-after:auto }\n                  td    { page-break-inside:avoid; page-break-after:auto }\n                  thead { display:table-header-group }\n                  tfoot { display:table-footer-group }\n                }\n              </style>\n            </head>\n            <body>\n              ${content.innerHTML}\n            </body>\n          </html>\n        `)\n      }\n    },\n    getBtns() {\n      return  [\n        {\n          name: \"CSV\",\n          size: \"large\",\n          slot: \"start\",\n          color: \"primary\",\n          visible: true,\n          onClick: () => this.exportToCsv()\n        },\n        {\n          name: \"PDF\",\n          size: \"large\",\n          slot: \"start\",\n          color: \"primary\",\n          visible: true,\n          onClick: () => this.printSpec()\n        },\n        {\n          name: \"Regenerate\",\n          size: \"large\",\n          slot: \"end\",\n          color: \"danger\",\n          visible: true,\n          onClick: async () => this.regenerate()\n        },\n        {\n          name: \"Disaggregeted\",\n          size: \"large\",\n          slot: \"end\",\n          color: \"primary\",\n          visible: true,\n          onClick: () => this.$router.push(`/art/moh_disaggregated_report?${this.disaggregatedReportParams}`)\n        },\n        {\n          name: \"Finish\",\n          size: \"large\",\n          slot: \"end\",\n          color: \"success\",\n          visible: true,\n          onClick: () => this.$router.push({ path:'/' })\n        }\n      ]   \n    }\n  }\n})\n","import { render } from \"./MohCohort.vue?vue&type=template&id=356f311f&ts=true\"\nimport script from \"./MohCohort.vue?vue&type=script&lang=ts\"\nexport * from \"./MohCohort.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/projects/malawi-emr/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","\nimport { Service } from \"@/services/service\"\nimport { defineComponent } from 'vue'\nimport { Field } from '@/components/Forms/FieldInterface'\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport { modalController } from \"@ionic/vue\";\nimport DrilldownTable from \"@/apps/ART/views/reports/BasicReportTemplate.vue\"\nimport { ArtReportService } from \"@/apps/ART/services/reports/art_report_service\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport table, { AsyncTableRowHandler } from \"@/components/DataViews/tables/ReportDataTable\"\nimport { isArray } from \"lodash\"\nimport Store from \"@/composables/ApiStore\"\nimport App from \"@/apps/app_lib\"\nimport { formatGender as fmtGender } from \"@/utils/Strs\";\n\n\nexport default defineComponent({\n    data: () => ({\n        app: App.getActiveApp(),\n        fields: [] as Array<Field>,\n        report: {} as any,\n        reportReady: false as boolean,\n        period: '' as string,\n        startDate: '' as string,\n        endDate: '' as string,\n        customFileName: '' as string,\n        isMilitarySite: false as boolean,\n        drillDownCache: {} as Record<number, Array<any>>\n    }),\n    methods: {\n        formatGender(gender: string) {\n            return fmtGender(gender)\n        },\n        toDate(date: string) {\n            return HisDate.toStandardHisDisplayFormat(date)\n        },\n        sortByArvNumber(data: Array<any>, attr='arv_number') {\n            try {\n                return data.sort((a: any, b: any) => this.getArvInt(a[attr]) > this.getArvInt(b[attr]) ? 1 : -1)\n            } catch(e) {\n                console.error(e)\n                return data\n            }\n        },\n        getArvInt(arv: string) {\n            if (typeof arv === 'string') {\n                const arvNumStr = arv.split('-')[2]\n                const arvNumInt = parseInt(arvNumStr)\n                return typeof arvNumInt === 'number' ? arvNumInt : 0 \n            }\n            return 0\n        },\n        tdARV(arv: string, params={}) {\n            return table.td(arv, { sortValue: this.getArvInt(arv), ...params})\n        },\n        confirmPatient(patient: number) {\n            return this.$router.push(`/patients/confirm?person_id=${patient}`)\n        },\n        async drilldownAsyncRows(title: string, columns: Array<any>, asyncRows: AsyncTableRowHandler, canExport=true) {\n            const modal = await modalController.create({\n                component: DrilldownTable,\n                cssClass: 'large-modal',\n                componentProps: { \n                    title, \n                    columns, \n                    asyncRows,\n                    canExport,\n                    showFilters: true,\n                    rowsPerPage: 50,\n                    paginated: true,\n                    showReportStamp: false,\n                    footerColor: 'light',\n                    onFinish: () => modalController.dismiss()\n                }\n            })\n            modal.present()\n        },\n        async drilldownData(title: string, columns: Array<any>, rows: Array<any>, rowParser: any) {\n            const modal = await modalController.create({\n                component: DrilldownTable,\n                cssClass: 'large-modal',\n                componentProps: { \n                    title, \n                    columns, \n                    rows,\n                    rowParser,\n                    rowsPerPage: 50,\n                    showFilters: true,\n                    paginated: true,\n                    showReportStamp: false,\n                    footerColor: 'light',\n                    onFinish: () => modalController.dismiss()\n                }\n            })\n            modal.present()\n        },\n        getDefaultDrillDownTable() {\n            const columns = [\n                [\n                    table.thTxt('ARV number'), \n                    table.thTxt('Gender'),\n                    table.thTxt('Birth Date'), \n                    table.thTxt('Actions')\n                ]\n            ]\n            const rowParser = async (tableRows: Array<any[]>) => {\n                let ARV_NUM_INDEX = 0\n                const t = tableRows.map(async (defaultRow: Array<any>) => {\n                    let id: any = null\n                    let index: null | number = null\n                    if (isArray(defaultRow)) {\n                        const [num, key ] = defaultRow\n                        index = num\n                        if (key in this.drillDownCache) {\n                            return [index, ...this.drillDownCache[key].slice(1)]\n                        }\n                    } else {\n                        id = defaultRow\n                        if (id in this.drillDownCache) {\n                            return this.drillDownCache[id]\n                        }\n                    }\n    \n                    const data = await Patientservice.findByID(id)\n                    const patient = new Patientservice(data)\n                    const row = []\n                    if (index) {\n                        ARV_NUM_INDEX = 1\n                        row.push(index)\n                    } \n                    row.push(this.tdARV(patient.getArvNumber()))\n                    row.push(table.td(this.formatGender(patient.getGender())))\n                    row.push(table.tdDate(patient.getBirthdate().toString()))\n                    row.push(table.tdBtn('Show', async () => {\n                        await modalController.dismiss({})\n                        this.$router.push({ path: `/patient/dashboard/${id}`})\n                    }))\n                    this.drillDownCache[id] = row\n                    return row\n                })\n                const rows = await Promise.all(t)\n                return rows.sort((a: any, b: any) => \n                        a[ARV_NUM_INDEX].sortValue > b[ARV_NUM_INDEX].sortValue \n                        ? 1 : -1)\n            }\n            return { rowParser, columns }\n        },\n        runTableDrill(data: any, title='Drilldown patients') {\n            const { columns, rowParser } = this.getDefaultDrillDownTable()\n            this.drilldownData(title, columns, data, rowParser)\n        },\n        drill(values: Array<number>, title='Drill table') {\n            if (values && values.length > 0) {\n                return table.tdLink(\n                    values.length, \n                    () => this.runTableDrill(values, title)\n                )\n            }\n            return table.td(0)\n        },\n        getQuaterOptions() {\n            const quarters = ArtReportService.getReportQuarters()\n            return quarters.map((q: any) => ({\n                label: q.name, value: q.start, other: q\n            }))\n        },\n        getDateDurationFields(\n            useQuarter=false, \n            setCustomQuarterPeriod=false, \n            maxQuarter=5, \n            maxDate=Service.getSessionDate() as string | null,\n        ): Array<Field> {\n            const minDate = '2000-01-01'\n            return [\n                {\n                    id: 'quarter',\n                    helpText: 'Select Quarter',\n                    type: FieldType.TT_SELECT,\n                    condition: () => useQuarter,\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => {\n                        const quarters = ArtReportService.getReportQuarters(maxQuarter)\n                        let items: Array<Option> = quarters.map((q: any) => ({\n                            label: q.name,\n                            value: q.start,\n                            other: q\n                        }))\n                        if (setCustomQuarterPeriod) {\n                            items = [\n                                {\n                                    label: 'Set custom period',\n                                    value: 'custom_period',\n                                    other: {}\n                                },\n                                ...items\n                            ]\n                        }\n                        return items\n                    }\n                },\n                ...generateDateFields({\n                    id: 'start_date',\n                    helpText: 'Start',\n                    required: true,\n                    condition: (f: any) => f.quarter && f.quarter.value === 'custom_period' || !useQuarter,\n                    minDate: () => minDate,\n                    maxDate: () => maxDate,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string) => date \n                }),\n                ...generateDateFields({\n                    id: 'end_date',\n                    helpText: 'End',\n                    required: true,\n                    condition: (f: any) => f.quarter && f.quarter.value === 'custom_period' || !useQuarter,\n                    unload: (d: any, s: any, f: any, c: any) => {\n                        if (s === 'next') {\n                            this.endDate = c.end_date\n                        }\n                    },\n                    minDate: (_: any, c: any) => c.start_date,\n                    maxDate: () => maxDate,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string) => date\n                }),\n                {\n                    id: 'occupation',\n                    helpText: \"Report Group\",\n                    type: FieldType.TT_SELECT,\n                    init: async () => {\n                        this.isMilitarySite = await Store.get('IS_MILITARY_SITE')\n                        return true\n                    },\n                    computedValue: (v: Option) => v.value, \n                    condition: () => this.app?.applicationName === 'ART' && this.isMilitarySite,\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => {\n                        return [\n                            { label: 'All', value: 'All'},\n                            { label: 'Military', value: 'Military'},\n                            { label: 'Civilian', value: 'Civilian'},\n                        ]\n                    }\n                }\n            ]\n        }\n    }\n})\n","import script from \"./ReportMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./ReportMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/projects/malawi-emr/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}