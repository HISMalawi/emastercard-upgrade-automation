{"version":3,"sources":["webpack:///./src/apps/OPD/views/encounters/radiology.vue?b047","webpack:///./src/apps/OPD/views/encounters/radiology.vue","webpack:///./src/apps/OPD/views/encounters/radiology.vue?9f90","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/apps/OPD/services/patient_radiology_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/components/Forms/BaseFormElements.ts","webpack:///./src/components/FormElements lazy ^\\.\\/.*\\.vue$ namespace object"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","_","defineComponent","components","HisStandardForm","mixins","EncounterMixinVue","data","radiologyService","isPacsEnabled","previousRadiologyExaminations","watch","ready","isReady","this","PatientRadiologyService","patientID","providerID","OPD_GLOBAL_PROP","isPACsEnabled","showPreviousRadiolgy","patient","getFields","immediate","deep","methods","computedData","Promise","all","radiology","createEncounter","obsObj","savedObsData","saveObservationList","printOrders","submitToPacs","error","console","log","gotoPatientDashboard","params","getPreviousRadiologyExaminations","url","columns","rows","order","row","children","accession_number","value_text","moment","obs_datetime","format","push","label","value","other","id","helpText","condition","type","FieldType","TT_TABLE_VIEWER","options","getTableData","config","hiddenFooterBtns","TT_RADIOLOGY_PICKER","validation","Validation","required","disableBackBtn","computedValue","map","async","buildValueCoded","option","parent","child","buildValueCodedFromConceptId","concept_id","__exports__","providers","facts","sessionDate","apiDate","encounterName","isBdeMode","birthDate","outcome","outcomeStartDate","handler","route","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","computed","patientDashboardUrl","runflowState","state","states","FlowState","SET_PROVIDER","selection","username","split","provider","find","person_id","CONTINUE","CHANGE_SESSION_DATE","$router","EXIT","CHANGE_PATIENT_OUTCOME","GO_TO_PATIENT_DASHBOARD","findings","matchToGuidelines","ENCOUNTER_GUIDELINES","index","_finding$actions","_finding$actions3","finding","actions","alert","_finding$actions2","status","_finding$actions4","flowState","program","startDate","e","toastDanger","ProgramService","getSessionDate","getCachedApiDate","isBDE","getBirthdate","$route","name","toString","toUpperCase","sort","a","b","usernameA","usernameB","p","_p$person","isEmpty","person","names","_p$person2","latestName","given_name","family_name","toOption","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","d","reduce","accum","cur","Array","isArray","concat","inArray","arr","expression","length","validateSeries","conditions","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","formData","$emit","AppEncounterService","constructor","super","radiologyType","ConceptService","getConceptSet","patientId","Service","getJson","getRadiologyObs","getID","thirdpartyapps","getThirdpartyApps","app","accessionNumber","orders","obs_id","getFullName","getAge","getGender","getNationalID","getEncounterID","getDate","getUserName","getUserID","getUserRoles","postJson","lastAccessionNumber","getAccesionNumber","observations","getConceptName","value_coded","printService","PrintoutService","patientNationalId","patientName","urls","fullXrayOrder","HisDate","toStandardHisDisplayFormat","batchPrintLbls","dformat","priority","action","infoActionSheet","slot","color","modal","optionsActionSheet","role","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","COMPONENT_REFS","TT_ASYNC_MULTI_SELECT","TT_LINKAGE_CODE","TT_MULTI_SELECT_GRID","TT_AGE_INPUT","TT_BARCODE","TT_NOTE","TT_SELECT","TT_CARD_SELECTOR","TT_MULTIPLE_SELECT","TT_TEXT","TT_NUMBER","TT_MONTHLY_DAYS","TT_ART_REGIMEN_SELECTION","TT_NEXT_VISIT_INTERVAL_SELECTION","TT_DOSAGE_INPUT","TT_YES_NO","TT_MULTIPLE_YES_NO","TT_WEIGHT_CHART","TT_VITALS_ENTRY","TT_APPOINTMENTS_ENTRY","TT_COMPLAINTS_PICKER","TT_CLINIC_HOLIDAY_PICKER","TT_SUMMARY","TT_ART_STAGING_SUMMARY","TT_ADHERENCE_INPUT","TT_LAB_ORDERS","TT_PERSON_RESULT_VIEW","TT_PROGRAM_SELECTION","TT_DATE_PICKER","TT_RELATION_SELECTION","TT_FILING_NUMBER_VIEW","TT_PERSON_MATCH_VIEW","TT_FULL_DATE","TT_BATCH_ENTRY","TT_BATCH_VERIFICATION","TT_BATCH_MOVEMENT","TT_IP_ADDRESS","TT_TEXT_BANNER","TT_DISPENSATION_INPUT","TT_DATA_TABLE","TT_GROUP_SELECTOR","TT_ANC_PREGNANCY_INPUT_CONFIG","TT_ANC_PREGNANCY_DETAILS_INPUT","TT_ANC_LMP_DATE_INPUT","TT_DRUG_TRANSFER_IN","TT_GRID_SELECTOR","TT_ANC_DRUGSET_INPUT","TT_PRESCRIPTION_INPUT","TT_INFINITE_SCROLL_MULTIPLE_SELECT","TT_DRUG_DISPENSER","webpackAsyncContext","req","__webpack_require__","o","resolve","Error","code","ids","slice","keys","module","exports"],"mappings":"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","file":"js/chunk-31a837c0.3c95640c.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        cancelDestinationPath: _ctx.cancelDestination,\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onSubmit\n      }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from 'vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport { PatientRadiologyService } from \"@/apps/OPD/services/patient_radiology_service\";\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport OPD_GLOBAL_PROP from \"@/apps/OPD/opd_global_props\";\nimport moment from \"dayjs\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    radiologyService: {} as any,\n    isPacsEnabled: false,\n    previousRadiologyExaminations: {} as any\n  }),\n  watch: {\n    ready: {\n      async handler(isReady: boolean) {\n        if(isReady){\n          this.radiologyService = new PatientRadiologyService(this.patientID, this.providerID)\n          this.isPacsEnabled = (await OPD_GLOBAL_PROP.isPACsEnabled())\n          this.previousRadiologyExaminations = await this.radiologyService.showPreviousRadiolgy(this.patient)\n          this.fields = this.getFields()\n        }\n      },\n      immediate: true,\n      deep: true\n    }\n  },\n  methods: {\n    async onSubmit(_: any, computedData: any){\n      const data = await Promise.all(computedData.radiology)\n      await this.radiologyService.createEncounter()\n      const obsObj = await this.radiologyService.obsObj(data) \n      const savedObsData = await this.radiologyService.saveObservationList(obsObj)\n      await this.radiologyService.printOrders(savedObsData, this.patient)\n      if(this.isPacsEnabled) {\n        try {\n          await this.radiologyService.submitToPacs(savedObsData, this.patient)\n        } catch (error) {\n          console.log(error)\n        }\n      }\n      this.gotoPatientDashboard()\n    },\n    async getTableData() {\n      const params = await this.radiologyService.getPreviousRadiologyExaminations(this.patient)\n      const data = params.data\n      const url = params.url\n      const columns = ['Accession#','Body Part', 'Order Type', 'Ordered', 'Result']\n      const rows = [] as Array<any>\n      for (const order in data) {\n        const row = [\n          data[order].children[0].accession_number,\n          data[order].value_text,\n          data[order].children[0].value_text,\n          moment(data[order].obs_datetime).format('DD/MMM/YYYY'),\n          `<ion-button slot=\"end\" size=\"large\" href=\"${url}\" color=\"success\">\n            View\n          </ion-button>`\n        ]\n        rows.push(row)\n      }\n      return [\n        {\n          label: '',\n          value: '',\n          other: { columns, rows},\n        },\n      ];\n    },\n    getFields(): Array<Field>{\n      return [\n        {\n          id: 'radiology_results',\n          helpText: 'Previous Radiology Examinations',\n          condition: () => this.previousRadiologyExaminations,\n          type: FieldType.TT_TABLE_VIEWER,\n          options: () => this.getTableData(),\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n        {\n          id: 'radiology',\n          helpText: 'Radiology Examination',\n          type: FieldType.TT_RADIOLOGY_PICKER,\n          validation: (data: any) => Validation.required(data),\n          config: {\n            hiddenFooterBtns: [ this.disableBackBtn() ],\n          },\n          computedValue: (options: Option[]) => {\n            return options.map(async (option)=> ({\n              ...(await this.radiologyService.buildValueCoded('Radiology Orders', option.other.parent)),\n              child: [await this.radiologyService.buildValueCodedFromConceptId(option.other.parent, option.other.concept_id)]\n            }))\n          },\n        },\n      ]\n    },\n    disableBackBtn() {\n      if(this.previousRadiologyExaminations) {\n        return ''\n      } else return 'Back'\n    }\n  }\n})\n","import { render } from \"./radiology.vue?vue&type=template&id=8200306e&ts=true\"\nimport script from \"./radiology.vue?vue&type=script&lang=ts\"\nexport * from \"./radiology.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/projects/malawi-emr/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","\n/**\n * @deprecated moved to useEncounter composable\n * \n */\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/projects/malawi-emr/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { ConceptService } from '@/services/concept_service';\nimport { PrintoutService } from \"@/services/printout_service\";\nimport { Service } from \"@/services/service\";\nimport { Patientservice } from \"@/services/patient_service\";\nimport { isEmpty } from \"lodash\";\nimport HisDate from \"@/utils/Date\";\n\nexport class PatientRadiologyService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 121, providerID) \n  }\n\n  static async getRadiologyList(radiologyType: string, filter = '') {\n    return ConceptService.getConceptSet(radiologyType, filter) \n  }\n\n  async getRadiologyObs(patientId: number) {\n    try {\n      const path = 'radiology/radiology_orders?patient_id='+patientId\n      const data = await Service.getJson(path)\n      return data\n    } catch (error) {\n      return 0\n    }\n  }\n\n  async showPreviousRadiolgy(patient: any): Promise<boolean> {\n    if ( (await this.getRadiologyObs(patient.getID())).length > 0 ) {\n      return true\n    }\n    return false\n  }\n\n  async getPreviousRadiologyExaminations(patient: any): Promise<any>{\n    const thirdpartyapps  =  await Service.getThirdpartyApps()\n    let url = '' \n    for (const app of thirdpartyapps) {\n      if(app.name == 'pacs') {\n        url = app.url\n      }\n    }\n    if (isEmpty(url)) {\n      url = `opd/encounters/radiology/${this.patientID}`\n    }\n    const data =  await this.getRadiologyObs(patient.getID())\n    if(!(data.length > 0)) { \n      return false;\n    } else {\n      return { data: data, url: url}\n    }\n  }\n\n  async submitToPacs(savedObsData: any, patient: any) {\n    let accessionNumber\n    for(const order of savedObsData) {\n      accessionNumber = order.children[0].accession_number\n    }\n    const orders = await Promise.all(savedObsData.map(async (order: any) => ({\n      \"main_value_text\": order.value_text,\n      \"obs_id\": order.obs_id,\n      \"sub_value_text\": order.children[0].value_text\n    })))\n    const patientData = {\n      \"patient_name\": patient.getFullName(),\n      \"patientAge\": patient.getAge(),\n      \"patientDOB\": patient.getBirthdate(),\n      \"patientGender\": patient.getGender(),\n      \"national_id\": patient.getNationalID(),\n      \"person_id\": patient.getID(),\n      \"encounter_id\": this.getEncounterID(),\n      \"date_created\": this.getDate(),\n      \"accession_number\": accessionNumber\n    }\n    const provider = {\n      \"username\": Service.getUserName(),\n      \"userID\": Service.getUserID(),\n      \"userRoles\": Service.getUserRoles(),\n    }\n    return Service.postJson(`radiology/radiology_orders`, {\n      'patient_details': patientData,\n      'physician_details': provider,\n      'radiology_orders': orders\n    }) \n  }\n\n  async getAccesionNumber() {\n    return (await Service.getJson(`sequences/next_accession_number`))['accession_number']\n  }\n\n  async obsObj(data: Array<any>) {\n    const lastAccessionNumber = await this.getAccesionNumber()\n    const observations = [] as Array<any>\n    for (const order of data) {\n      observations.push(\n        {\n          'concept_id': order.concept_id, \n          'value_text':  await ConceptService.getConceptName(order.child.concept_id),\n          child:[{\n            'concept_id': order.child.concept_id,\n            'accession_number': lastAccessionNumber,\n            'value_text': await ConceptService.getConceptName(order.child.value_coded)\n          }]\n        }\n      )\n    }\n    return observations\n  } \n\n  async printOrders(orders: any, patient: Patientservice) {\n    const printService = new PrintoutService()\n    const patientNationalId = patient.getNationalID()\n    const patientName = patient.getFullName()\n    const urls: string[] = [];\n    for(const order of orders) {\n      const fullXrayOrder = order.value_text +\": \"+ order.children[0].value_text\n      urls.push(`/radiology/barcode`\n        + `?accession_number=${order.children[0].accession_number}`\n        + `&patient_national_id=${patientNationalId}`\n        + `&patient_name=${patientName}`\n        + `&radio_order=${fullXrayOrder}`\n        + `&date_created=${HisDate.toStandardHisDisplayFormat(order.obs_datetime)}`\n      )\n    }\n\n    await printService.batchPrintLbls(urls, true)\n  }\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: (facts: FactsInterface) => any;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: ConditionsInteface;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\nexport type FactsInterface = Record<string, any>\nexport type ConditionResolver = (value: any, facts: FactsInterface) => boolean | RegExpMatchArray | null\nexport type ConditionsInteface = Record<string, ConditionResolver>\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: FactsInterface, conditions: ConditionsInteface): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: FactsInterface, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","/**\n * Map all formElements/components defined in \"@/components/FormElements\" \n * in the Enum below by their file name.\n * \n * Next step is to add FieldType entry in COMPONENT_REFS in the \n * Array below the FieldType Enum\n */\nexport enum FieldType {\n    TT_ASYNC_MULTI_SELECT = 'AsyncMultiSelect',\n    TT_LINKAGE_CODE = 'LinkageCodeInput',\n    TT_MULTI_SELECT_GRID= 'HisMultiSelectGrid',\n    TT_AGE_INPUT='HisAgeInput',\n    TT_GROUP_SELECTOR = 'HisGroupSelector',\n    TT_DATA_TABLE = 'HisDataTable',\n    TT_GRID_SELECTOR = 'HisGridSelector',\n    TT_NOTE = 'HisNote',\n    TT_BARCODE = 'HisBarcodeInput',\n    TT_MONTHLY_DAYS=\"HisMonthlyDays\",\n    TT_TEXT=\"HisTextInput\",\n    TT_NUMBER = \"HisNumberInput\",\n    TT_DATETIME=\"datetime\",\n    TT_SELECT=\"HisSelect\",\n    TT_MULTIPLE_SELECT=\"HisMultipleSelect\",\n    TT_ART_REGIMEN_SELECTION=\"HisArtRegimenSelection\",\n    TT_NEXT_VISIT_INTERVAL_SELECTION=\"HisNextVisitInterval\",\n    TT_TABLE_VIEWER=\"HisTableViewer\",\n    TT_DOSAGE_INPUT=\"HisDosageInput\",\n    TT_YES_NO=\"YesNoSelect\",\n    TT_MULTIPLE_YES_NO=\"MultiYesNoSelect\",\n    TT_SUMMARY=\"HisSummary\",\n    TT_WEIGHT_CHART = \"HisWeightChart\",\n    TT_VITALS_ENTRY=\"HisVitalsEntry\",\n    TT_ADHERENCE_INPUT = \"HisAdherenceInput\",\n    TT_ART_STAGING_SUMMARY = \"ArtStagingSummary\",\n    TT_LAB_ORDERS = \"HisLabOrders\",\n    TT_APPOINTMENTS_ENTRY = \"HisAppointments\",\n    TT_DISPENSATION_INPUT = 'DrugDispensationSelection',\n    TT_PROGRAM_SELECTION = 'ProgramSelection',\n    TT_DATE_PICKER = 'HisDatePicker',\n    TT_PERSON_RESULT_VIEW = 'PersonSearchView',\n    TT_RELATION_SELECTION = 'RelationsSelection',\n    TT_FILING_NUMBER_VIEW = 'FilingNumberView',\n    TT_CARD_SELECTOR = 'HisCardSelector',\n    TT_PERSON_MATCH_VIEW = 'PersonMatchView',\n    TT_FULL_DATE = 'HisDateInput',\n    TT_BATCH_ENTRY = 'HisBatchEntry',\n    TT_BATCH_VERIFICATION = 'HisBatchVerification',\n    TT_BATCH_MOVEMENT = 'HisBatchMovement',\n    TT_COMPLAINTS_PICKER = 'HisComplaintsPicker',\n    TT_RADIOLOGY_PICKER = 'HisRadiologyPicker',\n    TT_IP_ADDRESS = 'HisIPAddress',\n    TT_TEXT_BANNER = 'HisTextBanner',\n    TT_DRUG_DISPENSER = 'GeneralDrugDispenser',\n    TT_CLINIC_HOLIDAY_PICKER = 'HisClinicHolidayPicker',\n    TT_ANC_PREGNANCY_INPUT_CONFIG = 'AncPregnancyInfoConfig',\n    TT_ANC_PREGNANCY_DETAILS_INPUT = 'AncPregnancyDetailsInput',\n    TT_ANC_LMP_DATE_INPUT = 'AncLmpDateInput',\n    TT_ANC_DRUGSET_INPUT = 'AncDrugSetInput',\n    TT_DRUG_TRANSFER_IN = 'DrugTransferInput',\n    TT_PRESCRIPTION_INPUT = 'HisPrescriptionInput',\n    TT_INFINITE_SCROLL_MULTIPLE_SELECT=\"HisInfiniteScrollMultipleSelect\"\n}\n\n// Register FieldTypes here that will be registered at runtime\nexport const COMPONENT_REFS: FieldType[] = [\n    FieldType.TT_ASYNC_MULTI_SELECT,\n    FieldType.TT_LINKAGE_CODE,\n    FieldType.TT_MULTI_SELECT_GRID,\n    FieldType.TT_AGE_INPUT,\n    FieldType.TT_BARCODE,\n    FieldType.TT_NOTE,\n    FieldType.TT_SELECT,\n    FieldType.TT_CARD_SELECTOR,\n    FieldType.TT_MULTIPLE_SELECT,\n    FieldType.TT_TEXT,\n    FieldType.TT_NUMBER,\n    FieldType.TT_MONTHLY_DAYS,\n    FieldType.TT_ART_REGIMEN_SELECTION,\n    FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n    FieldType.TT_TABLE_VIEWER,\n    FieldType.TT_DOSAGE_INPUT,\n    FieldType.TT_YES_NO,\n    FieldType.TT_MULTIPLE_YES_NO,\n    FieldType.TT_WEIGHT_CHART,\n    FieldType.TT_VITALS_ENTRY,\n    FieldType.TT_APPOINTMENTS_ENTRY,\n    FieldType.TT_COMPLAINTS_PICKER,\n    FieldType.TT_CLINIC_HOLIDAY_PICKER,\n    FieldType.TT_SUMMARY,\n    FieldType.TT_ART_STAGING_SUMMARY,\n    FieldType.TT_ADHERENCE_INPUT,\n    FieldType.TT_LAB_ORDERS,\n    FieldType.TT_PERSON_RESULT_VIEW,\n    FieldType.TT_PROGRAM_SELECTION,\n    FieldType.TT_DATE_PICKER,\n    FieldType.TT_RELATION_SELECTION,\n    FieldType.TT_FILING_NUMBER_VIEW,\n    FieldType.TT_PERSON_MATCH_VIEW,\n    FieldType.TT_FULL_DATE,\n    FieldType.TT_BATCH_ENTRY,\n    FieldType.TT_BATCH_VERIFICATION,\n    FieldType.TT_BATCH_MOVEMENT,\n    FieldType.TT_IP_ADDRESS,\n    FieldType.TT_TEXT_BANNER,\n    FieldType.TT_DISPENSATION_INPUT,\n    FieldType.TT_DATA_TABLE,\n    FieldType.TT_GROUP_SELECTOR,\n    FieldType.TT_ANC_PREGNANCY_INPUT_CONFIG,\n    FieldType.TT_ANC_PREGNANCY_DETAILS_INPUT,\n    FieldType.TT_ANC_LMP_DATE_INPUT,\n    FieldType.TT_DRUG_TRANSFER_IN,\n    FieldType.TT_GRID_SELECTOR,\n    FieldType.TT_ANC_DRUGSET_INPUT,\n    FieldType.TT_RADIOLOGY_PICKER,\n    FieldType.TT_PRESCRIPTION_INPUT,\n    FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n    FieldType.TT_DRUG_DISPENSER\n]\n","var map = {\n\t\"./AncDrugSetInput.vue\": [\n\t\t\"c99f\",\n\t\t\"TouchFormElement0\"\n\t],\n\t\"./AncLmpDateInput.vue\": [\n\t\t\"101a\",\n\t\t\"TouchFormElement1\"\n\t],\n\t\"./AncPregnancyDetailsInput.vue\": [\n\t\t\"b043\",\n\t\t\"TouchFormElement2\"\n\t],\n\t\"./AncPregnancyInfoConfig.vue\": [\n\t\t\"262e\",\n\t\t\"TouchFormElement3\"\n\t],\n\t\"./ArtStagingSummary.vue\": [\n\t\t\"43db\",\n\t\t\"TouchFormElement4\"\n\t],\n\t\"./AsyncMultiSelect.vue\": [\n\t\t\"5de2\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement5\"\n\t],\n\t\"./BaseTextInput.vue\": [\n\t\t\"36ad\",\n\t\t\"TouchFormElement6\"\n\t],\n\t\"./DrugDispensationSelection.vue\": [\n\t\t\"05d5\",\n\t\t\"TouchFormElement7\"\n\t],\n\t\"./DrugTransferInput.vue\": [\n\t\t\"de42\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement8\"\n\t],\n\t\"./FieldMixin.vue\": [\n\t\t\"51c8\",\n\t\t\"TouchFormElement9\"\n\t],\n\t\"./FilingNumberView.vue\": [\n\t\t\"c650\",\n\t\t\"TouchFormElement10\"\n\t],\n\t\"./GeneralDrugDispenser.vue\": [\n\t\t\"7737\",\n\t\t\"TouchFormElement11\"\n\t],\n\t\"./HisAdherenceInput.vue\": [\n\t\t\"f2c3\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement12\"\n\t],\n\t\"./HisAgeInput.vue\": [\n\t\t\"c05f\",\n\t\t\"TouchFormElement13\"\n\t],\n\t\"./HisAppointments.vue\": [\n\t\t\"b2eb\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement14\"\n\t],\n\t\"./HisArtRegimenSelection.vue\": [\n\t\t\"47b9\",\n\t\t\"TouchFormElement15\"\n\t],\n\t\"./HisBarcodeInput.vue\": [\n\t\t\"dd65\",\n\t\t\"TouchFormElement16\"\n\t],\n\t\"./HisBatchEntry.vue\": [\n\t\t\"f2ab\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement17\"\n\t],\n\t\"./HisBatchMovement.vue\": [\n\t\t\"5148\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement18\"\n\t],\n\t\"./HisBatchVerification.vue\": [\n\t\t\"7b0f\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement19\"\n\t],\n\t\"./HisCardSelector.vue\": [\n\t\t\"0734\",\n\t\t\"TouchFormElement20\"\n\t],\n\t\"./HisClinicHolidayPicker.vue\": [\n\t\t\"4030\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement21\"\n\t],\n\t\"./HisComplaintsPicker.vue\": [\n\t\t\"82d1\",\n\t\t\"TouchFormElement22\"\n\t],\n\t\"./HisDataTable.vue\": [\n\t\t\"a6ba\",\n\t\t\"TouchFormElement23\"\n\t],\n\t\"./HisDateInput.vue\": [\n\t\t\"374c\",\n\t\t\"TouchFormElement24\"\n\t],\n\t\"./HisDatePicker.vue\": [\n\t\t\"9b30\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement25\"\n\t],\n\t\"./HisDosageInput.vue\": [\n\t\t\"b34c\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement26\"\n\t],\n\t\"./HisGridSelector.vue\": [\n\t\t\"112a\",\n\t\t\"TouchFormElement27\"\n\t],\n\t\"./HisGroupSelector.vue\": [\n\t\t\"81cf\",\n\t\t\"TouchFormElement28\"\n\t],\n\t\"./HisIPAddress.vue\": [\n\t\t\"2a82\",\n\t\t\"TouchFormElement29\"\n\t],\n\t\"./HisInfiniteScrollMultipleSelect.vue\": [\n\t\t\"52a3\",\n\t\t\"TouchFormElement30\"\n\t],\n\t\"./HisLabOrders.vue\": [\n\t\t\"e614\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement31\"\n\t],\n\t\"./HisMonthlyDays.vue\": [\n\t\t\"69cf\",\n\t\t\"TouchFormElement32\"\n\t],\n\t\"./HisMultiSelectGrid.vue\": [\n\t\t\"0fa3\",\n\t\t\"TouchFormElement33\"\n\t],\n\t\"./HisMultipleSelect.vue\": [\n\t\t\"2fd5\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement34\"\n\t],\n\t\"./HisNextVisitInterval.vue\": [\n\t\t\"3126\",\n\t\t\"TouchFormElement35\"\n\t],\n\t\"./HisNote.vue\": [\n\t\t\"c927\",\n\t\t\"TouchFormElement36\"\n\t],\n\t\"./HisNumberInput.vue\": [\n\t\t\"5e75\",\n\t\t\"TouchFormElement37\"\n\t],\n\t\"./HisPrescriptionInput.vue\": [\n\t\t\"87e5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement38\"\n\t],\n\t\"./HisRadiologyPicker.vue\": [\n\t\t\"adc7\",\n\t\t\"TouchFormElement39\"\n\t],\n\t\"./HisSelect.vue\": [\n\t\t\"d11f\",\n\t\t\"TouchFormElement40\"\n\t],\n\t\"./HisSummary.vue\": [\n\t\t\"e0bd\",\n\t\t\"TouchFormElement41\"\n\t],\n\t\"./HisTableViewer.vue\": [\n\t\t\"8904\",\n\t\t\"TouchFormElement42\"\n\t],\n\t\"./HisTextBanner.vue\": [\n\t\t\"952c\",\n\t\t\"TouchFormElement43\"\n\t],\n\t\"./HisTextInput.vue\": [\n\t\t\"6ef9\",\n\t\t\"TouchFormElement44\"\n\t],\n\t\"./HisVitalsEntry.vue\": [\n\t\t\"e333\",\n\t\t\"TouchFormElement45\"\n\t],\n\t\"./HisWeightChart.vue\": [\n\t\t\"26a1\",\n\t\t\"TouchFormElement46\"\n\t],\n\t\"./LinkageCodeInput.vue\": [\n\t\t\"ac86\",\n\t\t\"TouchFormElement47\"\n\t],\n\t\"./MultiYesNoSelect.vue\": [\n\t\t\"5fd1\",\n\t\t\"TouchFormElement48\"\n\t],\n\t\"./PersonMatchView.vue\": [\n\t\t\"6591\",\n\t\t\"TouchFormElement49\"\n\t],\n\t\"./PersonSearchView.vue\": [\n\t\t\"28b2\",\n\t\t\"TouchFormElement50\"\n\t],\n\t\"./ProgramSelection.vue\": [\n\t\t\"e3b4\",\n\t\t\"TouchFormElement51\"\n\t],\n\t\"./RelationsSelection.vue\": [\n\t\t\"0e57\",\n\t\t\"TouchFormElement52\"\n\t],\n\t\"./SelectMixin.vue\": [\n\t\t\"82a9\",\n\t\t\"TouchFormElement53\"\n\t],\n\t\"./YesNoSelect.vue\": [\n\t\t\"71f2\",\n\t\t\"TouchFormElement54\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"f159\";\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}