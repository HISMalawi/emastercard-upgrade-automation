{"version":3,"sources":["webpack:///./src/services/person_attributes_service.ts","webpack:///./src/services/patient_registration_service.ts","webpack:///./src/apps/ART/views/encounters/Registration.vue?e486","webpack:///./src/apps/ART/views/encounters/Registration.vue","webpack:///./src/apps/ART/views/encounters/Registration.vue?284e","webpack:///./src/apps/ART/services/registration_service.ts","webpack:///./src/apps/ART/services/vitals_service.ts"],"names":["PersonAttributeService","Service","constructor","super","attributes","postJson","PatientRegistrationService","_defineProperty","this","personId","getPersonID","setPersonID","personID","person","personAttributes","createPerson","createPersonAttributes","patient","createPatient","printPatient","updatePerson","PersonService","update","data","create","person_id","ProgramService","index","PatientPrintoutService","printNidLbl","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","defineComponent","mixins","StagingMixin","registration","prescription","dispensation","regimens","customRegimens","vitals","watch","ready","canShowStagingFields","ClinicRegistrationService","patientID","providerID","VitalsService","showStagingWeightChart","getRegistrationFields","immediate","methods","formData","computedData","_formData$cell_phone_","fObs","createEncounter","hasStaging","submitStaging","saveObservationList","resolveObs","cell_phone_number","value","Person","resolvePerson","Store","invalidate","toastSuccess","nextTask","buildDateObs","conceptName","date","isEstimate","obs","match","buildValueText","buildValueDateEstimated","buildValueDate","id","helpText","type","FieldType","TT_MULTIPLE_YES_NO","summaryMapValue","label","validation","v","validateSeries","Validation","required","anyEmpty","computedValue","d","forEach","push","buildValueCoded","tag","options","f","isEmpty","followup_agreement","other","values","yesNoOptions","getCellNumberField","config","customKeyboard","condition","phone","getPhoneNumber","some","l","test","TT_YES_NO","TT_LINKAGE_CODE","_v$other","isValidLinkageCode","has_linkage_code","TT_SELECT","generateDateFields","minDate","getBirthdate","maxDate","staging","getDate","received_arvs","estimation","allowUnknown","computeValue","yesNoUnknownOptions","year_date_last_taken_arvs","duration","taken_art_in_last_two_months","HisDate","getDateBeforeByDays","val","ever_registered_at_art_clinic","_","filter","getFacilities","showKeyboard","isFilterDataViaApi","init","async","initStaging","beforeNext","age","dayjs","diff","setAge","stagingFacts","ageInMonths","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","setDate","TT_TEXT","TT_NUMBER","has_transfer_letter","buildValueNumber","isNumber","rangeOf","unload","s","weight","height","bmi","BMIService","getBMI","getGender","getAge","isPedaid","medianWh","getMedianWeightHeight","weightPercentile","parseFloat","e","fullValue","modifier","isNotEmptyandFloat","getStagingFields","new_cd4_percent_available","parseInt","toString","substring","onValue","cd4CountIsValid","toastWarning","CD4_COUNT_PAD_LO","infoActionSheet","name","color","slot","disabled","defaultValue","getLocationName","type_of_confirmatory_hiv_test","timeElapsed","action","confirmatory_hiv_test_location","getStagingSummaryField","__exports__","AppEncounterService","isNotEmptyandNumber","vital","_vital$other","checkMinMax","min","max","p","_val$other","_val$other2","length","validateAll","map","j","validator","isArray","mergeErrors","errors","holder","element","isValidBPReading","isValidBP","split","bpSystolic","bpDiastolic","emptyErrors","minErrors"],"mappings":"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","file":"js/chunk-4b1ac3a0.cd501af8.js","sourcesContent":["import { Service } from \"./service\"\n\nexport interface NewAttribute {\n    person_id: number;\n    person_attribute_type_id: number;\n    value: number | string;\n}\n\nexport class PersonAttributeService extends Service { \n    constructor() {\n        super()\n    }\n\n    static create(attributes: Array<NewAttribute>) { \n        return super.postJson('/person_attributes', attributes) \n    }\n}\n","import { Service } from \"./service\"\nimport { ProgramService } from \"@/services/program_service\";\nimport { Person } from \"@/interfaces/person\"\nimport { PersonService } from \"@/services/person_service\"\nimport { PersonAttributeService } from '@/services/person_attributes_service'\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\n\nexport class PatientRegistrationService extends Service {\n    personId: number\n    constructor() {\n        super()\n        this.personId = 0\n    }\n\n    getPersonID() {\n        return this.personId\n    }\n\n    setPersonID(personID: number) {\n        this.personId = personID\n    }\n\n    async registerPatient(person: any, personAttributes: any) {\n        await this.createPerson(person)\n        await this.createPersonAttributes(personAttributes)\n        const patient = await this.createPatient()\n        await this.printPatient()\n        return patient\n    }\n\n    async registerGuardian(person: any) {\n        return this.createPerson(person)\n    }\n\n    updatePerson(person: any) {\n       return new PersonService(person).update(this.personId)\n    }\n\n    async createPerson(person: any) {\n        const data: Person = await new PersonService(person).create()\n        this.personId = data.person_id\n        return data\n    }\n\n    createPatient() {\n        return ProgramService.createPatient(this.personId)\n    }\n\n    async createPersonAttributes(attributes: Array<any>) {\n        for(const index in attributes) {\n            await PersonAttributeService.create({\n                ...attributes[index],\n                'person_id': this.personId\n            })\n        }\n    }\n\n    printPatient() {\n        return new PatientPrintoutService(this.personId).printNidLbl()\n    }\n}\n","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport StagingMixin from \"@/apps/ART/views/encounters/StagingMixin.vue\"\nimport {ClinicRegistrationService} from \"@/apps/ART/services/registration_service\"\nimport { CD4_COUNT_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { toastWarning, toastSuccess} from \"@/utils/Alerts\"\nimport { VitalsService } from \"@/apps/ART/services/vitals_service\";\nimport { BMIService } from \"@/services/bmi_service\"\nimport { generateDateFields, EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { infoActionSheet } from \"@/utils/ActionSheets\"\nimport HisDate from \"@/utils/Date\"\nimport dayjs from \"dayjs\";\nimport { isEmpty } from 'lodash'\nimport Person from \"@/utils/HisFormHelpers/PersonFieldHelper\"\nimport { PatientRegistrationService } from '@/services/patient_registration_service'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    mixins: [StagingMixin],\n    data: () => ({\n        registration: {} as any,\n        prescription: {} as any,\n        dispensation: {} as any,\n        regimens: [] as Option[],\n        customRegimens: [] as Option[],\n        vitals: {} as any,\n    }),\n    watch: {\n        ready: {\n            async handler(ready: any) {\n                if (!ready) return\n                // Hide staging fields defined in StagingMixin by Default\n                this.canShowStagingFields = false\n                this.registration = new ClinicRegistrationService(this.patientID, this.providerID)\n                this.vitals = new VitalsService(this.patientID, this.providerID)\n                this.showStagingWeightChart = false\n                this.fields = this.getRegistrationFields()\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async onSubmit(formData: any, computedData: any) {\n            const fObs = {...computedData}\n\n            await this.registration.createEncounter()\n\n            if (this.hasStaging(formData)) {\n                await this.submitStaging(computedData)\n                await this.vitals.createEncounter()\n                await this.vitals.saveObservationList(\n                    (await this.resolveObs(fObs, 'vitals'))\n                )\n            }\n\n            await this.registration.saveObservationList(\n                (await this.resolveObs(fObs, 'reg'))\n            )\n\n            if (formData?.cell_phone_number?.value) {\n                const person = new PatientRegistrationService()\n                person.setPersonID(this.patientID) \n                await person.updatePerson(\n                    Person.resolvePerson(computedData)\n                )\n                Store.invalidate('ACTIVE_PATIENT')\n            }\n\n            toastSuccess('Clinic registration complete!')\n\n            this.nextTask()\n        },\n        buildDateObs(conceptName: string, date: string, isEstimate: boolean) {\n            let obs = {}\n            if (date.match(/unknown/i)) {\n                obs = this.registration.buildValueText(conceptName, 'Unknown')\n            } else if (isEstimate) {\n                obs = this.registration.buildValueDateEstimated(conceptName, date)\n            } else {\n                obs = this.registration.buildValueDate(conceptName, date)\n            }\n            return obs\n        },\n        getRegistrationFields() {\n            return [\n                {\n                    id: 'followup_agreement',\n                    helpText: 'Agrees to follow-up',\n                    type: FieldType.TT_MULTIPLE_YES_NO,\n                    summaryMapValue: ({value, label}: Option) => ({\n                        value,\n                        label: `${label} followup`\n                    }),\n                    validation: (v: any) => this.validateSeries([\n                       () => Validation.required(v), \n                       () => Validation.anyEmpty(v)\n                    ]),\n                    computedValue: (d: Array<Option>) => {\n                        const obs: any = []\n                        d.forEach(({ label, value }: Option) => {\n                            obs.push(this.registration.buildValueCoded(label, value))\n                            obs.push(this.registration.buildValueCoded('Agrees to followup', label))\n                        })\n                        return { tag:'reg', obs }\n                    },\n                    options: (f: any) => {\n                        if (!isEmpty(f.followup_agreement)) {\n                            return f.followup_agreement\n                        } else {\n                            return [\n                                {\n                                    label: 'Phone',\n                                    value: '',\n                                    other: {\n                                        values: this.yesNoOptions(),\n                                    }\n                                },\n                                {\n                                    label: 'Home visit',\n                                    value: '',\n                                    other: {\n                                        values: this.yesNoOptions()\n                                    }\n                                }\n                            ] \n                        }\n                    }\n                },\n                (() => {\n                    return {\n                        ...Person.getCellNumberField(),\n                        config: {\n                            customKeyboard: [\n                                [\n                                    ['1', '2', '3'],\n                                    ['4', '5', '6'],\n                                    ['7', '8', '9'],\n                                    ['',  '0', '']\n                                ],\n                                [ \n                                    [ '+265', '/'],\n                                    [ 'Delete' ]\n                                ]\n                            ]\n                        },\n                        condition: (f: any) => {\n                            const phone = this.patient.getPhoneNumber()\n                            return f.followup_agreement.some((l: any) =>\n                                l.label === 'Phone' && \n                                l.value === 'Yes' && \n                                (!phone || /unknown|n\\/a/i.test(phone))\n                            )\n                        }\n                    }\n                })(),\n                {\n                    id: \"has_linkage_code\",\n                    helpText: 'HTS Linkage number confirmation',\n                    type: FieldType.TT_YES_NO,\n                    summaryMapValue: (v: any) => {\n                        return {\n                            label: \"Has HTS Linkage number?\",\n                            value: v\n                        }\n                    },\n                    validation: (v: string) => Validation.required({label: v, value: v}),\n                    options: () => [\n                        {\n                            label: \"Does client have an HTS Linkage number?\",\n                            value: \"\",\n                            values: this.yesNoOptions(),\n                        }\n                    ]\n                },\n                {\n                    id: 'hts_serial_number',\n                    helpText: 'HTS Linkage Number',\n                    type: FieldType.TT_LINKAGE_CODE,\n                    validation: (v: Option) => Validation.validateSeries([\n                        () => Validation.required(v),\n                        () => {\n                            if (!v?.other?.isValidLinkageCode) {\n                                return ['Invalid Scanform linkage code']\n                            }\n                            return null\n                        }\n                    ]),\n                    condition: (f: any) => f.has_linkage_code === 'Yes',\n                    computedValue: (v: Option) => {\n                        return {\n                            tag: 'reg',\n                            obs: this.registration.buildValueText('HTC Serial number', v.value)\n                        }\n                    }\n                },\n                {\n                    id: 'received_arvs',\n                    helpText: 'Ever received ARVs for treatment or prophylaxis?',\n                    type: FieldType.TT_SELECT,\n                    computedValue: ({value}: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueCoded(\n                            'Ever received ART', value\n                        )\n                    }),\n                    validation: (v: any) => Validation.required(v),\n                    options: () => this.yesNoOptions()\n                },\n                ...generateDateFields({\n                    id: 'date_last_taken_arvs',\n                    helpText: 'Last taken ARVS',\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    condition: (f: any) => f.received_arvs.value === 'Yes',\n                    estimation: {\n                        allowUnknown: true\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        return {\n                            date,\n                            tag:'reg',\n                            isEstimate,\n                            obs: this.buildDateObs('Date ART last taken', date, isEstimate) \n                        }\n                    }\n                }),\n                {\n                    id: 'taken_art_in_last_two_months',\n                    helpText: 'Taken ARVs in the last two months?',\n                    type: FieldType.TT_SELECT,\n                    validation: (v: any) => Validation.required(v),\n                    computedValue: ({value}: Option) => {\n                        return {\n                            tag:'reg',\n                            obs: [\n                                this.registration.buildValueCoded(\n                                    'Has the patient taken ART in the last two months', value\n                                )\n                            ]\n                        }\n                    },\n                    options: () => this.yesNoUnknownOptions(),\n                    condition: (f: any) => f.year_date_last_taken_arvs.value === 'Unknown'\n                },\n                {\n                    id: 'taken_art_in_last_two_weeks',\n                    helpText: \"Taken ARV's in the last two weeks?\",\n                    type: FieldType.TT_SELECT,\n                    computedValue: ({ value }: Option, f: any) => {\n                        let date = ''\n                        const obs = []\n                        let duration = -1\n\n                        if (value === 'Yes') {\n                            duration = 14\n                        } else if (f.taken_art_in_last_two_months.value === 'Yes') {\n                            duration = 60\n                        }\n\n                        if (duration > 0) {\n                            date = HisDate.getDateBeforeByDays(this.registration.getDate(), duration)\n                            obs.push(this.registration.buildValueDateEstimated('Date ART last taken', date))\n                        }\n                        return {\n                            date,\n                            tag:'reg',\n                            obs: [\n                                ...obs,\n                                this.registration.buildValueCoded(\n                                    'Has the patient taken ART in the last two weeks', value\n                                )\n                            ]\n                        }\n                    },\n                    validation: (v: any) => Validation.required(v),\n                    condition: (f: any) => f.taken_art_in_last_two_months.value === 'Yes',\n                    options: () => this.yesNoUnknownOptions()\n                },\n                {\n                    id: 'ever_registered_at_art_clinic',\n                    helpText: 'Ever registered at an ART clinic?',\n                    type: FieldType.TT_SELECT,\n                    computedValue: ({ value }: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueCoded(\n                            'Ever registered at ART clinic', value\n                        )\n                    }),\n                    validation: (v: any) => Validation.required(v),\n                    condition: (f: any) => f.received_arvs.value === 'Yes',\n                    options: () => this.yesNoOptions()\n                },\n                {\n                    id: 'location_of_art_initialization',\n                    helpText: 'Location of ART initiation',\n                    type: FieldType.TT_SELECT,\n                    computedValue: ({label}: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueText(\n                            'Location of ART initiation', label\n                        )\n                    }),\n                    validation: (val: any) => Validation.required(val),\n                    condition: (f: any) => f.ever_registered_at_art_clinic.value === 'Yes',\n                    options: (_: any, filter='') => this.getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                },\n                ...generateDateFields({\n                    id: 'date_started_art',\n                    helpText: 'Started ART',\n                    required: true,\n                    init: async () => {\n                        await this.initStaging(this.patient)\n                        return true\n                    },\n                    beforeNext: (date: string) => {\n                        const age = dayjs(date).diff(this.patient.getBirthdate(), 'years')\n                        this.staging.setAge(age)\n                        this.stagingFacts.age = age\n                        this.stagingFacts.ageInMonths = age * 12\n                        return true\n                    },\n                    condition: (f: any) => f.ever_registered_at_art_clinic.value === 'Yes',\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    estimation: {\n                        allowUnknown: true,\n                        estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        this.staging.setDate(date)\n                        this.vitals.setDate(date)\n                        return {\n                            date,\n                            tag:'reg',\n                            isEstimate,\n                            obs: this.buildDateObs('Date ART started', date, isEstimate) \n                        }\n                    },\n                }),\n                {\n                    id: 'previous_art_number',\n                    helpText: 'ART number at previous location',\n                    type: FieldType.TT_TEXT,\n                    condition: (f: any) => f.ever_registered_at_art_clinic.value === 'Yes',\n                    computedValue: (d: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueText(\n                            'ART number at previous location', d.value\n                        )\n                    }),\n                    validation: (val: Option) => Validation.required(val)\n                },\n                {\n                    id: 'has_transfer_letter',\n                    helpText: 'Has staging information?',\n                    type: FieldType.TT_SELECT,\n                    validation: (v: any) => Validation.required(v),\n                    computedValue: ({ value }: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueCoded(\n                            'Has transfer letter', value\n                        )\n                    }),\n                    options: () => this.yesNoOptions(),\n                    condition: (f: any) => f.ever_registered_at_art_clinic.value === 'Yes',\n                },\n                {\n                    id: 'height',\n                    helpText: 'Height (CM)',\n                    type: FieldType.TT_NUMBER,\n                    condition: (f: any) => f.has_transfer_letter.value === 'Yes',\n                    computedValue: ({ value }: Option) => ({\n                        tag:'vitals',\n                        obs: this.vitals.buildValueNumber('Height', value)\n                    }),\n                    validation: (val: any) => this.validateSeries([\n                        () => Validation.required(val),\n                        () => Validation.isNumber(val),\n                        () => Validation.rangeOf(val, 40, 222)\n                    ])\n                },\n                {\n                    id: 'weight',\n                    helpText: 'Weight (Kg)',\n                    type: FieldType.TT_TEXT,\n                    unload: async (d: any, s: string, f: any) => {\n                        const weight = f.weight.value\n                        const height = f.height.value\n                        const bmi = await BMIService.getBMI(\n                            weight, height, \n                            this.patient.getGender(),\n                            this.patient.getAge()\n                        )\n\n                        this.stagingFacts.bmi = bmi['index']\n\n                        if (!this.staging.isPedaid()) return\n\n                        const medianWh = await this.patient.getMedianWeightHeight()\n\n                        try {\n                            //TODO: this calculation is already defined in patient_service.. must refactor it to make it reusable here\n                            this.stagingFacts.weightPercentile = parseFloat(weight) / (parseFloat(medianWh[\"weight\"])) * 100\n                        } catch (e) {\n                            this.stagingFacts.weightPercentile = 0\n                        }\n                    },\n                    computedValue: ({ value }: Option) => ({\n                        tag:'vitals',\n                        obs: this.vitals.buildValueNumber('weight', value)\n                    }),\n                    condition: (f: any) => f.has_transfer_letter.value === 'Yes',\n                    validation: (val: any) => this.validateSeries([\n                        () => {\n                            const fullValue = {\n                                ...val, other: { modifier: '.' }\n                            }\n                            return this.vitals.isNotEmptyandFloat(fullValue)\n                        },\n                        () => Validation.rangeOf(val, 1, 300)\n                    ]),\n                    config: {\n                        customKeyboard: [\n                            [\n                                ['1', '2', '3', ''],\n                                ['4', '5', '6', ''],\n                                ['7', '8', '9', '.'],\n                                ['',  '0', '' , '']\n                            ],\n                            [\n                                ['Delete']\n                            ]\n                        ]\n                    }\n                },\n                /*** \n                    Start Staging Fields\n                ***/\n                ...this.getStagingFields(),\n                /** \n                    End Staging Fields\n                ***/\n                {\n                    id: 'new_cd4_percent_available',\n                    helpText: 'CD4 percent available',\n                    type: FieldType.TT_SELECT,\n                    options: () => this.yesNoOptions(),\n                    condition: (f: any) => f.has_transfer_letter.value === 'Yes',\n                    validation: (val: any) => Validation.required(val)\n                },\n                {\n                    id: 'cd4_percent',\n                    helpText: 'CD4 Percent',\n                    type: FieldType.TT_TEXT,\n                    condition: (f: any) => f.new_cd4_percent_available.value === 'Yes',\n                    computedValue: ({ value }: Option) => ({\n                        tag:'staging',\n                        obs: this.registration.buildValueNumber(\n                            'CD4 percent', parseInt(value.toString().substring(1)), '%'\n                        )\n                    }),\n                    onValue: (d: Option) => {\n                        if (d.value && !this.staging.cd4CountIsValid(d.value)) {\n                            toastWarning('Cd4 percentage invalid. Use one modifier or start with either of these symbols: >, < or =')\n                            return false\n                        }\n                        return true\n                    },\n                    validation: (val: any) => Validation.required(val),\n                    config: {\n                        customKeyboard: [\n                            CD4_COUNT_PAD_LO,\n                            [\n                                ['Delete']\n                            ]\n                        ]\n                    }\n                },\n                {\n                    id: 'type_of_confirmatory_hiv_test',\n                    helpText: 'Confirmatory HIV test',\n                    type: FieldType.TT_SELECT,\n                    validation: (val: any) => Validation.required(val),\n                    onValue: async (val: Option) => {\n                        if (val.value === 'Not done') {\n                            await infoActionSheet(\n                                'Reminder',\n                                'UNKNOWN HIV CONFIRMATORY TEST',\n                                'Please arrange for a confirmatory test',\n                                [\n                                    { name: 'Agreed', color: 'success', slot: 'start'}\n                                ]\n                            )\n                        }\n                        return true\n                    },\n                    computedValue: ({ value }: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueCoded(\n                            'Confirmatory hiv test type', value\n                        )\n                    }),\n                    options: (f: any) => ([\n                        { label: 'Rapid antibody test', value: 'HIV rapid test'},\n                        { label: 'DNA PCR', value: 'HIV DNA polymerase chain reaction'},\n                        { label: 'Not done', value: 'Not done', disabled: f.has_linkage_code === 'Yes' }\n                    ])\n                },\n                {\n                    id: 'confirmatory_hiv_test_location',\n                    helpText: 'Location of confirmatory HIV test',\n                    type: FieldType.TT_SELECT,\n                    defaultValue: (d: any) => (d.ever_registered_at_art_clinic && d.ever_registered_at_art_clinic.value) === \"Yes\"? '' : ClinicRegistrationService.getLocationName(),\n                    computedValue: (d: Option) => ({\n                        tag:'reg',\n                        obs: this.registration.buildValueText(\n                            'Confirmatory HIV test location', d.label\n                        ) \n                    }),\n                    validation: (val: any) => Validation.required(val),\n                    condition: (f: any) => f.type_of_confirmatory_hiv_test.value != 'Not done',\n                    options: (_: any, filter='') => this.getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                },\n                ...generateDateFields({\n                    id: 'date_of_confirmatory_hiv_test',\n                    helpText: 'Confirmatory HIV test',\n                    beforeNext: async (date: string, formData: any) => {\n                        if (formData.received_arvs.value != 'Yes') {\n                            const timeElapsed = dayjs(this.staging.getDate()).diff(date, 'days')\n                            if (timeElapsed >= 20) {\n                                const action = await infoActionSheet(\n                                    'Data inconsistency warning',\n                                    `Confirmatory Date for newly initiated ART patient is ${timeElapsed} days ago`,\n                                    'Are you sure this is accurate?',\n                                    [\n                                        { name: 'No, Re-enter date', slot: 'start', color: 'success'},\n                                        { name: 'Yes, its accurate', slot: 'end', color: 'danger'}\n                                    ]\n                                )\n                                return action === 'Yes, its accurate'\n                            }\n                        }\n                        return true\n                    },\n                    condition: (f: any) => f.confirmatory_hiv_test_location.value,\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    estimation: {\n                        allowUnknown: true,\n                        estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        return {\n                            date,\n                            tag:'reg',\n                            isEstimate,\n                            obs: this.buildDateObs('Confirmatory HIV test date', date, isEstimate) \n                        }\n                    },\n                }),\n                this.getStagingSummaryField('Staging summary')\n            ]\n        }\n    }\n})\n","import { render } from \"./Registration.vue?vue&type=template&id=23b91aba&ts=true\"\nimport script from \"./Registration.vue?vue&type=script&lang=ts\"\nexport * from \"./Registration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/projects/malawi-emr/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class ClinicRegistrationService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 9, providerID) //TODO: Use encounter type reference name'\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { isArray } from \"lodash\";\nimport { Option } from '@/components/Forms/FieldInterface';\nexport class VitalsService extends AppEncounterService{\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 6, providerID);\n  }\n  isNotEmptyandNumber(vital: Option) {\n    return `${vital.value}`.match(/^-?\\d+\\.?\\d*$/) ? null : [`Invalid entry for ${vital.label}`]\n  }\n  isNotEmptyandFloat(vital: Option) {\n    return `${vital.value}`.match(/^\\d{1,3}\\.\\d{1,5}$/) \n      ? null \n      : [`Invalid entry for ${vital.label}. Don't forget to add a decimal. e.g. 56.2 ${vital.other?.modifier || ''}`]\n  }\n  checkMinMax(val: Option, min: number, max: number) {\n    const p = [];\n    if (parseFloat(`${val.value}`) < min) {\n      p.push([`${val.label} entered is less than minimum ${min} ${val?.other?.modifier || ''}`])\n    }\n    if (parseFloat(`${val.value}`) > max) {\n      p.push([`${val.label} entered is greater than maximum ${max} ${val?.other?.modifier || ''}`])\n    }\n    return p.length > 0 ? p : null;\n  }\n  validateAll(vitals: Option[]) {\n    const p: any = [];\n    vitals.map((vital: any) => {\n      const j = this.validator(vital);\n      return isArray(j) ? p.push(j) : null\n    })\n    return p.length > 0 ? p : null;\n  }\n\n  mergeErrors(errors: any[]) {\n    const holder: any = [];\n    errors.forEach(element => {\n      if (isArray(element)) {\n        holder.push(element)\n      }\n    });\n    return holder.length > 0 ? holder : null\n  }\n  isValidBPReading(vital: any) {\n    const p = [];\n    const isValidBP =  `${vital.value}`.match(/^\\d{1,3}\\/\\d{1,3}$/g) ? null : ['Invalid BP reading']\n    p.push(isValidBP);\n    if(isValidBP == null) {\n      const value = `${vital.value}`.split('/');\n      \n      const bpSystolic = {\n        label: 'Systolic',\n        value: value[0]\n      };\n      const bpDiastolic = {\n        label: 'Diastolic',\n        value: value[1]\n      };\n      p.push(this.checkMinMax(bpDiastolic, 30, 200))\n      p.push(this.checkMinMax(bpSystolic, 40, 250))\n    }\n    return this.mergeErrors(p)\n  }\n  validator(vital: Option) {\n    const values = [\n      {\n        name: \"Weight\",\n        validator: (val: Option) => {\n          const emptyErrors = this.isNotEmptyandFloat(val);\n          const minErrors = this.checkMinMax(val, 2.0, 250.0);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      },\n      {\n        name: \"Height\",\n        validator: (val: Option) => {\n          const errors = []\n          errors.push(this.isNotEmptyandNumber(val))\n          errors.push(this.checkMinMax(val, 40, 220))\n          return this.mergeErrors(errors); \n        },\n      }, {\n        name: \"BP\",\n        validator: (val: any) => {\n          return this.isValidBPReading(val)\n        },\n      }, {\n        name: \"Temp\",\n        validator: (val: any) => {\n          const emptyErrors = this.isNotEmptyandNumber(val);\n          const minErrors = this.checkMinMax(val, 30, 42);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      }, {\n        name: \"SP02\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 40, 100);\n          return this.mergeErrors([minErrors]); \n        },\n      }, {\n        name: \"Pulse\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 50, 120);\n          return this.mergeErrors([minErrors]); \n        },\n      }\n    ]\n    const v = values.filter(element => {\n      return element.name === vital.label;\n    });\n    if (v.length > 0) {\n      return v[0].validator(vital);\n    }\n    return null\n  }\n}"],"sourceRoot":""}