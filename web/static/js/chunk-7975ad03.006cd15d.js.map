{"version":3,"sources":["webpack:///./src/apps/SPINE/services/patient_diagnosis_service.ts","webpack:///./src/apps/SPINE/services/clinical_notes_service.ts","webpack:///./src/apps/SPINE/views/encounters/Diagnosis.vue","webpack:///./src/apps/SPINE/views/encounters/Diagnosis.vue?2294","webpack:///./src/utils/HisFormHelpers/commons.ts"],"names":["PatientDiagnosisService","AppEncounterService","constructor","patientID","providerID","super","filter","page","limit","conceptSetId","ConceptService","getConceptID","getJson","id","name","ClinicalNotesService","_defineComponent","__name","setup","__props","notesService","diagnosisService","malariaTestResult","ref","fields","goToNextTask","patientDashboardUrl","useEncounter","providerId","patientId","OrderService","getLatestMalariaTestResult","then","result","value","getDiagnosisField","getClinicNotesField","async","onSubmit","_","computedData","createEncounter","diagnosisData","resolveObs","Service","getSessionDate","saveObservationList","notesData","isEmpty","checkMalariaResult","data","isMalariaSelected","some","label","test","alertConfirmation","type","toLowerCase","helpText","FieldType","TT_INFINITE_SCROLL_MULTIPLE_SELECT","validation","Validation","required","options","diagnosis","getDiagnosis","mapObjToOptions","beforeNext","computedValue","tag","obs","map","buildValueCoded","config","isFilterDataViaApi","showKeyboard","TT_TEXT","v","buildValueText","_ctx","_cache","_openBlock","_createBlock","_unref","IonPage","default","_withCtx","_createVNode","HisStandardForm","cancelDestinationPath","onFinishAction","__exports__","values","Object","d","reduce","accum","cur","Array","isArray","concat","push","Promise","all","mapStrToOptions","option","other","mapToYesNoOptions","checkedOptions","hasUnknown","_checkedValue$value","checkedValue","find","yesNoUnknownOptions","yesNoOptions"],"mappings":"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","file":"js/chunk-7975ad03.006cd15d.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { ConceptService } from '@/services/concept_service';\n\nexport class PatientDiagnosisService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 41, providerID) \n    }\n\n    static async getDiagnosis(filter='', page=1, limit=10) {\n        const conceptSetId = ConceptService.getConceptID('Qech outpatient diagnosis list')\n        return AppEncounterService.getJson('diagnosis', {\n            id: conceptSetId,\n            name: filter,\n            page: page,\n            'page_size': limit\n        })\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class ClinicalNotesService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 105, providerID) \n    }\n}\n","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { PatientDiagnosisService } from \"@/apps/SPINE/services/patient_diagnosis_service\"\nimport { ClinicalNotesService } from \"@/apps/SPINE/services/clinical_notes_service\";\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { isEmpty } from 'lodash';\nimport { OrderService } from '@/services/order_service';\nimport { alertConfirmation } from '@/utils/Alerts';\nimport { Service } from \"@/services/service\";\nimport { ref } from 'vue';\nimport useEncounter from '@/composables/useEncounter';\nimport { mapObjToOptions, resolveObs } from '@/utils/HisFormHelpers/commons';\nimport { IonPage } from \"@ionic/vue\";\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'Diagnosis',\n  setup(__props) {\n\nlet notesService: ClinicalNotesService;\nlet diagnosisService: PatientDiagnosisService;\nconst malariaTestResult = ref(\"No\");\nconst fields = ref<Array<Field>>([]);\n\nconst { goToNextTask, patientDashboardUrl } = useEncounter((providerId, patientId) => {\n  OrderService.getLatestMalariaTestResult(patientId).then(result => malariaTestResult.value = result);\n  notesService = new ClinicalNotesService(patientId, providerId)\n  diagnosisService = new PatientDiagnosisService(patientId, providerId)\n  fields.value = [\n    getDiagnosisField(\"Primary\"),\n    getDiagnosisField(\"Secondary\"),\n    getClinicNotesField(),\n  ];\n});\n\nasync function onSubmit(_: any, computedData: any) {\n  await diagnosisService.createEncounter()\n  const diagnosisData = await resolveObs({ ...computedData, 'obs_datetime': Service.getSessionDate() }, 'diagnosis')\n  await diagnosisService.saveObservationList(diagnosisData)\n\n  const notesData = await resolveObs({ ...computedData }, 'notes')\n  if (!isEmpty(notesData)) {\n    await notesService.createEncounter()\n    await notesService.saveObservationList(notesData)\n  }\n  goToNextTask()\n}\n\nasync function checkMalariaResult(data: Array<Option>) {\n  const isMalariaSelected = data.some(({ label }) => /Malaria/i.test(label));\n  if (isMalariaSelected) {\n    if (malariaTestResult.value === \"Positive\") return true\n    return await alertConfirmation(`Patient has ${malariaTestResult.value} malaria test result. Do you want to continue?`)\n  }\n  return true\n}\n\nfunction getDiagnosisField(type: \"Primary\" | \"Secondary\") {\n  return {\n    id: `${type.toLowerCase()}_diagnosis`,\n    helpText: `${type} Diagnosis`,\n    type: FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n    validation: (data: any) => type === \"Primary\" ? Validation.required(data) : null,\n    options: async (_: any, filter = '', page = 1, limit = 10) => {\n      const diagnosis = await PatientDiagnosisService.getDiagnosis(filter, page, limit);\n      return mapObjToOptions(diagnosis, \"name\", \"concept_id\");\n    },\n    beforeNext: async (data: any) => await checkMalariaResult(data),\n    computedValue: (options: Array<Option>) => ({\n      tag: 'diagnosis',\n      obs: options.map(({ value }) =>\n        diagnosisService.buildValueCoded(`${type} Diagnosis`, value as number))\n    }),\n    config: {\n      isFilterDataViaApi: true,\n      showKeyboard: true,\n    }\n  }\n}\n\nfunction getClinicNotesField(): Field {\n  return {\n    id: 'clinical_notes',\n    helpText: 'Clinical notes',\n    type: FieldType.TT_TEXT,\n    computedValue: (v: Option) => {\n      if (isEmpty(v)) return null;\n      return {\n        tag: 'notes',\n        obs: notesService.buildValueText('Clinical notes construct', v.value as string)\n      }\n    }\n  }\n}\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createBlock(_unref(IonPage), null, {\n    default: _withCtx(() => [\n      _createVNode(HisStandardForm, {\n        cancelDestinationPath: _unref(patientDashboardUrl),\n        fields: fields.value,\n        onFinishAction: onSubmit\n      }, null, 8, [\"cancelDestinationPath\", \"fields\"])\n    ]),\n    _: 1\n  }))\n}\n}\n\n})","import script from \"./Diagnosis.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./Diagnosis.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { Option } from \"@/components/Forms/FieldInterface\"\nimport { find } from \"lodash\"\n\nexport function resolveObs(obs: any, tag = '') {\n  const values: any = Object.values(obs)\n    .filter((d: any) => d && (d.tag === tag || tag === ''))\n    .reduce((accum: any, cur: any) => {\n      const data = cur.obs ? cur.obs : cur\n      if (Array.isArray(data)) {\n        accum = accum.concat(data)\n      } else if (typeof data === 'function') {\n        accum.push(data())\n      } else {\n        accum.push(data)\n      }\n      return accum\n    }, [])\n  return Promise.all(values)\n}\n\nexport function mapStrToOptions(options: Array<string>): Array<Option> {\n  return options.map(option => ({ label: option, value: option }));\n}\n\nexport function mapObjToOptions(options: Array<Record<string, any>>, label = \"name\", value = \"name\"): Array<Option> {\n  return options.map(option => ({ label: option[label], value: option[value], other: option }));\n}\n\nexport function mapToYesNoOptions(options: Array<string>, checkedOptions?: Array<Option>, hasUnknown = false) {\n  return options.map(label => {\n    const checkedValue = find(checkedOptions, { label });\n    return {\n      label,\n      value: checkedValue?.value ?? \"\",\n      other: {\n        values: hasUnknown ? yesNoUnknownOptions() : yesNoOptions()\n      }\n    }\n  });\n}\n\nexport function yesNoUnknownOptions() {\n  return mapStrToOptions([\"Yes\", \"No\", \"Unknown\"]);\n}\n\nexport function yesNoOptions() {\n  return mapStrToOptions([\"Yes\", \"No\"]);\n}\n\nexport function toYesNoOption(label: string, other: any={}): Option {\n  return {\n      label,\n      value: '',\n      other: {\n          ...other,\n          values: yesNoOptions()\n      }\n  } \n}"],"sourceRoot":""}