{"version":3,"sources":["webpack:///./src/apps/RADIOLOGY/services/radiology_examination_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/apps/RADIOLOGY/views/encounters/RadiologyExaminations.vue?00ab","webpack:///./src/apps/RADIOLOGY/services/radiology_internal_sections_service.ts","webpack:///./src/apps/RADIOLOGY/views/encounters/RadiologyExaminations.vue","webpack:///./src/apps/RADIOLOGY/views/encounters/RadiologyExaminations.vue?d908","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/RADIOLOGY/radiology_global_props.ts"],"names":["RadiologyExaminationService","AppEncounterService","constructor","patientID","providerID","super","id","getJson","getPatientExaminations","this","createOrder","params","postJson","printExamination","accessionNumber","service","PrintoutService","printLbl","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","facts","ready","watch","handler","route","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","e","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","onFinishAction","onFinish","cancelDestinationPath","_","RadiologyInternalSectionService","Service","mixins","EncounterMixinVue","IonPage","examinationOptions","defaultExternalLocation","detailedExaminationOptions","listOfRadiologyTestsField","examinationField","detailedExaminationField","referralTypeField","internalReferralField","externalReferralField","payingField","paymentTypeField","receiptField","paymentAmountField","invoiceField","invoiceAmountField","getListOfRadiologyTests","concept_id","validateAmount","val","match","computedValues","createEncounter","order","encounterID","order_id","saveObservationList","accession_number","tests","selectedTest","helpText","type","FieldType","TT_SELECT","validation","v","Validation","required","computedValue","concept","buildValueCoded","beforeNext","getTestsOptions","selectedExamID","f","list_of_radiology_test","buildValueText","field","PersonFieldHelper","getFacilityLocationField","init","RADIOLOGY_GLOBAL_PROP","defaultReferralLocation","defaultValue","referral_type","referralSections","getInternalSections","s","config","showKeyboard","footerBtns","onClick","c","toastWarning","filtered","some","toLowerCase","alertConfirmation","createInternalSection","listData","paying","TT_TEXT","payment_type","TT_NUMBER","receipt_number","buildValueNumber","invoice_number","isCondition","ignored","undefined","prop","includes","every","Boolean","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","title","description","text","info","GlobalPropertyService","DEFAULT_REFERRAL_LOCATION"],"mappings":"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","file":"js/chunk-d9a8c722.0d654407.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { PrintoutService } from \"@/services/printout_service\"\n\nexport class RadiologyExaminationService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 121, providerID) \n    }\n\n    \n    static getListOfRadiologyTests(id: string | number) {\n        return super.getJson('radiology_set', { id })\n    }\n    \n    getPatientExaminations() {\n        return AppEncounterService.getJson('radiology/examinations', {\n            'patient_id': this.patientID\n        })\n    }\n\n    createOrder(params: any) {\n        return AppEncounterService.postJson('orders/radiology', params)\n    }\n\n    printExamination(accessionNumber: string) {\n        const service = new PrintoutService()\n        return service.printLbl(`orders/radiology?accession_number=${accessionNumber}`)\n    }\n}\n","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { Service } from \"@/services/service\"\n\nexport class RadiologyInternalSectionService extends Service {\n    constructor() {\n        super()\n    }\n\n    static getInternalSections() {\n        return super.getJson('internal_sections')\n    }\n\n    static createInternalSection(name: string) {\n        return super.postJson('internal_sections', { name })\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { IonPage } from \"@ionic/vue\";\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { RadiologyExaminationService } from \"@/apps/RADIOLOGY/services/radiology_examination_service\";\nimport { RadiologyInternalSectionService } from \"@/apps/RADIOLOGY/services/radiology_internal_sections_service\";\nimport { isEmpty } from 'lodash';\nimport { alertConfirmation, toastDanger, toastWarning } from '@/utils/Alerts';\nimport PersonFieldHelper from '@/utils/HisFormHelpers/PersonFieldHelper';\nimport RADIOLOGY_GLOBAL_PROP from \"@/apps/RADIOLOGY/radiology_global_props\"\n;\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    components: {\n        IonPage,\n        HisStandardForm\n    },\n    data: () => ({\n        service: {} as any,\n        examinationOptions: [] as any,\n        defaultExternalLocation: '' as string,\n        detailedExaminationOptions: [] as any\n    }),\n    watch: {\n        ready: {\n            handler(ready: any) {\n                if (ready) {\n                    this.service = new RadiologyExaminationService(this.patientID, this.providerID)\n                    this.fields.push(this.listOfRadiologyTestsField())\n                    this.fields.push(this.examinationField())\n                    this.fields.push(this.detailedExaminationField())\n                    this.fields.push(this.referralTypeField())\n                    this.fields.push(this.internalReferralField())\n                    this.fields.push(this.externalReferralField())\n                    this.fields.push(this.payingField())\n                    this.fields.push(this.paymentTypeField())\n                    this.fields.push(this.receiptField())\n                    this.fields.push(this.paymentAmountField())\n                    this.fields.push(this.invoiceField())\n                    this.fields.push(this.invoiceAmountField())\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async getTestsOptions(id: string | number) {\n            return (await RadiologyExaminationService.getListOfRadiologyTests(id))\n                .map((e: any) => ({\n                    label: e.name,\n                    value: e.concept_id\n                }))\n        },\n        validateAmount(val: string) {\n            return val.match(/([0-9]+\\\\.[0-9])|Unknown$/i)\n                ? ['You must enter a decimal number']\n                : null\n        },\n        async onFinish(_: any, computedValues: any) {\n            await this.service.createEncounter()\n            const order = await this.service.createOrder({\n                'concept_id': computedValues['list_of_radiology_test']['concept'],\n                'encounter_id': this.service.encounterID,\n                'provider_id': this.providerID\n            })\n            const obs = (await this.resolveObs(computedValues)).map(obs => {\n                obs['order_id'] = order.order_id\n                return obs\n            })\n            await this.service.saveObservationList(obs)\n            this.service.printExamination(order.accession_number)\n            this.gotoPatientDashboard()\n        },\n        listOfRadiologyTestsField(): Field {\n            let tests = [] as any;\n            let selectedTest = -1 as number;\n            return {\n                id: \"list_of_radiology_test\",\n                helpText: \"Please select the type of examination\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => {\n                    return {\n                        concept: v.value,\n                        obs: this.service.buildValueCoded('RADIOLOGY TEST', v.value)\n                    }\n                },\n                beforeNext: async (v: Option) => {\n                    if (selectedTest != v.value) {\n                        selectedTest = v.value as number\n                        this.examinationOptions = await this.getTestsOptions(v.value)\n                    }\n                    return true\n                },\n                options: async () => {\n                    if (isEmpty(tests)) {\n                        tests = await this.getTestsOptions('LIST OF RADIOLOGY TESTS')\n                    }\n                    return tests\n                }\n            }\n        },\n        examinationField() {\n            let selectedExamID = -1\n            return {\n                id: \"examination\",\n                helpText: \"Please select the examination\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('Examination', v.value)\n                    }\n                },\n                condition: () => !isEmpty(this.examinationOptions),\n                beforeNext: async (v: Option, f: any) => {\n                    if (selectedExamID != f.list_of_radiology_test.value) {\n                        selectedExamID = v.value as number\n                        this.detailedExaminationOptions = await this.getTestsOptions(selectedExamID)\n                    }\n                    return true\n                },\n                options:() => this.examinationOptions\n            }\n        },\n        detailedExaminationField() {\n            return {\n                id: \"detailed_examination\",\n                helpText: \"Please select the detailed examination\",\n                type: FieldType.TT_SELECT,\n                condition: () => !isEmpty(this.detailedExaminationOptions),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('Detailed examination', v.value),\n                    }\n                },\n            validation: (v: Option) => Validation.required(v),\n                options: () => this.detailedExaminationOptions\n            }\n        },\n        referralTypeField() {\n            return {\n                id: 'referral_type',\n                helpText: 'Please select the referral type',\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('Source of referral', v.label)\n                    }\n                },\n                options: () => {\n                    return this.mapStrToOptions([\n                        'External', \n                        'Internal'\n                    ])\n                }\n            }\n        },\n        externalReferralField() {\n            const field: Field = PersonFieldHelper.getFacilityLocationField()\n            field.id = 'external_referral'\n            field.init = async () => {\n                this.defaultExternalLocation = await RADIOLOGY_GLOBAL_PROP.defaultReferralLocation()\n                return true\n            }\n            field.defaultValue = () => this.defaultExternalLocation\n            field.condition = (f: any) => f.referral_type.value === 'External'\n            field.computedValue = (v: Option) => {\n                return {\n                    obs: this.service.buildValueText('REFERRED FROM', v.label)\n                }\n            }\n            return field\n        },\n        internalReferralField() {\n            let referralSections = [] as Option[]\n            return {\n                id: \"referred_by\",\n                helpText: \"Referred from\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.referral_type.value === 'Internal',\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('REFERRED FROM', v.label)\n                    }\n                },\n                options: async () => {\n                    if (isEmpty(referralSections)) {\n                        referralSections = (await RadiologyInternalSectionService.getInternalSections())\n                            .map((s: any) => ({\n                                value: s.id,\n                                label: `${s?.name}`.toUpperCase()\n                            }))\n                    }\n                    return referralSections\n                },\n                config: {\n                    showKeyboard: true,\n                    footerBtns: [\n                        {\n                            name: 'Add Referral',\n                            slot: 'end',\n                            color: 'success',\n                            onClick: async (f: any, c: any, field: any) => {\n                                if (typeof field.filter != 'string' || field.filter.length < 3) {\n                                    return toastWarning(`Please enter a valid name`)\n                                }\n                                if (field.filtered.some((i: Option) => i.label.toLowerCase() === field.filter.toLowerCase())) {\n                                    return toastWarning(`Can't add already existing referral location`)\n                                }\n                                if ((await alertConfirmation(`Do you want to add referral location?`))) {\n                                    const data = await RadiologyInternalSectionService.createInternalSection(field.filter.toUpperCase())\n                                    if (data) {\n                                        field.filter = data.name\n                                        field.listData = [{label: data.name, value: data.id}, ...field.listData]\n                                    } else {\n                                        toastDanger(`Unable to add ${field.filter}`)\n                                    }\n                                }\n                            }\n                        }\n                    ]\n                }\n            }\n        },\n        payingField() {\n            return {\n                id: \"paying\",\n                helpText: \"Is this a paying patient?\",\n                type: FieldType.TT_SELECT,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('PAYING', v.value) \n                    }\n                },\n                validation: (v: Option) => Validation.required(v),\n                options: () => {\n                    return this.yesNoOptions()\n                }\n            }\n        },\n        paymentTypeField() {\n            return {\n                id: \"payment_type\",\n                helpText: \"Select payment method\",\n                type: FieldType.TT_SELECT,\n                validation: (v: Option) => Validation.required(v),\n                condition: (f: any) => f.paying.value === 'Yes',\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueCoded('PAYMENT TYPE', v.value)\n                    }\n                },\n                options: () => {\n                    return this.mapStrToOptions([\n                        'Cash',\n                        'Invoice'\n                    ])\n                }\n            }\n        },\n        receiptField() {\n            return  {\n                id: \"receipt_number\",\n                helpText: \"Enter receipt number\",\n                type: FieldType.TT_TEXT,\n                condition: (f: any) => f.payment_type.value === 'Cash',\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('RECEIPT NUMBER', v.value)\n                    }\n                },\n                validation: (v: Option) => Validation.validateSeries([\n                    () => Validation.required(v),\n                    () => this.validateAmount(`${v.value}`)\n                ])\n            }\n        },\n        invoiceField() {\n            return {\n                id: \"invoice_number\",\n                helpText: \"Enter invoice number\",\n                type: FieldType.TT_TEXT,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueText('INVOICE NUMBER', v.value)\n                    }\n                },\n                condition: (f: any) => f.payment_type.value === 'Invoice',\n                validation: (v: Option) => Validation.required(v)\n            }\n        },\n        paymentAmountField() {\n            return {\n                id: \"payment_amount\",\n                helpText: \"Enter payment amount\",\n                type: FieldType.TT_NUMBER,\n                condition: (f: any) => f.receipt_number.value,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueNumber('PAYMENT AMOUNT', v.value)\n                    }\n                },\n                validation: (v: Option) => Validation.validateSeries([\n                    () => Validation.required(v),\n                    () => this.validateAmount(`${v.value}`)\n                ])\n            }\n        },\n        invoiceAmountField() {\n            return {\n                id: \"invoice_amount\",\n                helpText: \"Enter invoice amount\",\n                type: FieldType.TT_NUMBER,\n                condition: (f: any) => f.invoice_number.value,\n                computedValue: (v: Option) => {\n                    return {\n                        obs: this.service.buildValueNumber('INVOICE AMOUNT', v.value)\n                    }\n                },\n                validation: (v: Option) => Validation.validateSeries([\n                    () => Validation.required(v),\n                    () => this.validateAmount(`${v.value}`)\n                ])\n            }\n        }\n    }\n})\n","import { render } from \"./RadiologyExaminations.vue?vue&type=template&id=33aad54a&ts=true\"\nimport script from \"./RadiologyExaminations.vue?vue&type=script&lang=ts\"\nexport * from \"./RadiologyExaminations.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { GlobalPropertyService } from \"@/services/global_property_service\"\n\nexport enum RADIOLOGY_GLOBAL_PROP {\n    DEFAULT_REFERRAL_LOCATION = 'default.referral.location'\n}\n\nexport default {\n    defaultReferralLocation: () => GlobalPropertyService.get(RADIOLOGY_GLOBAL_PROP.DEFAULT_REFERRAL_LOCATION)\n}"],"sourceRoot":""}