{"version":3,"sources":["webpack:///./src/apps/ART/views/encounters/ARVNumber.vue?f1cd","webpack:///./src/apps/ART/views/encounters/ARVNumber.vue","webpack:///./src/apps/ART/views/encounters/ARVNumber.vue?23b9","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/components/Forms/BaseFormElements.ts","webpack:///./src/components/FormElements lazy ^\\.\\/.*\\.vue$ namespace object","webpack:///./src/services/identifier_service.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","patientHasARVNumber","currentArvNumber","prependValue","watch","ready","arvNumber","this","patient","getArvNumber","a","split","replace","suggestedNumber","ProgramService","getNextSuggestedARVNumber","arv_number","getFields","immediate","methods","formData","newArvNumber","value","$router","back","exists","IdentifierService","arvNumberExists","toastWarning","updateARVNumber","createArvNumber","e","id","helpText","type","FieldType","TT_TEXT","validation","val","Validation","required","defaultValue","config","initialKb","artApp","HisApp","getActiveApp","programPatientIdentifiers","arvType","prefix","footerBtns","name","slot","color","onClick","async","__exports__","patientID","providerID","providers","facts","sessionDate","apiDate","encounterName","isBdeMode","birthDate","outcome","outcomeStartDate","handler","route","params","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","deep","computed","patientDashboardUrl","runflowState","state","states","FlowState","SET_PROVIDER","selection","username","provider","find","person_id","CONTINUE","CHANGE_SESSION_DATE","push","EXIT","CHANGE_PATIENT_OUTCOME","GO_TO_PATIENT_DASHBOARD","gotoPatientDashboard","findings","matchToGuidelines","ENCOUNTER_GUIDELINES","index","_finding$actions","_finding$actions3","finding","actions","alert","_finding$actions2","status","_finding$actions4","flowState","program","startDate","console","error","toastDanger","getSessionDate","getCachedApiDate","isBDE","getBirthdate","$route","toString","toUpperCase","sort","b","usernameA","usernameB","map","p","_p$person","isEmpty","person","names","_p$person2","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","d","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","conditions","condition","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","computedData","$emit","dformat","HisDate","toStandardHisDisplayFormat","priority","action","infoActionSheet","modal","optionsActionSheet","role","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","COMPONENT_REFS","TT_ASYNC_MULTI_SELECT","TT_LINKAGE_CODE","TT_MULTI_SELECT_GRID","TT_AGE_INPUT","TT_BARCODE","TT_NOTE","TT_SELECT","TT_CARD_SELECTOR","TT_MULTIPLE_SELECT","TT_NUMBER","TT_MONTHLY_DAYS","TT_ART_REGIMEN_SELECTION","TT_NEXT_VISIT_INTERVAL_SELECTION","TT_TABLE_VIEWER","TT_DOSAGE_INPUT","TT_YES_NO","TT_MULTIPLE_YES_NO","TT_WEIGHT_CHART","TT_VITALS_ENTRY","TT_APPOINTMENTS_ENTRY","TT_COMPLAINTS_PICKER","TT_CLINIC_HOLIDAY_PICKER","TT_SUMMARY","TT_ART_STAGING_SUMMARY","TT_ADHERENCE_INPUT","TT_LAB_ORDERS","TT_PERSON_RESULT_VIEW","TT_PROGRAM_SELECTION","TT_DATE_PICKER","TT_RELATION_SELECTION","TT_FILING_NUMBER_VIEW","TT_PERSON_MATCH_VIEW","TT_FULL_DATE","TT_BATCH_ENTRY","TT_BATCH_VERIFICATION","TT_BATCH_MOVEMENT","TT_IP_ADDRESS","TT_TEXT_BANNER","TT_DISPENSATION_INPUT","TT_DATA_TABLE","TT_GROUP_SELECTOR","TT_ANC_PREGNANCY_INPUT_CONFIG","TT_ANC_PREGNANCY_DETAILS_INPUT","TT_ANC_LMP_DATE_INPUT","TT_DRUG_TRANSFER_IN","TT_GRID_SELECTOR","TT_ANC_DRUGSET_INPUT","TT_RADIOLOGY_PICKER","TT_PRESCRIPTION_INPUT","TT_INFINITE_SCROLL_MULTIPLE_SELECT","TT_DRUG_DISPENSER","webpackAsyncContext","req","__webpack_require__","o","resolve","Error","code","ids","slice","keys","module","exports","Service","constructor","super","_defineProperty","identifierType","getJson","getProgramID","getIdentifierType","setIdentifierType","getDuplicateIndentifiers","getPatientsByIdentifier","identifier","getMultipleIdentifiers","voidMultipleIdentifiers","identifiers","reasons","idType","reason","void"],"mappings":"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Hd,IAAI9I,EAAM,CACT,wBAAyB,CACxB,OACA,qBAED,wBAAyB,CACxB,OACA,qBAED,iCAAkC,CACjC,OACA,qBAED,+BAAgC,CAC/B,OACA,qBAED,0BAA2B,CAC1B,OACA,qBAED,yBAA0B,CACzB,OACA,iBACA,qBAED,sBAAuB,CACtB,OACA,qBAED,kCAAmC,CAClC,OACA,qBAED,0BAA2B,CAC1B,OACA,iBACA,qBAED,mBAAoB,CACnB,OACA,qBAED,yBAA0B,CACzB,OACA,sBAED,6BAA8B,CAC7B,OACA,sBAED,0BAA2B,CAC1B,OACA,iBACA,sBAED,oBAAqB,CACpB,OACA,sBAED,wBAAyB,CACxB,OACA,iBACA,sBAED,+BAAgC,CAC/B,OACA,sBAED,wBAAyB,CACxB,OACA,sBAED,sBAAuB,CACtB,OACA,iBACA,iBACA,sBAED,yBAA0B,CACzB,OACA,iBACA,iBACA,sBAED,6BAA8B,CAC7B,OACA,iBACA,iBACA,sBAED,wBAAyB,CACxB,OACA,sBAED,+BAAgC,CAC/B,OACA,iBACA,sBAED,4BAA6B,CAC5B,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,sBAAuB,CACtB,OACA,iBACA,sBAED,uBAAwB,CACvB,OACA,iBACA,sBAED,wBAAyB,CACxB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,wCAAyC,CACxC,OACA,sBAED,qBAAsB,CACrB,OACA,iBACA,sBAED,uBAAwB,CACvB,OACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,0BAA2B,CAC1B,OACA,iBACA,sBAED,6BAA8B,CAC7B,OACA,sBAED,gBAAiB,CAChB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,6BAA8B,CAC7B,OACA,iBACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,kBAAmB,CAClB,OACA,sBAED,mBAAoB,CACnB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,sBAAuB,CACtB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,wBAAyB,CACxB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,oBAAqB,CACpB,OACA,sBAED,oBAAqB,CACpB,OACA,uBAGF,SAAS+I,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAElJ,EAAKgJ,GAC9B,OAAO3G,QAAQ8G,UAAUxM,MAAK,WAC7B,IAAI5C,EAAI,IAAIqP,MAAM,uBAAyBJ,EAAM,KAEjD,MADAjP,EAAEsP,KAAO,mBACHtP,KAIR,IAAIuP,EAAMtJ,EAAIgJ,GAAMhP,EAAKsP,EAAI,GAC7B,OAAOjH,QAAQC,IAAIgH,EAAIC,MAAM,GAAGvJ,IAAIiJ,EAAoBlP,IAAI4C,MAAK,WAChE,OAAOsM,EAAoBjP,MAG7B+O,EAAoBS,KAAO,WAC1B,OAAO5H,OAAO4H,KAAKxJ,IAEpB+I,EAAoB/O,GAAK,OACzByP,EAAOC,QAAUX,G,gGCzPX,MAAOrP,UAA0BiQ,OAEnCC,cACIC,QAAOC,eAAA,8BACPvR,KAAKwR,gBAAkB,EAG3B,4BACI,OAAOF,MAAMG,QAAQ,6BAGzB,6BAA6B1R,GACzB,MAAMN,QAAa6R,MAAMG,QAAQ,YAAYH,MAAMI,oCAAoC3R,KACvF,OAAON,EAAKyB,OAGhByQ,oBACI,OAAO3R,KAAKwR,eAGhBI,kBAAkBjQ,GACd3B,KAAKwR,eAAiB7P,EAG1BkQ,2BACI,OAAOT,OAAQK,QAAQ,gCAAiC,CACpD,QAAWzR,KAAKwR,iBAIxBM,wBAAwBC,GACpB,OAAOX,OAAQK,QAAQ,gCAAgC,CACnD,QAAWzR,KAAKwR,eAChB,WAAcO,IAItBC,yBACI,OAAOZ,OAAQK,QAAQ,+BAAgC,CACnD,QAAWzR,KAAKwR,iBAGxBS,wBAAwBC,EAAoBC,EAAkBC,GAC1D,MAAMrO,EAAc,CAAEmO,YAAaA,EAAaG,OAAQF,EAAS,gBAAmBC,GACpF,OAAOhB,OAAQkB,KAAK,4BAA8BvO","file":"js/chunk-a2bf4bd4.f4dcaf18.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { Field } from \"@/components/Forms/FieldInterface\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { toastWarning } from \"@/utils/Alerts\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport HisApp from \"@/apps/app_lib\"\nimport { IdentifierService } from \"@/services/identifier_service\";\nimport { ProgramService } from \"@/services/program_service\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    patientHasARVNumber: false,\n    currentArvNumber: \"\" as any,\n    prependValue: \"\" as any,\n  }),\n  watch: {\n    ready: {\n      async handler(ready: any) {\n        if (!ready) return\n        const arvNumber = this.patient.getArvNumber()\n        if(arvNumber !== \"Unknown\") {\n          const a = arvNumber.split('-')\n          this.currentArvNumber = a[2].replace(/^\\D+|\\s/g, \"\")\n          this.prependValue = `${a[0]}-${a[1]}-`\n          this.patientHasARVNumber = true\n        } else {\n          const suggestedNumber =  await ProgramService.getNextSuggestedARVNumber();\n          this.currentArvNumber = suggestedNumber.arv_number.replace(/^\\D+|\\s/g, \"\");\n        }\n        this.fields = this.getFields();\n      },\n      immediate: true\n    },\n  },\n  methods: {\n    async onFinish(formData: any) {\n      const newArvNumber = formData['arv_number'].value\n      if(newArvNumber === this.patient.getArvNumber()) return this.$router.back()\n      const exists = await IdentifierService.arvNumberExists(newArvNumber)\n      if(exists) toastWarning(\"ARV number already exists\", 5000)\n      else {\n        try {\n          if(this.patientHasARVNumber) \n            await this.patient.updateARVNumber(newArvNumber)\n          else await this.patient.createArvNumber(newArvNumber)\n          this.$router.back()\n        } catch (e) {\n          toastWarning(`${e}`)\n        }\n      }   \n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: \"arv_number\",\n          helpText: \"Update ARV Number\",\n          type: FieldType.TT_TEXT,\n          validation: (val: any) => Validation.required(val),\n          defaultValue: () => this.currentArvNumber,\n          config: {\n            initialKb: '0-9',\n            prependValue: () => {\n              if(this.prependValue) return this.prependValue\n              const artApp = HisApp.getActiveApp()\n              if (artApp && artApp.programPatientIdentifiers) {\n                const arvType = artApp.programPatientIdentifiers['ARV Number']\n                return arvType.prefix()\n              }\n              return ''\n            },\n            footerBtns: [\n              {\n                name: \"Void ARV Number\",\n                slot: \"end\",\n                color: 'danger',\n                onClick: async () => {\n                  await this.patient.updateARVNumber(\"Unknown\")\n                  this.$router.back()\n                }\n              }\n            ]\n          },\n        }\n      ]\n    }\n  }\n});\n","import { render } from \"./ARVNumber.vue?vue&type=template&id=f627abd6&ts=true\"\nimport script from \"./ARVNumber.vue?vue&type=script&lang=ts\"\nexport * from \"./ARVNumber.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/anthony/Documents/source/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","\n/**\n * @deprecated moved to useEncounter composable\n * \n */\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/anthony/Documents/source/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: (facts: FactsInterface) => any;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: ConditionsInteface;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\nexport type FactsInterface = Record<string, any>\nexport type ConditionResolver = (value: any, facts: FactsInterface) => boolean | RegExpMatchArray | null\nexport type ConditionsInteface = Record<string, ConditionResolver>\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: FactsInterface, conditions: ConditionsInteface): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: FactsInterface, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","/**\n * Map all formElements/components defined in \"@/components/FormElements\" \n * in the Enum below by their file name.\n * \n * Next step is to add FieldType entry in COMPONENT_REFS in the \n * Array below the FieldType Enum\n */\nexport enum FieldType {\n    TT_ASYNC_MULTI_SELECT = 'AsyncMultiSelect',\n    TT_LINKAGE_CODE = 'LinkageCodeInput',\n    TT_MULTI_SELECT_GRID= 'HisMultiSelectGrid',\n    TT_AGE_INPUT='HisAgeInput',\n    TT_GROUP_SELECTOR = 'HisGroupSelector',\n    TT_DATA_TABLE = 'HisDataTable',\n    TT_GRID_SELECTOR = 'HisGridSelector',\n    TT_NOTE = 'HisNote',\n    TT_BARCODE = 'HisBarcodeInput',\n    TT_MONTHLY_DAYS=\"HisMonthlyDays\",\n    TT_TEXT=\"HisTextInput\",\n    TT_NUMBER = \"HisNumberInput\",\n    TT_DATETIME=\"datetime\",\n    TT_SELECT=\"HisSelect\",\n    TT_MULTIPLE_SELECT=\"HisMultipleSelect\",\n    TT_ART_REGIMEN_SELECTION=\"HisArtRegimenSelection\",\n    TT_NEXT_VISIT_INTERVAL_SELECTION=\"HisNextVisitInterval\",\n    TT_TABLE_VIEWER=\"HisTableViewer\",\n    TT_DOSAGE_INPUT=\"HisDosageInput\",\n    TT_YES_NO=\"YesNoSelect\",\n    TT_MULTIPLE_YES_NO=\"MultiYesNoSelect\",\n    TT_SUMMARY=\"HisSummary\",\n    TT_WEIGHT_CHART = \"HisWeightChart\",\n    TT_VITALS_ENTRY=\"HisVitalsEntry\",\n    TT_ADHERENCE_INPUT = \"HisAdherenceInput\",\n    TT_ART_STAGING_SUMMARY = \"ArtStagingSummary\",\n    TT_LAB_ORDERS = \"HisLabOrders\",\n    TT_APPOINTMENTS_ENTRY = \"HisAppointments\",\n    TT_DISPENSATION_INPUT = 'DrugDispensationSelection',\n    TT_PROGRAM_SELECTION = 'ProgramSelection',\n    TT_DATE_PICKER = 'HisDatePicker',\n    TT_PERSON_RESULT_VIEW = 'PersonSearchView',\n    TT_RELATION_SELECTION = 'RelationsSelection',\n    TT_FILING_NUMBER_VIEW = 'FilingNumberView',\n    TT_CARD_SELECTOR = 'HisCardSelector',\n    TT_PERSON_MATCH_VIEW = 'PersonMatchView',\n    TT_FULL_DATE = 'HisDateInput',\n    TT_BATCH_ENTRY = 'HisBatchEntry',\n    TT_BATCH_VERIFICATION = 'HisBatchVerification',\n    TT_BATCH_MOVEMENT = 'HisBatchMovement',\n    TT_COMPLAINTS_PICKER = 'HisComplaintsPicker',\n    TT_RADIOLOGY_PICKER = 'HisRadiologyPicker',\n    TT_IP_ADDRESS = 'HisIPAddress',\n    TT_TEXT_BANNER = 'HisTextBanner',\n    TT_DRUG_DISPENSER = 'GeneralDrugDispenser',\n    TT_CLINIC_HOLIDAY_PICKER = 'HisClinicHolidayPicker',\n    TT_ANC_PREGNANCY_INPUT_CONFIG = 'AncPregnancyInfoConfig',\n    TT_ANC_PREGNANCY_DETAILS_INPUT = 'AncPregnancyDetailsInput',\n    TT_ANC_LMP_DATE_INPUT = 'AncLmpDateInput',\n    TT_ANC_DRUGSET_INPUT = 'AncDrugSetInput',\n    TT_DRUG_TRANSFER_IN = 'DrugTransferInput',\n    TT_PRESCRIPTION_INPUT = 'HisPrescriptionInput',\n    TT_INFINITE_SCROLL_MULTIPLE_SELECT=\"HisInfiniteScrollMultipleSelect\"\n}\n\n// Register FieldTypes here that will be registered at runtime\nexport const COMPONENT_REFS: FieldType[] = [\n    FieldType.TT_ASYNC_MULTI_SELECT,\n    FieldType.TT_LINKAGE_CODE,\n    FieldType.TT_MULTI_SELECT_GRID,\n    FieldType.TT_AGE_INPUT,\n    FieldType.TT_BARCODE,\n    FieldType.TT_NOTE,\n    FieldType.TT_SELECT,\n    FieldType.TT_CARD_SELECTOR,\n    FieldType.TT_MULTIPLE_SELECT,\n    FieldType.TT_TEXT,\n    FieldType.TT_NUMBER,\n    FieldType.TT_MONTHLY_DAYS,\n    FieldType.TT_ART_REGIMEN_SELECTION,\n    FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n    FieldType.TT_TABLE_VIEWER,\n    FieldType.TT_DOSAGE_INPUT,\n    FieldType.TT_YES_NO,\n    FieldType.TT_MULTIPLE_YES_NO,\n    FieldType.TT_WEIGHT_CHART,\n    FieldType.TT_VITALS_ENTRY,\n    FieldType.TT_APPOINTMENTS_ENTRY,\n    FieldType.TT_COMPLAINTS_PICKER,\n    FieldType.TT_CLINIC_HOLIDAY_PICKER,\n    FieldType.TT_SUMMARY,\n    FieldType.TT_ART_STAGING_SUMMARY,\n    FieldType.TT_ADHERENCE_INPUT,\n    FieldType.TT_LAB_ORDERS,\n    FieldType.TT_PERSON_RESULT_VIEW,\n    FieldType.TT_PROGRAM_SELECTION,\n    FieldType.TT_DATE_PICKER,\n    FieldType.TT_RELATION_SELECTION,\n    FieldType.TT_FILING_NUMBER_VIEW,\n    FieldType.TT_PERSON_MATCH_VIEW,\n    FieldType.TT_FULL_DATE,\n    FieldType.TT_BATCH_ENTRY,\n    FieldType.TT_BATCH_VERIFICATION,\n    FieldType.TT_BATCH_MOVEMENT,\n    FieldType.TT_IP_ADDRESS,\n    FieldType.TT_TEXT_BANNER,\n    FieldType.TT_DISPENSATION_INPUT,\n    FieldType.TT_DATA_TABLE,\n    FieldType.TT_GROUP_SELECTOR,\n    FieldType.TT_ANC_PREGNANCY_INPUT_CONFIG,\n    FieldType.TT_ANC_PREGNANCY_DETAILS_INPUT,\n    FieldType.TT_ANC_LMP_DATE_INPUT,\n    FieldType.TT_DRUG_TRANSFER_IN,\n    FieldType.TT_GRID_SELECTOR,\n    FieldType.TT_ANC_DRUGSET_INPUT,\n    FieldType.TT_RADIOLOGY_PICKER,\n    FieldType.TT_PRESCRIPTION_INPUT,\n    FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n    FieldType.TT_DRUG_DISPENSER\n]\n","var map = {\n\t\"./AncDrugSetInput.vue\": [\n\t\t\"c99f\",\n\t\t\"TouchFormElement0\"\n\t],\n\t\"./AncLmpDateInput.vue\": [\n\t\t\"101a\",\n\t\t\"TouchFormElement1\"\n\t],\n\t\"./AncPregnancyDetailsInput.vue\": [\n\t\t\"b043\",\n\t\t\"TouchFormElement2\"\n\t],\n\t\"./AncPregnancyInfoConfig.vue\": [\n\t\t\"262e\",\n\t\t\"TouchFormElement3\"\n\t],\n\t\"./ArtStagingSummary.vue\": [\n\t\t\"43db\",\n\t\t\"TouchFormElement4\"\n\t],\n\t\"./AsyncMultiSelect.vue\": [\n\t\t\"5de2\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement5\"\n\t],\n\t\"./BaseTextInput.vue\": [\n\t\t\"36ad\",\n\t\t\"TouchFormElement6\"\n\t],\n\t\"./DrugDispensationSelection.vue\": [\n\t\t\"05d5\",\n\t\t\"TouchFormElement7\"\n\t],\n\t\"./DrugTransferInput.vue\": [\n\t\t\"de42\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement8\"\n\t],\n\t\"./FieldMixin.vue\": [\n\t\t\"51c8\",\n\t\t\"TouchFormElement9\"\n\t],\n\t\"./FilingNumberView.vue\": [\n\t\t\"c650\",\n\t\t\"TouchFormElement10\"\n\t],\n\t\"./GeneralDrugDispenser.vue\": [\n\t\t\"7737\",\n\t\t\"TouchFormElement11\"\n\t],\n\t\"./HisAdherenceInput.vue\": [\n\t\t\"f2c3\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement12\"\n\t],\n\t\"./HisAgeInput.vue\": [\n\t\t\"c05f\",\n\t\t\"TouchFormElement13\"\n\t],\n\t\"./HisAppointments.vue\": [\n\t\t\"b2eb\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement14\"\n\t],\n\t\"./HisArtRegimenSelection.vue\": [\n\t\t\"47b9\",\n\t\t\"TouchFormElement15\"\n\t],\n\t\"./HisBarcodeInput.vue\": [\n\t\t\"dd65\",\n\t\t\"TouchFormElement16\"\n\t],\n\t\"./HisBatchEntry.vue\": [\n\t\t\"f2ab\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement17\"\n\t],\n\t\"./HisBatchMovement.vue\": [\n\t\t\"5148\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement18\"\n\t],\n\t\"./HisBatchVerification.vue\": [\n\t\t\"7b0f\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement19\"\n\t],\n\t\"./HisCardSelector.vue\": [\n\t\t\"0734\",\n\t\t\"TouchFormElement20\"\n\t],\n\t\"./HisClinicHolidayPicker.vue\": [\n\t\t\"4030\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement21\"\n\t],\n\t\"./HisComplaintsPicker.vue\": [\n\t\t\"82d1\",\n\t\t\"TouchFormElement22\"\n\t],\n\t\"./HisDataTable.vue\": [\n\t\t\"a6ba\",\n\t\t\"TouchFormElement23\"\n\t],\n\t\"./HisDateInput.vue\": [\n\t\t\"374c\",\n\t\t\"TouchFormElement24\"\n\t],\n\t\"./HisDatePicker.vue\": [\n\t\t\"9b30\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement25\"\n\t],\n\t\"./HisDosageInput.vue\": [\n\t\t\"b34c\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement26\"\n\t],\n\t\"./HisGridSelector.vue\": [\n\t\t\"112a\",\n\t\t\"TouchFormElement27\"\n\t],\n\t\"./HisGroupSelector.vue\": [\n\t\t\"81cf\",\n\t\t\"TouchFormElement28\"\n\t],\n\t\"./HisIPAddress.vue\": [\n\t\t\"2a82\",\n\t\t\"TouchFormElement29\"\n\t],\n\t\"./HisInfiniteScrollMultipleSelect.vue\": [\n\t\t\"52a3\",\n\t\t\"TouchFormElement30\"\n\t],\n\t\"./HisLabOrders.vue\": [\n\t\t\"e614\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement31\"\n\t],\n\t\"./HisMonthlyDays.vue\": [\n\t\t\"69cf\",\n\t\t\"TouchFormElement32\"\n\t],\n\t\"./HisMultiSelectGrid.vue\": [\n\t\t\"0fa3\",\n\t\t\"TouchFormElement33\"\n\t],\n\t\"./HisMultipleSelect.vue\": [\n\t\t\"2fd5\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement34\"\n\t],\n\t\"./HisNextVisitInterval.vue\": [\n\t\t\"3126\",\n\t\t\"TouchFormElement35\"\n\t],\n\t\"./HisNote.vue\": [\n\t\t\"c927\",\n\t\t\"TouchFormElement36\"\n\t],\n\t\"./HisNumberInput.vue\": [\n\t\t\"5e75\",\n\t\t\"TouchFormElement37\"\n\t],\n\t\"./HisPrescriptionInput.vue\": [\n\t\t\"87e5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement38\"\n\t],\n\t\"./HisRadiologyPicker.vue\": [\n\t\t\"adc7\",\n\t\t\"TouchFormElement39\"\n\t],\n\t\"./HisSelect.vue\": [\n\t\t\"d11f\",\n\t\t\"TouchFormElement40\"\n\t],\n\t\"./HisSummary.vue\": [\n\t\t\"e0bd\",\n\t\t\"TouchFormElement41\"\n\t],\n\t\"./HisTableViewer.vue\": [\n\t\t\"8904\",\n\t\t\"TouchFormElement42\"\n\t],\n\t\"./HisTextBanner.vue\": [\n\t\t\"952c\",\n\t\t\"TouchFormElement43\"\n\t],\n\t\"./HisTextInput.vue\": [\n\t\t\"6ef9\",\n\t\t\"TouchFormElement44\"\n\t],\n\t\"./HisVitalsEntry.vue\": [\n\t\t\"e333\",\n\t\t\"TouchFormElement45\"\n\t],\n\t\"./HisWeightChart.vue\": [\n\t\t\"26a1\",\n\t\t\"TouchFormElement46\"\n\t],\n\t\"./LinkageCodeInput.vue\": [\n\t\t\"ac86\",\n\t\t\"TouchFormElement47\"\n\t],\n\t\"./MultiYesNoSelect.vue\": [\n\t\t\"5fd1\",\n\t\t\"TouchFormElement48\"\n\t],\n\t\"./PersonMatchView.vue\": [\n\t\t\"6591\",\n\t\t\"TouchFormElement49\"\n\t],\n\t\"./PersonSearchView.vue\": [\n\t\t\"28b2\",\n\t\t\"TouchFormElement50\"\n\t],\n\t\"./ProgramSelection.vue\": [\n\t\t\"e3b4\",\n\t\t\"TouchFormElement51\"\n\t],\n\t\"./RelationsSelection.vue\": [\n\t\t\"0e57\",\n\t\t\"TouchFormElement52\"\n\t],\n\t\"./SelectMixin.vue\": [\n\t\t\"82a9\",\n\t\t\"TouchFormElement53\"\n\t],\n\t\"./YesNoSelect.vue\": [\n\t\t\"71f2\",\n\t\t\"TouchFormElement54\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"f159\";\nmodule.exports = webpackAsyncContext;","import { Service } from \"./service\";\n\nexport interface DuplicateIdentifiersInterface {\n    count: number;\n    identifier: string;\n}\n\nexport class IdentifierService extends Service {\n    identifierType: number\n    constructor() {\n        super()\n        this.identifierType = -1\n    }\n \n    static getIdentifierTypes() {\n        return super.getJson('types/patient_identifiers')\n    }\n\n    static async arvNumberExists(arvNumber: string): Promise<boolean> {\n        const data = await super.getJson(`programs/${super.getProgramID()}/lookup_arv_number/${arvNumber}`)\n        return data.exists\n    }\n\n    getIdentifierType() {\n        return this.identifierType\n    }\n\n    setIdentifierType(type: number) {\n        this.identifierType = type\n    }\n\n    getDuplicateIndentifiers(): Promise<DuplicateIdentifiersInterface[]> {\n        return Service.getJson(`search/identifiers/duplicates`, {\n            'type_id': this.identifierType\n        })\n    }\n\n    getPatientsByIdentifier(identifier: string) {\n        return Service.getJson(`search/patients/by_identifier`,{\n            'type_id': this.identifierType,\n            'identifier': identifier\n        })\n    }\n    \n    getMultipleIdentifiers() {\n        return Service.getJson(`search/identifiers/multiples`, {\n            'type_id': this.identifierType\n        })\n    }\n    voidMultipleIdentifiers(identifiers: [any], reasons: string,  idType: number) {\n        const params: any = { identifiers: identifiers, reason: reasons, \"identifier_type\": idType }\n        return Service.void(`void_multiple_identifiers`,  params );\n    }\n}\n"],"sourceRoot":""}