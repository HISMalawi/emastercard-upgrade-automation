{"version":3,"sources":["webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/apps/SPINE/services/patient_registration_service.ts","webpack:///./src/apps/SPINE/views/encounters/Registration.vue","webpack:///./src/apps/SPINE/views/encounters/Registration.vue?143c","webpack:///./src/utils/HisFormHelpers/commons.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["DEFAULT_KEYPAD","PRESCRIPTION_KEYPAD","FLOAT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","NUMBER_ARROW_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","PatientVisitRegistrationService","AppEncounterService","constructor","patientID","providerID","super","_defineComponent","__name","setup","__props","registrationService","patient","fields","ref","goToNextTask","patientDashboardUrl","useEncounter","providerId","patientId","p","value","getVisitTypeField","getReferringFacilityField","getNationalIdAvalailableField","getNationalIdField","getPregnantStatusField","async","onSubmit","formData","computedData","asignNID","encounter","createEncounter","toastWarning","registrationData","resolveObs","registrationObs","saveObservationList","nidAvailable","nid","updateMWNationalId","ApiStore","invalidate","mwIdExists","people","Patientservice","findByOtherID","MALAWI_NATIONAL_ID_TYPE","length","id","helpText","type","FieldType","TT_SELECT","validation","Validation","required","computedValue","v","obs","buildValueCoded","options","label","buildValueText","condition","visit_type","_","filter","getFacilities","config","showKeyboard","isFilterDataViaApi","getMWNationalID","yesNoUnknownOptions","appearInSummary","TT_TEXT","isMWNationalID","national_id_available","beforeNext","field","toString","summaryMapValue","casing","customKeyboard","isChildBearing","_ctx","_cache","_openBlock","_createBlock","HisStandardForm","cancelDestinationPath","_unref","onFinishAction","__exports__","tag","values","Object","d","reduce","accum","cur","data","Array","isArray","concat","push","Promise","all","mapStrToOptions","map","option","mapObjToOptions","other","mapToYesNoOptions","checkedOptions","hasUnknown","_checkedValue$value","checkedValue","find","yesNoOptions","facilities","LocationService","name","f","isEmpty","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id","getVillagesByName","page","getLandmarks","landmarks","landmark","code"],"mappings":"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","file":"js/chunk-7d176896.dbb3fd9f.js","sourcesContent":["export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const PRESCRIPTION_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del', '0', '.'],\n    ['Unknown', '', ''],\n]\nexport const FLOAT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const NUMBER_ARROW_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['←',  '0', '→']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class PatientVisitRegistrationService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 104, providerID) \n    }\n}\n","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { PatientVisitRegistrationService } from \"@/apps/SPINE/services/patient_registration_service\"\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { getFacilities } from '@/utils/HisFormHelpers/LocationFieldOptions';\nimport { toastWarning } from '@/utils/Alerts';\nimport { Patientservice } from '@/services/patient_service';\nimport { MALAWI_NATIONAL_ID_TYPE } from '@/constants';\nimport { CHARACTERS_AND_NUMBERS_LO } from '@/components/Keyboard/KbLayouts';\nimport { ref } from 'vue';\nimport useEncounter from '@/composables/useEncounter';\nimport { resolveObs, yesNoUnknownOptions } from '@/utils/HisFormHelpers/commons';\nimport ApiStore from \"@/composables/ApiStore\";\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'Registration',\n  setup(__props) {\n\nlet registrationService: PatientVisitRegistrationService;\nlet patient: Patientservice;\nconst fields = ref([] as Array<Field>);\n\nconst { goToNextTask, patientDashboardUrl } = useEncounter((providerId, patientId, p) => {\n  patient = p\n  registrationService = new PatientVisitRegistrationService(patientId, providerId);\n  fields.value = [\n    getVisitTypeField(),\n    getReferringFacilityField(),\n    getNationalIdAvalailableField(),\n    getNationalIdField(),\n    getPregnantStatusField(),\n  ]\n});\n\nasync function onSubmit(formData: any, computedData: any) {\n  await asignNID(formData)\n  const encounter = await registrationService.createEncounter()\n  if (!encounter) return toastWarning('Unable to create registration encounter')\n\n  const registrationData = await resolveObs({ ...computedData })\n  const registrationObs = await registrationService.saveObservationList(registrationData)\n  if (!registrationObs) return toastWarning('Unable to save observations')\n\n  goToNextTask()\n}\n\nasync function asignNID(formData: Record<string, any>) {\n  const nidAvailable = formData['national_id_available']\n  const nid = formData['national_id']\n  if (nidAvailable && nidAvailable.value === 'Yes') {\n    await patient.updateMWNationalId(nid.value);\n    ApiStore.invalidate(\"ACTIVE_PATIENT\");\n  }\n}\n\nasync function mwIdExists(nid: string) {\n  if (!nid) return false\n  const people = await Patientservice.findByOtherID(MALAWI_NATIONAL_ID_TYPE, nid)\n  return people.length > 0\n}\n\nfunction getVisitTypeField(): Field {\n  return {\n    id: 'visit_type',\n    helpText: 'Type of visit',\n    type: FieldType.TT_SELECT,\n    validation: (value: any) => Validation.required(value),\n    computedValue: (v: Option) => ({ obs: registrationService.buildValueCoded('Type of visit', v.value) }),\n    options: () => ([\n      { label: 'New', value: 'New patient' },\n      { label: 'Referral', value: 'Referral' },\n      { label: 'Re-visiting', value: 'Re-visiting' },\n    ])\n  }\n}\n\nfunction getReferringFacilityField() {\n  return {\n    id: 'referring_facility_name',\n    helpText: 'Referred from',\n    type: FieldType.TT_SELECT,\n    validation: (value: any) => Validation.required(value),\n    computedValue: ({ label }: Option) => ({ obs: registrationService.buildValueText('Referred from', label) }),\n    condition: (fields: any) => fields.visit_type.value === 'Referral',\n    options: (_: any, filter = '') => getFacilities(filter),\n    config: {\n      showKeyboard: true,\n      isFilterDataViaApi: true\n    }\n  }\n}\n\nfunction getNationalIdAvalailableField() {\n  return {\n    id: 'national_id_available',\n    helpText: 'National ID Available',\n    type: FieldType.TT_SELECT,\n    validation: (value: any) => Validation.required(value),\n    condition: () => patient.getMWNationalID() === 'Unknown',\n    options: () => yesNoUnknownOptions(),\n    appearInSummary: () => false\n  }\n}\n\nfunction getNationalIdField() {\n  return {\n    id: 'national_id',\n    helpText: 'Enter National ID',\n    type: FieldType.TT_TEXT,\n    validation: (value: Option) => Validation.isMWNationalID(value),\n    condition: (fields: any) => fields.national_id_available.value === 'Yes',\n    beforeNext: async (field: Option) => {\n      if (field.value && (await mwIdExists(field.value.toString()))) {\n        toastWarning('National ID already exists')\n        return false\n      }\n      return true\n    },\n    summaryMapValue: ({ value }: Option) => ({\n      value,\n      label: 'National ID'\n    }),\n    config: {\n      casing: 'uppercase',\n      customKeyboard: [CHARACTERS_AND_NUMBERS_LO, [['Delete']]],\n    }\n  }\n}\n\nfunction getPregnantStatusField() {\n  return {\n    id: 'patient_pregnant',\n    helpText: 'Patient pregnant',\n    type: FieldType.TT_SELECT,\n    validation: (value: any) => Validation.required(value),\n    computedValue: ({ value }: Option) => ({ obs: registrationService.buildValueCoded('PATIENT PREGNANT', value) }),\n    condition: () => patient.isChildBearing(),\n    options: () => yesNoUnknownOptions(),\n  }\n}\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createBlock(HisStandardForm, {\n    cancelDestinationPath: _unref(patientDashboardUrl),\n    fields: fields.value,\n    onFinishAction: onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\"]))\n}\n}\n\n})","import script from \"./Registration.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./Registration.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { Option } from \"@/components/Forms/FieldInterface\"\nimport { find } from \"lodash\"\n\nexport function resolveObs(obs: any, tag = '') {\n  const values: any = Object.values(obs)\n    .filter((d: any) => d && (d.tag === tag || tag === ''))\n    .reduce((accum: any, cur: any) => {\n      const data = cur.obs ? cur.obs : cur\n      if (Array.isArray(data)) {\n        accum = accum.concat(data)\n      } else if (typeof data === 'function') {\n        accum.push(data())\n      } else {\n        accum.push(data)\n      }\n      return accum\n    }, [])\n  return Promise.all(values)\n}\n\nexport function mapStrToOptions(options: Array<string>): Array<Option> {\n  return options.map(option => ({ label: option, value: option }));\n}\n\nexport function mapObjToOptions(options: Array<Record<string, any>>, label = \"name\", value = \"name\"): Array<Option> {\n  return options.map(option => ({ label: option[label], value: option[value], other: option }));\n}\n\nexport function mapToYesNoOptions(options: Array<string>, checkedOptions?: Array<Option>, hasUnknown = false) {\n  return options.map(label => {\n    const checkedValue = find(checkedOptions, { label });\n    return {\n      label,\n      value: checkedValue?.value ?? \"\",\n      other: {\n        values: hasUnknown ? yesNoUnknownOptions() : yesNoOptions()\n      }\n    }\n  });\n}\n\nexport function yesNoUnknownOptions() {\n  return mapStrToOptions([\"Yes\", \"No\", \"Unknown\"]);\n}\n\nexport function yesNoOptions() {\n  return mapStrToOptions([\"Yes\", \"No\"]);\n}\n\nexport function toYesNoOption(label: string, other: any={}): Option {\n  return {\n      label,\n      value: '',\n      other: {\n          ...other,\n          values: yesNoOptions()\n      }\n  } \n}","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport async function getVillagesByName(name='a', page=1): Promise<Option[]> {\n    const villages = await LocationService.getVillagesByName(name, page)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport function getLandmarks(): Option[] {\n    const landmarks = [\n        'Catholic Church',\n        'CCAP',\n        'Seventh Day',\n        'Mosque',\n        'Primary School',\n        'Borehole',\n        'Secondary School',\n        'College',\n        'Market',\n        'Football Ground',\n        'Other'\n    ]\n\n    return landmarks.map(landmark =>({\n        label: landmark,\n        value: landmark,\n        other: {\n            code: landmark\n        }\n    }))\n}\n"],"sourceRoot":""}