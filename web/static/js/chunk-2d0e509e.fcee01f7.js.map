{"version":3,"sources":["webpack:///./src/apps/CxCa/views/reports/pepfar/CXCA_SCRN_Report.vue?25a9","webpack:///./src/apps/CxCa/views/reports/pepfar/CXCA_SCRN_Report.vue","webpack:///./src/apps/CxCa/views/reports/pepfar/CXCA_SCRN_Report.vue?cac5"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_ion_loading","_resolveComponent","_component_v2Datatable","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","isLoading","message","title","csvQuarter","subtitle","period","columns","columnData","reportData","rowsPerPage","onConfigure","configure","onRefresh","generate","_","ref","startDate","endDate","defineComponent","components","IonPage","IonLoading","v2Datatable","setup","drilldown","async","patientIdentifiers","modalController","create","component","DrillPatientIds","backdropDismiss","cssClass","componentProps","onFinish","getTop","then","v","dismiss","present","label","span","thRowspan","exportable","thColspan","secondaryLabel","value","data","first_time_screened","negative","length","tdClick","column","age_group","positive","suspected","rescreened_after_prev_visit","post_treatment_followup","toastWarning","report","CxCaReportService","getClinicReport","slice","map","index","gender","aggregateIndicators","indicator","getCounts","statusIndicator","reduce","totals","record","concat","push","e","toastDanger","DateSelection","sDate","eDate","periodstr","toDate","onMounted","__exports__"],"mappings":"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","file":"js/chunk-2d0e509e.fcee01f7.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_loading = _resolveComponent(\"ion-loading\")!\n  const _component_v2Datatable = _resolveComponent(\"v2Datatable\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_ion_loading, {\n        \"is-open\": _ctx.isLoading,\n        message: \"Please wait...\"\n      }, null, 8, [\"is-open\"]),\n      _createVNode(_component_v2Datatable, {\n        title: \"CXCA SCRN Report\",\n        csvQuarter: _ctx.csvQuarter,\n        subtitle: _ctx.period,\n        columns: _ctx.columns,\n        columnData: _ctx.reportData,\n        rowsPerPage: 25,\n        onConfigure: _ctx.configure,\n        onRefresh: () => _ctx.generate()\n      }, null, 8, [\"csvQuarter\", \"subtitle\", \"columns\", \"columnData\", \"onConfigure\", \"onRefresh\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent, ref, onMounted } from 'vue';\nimport { IonPage, IonLoading, modalController } from \"@ionic/vue\"\nimport v2Datatable from \"@/components/DataViews/tables/v2PocDatatable/TableView.vue\"\nimport { v2ColumnDataInterface, v2ColumnInterface } from '@/components/DataViews/tables/v2PocDatatable/types';\nimport { CxCaReportService } from \"@/apps/CxCa/services/reports/cxca_report_service\"\nimport { DateSelection } from \"@/utils/ReportDateSelectionPrompt\"\nimport { toastDanger, toastWarning } from '@/utils/Alerts';\nimport DrillPatientIds from '../../../../../components/DrillPatientIds.vue';\nimport { toDate } from '@/utils/Strs';\n\nconst reportData = ref<any>([])\nconst startDate = ref('')\nconst endDate = ref('')\nconst period = ref('')\nconst isLoading = ref(false)\nconst csvQuarter = ref('')\nexport default defineComponent({\n    components: {\n        IonPage,\n        IonLoading,\n        v2Datatable,\n    },\n    setup() {\n        const drilldown = async (title: string, patientIdentifiers: number[]) => {\n            (await modalController.create({\n                component: DrillPatientIds,\n                backdropDismiss: false,\n                cssClass: 'large-modal',\n                componentProps: {\n                    title,\n                    subtitle: period,\n                    patientIdentifiers,\n                    onFinish: () => modalController.getTop().then(v => v && modalController.dismiss())\n                }\n            })).present()\n        }\n        /**\n         * Table column definition and value mapping\n         */\n        const columns: Array<v2ColumnInterface[]> = [\n            [\n                {\n                    label: \"#\",\n                    ref: \"index\",\n                    span: {\n                        thRowspan: 2\n                    }\n                },\n                {\n                    label: \"Age group\",\n                    ref: \"age_group\",\n                    span: {\n                        thRowspan: 2,\n                    }\n                },\n                {\n                    label: \"Gender\",\n                    ref: \"gender\",\n                    exportable: false,\n                    span: {\n                        thRowspan: 2\n                    }\n                },\n                {\n                    label: \"1st time screened\",\n                    ref: \"\",\n                    span: {\n                        thColspan: 3\n                    }\n                },\n                {\n                    label: \"Rescreened after previous negative\",\n                    ref: \"\",\n                    span: {\n                        thColspan: 3\n                    }\n                },\n                {\n                    label: \"Post-treatment follow-up\",\n                    ref: \"\",\n                    span: {\n                        thColspan: 3\n                    }\n                }\n            ],\n            [\n                {\n                    label: \"Negative\",\n                    ref: 'first_time_screened_negative',\n                    secondaryLabel: \"1st screened (Negative)\",\n                    value: (data: any) => data.first_time_screened.negative.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.first_time_screened.negative\n                    )\n                },\n                {\n                    label: \"Positive\",\n                    ref: 'first_time_screened_positive',\n                    secondaryLabel: \"1st time screened (Positive)\",\n                    value: (data: any) => data.first_time_screened.positive.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.first_time_screened.positive\n                    )\n                },\n                {\n                    label: \"Suspected Cancer\",\n                    ref: 'first_time_screened_suspected_cancer',\n                    secondaryLabel: \"1st screened(Suspected cancer)\",\n                    value: (data: any) => data.first_time_screened.suspected.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.first_time_screened.suspected\n                    )\n                },\n                {\n                    label: \"Negative\",\n                    ref: 'rescreened_after_prev_visit_negative',\n                    secondaryLabel: \"Rescreen after prev visit (Negative)\",\n                    value: (data: any) => data.rescreened_after_prev_visit.negative.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.rescreened_after_prev_visit.negative\n                    )\n                },\n                {\n                    label: \"Positive\",\n                    ref: 'rescreened_after_prev_visit_positive',\n                    secondaryLabel: \"Rescreen after prev visit (Positive)\",\n                    value: (data: any) => data.rescreened_after_prev_visit.positive.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.rescreened_after_prev_visit.positive\n                    )\n                },\n                {\n                    label: \"Suspected cancer\",\n                    ref: 'rescreened_after_prev_visit_suspected',\n                    secondaryLabel: \"Rescreen after prev visit (Suspected)\",\n                    value: (data: any) => data.rescreened_after_prev_visit.suspected.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.rescreened_after_prev_visit.suspected\n                    )\n                },\n                {\n                    label: \"Negative\",\n                    ref: 'post_treatment_followup_negative',\n                    secondaryLabel: \"Post-treatment followup(Negative)\",\n                    value: (data: any) => data.post_treatment_followup.negative.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.post_treatment_followup.negative\n                    )\n                },\n                {\n                    label: \"Positive\",\n                    ref: \"post_treatment_followup_positive\",\n                    secondaryLabel: \"Post-treatment followup (Positive)\",\n                    value: (data: any) => data.post_treatment_followup.positive.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.post_treatment_followup.positive\n                    )\n                },\n                {\n                    label: \"Suspected cancer\",\n                    ref: \"post_treatment_followup_suspected\",\n                    secondaryLabel: \"Post-treatment followup (Suspected)\",\n                    value: (data: any) => data.post_treatment_followup.suspected.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.post_treatment_followup.suspected\n                    )\n                }\n            ]\n        ]\n\n        /**\n         * Generates report by start date and end date\n         */\n        const generate = async () => {\n            if (!(startDate.value && endDate.value)) return toastWarning('Start date and end date required!')\n            isLoading.value = true\n            reportData.value = []\n            const report = new CxCaReportService()\n            report.startDate = startDate.value\n            report.endDate = endDate.value\n            try {\n                reportData.value = (await report.getClinicReport('CXCA SCRN'))                    \n                    .slice(5)\n                    .map((data: any, index: any) => {\n                        data.index = index + 1\n                        data.gender = \"Female\"\n                        return data\n                    })\n                const aggregateIndicators = (indicator: \n                    'first_time_screened' |\n                    'post_treatment_followup' | \n                    'rescreened_after_prev_visit') => {\n                        const getCounts = (statusIndicator: 'positive' | 'negative' | 'suspected') => {\n                            return reportData.value.reduce((totals: any, record: any) => {\n                                return totals.concat(record[indicator][statusIndicator] || [])\n                            }, [])\n                        }\n                        return {\n                            positive: getCounts('positive'),\n                            negative: getCounts('negative'),\n                            suspected: getCounts('suspected')\n                        }\n                }\n                reportData.value.push({ \n                    age_group : 'All',\n                    gender: 'Female',\n                    index: reportData.value.length + 1,\n                    first_time_screened: aggregateIndicators('first_time_screened'),\n                    post_treatment_followup: aggregateIndicators('post_treatment_followup'),\n                    rescreened_after_prev_visit: aggregateIndicators('rescreened_after_prev_visit')\n\n                })\n            } catch (e) {\n                toastDanger(\"Unable to generate report!\")\n            }\n            isLoading.value = false\n        }\n\n        /**\n         * Loads a dialogue to allow users to configure start and end date\n         */\n        const configure = () => DateSelection({\n            onFinish: (sDate: string, eDate: string, periodstr: string) => {\n                startDate.value = sDate\n                endDate.value = eDate\n                period.value = `Period (${periodstr})`\n                csvQuarter.value = `${toDate(startDate.value)} to ${toDate(endDate.value)}`\n                generate()\n            }\n        })\n\n        /**\n         * Initialization code when the report is empty!\n         */\n        onMounted(() => !reportData.value.length && configure())\n\n        return {\n            columns,\n            isLoading,\n            reportData,\n            period,\n            csvQuarter,\n            generate,\n            configure\n        }\n    }\n})\n","import { render } from \"./CXCA_SCRN_Report.vue?vue&type=template&id=b3e06f92&ts=true\"\nimport script from \"./CXCA_SCRN_Report.vue?vue&type=script&lang=ts\"\nexport * from \"./CXCA_SCRN_Report.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}