{"version":3,"sources":["webpack:///./src/services/drug_order_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/apps/ANC/Services/anc_treatment_service.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ANC/Views/Encounters/TTV.vue?7801","webpack:///./src/apps/ANC/Services/anc_dispensing_service.ts","webpack:///./src/apps/ANC/Views/Encounters/TTV.vue","webpack:///./src/apps/ANC/Views/Encounters/TTV.vue?0c1a"],"names":["DrugOrderService","Service","constructor","super","orders","this","postJson","getProgramID","dispensations","map","order","getSessionDate","patientID","getJson","pageSize","drugID","date","params","patientId","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","providerID","facts","ready","watch","handler","route","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","e","console","error","toastDanger","ProgramService","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","DRUG_FREQUENCIES","AncTreatmentService","AppEncounterService","ttvDrugObj","dispensed","dispenseTTV","orderID","order_id","updateDispensationOrders","createOrders","create","getEncounterID","drugs","createEncounter","o","buildDrugOrderObj","dispensation","forEach","quantity","frequency","duration","drug_inventory_id","id","drug","Date","expiryDate","setDate","getDate","dose","dailyEquivalentDose","parseFloat","toStandardHisFormat","drug_name","units","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","_component_his_standard_form","_resolveComponent","_component_ion_page","_withCtx","_createVNode","formFields","_","AncDispensationService","saveNoDispensationObs","saveValueTextObs","IonPage","mixins","EncounterMixinVue","service","getFields","f","helpText","FieldType","TT_YES_NO","validation","v","computedValue","match","updateTTvOrder"],"mappings":"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","file":"js/chunk-5d9db78a.4907ee4b.js","sourcesContent":["import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/mary/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { find, isEmpty } from \"lodash\";\nimport HisDate from \"@/utils/Date\"\n\nexport interface AncTreatmentDrugObject {\n    'id': number;\n    'drug_name': string;\n    'dose': string;\n    'duration': number;\n    'frequency': string;\n    'units': string;\n}\n\nexport const DRUG_FREQUENCIES: Record<string, number> = { \n    'Once a day (OD)' : 1,\n    'Twice a day (BD)': 2,\n    'Three a day (TDS)': 3,\n    'Four times a day (QID)' : 4,\n    'Five times a day (5X/D)' : 5,\n    'Six times a day (Q4HRS)' : 6,\n    'In the morning (QAM)' : 0.5,\n    'Once a week (QWK)' : 0.14,\n    'Once a month' : 0.03,\n    'Twice a month' : 0.071\n}\n\nexport class AncTreatmentService extends AppEncounterService {\n    constructor(patientID: number, providerID: number){\n        super(patientID, 25, providerID)\n    }\n\n    ttvDrugObj() {\n        return {\n            'drug_inventory_id': 609,\n            'dose': 0.5,\n            'equivalent_daily_dose': 0.5,\n            'frequency': \"Once a day (od)\",\n            'start_date': this.date,\n            'auto_expire_date': this.date,\n            'instructions': \"Once a day\",\n            'units': \"ml\"\n        }\n    }\n\n    async updateTTvOrder() {\n        const dispensed = await this.dispenseTTV()\n        if (!isEmpty(dispensed)) {\n            const orderID = dispensed[0].order_id\n            return DrugOrderService.updateDispensationOrders([{'order_id': orderID, 'quantity' : 1}])\n        }\n        throw 'Unable to dispense'\n    }\n\n    dispenseTTV() {\n        return this.createOrders([this.ttvDrugObj()])\n    }\n\n    createOrders(orders: any) {\n        return DrugOrderService.create({\n            'drug_orders': orders,\n            'encounter_id': this.getEncounterID(),\n        })\n    }\n\n    async submitTreatment(drugs: AncTreatmentDrugObject[]) {\n        await this.createEncounter()\n        const orders = await this.createOrders(drugs.map(o => this.buildDrugOrderObj(o)))\n        const dispensation = new AppEncounterService(this.patientID, 54, this.providerID)\n        await dispensation.createEncounter()\n        drugs.forEach(o => {\n            const quantity: number = DRUG_FREQUENCIES[o.frequency] * o.duration\n            orders.forEach((order: any) => { \n                if (order.drug_inventory_id === o.id) {\n                    order.quantity = quantity\n                }\n            })\n        })\n        await DrugOrderService.updateDispensationOrders(orders)\n    }\n\n    buildDrugOrderObj(drug: AncTreatmentDrugObject) {\n        const startDate = new Date(this.date)\n        const expiryDate = startDate.setDate(startDate.getDate() + parseInt(`${drug.duration}`))\n        const dose: any = drug.dose || DRUG_FREQUENCIES[drug.frequency]\n        const dailyEquivalentDose =  parseFloat(dose) * DRUG_FREQUENCIES[drug.frequency] \n        return {\n            'drug_inventory_id': drug.id,\n            'dose': dose,\n            'equivalent_daily_dose': dailyEquivalentDose,\n            'frequency': drug.frequency,\n            'start_date': this.date,\n            'auto_expire_date': HisDate.toStandardHisFormat(new Date(expiryDate)),\n            'instructions': drug.drug_name + ':' + drug.dose + ' ' + drug.units + ' ' + drug.frequency + 'days',\n            'units': drug.units\n        }\n    }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.formFields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\n\nexport class AncDispensationService extends AppEncounterService {\n    constructor(patientID: number, providerID: number){\n        super(patientID, 54, providerID)\n    }\n\n    saveNoDispensationObs() {\n        return this.saveValueTextObs(\n            'Tetanus toxoid vaccine', 'Not dispensed'\n        )\n    }\n\n}\n","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { AncDispensationService} from \"@/apps/ANC/Services/anc_dispensing_service\"\nimport { AncTreatmentService } from \"@/apps/ANC/Services/anc_treatment_service\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { IonPage } from \"@ionic/vue\"\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    formFields: [] as any,\n    service: {} as any\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.formFields = this.getFields()\n        }\n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(f: any, computedData: any) {\n      await computedData['prescription'].action()\n      this.nextTask()\n    },\n    getFields() {\n      return [\n        {\n          id: 'prescription',\n          helpText: 'Prescription',\n          type: FieldType.TT_YES_NO,\n          validation: (v: string) => !v ?  ['Value is required'] : null,\n          computedValue: (v: string) => {\n            if (v.match(/true/i)) {\n              return {\n                action: async () => {\n                  const service = new AncTreatmentService(this.patientID, this.providerID)\n                  await service.createEncounter()\n                  await service.updateTTvOrder()\n                }\n              }\n            }\n            return {\n              action: async () => {\n                const service = new AncDispensationService(this.patientID, this.providerID)\n                await service.createEncounter()\n                await service.saveNoDispensationObs()\n              }\n            }\n          },\n          options: () => ([\n            {\n              label: 'TTV has been given today',\n              values: [\n                {\n                  label: \"yes\",\n                  value: \"true\"\n                },\n                {\n                  label: \"no\",\n                  value: \"false\"\n                }\n              ]\n            }\n          ])\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./TTV.vue?vue&type=template&id=4420df94&ts=true\"\nimport script from \"./TTV.vue?vue&type=script&lang=ts\"\nexport * from \"./TTV.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/mary/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}