{"version":3,"sources":["webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/apps/ART/services/stock_service.ts","webpack:///./src/apps/ART/services/dispensation_service.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/apps/ART/views/encounters/Consultation.vue?f692","webpack:///./src/components/DataViews/VLReminderModal.vue?3776","webpack:///./src/components/DataViews/VLReminderModal.vue","webpack:///./src/components/DataViews/VLReminderModal.vue?a14d","webpack:///./src/apps/ART/services/lab_service.ts","webpack:///./src/components/DataViews/SideEffectsModal.vue?e8f1","webpack:///./src/components/DataViews/SideEffectsModal.vue","webpack:///./src/components/DataViews/SideEffectsModal.vue?d5c5","webpack:///./src/apps/ART/views/encounters/Consultation.vue","webpack:///./src/apps/ART/views/encounters/Consultation.vue?3980","webpack:///./src/services/regimen_service.ts","webpack:///./src/services/drug_order_service.ts","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts","webpack:///./src/components/DataViews/VLReminderModal.vue?947f","webpack:///./src/apps/ART/services/prescription_service.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts","webpack:///./src/components/DataViews/SideEffectsModal.vue?ca65"],"names":["DEFAULT_KEYPAD","PRESCRIPTION_KEYPAD","FLOAT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","StockService","Service","constructor","super","drugId","stock","this","getJson","length","reduce","accum","pharm","current_quantity","DRUG_PACK_SIZES","DispensationService","AppEncounterService","patientID","providerID","drugHistory","currentDrugOrder","useDrugManagement","setIsDrugManagementEnabled","isEnabled","ART_PROP","drugManagementEnabled","getDrugHistory","getCurrentOrder","buildDispensations","orderId","tabs","totalPacks","dispensations","i","push","date","quantity","saveDispensations","postJson","getProgramID","void","DrugOrderService","getDrugOrderHistory","e","console","warn","getDrugOrders","order","fetchAvailableDrugStock","drug","drug_id","getDrugPackSizes","calcCompletePack","units","drugOrderBarcodes","barcodes","sort","a","b","parseInt","completePack","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","_component_ion_title","_component_ion_toolbar","_component_ion_header","_component_ion_content","_component_ion_button","_component_ion_footer","_createElementBlock","_Fragment","_createVNode","default","_withCtx","_createTextVNode","_","style","overflowY","background","_createElementVNode","_toDisplayString","artStartDate","monthsOnART","lastOrder","currentRegimen","regimenStartDate","slot","color","size","onClick","$event","closeModal","defineComponent","name","props","VLData","type","Object","required","HisDate","toStandardHisDisplayFormat","earliest_start_date","period_on_art","last_order_date","current_regimen","date_started","methods","val","modalController","dismiss","data","content","components","IonHeader","IonToolbar","IonTitle","IonContent","IonFooter","IonButton","__exports__","ARTLabService","milestone","concept","getConceptID","coded","_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_1","_hoisted_2","class","_hoisted_3","_hoisted_4","_hoisted_5","_component_ion_label","_component_ion_item","_component_ion_list","_component_ion_col","_component_ion_radio","_component_ion_radio_group","_component_ion_row","_component_ion_grid","height","_renderList","sides","index","key","selectSideEffect","detail","_normalizeStyle","activeIndex","label","modelValue","drugs","value","drug_inventory_id","_createCommentVNode","postSideEffects","disabled","allSelected","sideEffects","Array","computed","filter","side","mounted","extendedLabsEnabled","appActivities","specimens","reasons","IonLabel","IonList","IonItem","IonRadioGroup","IonRow","mixins","AdherenceMixinVue","HisStandardForm","currentWeight","weightTrail","customRegimens","labOrders","weightLossPercentageNum","lostTenPercentBodyWeight","CxCaEnabled","CxCaStartAge","CxCaMaxAge","DueForCxCa","currentlyPregnant","currentlyBreastfeeding","patientHitMenopause","hasPregnancyObsToday","autoSelect3HP","labOrderFieldContext","consultation","prescription","dispensation","completed3HP","hasTbHistoryObs","allergicToSulphur","TBSuspected","presentedTBSymptoms","askAdherence","lastDrugsReceived","sideEffectsHistory","onPermanentFPMethods","reasonForDecliningTPTObs","malawiSideEffectReasonObs","otherSideEffectReasonObs","wasTransferredIn","dateStartedArt","clientHadAHysterectomy","isNoneClientPatient","tptStatus","customDrugs","CxCaAppointDate","hasTbTreatmentDate","isEligibleForTpt","watch","ready","handler","ConsultationService","PrescriptionService","getFields","immediate","f","computedData","encounter","createEncounter","toastWarning","computedObs","resolveObs","secondaryObs","Promise","all","d","isEmpty","savedObs","saveObservationList","drugObs","saveAdherence","toastSuccess","refer_to_clinician","gotoPatientDashboard","nextTask","formData","drugFilters","tptHistory","routine_tb_therapy","RegimenService","getCustomIngridients","match","includes","map","other","receivedArvs","getFirstValueCoded","transferLetterObs","getFirstObs","toStandardHisFormat","obs_datetime","value_coded","getDate","dateStarted","getFirstValueDatetime","action","infoActionSheet","vals","ProgramService","getPatientVLInfo","eligibile","modal","create","component","VLReminderModal","backdropDismiss","cssClass","componentProps","present","onDidDismiss","launchOrderSelection","waitForVL","orderService","observations","buildDefferedOrder","canScreenCxCa","age","patient","getAge","isFemale","pregnancyEligible","isChildBearing","showCurrentContraceptionMethods","isPregnant","isANCclient","showNewContraceptionMethods","isOnTubalLigation","pregnant_breastfeeding","inArray","p","isBreastFeeding","current_fp_methods","listData","isChecked","infoAlert","noneIndex","findIndex","familyPlanningMethods","currentIndex","disablePrescriptions","buildMedicationOrders","options","o","buildValueCoded","priscribed","medications","declinedFPM","fp_methods","riskOfUnplannedPregnancy","reason_for_no_fpm","showOtherSideEffects","side_effects","hasTBSymptoms","tb_side_effects","isTBSuspect","toString","isAllergicToSulphur","attr","sideEffectReasons","getSideEffectsReasons","undefined","drugInducedConcept","ConceptService","getCachedConceptID","isOtherReason","reason","r","allYes","s","SideEffectsModalVue","getFPMethods","exclusionList","preChecked","getFamilyPlanningMethods","filtered","method","getOptions","preValues","preValue","find","values","yesNoOptions","getContraindications","contraIndications","getConceptsByCategory","getOtherContraindications","lastElement","pop","getTBSymptoms","getReasonsForNoCxcaOptions","c","runAppendOptionParams","prechecked","checkedOptions","appendOptionParams","appendedOptions","option","didCompleted3HP","patientOnTpt","test","tpt","tptAutoSelectionMode","curOption","is3HPorTPT","ipt3HPConflict","checkedDrugs","item","noTpTPresent","every","Boolean","optionsActionSheet","role","buildValueText","selection","medicationOrderOptions","completedTpt","everTakenTpt","isCurrentlyBreastfeeding","disableOption","text","description","show","toOption","tb_treatment","completed","OrderService","formatLabs","Store","get","getSuspendedProgram","id","proxyID","helpText","FieldType","TT_MULTIPLE_SELECT","init","async","isGuardian","getClient","PatientTypeService","isDrugRefillPatient","Number","getRecentWeight","getTptTreatmentStatus","beforeNext","v","some","alertConfirmation","validation","Validation","computedValue","tag","obs","onValueUpdate","list","on3HPValueUpdate","cd","l","condition","exitsForm","generateDateFields","getTransferInStatus","getDateStartedArt","minDate","maxDate","computeValue","setDate","buildValueDate","estimation","allowUnknown","getARVs","config","showKeyboard","TT_NEXT_VISIT_INTERVAL_SELECTION","nextAppointment","intervals","setNextVisitInterval","calculateDateFromInterval","TT_DRUG_TRANSFER_IN","validateSeries","pillsBrought","drugID","buildObs","drug_interval","child","date_last_received_arvs","previous_arvs_received","drugName","prevValue","qty","rmndr","TT_LAB_ORDERS","getVlLabData","unload","checkVLReminder","noGivenResults","result_given","enc","result","resultIds","encounterID","encounter_id","saveObs","resultID","onload","fieldContext","printOrder","orderID","PatientPrintoutService","printLabOrderLbl","hiddenFooterBtns","footerBtns","visible","isBreastfeeding","getTLObs","TT_MULTIPLE_YES_NO","anyEmpty","concat","TT_WEIGHT_CHART","getWeightHistory","getWeightLossPercentageFromTrail","bmi","getBMI","x","y","weight","TT_TEXT_BANNER","mapStrToOptions","disableFPMethods","checked","TT_SELECT","offer_contraceptives","cervicalCancerScreeningEnabled","start","end","cervicalCancerScreeningAgeBounds","clientDueForCxCa","clientHasHadAHysterectomy","ONE_MONTH","dateDiffInDays","appointment_date","offer_cxca","getBirthdate","getSessionDate","reason_for_no_cxca","isEstimate","buildValueDateEstimated","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","TT_DATA_TABLE","getDrugSideEffects","columns","table","thTxt","rows","keys","k","tdDate","td","drug_induced","cur","getPreviousDrugs","buildSideEffectObs","onValue","checkIfWeightLossIsControlled","onConditionFalse","TT_NOTE","other_side_effects","TT_YES_NO","startDate","tbPeriod","getFirstValueNumber","timeElapse","dayjs","diff","on_tb_treatment","tb_date_started_treatment_known","TT_NUMBER","isNumber","rangeOf","buildValueNumber","defaultValue","hasTreatmentHistoryObs","TT_ADHERENCE_INPUT","getTptDrugs","date_started_tpt","titles","getFacilities","isFilterDataViaApi","log","yesNoUnknownOptions","getAdherenceFields","UserService","isNurse","currentOptions","onClickComponentEvents","refreshOptions","btnEvent","btnOutput","patientId","onTbTreatment","orders","pageSize","params","getYearField","showUnknown","primaryFunctions","appearInSummary","TT_TEXT","customKeyboard","getMonthField","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","keypad","appendLeadingZero","getDefaultDate","form","field","datePart","year","month","day","split","validateMinMax","min","Date","max","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","buildHelpTextDate","part","parts","partValues","dpart","wl","join","updateHelpTextOnValue","StandardValidations","isNaN","minYear","getYear","summaryMapValue","summaryLabel","ref","keyboardActions","valueEstimateCondition","estimateType","conditions","ageEstimateRegex","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","AdverseEffectsCategories","nextVisitInterval","fastTrack","regimenExtras","fastTrackMedications","hangingPills","medicationOrders","treatmentState","contraindications","tptPrescriptionCount","lastSideEffectDate","getHangingPills","getMedicationOrders","getCachedConceptName","getTptPrescriptionCount","getLastSideEffectDate","getSideEffects","getRegimenExtras","getPatientRegimens","getRegimens","getFastTrackMedications","getTreatmentState","isFastTrack","medicationOrdersAvailable","shouldPrescribeArvs","arvs","shouldPrescribeExtras","extras","extrasAvailable","concept_id","getRegimenStarterpack","regimenCode","patientWeight","regimen","contraindication","getObs","forEach","drugInduced","value_drug","res","count","yes","meds","pills","getAll","value_numeric","toDate","drug_order","getLastDrugsReceived","withDosages","dosage","getDrugDosages","am","noon","pm","frequency","req","findAndGroupDrugSideEffects","allSideEffects","calculatePillsPerDay","parseFloat","estimatePackSize","pillsPerDay","packSize","packs","roundedPacks","Math","round","calculateDosage","morningTabs","eveningTabs","dose","calculateEquivalentDosage","dateObj","getDrugPackSize","pack_size","getInstructions","toOrderObj","getFirstValueText","drugOrders","response","saveValueTextObs","reasonForSwitch","facilities","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id","getVillagesByName","page","getLandmarks","landmarks","landmark","code"],"mappings":"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","file":"js/chunk-9ad943b8.9b076430.js","sourcesContent":["export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const PRESCRIPTION_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del', '0', '.'],\n    ['Unknown', '', ''],\n]\nexport const FLOAT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","import { Service } from \"@/services/service\";\n\nexport class StockService extends Service {\n    constructor() {\n        super()\n    }\n\n    static async fetchAvailableDrugStock(drugId: number) {\n        const stock = await this.getJson('pharmacy/items', { 'drug_id': drugId })\n        if (stock && stock.length > 0) {\n            return stock.reduce((accum: number, pharm: any) => accum + pharm.current_quantity, 0);\n        }\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { StockService } from \"./stock_service\";\nimport ART_PROP from '@/apps/ART/art_global_props';\n// ripped from old ART system\nexport const DRUG_PACK_SIZES: Record<string, any> = {\n    '11': [ 30 ],\n    '21': [ 25 ],\n    '22': [ 60 ],\n    '24': [ 30, 60, 90, 100 ],\n    '30': [ 90 ],\n    '39': [ 60 ],\n    '73': [ 120 ],\n    '74': [ 60 ],\n    '76': [ 1000 ],\n    '297': [ 30, 60, 90 ],\n    '576': [ 30, 60, 90 ],\n    '613': [ 60 ],\n    '731': [ 60 ],\n    '732': [ 60 ],\n    '733': [ 60 ],\n    '734': [ 30 ],\n    '735': [ 30 ],\n    '736': [ 60 ],\n    '738': [ 60 ],\n    '931': [ 12, 30, 60 ],\n    '932': [ 30 ],\n    '954': [ 60 ],\n    '963': [ 30, 60, 90 ],\n    '968': [ 60 ],\n    '969': [ 30 ],\n    '971': [ 30,60,90 ],\n    '976': [ 60 ],\n    '977': [ 30 ],\n    '982': [ 30 ],\n    '983': [ 30, 90 ],\n    '1039': [ 30,60,90 ],\n    '1043': [ 60 ],\n    '1044': [ 30],\n    '1056': [ 24 ],\n    '1216': [3, 6, 8, 12]\n}\n\nexport class DispensationService extends AppEncounterService {\n    drugHistory: Array<any>;\n    currentDrugOrder: Array<any>;\n    useDrugManagement: boolean; \n    constructor(patientID: number, providerID: number) {\n        super(patientID, 54, providerID)\n        this.drugHistory = []\n        this.currentDrugOrder = []\n        this.useDrugManagement = false\n    }\n\n    setIsDrugManagementEnabled(isEnabled: boolean) {\n        this.useDrugManagement = isEnabled\n    }\n\n    async loadDrugManagementEnabled() {\n        this.useDrugManagement = await ART_PROP.drugManagementEnabled()\n    }\n\n    getDrugHistory() {\n        return this.drugHistory\n    }\n\n    getCurrentOrder() {\n        return this.currentDrugOrder\n    }\n\n    buildDispensations(orderId: number, tabs: number, totalPacks: number) {\n        const dispensations = []\n        for(let i=0; i < totalPacks; i++) {\n            dispensations.push({\n                'drug_order_id': orderId,\n                date: this.date,\n                quantity: (tabs / totalPacks)\n            })\n        }\n        return dispensations\n    }\n\n    saveDispensations(dispensations: Array<any>) {\n        return AppEncounterService.postJson('/dispensations', { \n            dispensations, \n            'program_id': AppEncounterService.getProgramID()\n        })\n    }\n\n    async voidOrder(orderId: number) {\n        return AppEncounterService.void(`/dispensations/${orderId}`, {})\n    }\n\n    async loadDrugHistory() {\n        try {\n            this.drugHistory = (await DrugOrderService.getDrugOrderHistory(this.patientID))||[]\n        } catch (e) {\n            console.warn(e)\n        }\n    }\n\n    async loadCurrentDrugOrder() {\n        this.currentDrugOrder = (await DrugOrderService.getDrugOrders(this.patientID))||[]\n        if (!this.useDrugManagement) return\n        for(const order of this.currentDrugOrder) {\n            order['available_stock'] = await StockService.fetchAvailableDrugStock(order.drug.drug_id)\n        }\n    }\n\n    getDrugPackSizes(drugId: number) {\n        if (drugId in DRUG_PACK_SIZES) {\n            return DRUG_PACK_SIZES[drugId]\n        }\n        return [30, 60, 90]\n    }\n\n    // Ripped from old ART system for backwards compatibility purposes\n    calcCompletePack(drug: any, units: number) {\n        //sorting in an ascending order by tabs\n        const drugOrderBarcodes = drug.barcodes.sort((a: any, b: any) => a.tabs - b.tabs); \n        if (drugOrderBarcodes.length == 0 || units == 0.0) return units;\n        for (const i in drugOrderBarcodes) {\n            const { tabs } = drugOrderBarcodes[i]\n            if (parseInt(tabs) >= units) return tabs;\n        }\n        const completePack = parseInt(drugOrderBarcodes[drugOrderBarcodes.length - 1].tabs)\n        return completePack\n    }\n}\n","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_title = _resolveComponent(\"ion-title\")!\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")!\n  const _component_ion_header = _resolveComponent(\"ion-header\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_ion_button = _resolveComponent(\"ion-button\")!\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createVNode(_component_ion_header, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_title, null, {\n              default: _withCtx(() => [\n                _createTextVNode(\"VL milestone has been reached\")\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_content, { style: { overflowY: 'hidden', background: 'grey' } }, {\n      default: _withCtx(() => [\n        _createElementVNode(\"p\", null, \"ART start date : \" + _toDisplayString(_ctx.artStartDate), 1),\n        _createElementVNode(\"p\", null, \"Months on ART: \" + _toDisplayString(_ctx.monthsOnART), 1),\n        _createElementVNode(\"p\", null, \"Last VL order date \" + _toDisplayString(_ctx.lastOrder), 1),\n        _createElementVNode(\"p\", null, \"Current regimen / start date: \" + _toDisplayString(_ctx.currentRegimen) + \" - \" + _toDisplayString(_ctx.regimenStartDate), 1)\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_footer, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_button, {\n              slot: \"end\",\n              color: \"success\",\n              size: \"large\",\n              onClick: _cache[0] || (_cache[0] = ($event: any) => (_ctx.closeModal('order')))\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Order VL\")\n              ]),\n              _: 1\n            }),\n            _createVNode(_component_ion_button, {\n              slot: \"end\",\n              size: \"large\",\n              onClick: _cache[1] || (_cache[1] = ($event: any) => (_ctx.closeModal('wait')))\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Wait till next milestone\")\n              ]),\n              _: 1\n            }),\n            _createVNode(_component_ion_button, {\n              slot: \"start\",\n              color: \"danger\",\n              size: \"large\",\n              onClick: _cache[2] || (_cache[2] = ($event: any) => (_ctx.closeModal('later')))\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Remind me later \")\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    })\n  ], 64))\n}","\nimport {\n  IonContent,\n  IonButton,\n  IonHeader,\n  IonTitle,\n  IonToolbar,\n  modalController,\n  IonFooter\n} from \"@ionic/vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport HisDate from \"@/utils/Date\";\n\nexport default defineComponent({\n  name: \"Modal\",\n  props: {\n    VLData: {\n      type: Object as any,\n      required: true\n    },\n    \n  },\n  async created() {\n    this.artStartDate = HisDate.toStandardHisDisplayFormat(this.VLData.earliest_start_date);\n    this.monthsOnART = this.VLData.period_on_art;\n    this.lastOrder = this.VLData.last_order_date ? HisDate.toStandardHisDisplayFormat(this.VLData.last_order_date) : 'N/A';\n    this.currentRegimen = this.VLData.current_regimen.name ? this.VLData.current_regimen.name : 'Other';\n    this.regimenStartDate = HisDate.toStandardHisDisplayFormat(this.VLData.current_regimen.date_started);\n  },\n  methods: {\n   async closeModal(val: string) {\n    await modalController.dismiss(val);\n   } \n  },\n  data() {\n    return {\n      content: \"Content\",\n      artStartDate: \"\",\n      monthsOnART: \"\",\n      lastOrder: \"\",\n      currentRegimen: \"\",\n      regimenStartDate: \"\" \n    };\n  },\n  components: {\n    IonHeader,\n    IonToolbar,\n    IonTitle,\n    IonContent,\n    IonFooter,\n    IonButton,\n  },\n});\n","import { render } from \"./VLReminderModal.vue?vue&type=template&id=10a26cd2&scoped=true&ts=true\"\nimport script from \"./VLReminderModal.vue?vue&type=script&lang=ts\"\nexport * from \"./VLReminderModal.vue?vue&type=script&lang=ts\"\n\nimport \"./VLReminderModal.vue?vue&type=style&index=0&id=10a26cd2&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-10a26cd2\"]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nexport class ARTLabService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 13, providerID);\n  }\n  async buildDefferedOrder(milestone: any) {\n    const concept = await AppEncounterService.getConceptID(\"HIV viral load\");\n    const coded = await AppEncounterService.getConceptID(\"Delayed milestones\");\n\n    return [\n      {\n        'concept_id': concept,\n        'value_text': \"Wait till next milestone\",\n        'value_coded': coded,\n        'value_numeric': milestone,\n      }]\n  }\n}","import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, createBlock as _createBlock, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-546674a2\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { style: {} }\nconst _hoisted_2 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"side-title\" }, \" Select reason \", -1))\nconst _hoisted_3 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Current Medication\", -1))\nconst _hoisted_4 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Previous Medication\", -1))\nconst _hoisted_5 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_title = _resolveComponent(\"ion-title\")!\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")!\n  const _component_ion_header = _resolveComponent(\"ion-header\")!\n  const _component_ion_label = _resolveComponent(\"ion-label\")!\n  const _component_ion_item = _resolveComponent(\"ion-item\")!\n  const _component_ion_list = _resolveComponent(\"ion-list\")!\n  const _component_ion_col = _resolveComponent(\"ion-col\")!\n  const _component_ion_radio = _resolveComponent(\"ion-radio\")!\n  const _component_ion_radio_group = _resolveComponent(\"ion-radio-group\")!\n  const _component_ion_row = _resolveComponent(\"ion-row\")!\n  const _component_ion_grid = _resolveComponent(\"ion-grid\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_ion_button = _resolveComponent(\"ion-button\")!\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createVNode(_component_ion_header, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_title, null, {\n              default: _withCtx(() => [\n                _createTextVNode(\"Side effects suspected causes\")\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_content, { style: { overflowY: 'hidden', background: 'grey' } }, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_grid, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_row, null, {\n              default: _withCtx(() => [\n                _createVNode(_component_ion_col, { size: \"4\" }, {\n                  default: _withCtx(() => [\n                    _createVNode(_component_ion_list, { style: {overflowY: 'auto', height:'78vh'} }, {\n                      default: _withCtx(() => [\n                        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.sides, (data, index) => {\n                          return (_openBlock(), _createBlock(_component_ion_item, {\n                            key: data,\n                            onClick: ($event: any) => (_ctx.selectSideEffect(index)),\n                            detail: true,\n                            style: _normalizeStyle(_ctx.activeIndex === index ? 'color: green': 'color: black')\n                          }, {\n                            default: _withCtx(() => [\n                              _createVNode(_component_ion_label, null, {\n                                default: _withCtx(() => [\n                                  _createTextVNode(_toDisplayString(data.label), 1)\n                                ]),\n                                _: 2\n                              }, 1024)\n                            ]),\n                            _: 2\n                          }, 1032, [\"onClick\", \"style\"]))\n                        }), 128))\n                      ]),\n                      _: 1\n                    })\n                  ]),\n                  _: 1\n                }),\n                _createVNode(_component_ion_col, { style: {overflowY: 'auto', height:'78vh'} }, {\n                  default: _withCtx(() => [\n                    _createElementVNode(\"div\", _hoisted_1, [\n                      _createVNode(_component_ion_list, null, {\n                        default: _withCtx(() => [\n                          (_ctx.activeIndex !== null)\n                            ? (_openBlock(), _createBlock(_component_ion_radio_group, {\n                                key: 0,\n                                modelValue: _ctx.sides[_ctx.activeIndex]['reason'],\n                                \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((_ctx.sides[_ctx.activeIndex]['reason']) = $event))\n                              }, {\n                                default: _withCtx(() => [\n                                  _hoisted_2,\n                                  _hoisted_3,\n                                  (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.drugs, (drug, i) => {\n                                    return (_openBlock(), _createBlock(_component_ion_item, { key: i }, {\n                                      default: _withCtx(() => [\n                                        _createVNode(_component_ion_label, null, {\n                                          default: _withCtx(() => [\n                                            _createTextVNode(_toDisplayString(drug.drug.name), 1)\n                                          ]),\n                                          _: 2\n                                        }, 1024),\n                                        _createVNode(_component_ion_radio, {\n                                          slot: \"start\",\n                                          value: drug.drug_inventory_id\n                                        }, null, 8, [\"value\"])\n                                      ]),\n                                      _: 2\n                                    }, 1024))\n                                  }), 128)),\n                                  _hoisted_4,\n                                  _createVNode(_component_ion_item, null, {\n                                    default: _withCtx(() => [\n                                      _createVNode(_component_ion_label, null, {\n                                        default: _withCtx(() => [\n                                          _createTextVNode(\"Other, not drug related\")\n                                        ]),\n                                        _: 1\n                                      }),\n                                      _createVNode(_component_ion_radio, {\n                                        slot: \"start\",\n                                        value: \"other\"\n                                      })\n                                    ]),\n                                    _: 1\n                                  }),\n                                  _createVNode(_component_ion_item, null, {\n                                    default: _withCtx(() => [\n                                      _createVNode(_component_ion_label, null, {\n                                        default: _withCtx(() => [\n                                          _createTextVNode(\"Drug side effect\")\n                                        ]),\n                                        _: 1\n                                      }),\n                                      _createVNode(_component_ion_radio, {\n                                        slot: \"start\",\n                                        value: \"drug\"\n                                      })\n                                    ]),\n                                    _: 1\n                                  })\n                                ]),\n                                _: 1\n                              }, 8, [\"modelValue\"]))\n                            : _createCommentVNode(\"\", true)\n                        ]),\n                        _: 1\n                      })\n                    ]),\n                    _hoisted_5\n                  ]),\n                  _: 1\n                })\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_footer, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_button, {\n              onClick: _ctx.closeModal,\n              slot: \"end\",\n              color: \"danger\"\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Close \")\n              ]),\n              _: 1\n            }, 8, [\"onClick\"]),\n            _createVNode(_component_ion_button, {\n              onClick: _ctx.postSideEffects,\n              slot: \"end\",\n              disabled: !_ctx.allSelected\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Save \")\n              ]),\n              _: 1\n            }, 8, [\"onClick\", \"disabled\"])\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    })\n  ], 64))\n}","\nimport {\n  IonContent,\n  IonButton,\n  IonHeader,\n  IonTitle,\n  IonToolbar,\n  IonLabel,\n  modalController,\n  IonList,\n  IonItem,\n  IonRadioGroup,\n  IonRow,\n} from \"@ionic/vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { ActivityInterface } from \"@/apps/interfaces/AppInterface\"\n\nexport default defineComponent({\n  name: \"Modal\",\n  props: {\n    sideEffects: {\n      type: Object as PropType<ActivityInterface[]>,\n      required: true\n    },\n    drugs: {\n      type: Array as any, \n      default: []\n    },\n  },\n  methods: {\n    closeModal() {\n      modalController.dismiss()\n    },\n    async postSideEffects() {\n      await modalController.dismiss(this.sides);\n    },\n    selectSideEffect(index: number) {\n      this.activeIndex = index;\n    },\n    \n  },\n  computed: {\n    allSelected(): any {\n      return this.sides.filter((side: any) => side['reason']).length === this.sides.length\n    }\n  },\n  mounted() {\n    this.sides = this.sideEffects;\n  },\n  data() {\n    return {\n      content: \"Content\",\n      extendedLabsEnabled: false as boolean,\n      appActivities: [] as Array<ActivityInterface>,\n      sides: [] as any,\n      specimens: [],\n      reasons: ['Routine', 'Targeted', 'Confirmatory', 'Stat', 'Repeat / Missing'],\n      activeIndex: null as any\n    };\n  },\n  components: {\n    IonButton,\n    IonContent,\n    IonHeader,\n    IonTitle,\n    IonToolbar,\n    IonLabel,\n    IonList,\n    IonItem,\n    IonRadioGroup,\n    IonRow,\n  },\n});\n","import { render } from \"./SideEffectsModal.vue?vue&type=template&id=546674a2&scoped=true&ts=true\"\nimport script from \"./SideEffectsModal.vue?vue&type=script&lang=ts\"\nexport * from \"./SideEffectsModal.vue?vue&type=script&lang=ts\"\n\nimport \"./SideEffectsModal.vue?vue&type=style&index=0&id=546674a2&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-546674a2\"]])\n\nexport default __exports__","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { FooterBtnEvent, Option } from \"@/components/Forms/FieldInterface\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { alertConfirmation, infoAlert, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport HisDate from \"@/utils/Date\";\nimport { findIndex, isEmpty, find } from \"lodash\";\nimport { ConsultationService } from \"@/apps/ART/services/consultation_service\";\nimport { UserService } from \"@/services/user_service\";\nimport { OrderService } from \"@/services/order_service\";\nimport { ConceptService } from \"@/services/concept_service\";\nimport AdherenceMixinVue from \"./AdherenceMixin.vue\";\nimport { modalController } from \"@ionic/vue\";\nimport VLReminderModal from \"@/components/DataViews/VLReminderModal.vue\";\nimport { ProgramService } from \"@/services/program_service\";\nimport { ARTLabService } from \"../../services/lab_service\";\nimport { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport SideEffectsModalVue from \"@/components/DataViews/SideEffectsModal.vue\";\nimport ART_PROP from \"@/apps/ART/art_global_props\";\nimport { generateDateFields, EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport { PatientTypeService } from \"../../services/patient_type_service\";\nimport { PrescriptionService } from \"../../services/prescription_service\";\nimport { DispensationService } from \"../../services/dispensation_service\";\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\nimport { AppEncounterService } from \"@/services/app_encounter_service\";\nimport Store from \"@/composables/ApiStore\"\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { RegimenService } from \"@/services/regimen_service\";\nimport dayjs from \"dayjs\";\n\nexport default defineComponent({\n  mixins: [AdherenceMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    fields: [] as any,\n    currentWeight: -1 as any,\n    weightTrail: [] as any,\n    customRegimens: [] as any,\n    labOrders: [] as any,\n    weightLossPercentageNum: 0 as number,\n    lostTenPercentBodyWeight: false as boolean,\n    CxCaEnabled: false as boolean,\n    CxCaStartAge: -1 as number,\n    CxCaMaxAge: -1 as number,\n    DueForCxCa: false as boolean,\n    currentlyPregnant: false as boolean,\n    currentlyBreastfeeding: false,\n    patientHitMenopause: false as boolean,\n    hasPregnancyObsToday: false as boolean,\n    autoSelect3HP: false as boolean,\n    labOrderFieldContext: {} as any,\n    consultation: {} as any,\n    prescription: {} as any,\n    dispensation: {} as any,\n    completed3HP: false as boolean,\n    hasTbHistoryObs: false,\n    allergicToSulphur: false as boolean | null,\n    TBSuspected: false,\n    presentedTBSymptoms: false,\n    askAdherence: false as boolean,\n    lastDrugsReceived: [] as any,\n    sideEffectsHistory: {} as any,\n    onPermanentFPMethods: false,\n    reasonForDecliningTPTObs: {} as any,\n    malawiSideEffectReasonObs: [] as any,\n    otherSideEffectReasonObs: [] as any,\n    wasTransferredIn: false as boolean,\n    dateStartedArt: '' as string,\n    clientHadAHysterectomy: false as any,\n    isNoneClientPatient: false as boolean,\n    tptStatus: {} as Record<string, any>,\n    customDrugs: [] as any,\n    CxCaAppointDate: {} as any,\n    hasTbTreatmentDate: false as boolean,\n    isEligibleForTpt: false as boolean\n  }),\n  watch: {\n    ready: {\n      handler(value: boolean) {\n        if (value) {\n          this.consultation = new ConsultationService(this.patientID, this.providerID)\n          this.prescription = new PrescriptionService(this.patientID, this.providerID)\n          this.dispensation = new DispensationService(this.patientID, this.providerID)\n          this.fields = this.getFields();\n        }\n      },\n      immediate: true\n    },\n  },\n  methods: {\n    async onFinish(f: any, computedData: any) {\n      const encounter = await this.consultation.createEncounter();  \n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n\n      const computedObs = await this.resolveObs(computedData, 'consultation')\n\n      const secondaryObs = (await Promise.all([\n        ...this.malawiSideEffectReasonObs,\n        ...this.otherSideEffectReasonObs,\n        this.reasonForDecliningTPTObs\n      ])).filter((d) => !isEmpty(d))\n\n      const savedObs = await this.consultation.saveObservationList([\n        ...computedObs, ...secondaryObs\n      ])\n\n      if (!isEmpty(this.drugObs) && !this.isNoneClientPatient) await this.saveAdherence();\n\n      if (!savedObs) return toastWarning(\"Unable to save patient observations\");\n\n      toastSuccess(\"Observations and encounter created!\");\n\n      if (f.refer_to_clinician && f.refer_to_clinician.value ==='Yes') {\n        this.gotoPatientDashboard()\n        return\n      }\n      this.nextTask();\n    },\n    async getTptDrugs(formData: any){\n      const drugFilters: string[] = []\n      const tptHistory = formData.routine_tb_therapy.value\n      if (isEmpty(this.customDrugs)) {\n        this.customDrugs = await RegimenService.getCustomIngridients()\n      }\n      if(tptHistory.match(/ipt/i)) {\n        drugFilters.push(\"INH or H (Isoniazid 300mg tablet)\")\n      } else if(tptHistory.includes(\"3HP (RFP + INH)\")){\n        drugFilters.push('INH or H (Isoniazid 300mg tablet)')\n        drugFilters.push('Rifapentine (150mg)')\n      } else if(tptHistory.includes(\"INH 300 / RFP 300 (3HP)\")){\n        drugFilters.push(\"INH 300 / RFP 300 (3HP)\")\n      }\n      return !isEmpty(drugFilters) \n        ? this.customDrugs.filter((drug: any) => drugFilters.includes(drug.name))\n          .map((drug: any) => ({\n            label: drug.name,\n            value: '',\n            other: drug\n          }))\n        : []\n    },\n    async getTransferInStatus() {\n      const receivedArvs = await ConsultationService.getFirstValueCoded(\n        this.patientID, 'Ever received ART'\n      )\n      const transferLetterObs = await ConsultationService.getFirstObs(\n        this.patientID, 'Has transfer letter'\n      )\n      const date = transferLetterObs ? HisDate.toStandardHisFormat(transferLetterObs.obs_datetime) : ''\n      return receivedArvs \n        && receivedArvs.match(/yes/i) \n        && transferLetterObs \n        && `${transferLetterObs.value_coded}`.match(/yes/i)\n        && date === this.consultation.getDate()\n    },\n    async getDateStartedArt() {\n      const dateStarted = await ConsultationService.getFirstValueDatetime(this.patientID, 'Date ART started')\n      return dateStarted ? HisDate.toStandardHisFormat(dateStarted) : ''\n    },\n    async checkIfWeightLossIsControlled(val: any) {\n      if (this.lostTenPercentBodyWeight\n        && `${val.label}`.match(/malnutrition/i)\n        && `${val.value}`.match(/no/i)) {\n        const action = await infoActionSheet(\n          'Recommendation',\n          `Patient's weight has dropped by ${this.weightLossPercentageNum}% , is this controlled weight loss??`,\n          'Please verify',\n          [\n            { name: 'Confirm weight loss', slot: 'start', color: 'success'},\n            { name: 'Confirm controlled', slot: 'end', color: 'primary'}\n          ]\n        )\n        val.value = action === 'Confirm weight loss' ? 'Yes' : 'No'\n      }\n    },\n    async checkVLReminder() {\n      const vals = await ProgramService.getPatientVLInfo(this.patientID);\n      if (vals.eligibile === true) {\n        const modal = await modalController.create({\n          component: VLReminderModal,\n          backdropDismiss: false,\n          cssClass: \"large-modal\",\n          componentProps: { VLData: vals },\n        });\n        modal.present();\n        const { data } = await modal.onDidDismiss();\n        switch (data) {\n          case \"order\":\n            await this.labOrderFieldContext.launchOrderSelection();\n            break;\n          case \"wait\":\n            await this.waitForVL();\n            break;\n          case \"later\":\n            break;\n          default:\n            break;\n        }\n      }\n    },\n    async waitForVL(milestone: any = null) {\n      const orderService = new ARTLabService(this.patientID, this.providerID);\n      const encounter = await orderService.createEncounter();\n      const observations = await orderService.buildDefferedOrder(milestone);\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      await orderService.saveObservationList(observations);\n    },\n    canScreenCxCa() {\n      const age = this.patient.getAge()\n      return this.patient.isFemale()\n        && this.DueForCxCa\n        && this.CxCaEnabled \n        && age >= this.CxCaStartAge \n        && age <= this.CxCaMaxAge\n        && !this.clientHadAHysterectomy\n    },\n    pregnancyEligible() {\n      return this.patient.isChildBearing() && !this.onPermanentFPMethods\n    },\n    showCurrentContraceptionMethods(formData: any) {\n      return (this.pregnancyEligible()\n        && !this.patientHitMenopause \n        && !this.isPregnant(formData))\n        && !this.isANCclient()\n    },\n    showNewContraceptionMethods(formData: any) {\n      return (\n        this.pregnancyEligible() &&\n        !this.patientHitMenopause &&\n        !this.isPregnant(formData) &&\n        !this.isOnTubalLigation(formData)\n        && !this.isANCclient()\n      )\n    },\n    isPregnant(formData: any) {\n      if (formData.pregnant_breastfeeding) {\n        return this.inArray(formData.pregnant_breastfeeding, \n          p => p.label === 'Pregnant' && p.value === 'Yes'\n        )\n      }\n      return this.currentlyPregnant\n    },\n    isBreastFeeding(formData: any) {\n      if (formData.pregnant_breastfeeding) {\n        return this.inArray(formData.pregnant_breastfeeding, \n          p => p.label === 'Breastfeeding' && p.value === 'Yes'\n        )\n      }\n      return this.currentlyBreastfeeding\n    },\n    isOnTubalLigation(formData: any) {\n      return this.inArray(formData.current_fp_methods, d => d.value === \"TUBAL LIGATION\")\n    },\n    async disableFPMethods(listData: Array<Option>, value: Option) {\n      if (value.isChecked && value.label === \"NONE\") {\n        return listData.map((i) => {\n          if (i.label != \"NONE\") {\n            i.isChecked = false;\n            i.disabled = false;\n          }\n          return i;\n        });\n      } else if (value.label != \"NONE\" && value.isChecked) {\n        if (value.label.match(/condom/gi)) infoAlert(\"Combine with other modern methods of family planning\") \n        const noneIndex = findIndex(listData, { label: \"NONE\" });\n        listData[noneIndex].isChecked = false;\n        const vals = this.consultation.familyPlanningMethods(\n          value.label,\n          listData\n        );\n        const currentIndex = findIndex(vals, { label: value.label });\n        vals[currentIndex].isChecked = true;\n        return vals;\n      } else {\n        return listData.map((i) => {\n          i.disabled = false;\n          return i;\n        });\n      }\n    },\n    disablePrescriptions(listData: Array<Option>, value: Option) {\n      if (value.isChecked && value.label === \"NONE OF THE ABOVE\") {\n        return listData.map((i) => {\n          if (i.label != \"NONE OF THE ABOVE\") i.isChecked = false;\n          return i;\n        });\n      } else if (value.label != \"NONE OF THE ABOVE\" && value.isChecked) {\n        const noneIndex = findIndex(listData, { label: \"NONE OF THE ABOVE\" });\n        listData[noneIndex].isChecked = false;\n      }\n      return listData;\n    },\n    buildMedicationOrders(options: Option[]) {\n      if (this.inArray(options, o => o.label === \"NONE OF THE ABOVE\")) {\n        return this.consultation.buildValueCoded('Prescribe drugs', 'No')\n      }\n      const priscribed = this.consultation.buildValueCoded('Prescribe drugs', 'Yes')\n      const medications = options.map( o => this.consultation.buildValueCoded(\n        'Medication orders', o.label\n      ))\n      return [priscribed, ...medications]\n    },\n    declinedFPM(formData: any) {\n      return this.inArray(formData.fp_methods, d => d.value === \"NONE\")\n        && this.inArray(formData.current_fp_methods, d => d.value === \"NONE\")\n    },\n    riskOfUnplannedPregnancy(formData: any) {\n      return formData.reason_for_no_fpm.value === \"At risk of unplanned pregnancy\"\n    },\n    showOtherSideEffects(formData: any) {\n      return this.inArray(formData.side_effects, d => d.label === \"Other\" && d.value === \"Yes\")\n    },\n    hasTBSymptoms(formData: any) {\n      this.presentedTBSymptoms = this.inArray(formData.tb_side_effects, d => d.value === \"Yes\")\n      return this.presentedTBSymptoms\n    },\n    isTBSuspect(data: any){\n      this.TBSuspected = data.value.toString().match(/Yes|TB Suspected/i) ? true : false\n      return this.TBSuspected\n    },\n    isAllergicToSulphur (data: any) {\n      this.allergicToSulphur = data.value.match(/unknown/i) ? null : data.value.match(/yes/i) ? true : false\n      return this.allergicToSulphur\n    },\n    async buildSideEffectObs(data: Option[], attr: 'malawiSideEffectReasonObs' | 'otherSideEffectReasonObs'): Promise<boolean> {\n      const sideEffectReasons  = await this.getSideEffectsReasons(data)\n\n      this[attr] = [] //Clear this incase side effects no longer exist\n  \n      if (sideEffectReasons === undefined) return false\n\n      if (sideEffectReasons != -1) {\n        const drugInducedConcept = ConceptService.getCachedConceptID('Drug induced', true)\n        const isOtherReason = (reason: string) => `${reason}`.match(/other|drug/i) ? true : false\n        this[attr] = sideEffectReasons.map((r: any) => ({\n          'concept_id': drugInducedConcept,\n          'value_coded': ConceptService.getCachedConceptID(r.label, true),\n          'value_text': isOtherReason(r.reason) ? 'Past medication history' : null,\n          'value_drug': !isOtherReason(r.reason) ? r.reason : null //Reason is drug ID number if caused by specific drug\n        }))\n      }\n      return true\n    },\n    async getSideEffectsReasons(sideEffects: Option[]) {\n      const allYes = sideEffects.filter(s => !(`${s.label}`.match(/other/i)) && s.value==='Yes')\n      if (allYes.length > 0) {\n        const modal = await modalController.create({\n          component: SideEffectsModalVue,\n          backdropDismiss: false,\n          cssClass: \"large-modal\",\n          componentProps: { sideEffects: allYes, drugs: this.lastDrugsReceived },\n        });\n        modal.present();\n        const { data } = await modal.onDidDismiss();\n        return data;\n      }\n      return -1\n    },\n    getFPMethods(exclusionList: string[] = [], preChecked: Array<Option>) {\n      const methods = this.consultation.getFamilyPlanningMethods();\n      const filtered = methods.filter(\n        (data: string) => !exclusionList.includes(data)\n      )\n      return filtered.map((method: any) => ({\n        label: method,\n        value: method,\n        isChecked: preChecked.map((i) => i.label).includes(method),\n      }))\n    },\n    getOptions(options: string[], preValues: Array<Option>) {\n      return options.map((data: any) => {\n        const preValue = find(preValues, { label: data });\n        return {\n          label: data,\n          value: preValue ? preValue.value : \"\",\n          other: {\n            values: this.yesNoOptions(),\n          },\n        };\n      });\n    },\n    getContraindications(preValues: Array<Option>) {\n      const contraIndications = ConceptService.getConceptsByCategory(\n        \"contraindication\", true\n      ).map((data) => data.name);\n      return this.getOptions([...contraIndications, \"Other\"], preValues);\n    },\n    getOtherContraindications(preValues: Array<Option>) {\n      const contraIndications = ConceptService.getConceptsByCategory(\n        \"side_effect\", true\n      ).map((data) => data.name);\n      /**\n       * HACK ALERT!!!\n       * Dont want to show Other (Specify) as a last element\n       */\n      const lastElement = contraIndications.pop()\n      return this.getOptions([...contraIndications, \"Other (Specify)\", `${lastElement}`], preValues)\n    },\n    getTBSymptoms(preValues: Array<Option>) {\n      const contraIndications = ConceptService.getConceptsByCategory(\n        \"tb_symptom\", true\n      ).map((data) => data.name)\n      return this.getOptions([...contraIndications], preValues);\n    },\n    getReasonsForNoCxcaOptions() {\n      return ConceptService.getConceptsByCategory(\"reason_for_no_cxca\")\n        .map((c: any) => ({\n          label: c.name,\n          value: c.name,\n          other: {\n            c\n          }\n        }))\n    },\n    runAppendOptionParams(options: Option[], prechecked: Option[]) {\n      const checkedOptions = prechecked.filter(o => o.isChecked).map(o => o.label)\n      return options.map(o => {\n        if (typeof o?.other?.appendOptionParams === 'function') {\n          const appendedOptions = o?.other?.appendOptionParams()\n          if (typeof appendedOptions === 'object')  {\n            const option: Option = {\n              label: o.label,\n              value: o.value,\n              other: o.other\n            }\n            if (appendedOptions.isChecked) {\n              option.isChecked = appendedOptions.isChecked\n              delete appendedOptions.isChecked\n            } else {\n              option.isChecked = checkedOptions.includes(o.label)\n            }\n            return { ...option, ...appendedOptions}\n          }\n        }\n        return o\n      })\n    },\n    /**\n     * Checks formdata and previous observation state if a patient completed 3HP\n     */\n    didCompleted3HP(formData: any) {\n      return !this.completed3HP \n        ? formData.routine_tb_therapy \n        && formData.routine_tb_therapy.value.match(/complete/i) ? true : false\n        : true\n    },\n    patientOnTpt(formData: any) {\n      if (formData.routine_tb_therapy != null) {\n        return /Currently/i.test(formData.routine_tb_therapy.value)\n      }\n      return this.tptStatus.tpt !== null && !this.completed3HP\n    },\n    /**\n     * Checks if 3HP can be auto selected based on FormData and \n     * if  it is enabled in global preferences\n     */\n    tptAutoSelectionMode(formData: any) {\n      return this.autoSelect3HP && !this.didCompleted3HP(formData)\n    },\n    /**\n     * Provides validations for TPT selections and value updates\n     */\n    async on3HPValueUpdate(listData: Option[], curOption: Option, formData: any) {\n      const is3HPorTPT = (i: Option) => i.label.match(/IPT|3HP/i) ? true : false\n\n      //Checks if IPT and 3HP are both selected and returns a boolean\n      const ipt3HPConflict: boolean = (() => {\n        const checkedDrugs = listData.reduce(\n        (checkedDrugs: string[], item: Option) => {\n          if (is3HPorTPT(item) \n            && !(item.label in checkedDrugs) \n            && item.isChecked) {\n            checkedDrugs.push(item.label)\n          }\n          return checkedDrugs\n        }, [])\n        return checkedDrugs.includes('IPT') \n          && (checkedDrugs.includes('3HP (RFP + INH)') \n          || checkedDrugs.includes('INH 300 / RFP 300 (3HP)'))\n      })()\n\n      // check if no tpt is present\n      const noTpTPresent = is3HPorTPT(curOption) \n        && listData.filter(i => is3HPorTPT(i)).map(i => !i.isChecked)\n          .every(Boolean)\n  \n      if (noTpTPresent && this.patientOnTpt(formData)) {\n        const modal = await optionsActionSheet(\n          'Reasons for declining TPT', \n          '',\n          [\n            'Patient declined',\n            'Side-effects (previous or current)',\n            'Stock-out',\n            'Starting TB treatment',\n            'Other'\n          ],\n          [\n            { name : 'Done', slot: 'start', role: 'action'}\n          ]\n        )\n        this.reasonForDecliningTPTObs = this.consultation.buildValueText(\n          'Other reason for not seeking services', modal.selection\n        )\n      } else {\n        this.reasonForDecliningTPTObs = {}\n      }\n\n      if (ipt3HPConflict) {\n        const action = await infoActionSheet(\n          \"IPT / 3HP conflict\",\n          \"IPT and 3HP can NOT be prescribed together\",\n          \"Please pick either one\",\n          [\n            { name: \"Prescribe 3HP\", slot: \"start\", color: \"primary\" },\n            { name: \"Prescribe IPT\", slot: \"end\", color: \"primary\" },\n          ]\n        )\n        return listData.map(i => {\n          if (is3HPorTPT(i)) {\n            i.isChecked =\n              action === 'Prescribe IPT' && i.label === 'IPT' || \n              action ==='Prescribe 3HP' && i.label === 'INH 300 / RFP 300 (3HP)'\n          }\n          return i\n        })\n      }\n      return listData.map(i => {\n        // By default, toggle between variants of 3HP. All of them cant be selected at once\n        if (curOption.label === '3HP (RFP + INH)' \n          && i.label === 'INH 300 / RFP 300 (3HP)'\n          && curOption.isChecked) {\n          i.isChecked = false\n        } else if (curOption.label === 'INH 300 / RFP 300 (3HP)' \n          && i.label === '3HP (RFP + INH)'\n          && curOption.isChecked ) {\n            i.isChecked = false\n        }\n        return i\n      })\n    },\n    medicationOrderOptions(formData: any, prechecked=[] as Option[]): Option[] {\n      this.isEligibleForTpt = false\n      const completedTpt = this.didCompleted3HP(formData)\n      const everTakenTpt = this.tptStatus.tpt !== null\n      const autoSelect3HP = this.tptAutoSelectionMode(formData)\n      const isCurrentlyBreastfeeding = this.isBreastFeeding(formData)\n\n      const disableOption = (text: string) => ({\n        disabled: true,\n        isChecked: false,\n        description: {\n          color: \"danger\",\n          show: \"always\",\n          text\n        }\n      })\n      return this.runAppendOptionParams([\n        this.toOption('ARVs', {\n          appendOptionParams: () => ({ \n            isChecked: autoSelect3HP && !this.TBSuspected\n          })\n        }),\n        this.toOption('CPT', {\n          appendOptionParams: () => {\n            if (autoSelect3HP && !this.TBSuspected \n              && !this.allergicToSulphur) {\n              return { isChecked : true }\n            }\n            return this.allergicToSulphur \n              ? disableOption('Allergic to CPT')\n              : { disabled: false }\n          }\n        }),\n        this.toOption('3HP (RFP + INH)', {\n          appendOptionParams: () => {\n            if (completedTpt) return disableOption(`Completed TPT treatment`)\n            if (this.tptStatus.tb_treatment) return disableOption(`Completed/on TB treatment`)\n            if (this.TBSuspected) return disableOption('TB Suspect')\n            if (this.currentlyPregnant) return disableOption('Pregnant patient')\n            if (isCurrentlyBreastfeeding) return disableOption('Patient is breast feeding')\n            if (this.currentWeight < 20) return disableOption('Weight below regulation')\n            if (everTakenTpt && this.tptStatus.tpt !== '3HP (RFP + INH)' && !this.tptStatus.completed) {\n              return disableOption(`On ${this.tptStatus.tpt} treatment`)\n            }\n            this.isEligibleForTpt = true\n            if (this.tptStatus.tpt === '3HP (RFP + INH)' && !this.tptStatus.completed) return { isChecked: true }\n          }\n        }),\n        this.toOption('INH 300 / RFP 300 (3HP)', {\n          appendOptionParams: () => { \n            if (completedTpt) return disableOption(`Completed TPT treatment`)\n            if (this.tptStatus.tb_treatment) return disableOption(`Completed/on TB treatment`)\n            if (this.TBSuspected) return disableOption('TB Suspect')\n            if (this.currentlyPregnant) return disableOption('Pregnant patient')\n            if (isCurrentlyBreastfeeding) return disableOption('Patient is breast feeding')\n            if (this.currentWeight < 30) return disableOption('Weight below regulation') \n            if (everTakenTpt && this.tptStatus.tpt !== 'INH 300 / RFP 300 (3HP)' && !this.tptStatus.completed) {\n              return disableOption(`On ${this.tptStatus.tpt} treatment`)\n            }\n            this.isEligibleForTpt = true\n            if (this.tptStatus.tpt === 'INH 300 / RFP 300 (3HP)' && !this.tptStatus.completed) return { isChecked: true }\n            return { isChecked: autoSelect3HP }\n          }\n        }),\n        this.toOption('IPT', {\n          appendOptionParams: () => {\n            if (completedTpt) return disableOption(`Completed TPT treatment`)\n            if (this.tptStatus.tb_treatment) return disableOption(`Completed/on TB treatment`)\n            if (this.TBSuspected) return disableOption('TB Suspect')\n            if (this.currentlyPregnant) return disableOption('Pregnant patient')\n            if (isCurrentlyBreastfeeding) return disableOption('Patient is breast feeding')\n            if (everTakenTpt && this.tptStatus.tpt !== 'IPT' && !this.tptStatus.completed) {\n              return disableOption(`On ${this.tptStatus.tpt} treatment`)\n            }\n            this.isEligibleForTpt = true\n            if (this.tptStatus.tpt === 'IPT' && !this.tptStatus.completed) return { isChecked: true }\n          }\n        }),\n        this.toOption('NONE OF THE ABOVE')\n      ], prechecked)\n    },\n    async getVlLabData() {\n      return OrderService.formatLabs((await Store.get('GET_LAB_ORDERS_WITH_GIVEN_RESULT_STATUS', { patientID: this.patientID })));\n    },\n    isANCclient() {\n      return ProgramService.getSuspendedProgram() === 'ANC'\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"other_patient_prescription\",\n          proxyID: \"prescription\",\n          helpText: \"Medication to prescribe during this visit\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          init: async () => {\n            const isGuardian = (await this.consultation.getClient()) === \"No\";\n            if (isGuardian) {\n              this.isNoneClientPatient = true\n            } else {\n              this.isNoneClientPatient = (await PatientTypeService.isDrugRefillPatient(this.patientID))\n                ? true : false\n            }\n            if (this.isNoneClientPatient) {\n              this.currentWeight = Number((await this.patient.getRecentWeight()))\n              this.autoSelect3HP = await Store.get('ART_AUTO_3HP_SELECTION')\n              this.tptStatus = await this.consultation.getTptTreatmentStatus()\n              this.completed3HP = this.tptStatus.tpt !== null && this.tptStatus.completed\n            }\n            return true\n          },\n          beforeNext: async (v: Option[], f: any) => {\n            if (this.isEligibleForTpt && \n              !this.patientOnTpt(f) && \n              !v.some(d => /3hp|ipt/i.test(d.label))) {\n              if (!(await alertConfirmation(\"Are you sure you want to skip TPT prescription for eligible client?\"))) {\n                return false\n              }\n            }\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          computedValue: (v: Option[]) => ({ \n            tag: 'consultation',\n            obs: this.buildMedicationOrders(v)\n          }),\n          onValueUpdate: (listData: Array<Option>, value: Option, f: any) => {          \n            const list = this.disablePrescriptions(listData, value);\n            return this.on3HPValueUpdate(list, value, f)\n          },\n          options: (formData: any, c: Array<Option>, cd: any, l: any) => {\n            return !isEmpty(l) ? l : this.medicationOrderOptions(formData)\n          },\n          condition: () => this.isNoneClientPatient,\n          exitsForm: () => true\n        },\n        /**\n        * DRUG TRANSFER IN INITIATION \n        */\n        ...generateDateFields({\n          id: 'date_last_received_arvs',\n          helpText: 'Last ARV Dispensation',\n          required: true,\n          init: async () => {\n            this.wasTransferredIn = (await this.getTransferInStatus()) || false\n            this.dateStartedArt = await this.getDateStartedArt()\n            return true\n          },\n          condition: () => this.wasTransferredIn,\n          minDate: () => this.dateStartedArt,\n          maxDate: () => this.consultation.getDate(),\n          computeValue: (date: string) => {\n            this.prescription.setDate(date)\n            return {\n              tag: 'consultation',\n              date,\n              obs: this.consultation.buildValueDate(\n                'Date drug received from previous facility', date\n              )\n            }\n          },\n          estimation: {\n            allowUnknown: false\n          }\n        }, this.consultation.getDate()),\n        {\n          id: 'previous_arvs_received',\n          helpText: 'Last ARV drugs dispensed',\n          type: FieldType.TT_MULTIPLE_SELECT,\n          computedValue: (v: Option[]) => v.map(d => d.other),\n          validation: (v: Option[]) => Validation.required(v),\n          options: async () => {\n            if (!isEmpty(this.customRegimens)) return this.customRegimens\n            const p = new PrescriptionService(this.patientID, this.providerID)\n            this.customRegimens = (await p.getARVs())\n              .map((drug: any ) => ({\n                label: drug.name,\n                value: drug.drug_id,\n                other: { ...drug }\n              })) as Option[]\n            return this.customRegimens\n          },\n          config: {\n            showKeyboard: true\n          },\n          condition: () => this.wasTransferredIn\n        },\n        {\n          id: 'drug_interval',\n          helpText: 'Duration period for last received ARVs',\n          type: FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n          condition: () => this.wasTransferredIn,\n          validation: (val: Option) => Validation.required(val),\n          computedValue: (d: Option) => d.other.nextAppointment,\n          options: () => {\n            const intervals = [\n              { label: '2 weeks', value: 14 },\n              { label: '1 month', value: 28 },\n              { label: '2 months', value: 56 },\n              { label: '3 months', value: 84 },\n              { label: '4 months', value: 112 },\n              { label: '5 months', value: 140 },\n              { label: '6 months', value: 168 },\n              { label: '7 months', value: 196 },\n              { label: '8 months', value: 224 },\n              { label: '9 months', value: 252 },\n              { label: '10 months', value: 280 },\n              { label: '11 months', value: 308 },                        \n              { label: '12 months', value: 336 }\n            ]\n            return intervals.map(({label, value}: Option) => {\n              this.prescription.setNextVisitInterval(value)\n              const nextAppointment = this.prescription.calculateDateFromInterval()\n              return {\n                label,\n                value,\n                other: {\n                  label: 'Medication run-out date:',\n                  value: HisDate.toStandardHisDisplayFormat(nextAppointment),\n                  nextAppointment,\n                  other: {\n                    label: \"\",\n                    value: []\n                  }\n                }\n              }\n            })\n          }\n        },\n        {\n          id: 'arv_quantities',\n          helpText: 'Amount of drugs dispensed (From last ART Facility)',\n          type: FieldType.TT_DRUG_TRANSFER_IN,\n          validation: (v: Option[]) => this.validateSeries([\n            () => Validation.required(v),\n            () => v.map((i: Option) => i.value === '' || i?.other?.pillsBrought === '')\n              .some(Boolean) ? ['Some Drugs are missing values'] : null\n          ]),\n          computedValue: (v: Option[], f: any, c: any) => ({\n            tag: 'consultation',\n            obs:  v.map(async (d: any) => {\n              const drugID: number = d?.other?.drug?.drug_id || 0\n              return { \n                ...(await this.consultation.buildObs(\n                  'Drug received from previous facility', {\n                    'value_drug': drugID,\n                    'value_datetime': c?.drug_interval || null,\n                    'value_numeric': d?.value || 0\n                    }\n                )),\n                child: [\n                  await this.consultation.buildObs(\n                    'Number of tablets brought to clinic', {\n                      'value_drug': drugID,\n                      'value_numeric': d?.other?.pillsBrought || -1,\n                      'value_datetime': c?.date_last_received_arvs?.date || null\n                    }\n                  )\n                ]\n              }\n            })\n          }),\n          options: (_: any, c: any, listData: Option) => {\n            return c.previous_arvs_received\n              .map((d: any) => {\n                const drugName = d['alternative_drug_name'] || d['drug_name'] || d['name']\n                const prevValue = find(listData, { label: drugName })\n                let qty = ''\n                let rmndr = ''\n                if (prevValue) {\n                  qty = prevValue?.value\n                  rmndr = prevValue?.other?.pillsBrought\n                }\n                return {\n                  label: drugName,\n                  value: qty,\n                  other: {\n                    drug: d,\n                    pillsBrought: rmndr\n                  }\n                }\n              })\n          },\n          condition: () => this.wasTransferredIn\n        },\n        /**\n        * END OF DRUG TRANSFER IN\n        */\n        {\n          id: \"patient_lab_orders\",\n          helpText: \"Lab orders\",\n          type: FieldType.TT_LAB_ORDERS,\n          init: async () => {\n            this.labOrders = await this.getVlLabData()\n            return true\n          },\n          unload: async () => {\n            await this.checkVLReminder()\n            // Check if released results were given to the patient\n            const noGivenResults = this.labOrders.filter((r: any) => r.result_given === 'No')\n            if (noGivenResults.length && (await alertConfirmation('Result(s) Given to Client?'))) {\n              const enc = new AppEncounterService(this.patientID, -1, this.providerID)\n              // flatten array and save observations for results given\n              const obs = noGivenResults.reduce((all: any, result: any) => [\n                ...all, ...(result.resultIds.map(async (resultID: number) =>{\n                  enc.encounterID = result.encounter_id\n                  return enc.saveObs((await enc.buildObs(\"Result Given to Client\", {\n                      \"value_coded\": \"Yes\",\n                      \"obs_group_id\": resultID\n                    })))\n                })) \n              ], [])\n              await Promise.all(obs)\n            }\n            // refresh data\n            this.labOrders = await this.getVlLabData()\n          },\n          onload: (fieldContext: any) =>  this.labOrderFieldContext = fieldContext,\n          options: () => {\n            return [\n              {\n                label: \"Lab orders\",\n                value: \"order trail\",\n                other: {\n                  values: this.labOrders\n                }\n              }\n            ]\n          },\n          config: {\n            printOrder: (orderID: number) => {\n              return new PatientPrintoutService(this.patientID).printLabOrderLbl(orderID)\n            },\n            hiddenFooterBtns: [\"Clear\"],\n            footerBtns: [\n              {\n                name: \"Order\",\n                size: \"large\",\n                slot: \"end\",\n                color: \"primary\",\n                visible: true,\n                onClick: async () => {\n                  if (!isEmpty(this.labOrderFieldContext)) {\n                    await this.labOrderFieldContext.launchOrderSelection();\n                  }\n                }\n              }\n            ]\n          },\n        },\n        {\n          id: \"pregnant_breastfeeding\",\n          helpText: `Patient Pregnant or breastfeeding?`,\n          init: async () => {\n            if (this.patient.isFemale()) {\n              if (this.patient.isChildBearing()) {\n                this.hasPregnancyObsToday = await this.patient.hasPregnancyObsToday()\n                this.currentlyPregnant = await this.patient.isPregnant()\n                this.currentlyBreastfeeding = await this.patient.isBreastfeeding();\n              }\n              this.onPermanentFPMethods = await this.consultation.getTLObs();\n            }\n            return true\n          },\n          condition: () => !this.hasPregnancyObsToday && this.pregnancyEligible(),\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data),\n            ]),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(d => this.consultation.buildValueCoded(d.other.concept, d.value)).concat(\n              this.isANCclient() ? [this.consultation.buildValueCoded('Is patient pregnant', 'Yes')] : []\n            ),\n          }),\n          options: (formData: any) => {\n            const options = []\n            // Because ANC clients are always Pregnant!\n            if (!this.isANCclient()) options.push({\n              label: \"Pregnant\",\n              value: \"\",\n              other: {\n                values: this.yesNoOptions(),\n                concept: \"Is patient pregnant\",\n              }\n            })\n\n            options.push({\n              label: \"Breastfeeding\",\n              value: \"\",\n              other: {\n                values: this.yesNoOptions(),\n                concept: \"Is patient breast feeding\",\n              }\n            })\n\n            return formData.pregnant_breastfeeding || options\n          }\n        },\n        {\n          id: \"patient_weight_chart\",\n          helpText: \"Patient weight chart\",\n          type: FieldType.TT_WEIGHT_CHART,\n          init: async () => {\n            this.weightTrail = await this.patient.getWeightHistory()\n            this.weightLossPercentageNum = this.patient.getWeightLossPercentageFromTrail(this.weightTrail)\n            this.lostTenPercentBodyWeight = this.weightLossPercentageNum >= 10\n            return true\n          },\n          options: async () => {\n            const bmi = await this.patient.getBMI();\n            const values = this.weightTrail;\n            return [\n              {\n                label: \"Weight for patient\",\n                value: \"Weight trail\",\n                other: {\n                  bmi,\n                  values: values.map((d: any) => ({\n                    x: HisDate.toStandardHisDisplayFormat(d.date),\n                    y: d.weight,\n                  })),\n                  age: this.patient.getAge(),\n                },\n              },\n            ];\n          },\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n        {\n          id: \"has_fp_methods\",\n          helpText: \"\",\n          type: FieldType.TT_TEXT_BANNER,\n          condition: () => this.onPermanentFPMethods,\n          options: () => this.mapStrToOptions([\n            \"Patient is on Tubal ligation method\"\n          ])\n        },\n        {\n          id: \"current_fp_methods\",\n          helpText: \"What method are you currently on?\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          init: async () => {\n            if (this.patient.isFemale()) {\n              this.patientHitMenopause = await this.consultation.patientHitMenopause()\n            }\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          onValueUpdate: (listData: Array<Option>, value: Option) => {\n            return this.disableFPMethods(listData, value);\n          },\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(d => this.consultation.buildValueCoded('Family planning method', d.value))\n          }),\n          condition: (formData: any) => this.showCurrentContraceptionMethods(formData),\n          options: (_: any, checked: Array<Option>) =>this.getFPMethods([], checked),\n        },\n        {\n          id: \"fp_methods\",\n          helpText: \"What method are you providing today?\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          condition: (formData: any) => this.showNewContraceptionMethods(formData),\n          validation: (data: any) => Validation.required(data),\n          onValueUpdate: (listData: Array<Option>, value: Option) => {\n            return this.disableFPMethods(listData, value);\n          },\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map((d: Option) => this.consultation.buildValueCoded('Family planning, action to take', d.value))\n          }),\n          options: (_: any, checked: Array<Option>) => this.getFPMethods([], checked)\n        },\n        {\n          id: \"reason_for_no_fpm\",\n          helpText: \"Main reason for not using family planning methods\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => this.declinedFPM(formData),\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueText(\"Why does the woman not use birth control\", v.value) \n          }),\n          options: () => this.mapStrToOptions([\n            \"Not Sexually active\",\n            \"Patient want to get pregnant\",\n            \"Not needed for medical reasons\",\n            \"At risk of unplanned pregnancy\",\n            \"Menopause\"\n          ])\n        },\n        {\n          id: \"specific_reason_for_no_fpm\",\n          helpText: \"Specific reason for not using family planning methods\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueText(\"Reason for not using contraceptives\", v.value)\n          }),\n          condition: (formData: any) => this.riskOfUnplannedPregnancy(formData),\n          options: () => this.mapStrToOptions([\n            \"Following wishes of spouse\",\n            \"Religious reasons\",\n            \"Afraid of side effects\",\n            \"Never though about it\",\n            \"Indifferent (does not mind getting pregnant)\"\n          ])\n        },\n        {\n          id: \"offer_contraceptives\",\n          helpText: \"Offer contraceptives\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => this.riskOfUnplannedPregnancy(formData),\n          computedValue: (v: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Family planning, action to take\", v.value)\n          }),\n          options: () => [\n            { label: \"Accepted\", value: \"Yes\" },\n            { label: \"Declined\", value: \"No\" },\n            { label: \"Discuss with spouse\", value: \"Discuss with spouse\" },\n          ]\n        },\n        {\n          id: \"offered_intervention\",\n          helpText: \"Offered intervention\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => formData.offer_contraceptives.value === \"Accepted\",\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(d => this.consultation.buildValueCoded(d.label, d.value))\n          }),\n          options: (_: any, checked: Array<Option>) => this.getFPMethods([\"NONE\"], checked),\n        },\n        {\n          id: \"offer_cxca\",\n          helpText: \"Refer client for CxCa screening\",\n          type: FieldType.TT_SELECT,\n          init: async () => {\n            if (this.patient.isFemale()) {\n              this.CxCaEnabled = await ART_PROP.cervicalCancerScreeningEnabled()\n              if (this.CxCaEnabled) {\n                const { start, end } = await ART_PROP.cervicalCancerScreeningAgeBounds()\n                this.CxCaMaxAge = end\n                this.CxCaStartAge = start\n                this.DueForCxCa = await this.consultation.clientDueForCxCa()\n                this.clientHadAHysterectomy =  await this.consultation.clientHasHadAHysterectomy();\n              }\n            }\n            return true\n          },\n          validation: (v: Option) => Validation.required(v),\n          condition: (f: any) => this.canScreenCxCa() && !this.isPregnant(f),\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded('Offer CxCa', v.value)\n          }),\n          options: () => this.yesNoOptions()\n        },\n        {\n          id: \"cxca_reminder\",\n          helpText: \"CxCa Screening Reminder\",\n          type: FieldType.TT_TEXT_BANNER,\n          init: async () => {\n            if (this.CxCaEnabled && this.patient.isFemale()) {\n              this.CxCaAppointDate = await this.patient.nextAppointment(24)\n            }\n            return true;\n          },\n          condition: () => {\n            const ONE_MONTH = 30;\n            return ONE_MONTH < HisDate.dateDiffInDays(this.consultation.date, this.CxCaAppointDate)\n          },\n          options: () => this.mapStrToOptions([\n            `Patient is due for Cervical Cancer Screening on ${HisDate.toStandardHisDisplayFormat(this.CxCaAppointDate.appointment_date)}`\n          ])\n        },\n        {\n          id: \"reason_for_no_cxca\",\n          helpText: \"Reason for NOT offering CxCa\",\n          type: FieldType.TT_SELECT,\n          validation: (v: Option) => Validation.required(v),\n          condition: (f: any) => f.offer_cxca.value === 'No',\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Reason for NOT offering CxCa\", v.value)\n          }),\n          options: () => this.getReasonsForNoCxcaOptions(),\n        },\n        ...generateDateFields({\n          id: 'previous_cxca_test_date',\n          helpText: 'Previous CxCa test',\n          required: true,\n          minDate: () => this.patient.getBirthdate(),\n          maxDate: () => ConsultationService.getSessionDate(),\n          condition: (f: any) => f.reason_for_no_cxca.value === 'Not due for screening',\n          computeValue: (date: string, isEstimate: boolean) => {\n            if (isEstimate) {\n              return {\n                tag: 'consultation',\n                obs: this.consultation.buildValueDateEstimated('CxCa test date', date)\n              }\n            } else {\n              return {\n                tag: 'consultation',\n                obs: this.consultation.buildValueDate('CxCa test date', date) \n              }\n            }\n          },\n          estimation: {\n            allowUnknown: true,\n            estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n          }\n        }),\n        {\n          id: 'previous_side_effects',\n          helpText: 'Side effects / Contraindications history',\n          type: FieldType.TT_DATA_TABLE,\n          init: async () => {\n            this.sideEffectsHistory = await this.consultation.getDrugSideEffects()\n            return true\n          },\n          config: {\n            columns: () => [\n              [\n                table.thTxt('Date'),\n                table.thTxt('Condition'),\n                table.thTxt('Drug induced'),\n                table.thTxt('Drug')\n              ]\n            ],\n            rows: () => {\n              return Object.keys(this.sideEffectsHistory)\n              .map((k: string) =>\n                Object.values(this.sideEffectsHistory[k])\n                .filter((d: any) => !isEmpty(d.name))\n                .map((d: any) => [\n                  table.tdDate(k),\n                  table.td(d.name),\n                  table.td(d.drug_induced ? 'Yes' : 'No'),\n                  table.td(d.drug)\n              ]))\n              .reduce((accum, cur) => accum.concat(cur), [])\n            }\n          }\n        },\n        {\n          id: \"side_effects\",\n          helpText: \"Contraindications / Side effects (select either 'Yes' or 'No')\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          init: async () => {\n            this.lastDrugsReceived = await this.consultation.getPreviousDrugs();\n            return true\n          },\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data),\n            ]),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(async (d) => ({\n              ...(await this.consultation.buildValueCoded('Malawi ART side effects', d.label)),\n              child: [await this.consultation.buildValueCoded(d.label, d.value)]\n            }))\n          }),\n          beforeNext: (data: Option[]) => this.buildSideEffectObs(data, 'malawiSideEffectReasonObs'),\n          options: (_: any, checked: Array<Option>) => this.getContraindications(checked)\n        },\n        {\n          id: \"other_side_effects\",\n          helpText: \"Other Contraindications / Side effects (select either 'Yes' or 'No')\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          onValue: async (val: any) => {\n            await this.checkIfWeightLossIsControlled(val)\n            return true\n          },\n          condition: (formData: any) => this.showOtherSideEffects(formData),\n          onConditionFalse: () => this.otherSideEffectReasonObs = [],\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data),\n            ]),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.filter(d => d.label != 'Other (Specify)')\n              .map(async (d) => ({\n              ...(await this.consultation.buildValueCoded('Other side effect', d.label)),\n              child: [await this.consultation.buildValueCoded(d.label, d.value)]\n            }))\n          }),\n          beforeNext: (data: Option[]) => this.buildSideEffectObs(data, 'otherSideEffectReasonObs'),\n          options: (_: any, checked: Array<Option>) => this.getOtherContraindications(checked),\n        },\n        {\n          id: 'other_side_effect_specify',\n          helpText: \"Other Contraindications / Side effects (specify)\",\n          type: FieldType.TT_NOTE,\n          computedValue: async (v: Option) => ({\n            tag: 'consultation',\n            obs: {\n              ...(await this.consultation.buildValueCoded('Other side effect', 'Other (Specify)')),\n              child: [await this.consultation.buildValueText('Other (Specify)', v.value )]\n            }\n          }),\n          condition: (f: any) => this.inArray(\n            f.other_side_effects, d => d.label === \"Other (Specify)\" && d.value === 'Yes'\n          ),\n          validation: (v: Option) => Validation.required(v)\n        },\n        {\n          id: \"on_tb_treatment\",\n          helpText: \"On TB Treatment?\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          computedValue: (data: any) => ({ \n            tag: 'consultation', \n            obs: [ this.consultation.buildValueCoded(\"TB treatment\", data.value)].concat(this.isTBSuspect(data) \n              ? [this.consultation.buildValueCoded(\"TB Status\", \"Confirmed TB on treatment\")] \n              : []) \n          }),\n          options: () => this.yesNoOptions()\n        },\n        {\n          id: \"tb_date_started_treatment_known\",\n          helpText: \"TB treatment history\",\n          type: FieldType.TT_YES_NO,\n          init: async () => {\n            // TODO: Account for TB interruptions in the future\n            this.hasTbTreatmentDate = false\n            const startDate = await ConsultationService.getFirstValueDatetime(\n              this.patientID, 'TB treatment start date'\n            )\n            const tbPeriod = await ConsultationService.getFirstValueNumber(\n              this.patientID, 'TB treatment period'\n            )\n            if (tbPeriod && startDate) {\n              const timeElapse = dayjs(this.consultation.date).diff(startDate, 'months')\n              this.hasTbTreatmentDate = timeElapse <= tbPeriod\n            }\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          condition: (f: any) => !this.hasTbTreatmentDate && f.on_tb_treatment.label === 'Yes',\n          options: () => {\n            return [\n              {\n                label: 'Date started treatment known?',\n                values: this.yesNoOptions()\n              }\n            ]\n          }\n        },\n        ...generateDateFields({\n          id: 'tb_start_date',\n          helpText: 'Enter start date for treatment?',\n          required: true,\n          minDate: () => this.patient.getBirthdate(),\n          maxDate: () => ConsultationService.getSessionDate(),\n          condition: (f: any) => f.tb_date_started_treatment_known === 'Yes',\n          computeValue: (date: string) => {\n            return {\n              tag: 'consultation',\n              obs: this.consultation.buildValueDate('TB treatment start date', date)\n            }\n          },\n          estimation: {\n            allowUnknown: false\n          }\n        }),\n        {\n          id: \"tb_treatment_period\",\n          helpText: \"Enter period (In months)\",\n          type: FieldType.TT_NUMBER,\n          validation: (v: Option) => Validation.validateSeries([\n            () => Validation.required(v),\n            () => Validation.isNumber(v),\n            () => Validation.rangeOf(v, 3, 9)\n          ]),\n          condition: (f: any) => f.tb_date_started_treatment_known === 'Yes',\n          computedValue: (v: Option) => {\n            return {\n              tag: 'consultation',\n              obs: this.consultation.buildValueNumber('TB treatment period', v.value)\n            }\n          }\n        },\n        {\n          id: \"tb_side_effects\",\n          helpText: \"TB Associated symptoms\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          onValue: async (val: any) => {\n            await this.checkIfWeightLossIsControlled(val)\n            return true\n          },\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data)\n          ]), \n          condition: (formData: any) => formData.on_tb_treatment.value.match(/no/i),\n          options: (_: any, checked: Array<Option>) => this.getTBSymptoms(checked),\n          computedValue: (vals: Option[], formData: any) => ({\n            tag: 'consultation',\n            obs: vals.map(async (data: Option) => ({\n              ...(await this.consultation.buildValueCoded(\"Routine TB Screening\", data.label)),\n              child: [await this.consultation.buildValueCoded(data.label, data.value)]\n            })).concat(this.hasTBSymptoms(formData) ? [] : [this.consultation.buildValueCoded(\"TB Status\", \"TB NOT suspected\")])\n          })\n        },\n        {\n          id: \"tb_status\",\n          helpText: \"TB Status\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => this.hasTBSymptoms(formData),\n          onConditionFalse: () => this.TBSuspected = false,\n          defaultValue: () => 'TB Suspected',\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"TB Status\", data.value)\n          }),\n          beforeNext: async (data: Option) => {\n            if (this.isTBSuspect(data)) {\n              const action = await infoActionSheet(\n                \"Lab Order\",\n                \"The patient is a TB suspect. Do you want to take lab orders?\",\n                \"\",\n                [\n                  { name: \"Order now\", slot: \"start\", color: \"success\" },\n                  { name: \"NOT now\", slot: \"end\", color: \"danger\" },\n                ]\n              )\n              if (action === 'Order now') this.labOrderFieldContext.launchOrderSelection([\n                'TB Microscopic Exam', \n                'GeneXpert', \n                'Culture & Sensitivity',\n                'TB Tests'\n              ])\n            }\n            return true\n          },\n          options: () => this.mapStrToOptions([\n            \"TB NOT suspected\",\n            \"TB Suspected\",\n            \"Confirmed TB Not on treatment\",\n          ])\n        },\n        {\n          id: \"routine_tb_therapy\",\n          helpText: \"TB preventive therapy (TPT) history\",\n          type: FieldType.TT_SELECT,\n          init: async () => {\n            this.hasTbHistoryObs = await this.consultation.hasTreatmentHistoryObs()\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          condition: () => !this.hasTbHistoryObs,\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueText(\"Previous TB treatment history\", data.value)\n          }),\n          options: (f: any) => {\n            let options: string[] = []\n            if(/no/i.test(f.on_tb_treatment.value)) {\n              options = [\n                \"Currently on IPT\",\n                \"Currently on 3HP (RFP + INH)\",\n                \"Currently on INH 300 / RFP 300 (3HP)\"\n              ]\n            }\n            options = options.concat([\n              \"Complete course of 3HP in the past (3 months RFP+INH)\",\n              \"Complete course of IPT in the past (min. 6 months of INH)\",\n              \"Aborted course of 3HP (RFP + INH) in the past\",\n              \"Aborted course of INH 300 / RFP 300 (3HP) in the past\",\n              \"Aborted course of IPT in the past\",\n              \"Never taken IPT or 3HP\"\n            ])\n            return this.mapStrToOptions(options)\n          }\n        },\n        ...generateDateFields({\n          id: 'date_started_tpt',\n          helpText: 'Started TPT Treatment',\n          required: true,\n          minDate: () => this.patient.getBirthdate(),\n          maxDate: () => ConsultationService.getSessionDate(),\n          condition: (f: any) => f.routine_tb_therapy.value.match(/currently/i),\n          computeValue: (date: string) => date,\n          estimation: {\n            allowUnknown: true,\n            estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n          }\n        }),\n        {\n          id: \"tpt_drugs_received\",\n          helpText: \"TPT Drugs Received\",\n          required: true,\n          condition: (f: any) => f.routine_tb_therapy.value.match(/currently/i),\n          type: FieldType.TT_ADHERENCE_INPUT,\n          options: (f: any) => this.getTptDrugs(f),\n          computedValue: (drugs: Option[], f: any, c: any) => ({\n            tag: 'consultation',\n            obs:  drugs.map(async (drug: any) => this.consultation.buildObs(\n              'TPT Drugs Received', \n              {\n                'value_drug': drug?.other?.drug_id || 0,\n                'value_datetime': c?.date_started_tpt || null,\n                'value_numeric': drug?.value || 0\n              }\n            ))\n          }),\n          config: {\n            titles: {\n              label: 'Drug name',\n              value: 'Tablets received'\n            }\n          }\n        },\n        {\n          id: 'tpt_tranfer_from',\n          helpText: 'Facility client is transferring in from',\n          type: FieldType.TT_SELECT,\n          computedValue: ({label}: Option) => ({\n            tag:'consultation',\n            obs: this.consultation.buildValueText(\n              'Location TPT last received', label\n            )\n          }),\n          validation: (val: any) => Validation.required(val),\n          condition: (f: any) => f.routine_tb_therapy.value.match(/currently/i),\n          options: (_: any, filter='') => getFacilities(filter),\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true\n          }\n        },\n        {\n          id: \"allergic_to_sulphur\",\n          helpText: \"Allergic to Cotrimoxazole\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Allergic to sulphur\", data.value)\n          }),\n          beforeNext: (data: any) => {\n            this.isAllergicToSulphur(data);\n            console.log(this.allergicToSulphur)\n            return true;\n          },\n          options: () => this.yesNoUnknownOptions()\n        },\n        ...this.getAdherenceFields(true),\n        {\n          id: \"refer_to_clinician\",\n          helpText: \"Refer to clinician\",\n          type: FieldType.TT_SELECT,\n          condition: () => UserService.isNurse(),\n          validation: (data: any) => Validation.required(data),\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Refer to clinician\", data.value)\n          }),\n          options: () => this.yesNoOptions(),\n        },\n        {\n          id: \"medication_to_prescribe\",\n          proxyID: \"prescription\",\n          helpText: \"Medication to prescribe during this visit\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          init: async () => {\n            if (!this.isNoneClientPatient) {\n              this.currentWeight = Number((await this.patient.getRecentWeight()))\n              this.autoSelect3HP = await Store.get('ART_AUTO_3HP_SELECTION')\n              this.tptStatus = await this.consultation.getTptTreatmentStatus()\n              this.completed3HP = this.tptStatus.tpt !== null && this.tptStatus.completed\n            }\n            return true\n          },\n          beforeNext: async (v: Option[], f: any) => {\n            if (this.isEligibleForTpt &&\n                !this.patientOnTpt(f) &&\n                !v.some(d => /3hp|ipt/i.test(d.label))) {\n              if (!(await alertConfirmation(\"Are you sure you want to skip TPT prescription for eligible client?\"))) {\n                return false\n              }\n            }\n            return true\n          },\n          condition: (f: any) => !f.refer_to_clinician || `${f.refer_to_clinician.value}`.match(/no/i),\n          validation: (data: Option) => Validation.required(data),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation', \n            obs: this.buildMedicationOrders(v)\n          }),\n          onValueUpdate: (listData: Array<Option>, value: Option, formData: any) => {\n            const list =  this.disablePrescriptions(listData, value)\n            return this.on3HPValueUpdate(list, value, formData)\n          },\n          options: (formData: any, c: Array<Option>, cd: any, currentOptions: any) => {\n            return this.medicationOrderOptions(formData, currentOptions)\n          },\n          config: {\n            footerBtns: [\n              {\n                name: \"Update allergic to CPT\",\n                onClickComponentEvents: {\n                  refreshOptions: (btnEvent: FooterBtnEvent, options: Option[], formData: any): Option[] => {\n                    this.allergicToSulphur = btnEvent.btnOutput === 'Allergic'\n                    return this.medicationOrderOptions(formData, options)\n                  }\n                },\n                onClick: () => {\n                  return infoActionSheet(\n                    \"Allergic to Cotrimoxazole update\",\n                    `Is the patient allergic to cotrimoxazole.`,\n                    \"\",\n                    [\n                      { name: \"Allergic\", slot: \"start\", color: \"success\" },\n                      { name: \"NOT Allergic\", slot: \"end\" },\n                    ]\n                  )\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./Consultation.vue?vue&type=template&id=69a9d70e&ts=true\"\nimport script from \"./Consultation.vue?vue&type=script&lang=ts\"\nexport * from \"./Consultation.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Service } from \"./service\";\n\nexport class RegimenService extends Service {\n    constructor() {\n        super()\n    } \n\n    static getAllArvRegimens() {\n        return this.getJson(`programs/${this.getProgramID()}/all_arv_regimens`)\n    }\n\n    static getRegimens(patientId: number) {\n        return this.getJson(`programs/${this.getProgramID()}/regimens`, {'patient_id': patientId})\n    }\n\n    static getRegimensByWeight(weight: number, onTbTreatment = false) {\n        return this.getJson(`programs/${this.getProgramID()}/regimens`, {\n            weight,\n            'tb_dosage': onTbTreatment,\n        })\n    }\n\n    static getCustomIngridients() {\n        return this.getJson(`programs/${this.getProgramID()}/custom_regimen_ingredients`)\n    }\n\n    static getCurrentRegimen(patientId: number, date=this.getSessionDate()) {\n        return this.getJson(`programs/${this.getProgramID()}/${patientId}`, {date})   \n    }\n\n    static getRegimenExtras(name: string, weight: number) {\n        return this.getJson(`programs/${this.getProgramID()}/regimen_extras`, {name, weight})\n    }\n}","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./VLReminderModal.vue?vue&type=style&index=0&id=10a26cd2&scoped=true&lang=css\"","import { DrugInterface } from \"@/interfaces/Drug\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { Observation } from \"@/interfaces/observation\";\nimport HisDate from \"@/utils/Date\"\nimport { RegimenService } from \"@/services/regimen_service\";\nimport { isEmpty } from \"lodash\"\nimport { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { toDate } from \"@/utils/Strs\";\n\nexport enum AdverseEffectsCategories {\n    CONTRAINDICATION = \"contraindication\",\n    SIDE_EFFECT = \"side_effect\"\n}\n\nexport class PrescriptionService extends AppEncounterService {\n    nextVisitInterval: number;\n    fastTrack: boolean;\n    regimenExtras: Array<Record<string, any>>;\n    hangingPills: Array<Record<string, any>>;\n    fastTrackMedications: Array<Record<string, any>>;\n    medicationOrders: Array<number>;\n    treatmentState: string;\n    contraindications: Record<string, any>;\n    sideEffects: Record<string, any>;\n    tptPrescriptionCount: number;\n    lastSideEffectDate: string;\n\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 25, providerID) //TODO: Use encounter type reference name\n        this.nextVisitInterval = 0\n        this.fastTrack = false\n        this.regimenExtras = []\n        this.fastTrackMedications = []\n        this.hangingPills = []\n        this.medicationOrders = []\n        this.treatmentState = ''\n        this.contraindications = {}\n        this.sideEffects = {}\n        this.tptPrescriptionCount = 0\n        this.lastSideEffectDate = ''\n    }\n\n    setNextVisitInterval(nextVisitInterval: number) {\n        this.nextVisitInterval = nextVisitInterval\n    }\n\n    getHangingPills() {\n        return this.hangingPills\n    }\n\n    getMedicationOrders() {\n        return this.medicationOrders.map((i: number) => {\n            return AppEncounterService.getCachedConceptName(i)\n        })\n    }\n\n    getTptPrescriptionCount() {\n        return this.tptPrescriptionCount\n    }\n\n    getLastSideEffectDate() {\n        return this.lastSideEffectDate\n    }\n\n    getContraindications() { return this.contraindications }\n\n    getSideEffects() { return this.sideEffects }\n\n    getRegimenExtras() { return this.regimenExtras }\n\n    getPatientRegimens() { return RegimenService.getRegimens(this.patientID) }\n\n    getARVs() {\n        return RegimenService.getJson('arv_drugs')\n    }\n\n    getCustomIngridients() { return RegimenService.getCustomIngridients() }\n\n    getFastTrackMedications() { return this.fastTrackMedications }\n\n    getTreatmentState() { return this.treatmentState }\n\n    isFastTrack() { return this.fastTrack }\n\n    medicationOrdersAvailable() { return !isEmpty(this.medicationOrders) }\n\n    shouldPrescribeArvs() { \n        const arvs = AppEncounterService.getCachedConceptID(\"Antiretroviral drugs\")\n        return this.medicationOrders.includes(arvs)\n    }\n\n    shouldPrescribeExtras() {\n        const extras = AppEncounterService.getConceptsByCategory('art_extra_medication_order')\n        const extrasAvailable = extras.map((i: any) => this.medicationOrders.includes(i.concept_id))\n        return extrasAvailable.some(Boolean)\n    }\n\n    getRegimenStarterpack(regimenCode: number, patientWeight: number) {\n        const params = { weight: patientWeight, regimen: regimenCode }\n\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimen_starter_packs`,\n            params\n        )\n    }\n\n    async getLvpDrugsByType(type: string, regimen: number) {\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimens/${regimen}`,\n            {\n                'patient_id': this.patientID,\n                'lpv_drug_type': type\n            }\n        )\n    }\n\n    async loadContraindications() {\n        const contraindication = await AppEncounterService.getConceptID('Contraindications')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': contraindication, 'person_id': this.patientID \n        })\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.contraindications[date]) this.contraindications[date] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.contraindications[date].push(concept)\n        })\n    }\n\n    async loadDrugInduced() {\n        const drugInduced = await AppEncounterService.getConceptID('Drug induced')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': drugInduced, 'person_id': this.patientID \n        })\n\n        if (!obs) return\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.lastSideEffectDate) this.lastSideEffectDate = date\n\n            if (!o.value_drug || !o.value_coded) return\n\n            if (!this.sideEffects[date]) this.sideEffects[date] = {}\n\n            if (!this.sideEffects[date][o.value_drug]) this.sideEffects[date][o.value_drug] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.sideEffects[date][o.value_drug].push(concept)\n        })\n    }\n\n    async loadTptPrescriptionCount() {\n        const res = await AppEncounterService.getJson(\n            `tpt_prescription_count`, {\n                'patient_id': this.patientID,\n                'date': this.date\n            }\n        )\n\n        if (res) {\n            const count = res.count + 1\n            this.tptPrescriptionCount = count > 3 ? 3 : count\n        } \n    }\n\n    async loadFastTrackStatus() {\n        const isFastTrack = await AppEncounterService.getFirstValueCoded(this.patientID, 'Fast track')\n        const yes = await AppEncounterService.getConceptID('yes')\n\n        if (isFastTrack) this.fastTrack = isFastTrack === yes\n    }\n    \n    async loadRegimenExtras(date=this.date) {\n        const meds = await RegimenService.getJson(\n            `programs/${RegimenService.getProgramID()}/patients/${this.patientID}/dosages`,\n            {date}\n        )\n        if (meds) this.regimenExtras = Object.values(meds)\n    }\n\n    async loadMedicationOrders() {\n        const medicationOrders = await AppEncounterService.getConceptID(\"Medication orders\")\n        const orders = await AppEncounterService.getObs({\n            'concept_id': medicationOrders,\n            'date': this.date,\n            'person_id': this.patientID,\n            'page_size': 5\n        })\n        this.medicationOrders = orders.map((i: Observation) => i.value_coded)\n    }\n\n    async loadHangingPills() {\n        const pills = (await AppEncounterService.getAll(this.patientID, 'Pills brought'))||[]\n        this.hangingPills = pills.filter((o: any) => {\n            if (o.value_numeric >= 1) {\n                // Condition for detecting pills brought during transfer in.. This is a bit hack-ish\n                if (o.value_drug && toDate(o.obs_datetime) === toDate(this.date)) {\n                    return true\n                }\n                // This is for normal workflow adherence pills\n                return o.order||false\n            }\n            return false\n        }).map((o: any) => o?.order?.drug_order?.drug_inventory_id||o.value_drug)        \n    }\n\n    async loadFastTrackMedications() {\n        const drugs = await DrugOrderService.getLastDrugsReceived(this.patientID)\n        const withDosages = drugs.map(async(data: any) => {\n            const { drug } = data\n            const dosage = await DrugOrderService.getDrugDosages(this.patientID, drug.drug_id)\n            return {\n                'drug_id': drug.drug_id,\n                'drug_name': drug.name,\n                'units': drug.units,\n                'am': dosage.am,\n                'noon': dosage.noon,\n                'pm': dosage.pm,\n                'frequency': data.frequency\n            }\n        })\n        this.fastTrackMedications = await Promise.all(withDosages)\n    }\n\n    async loadTreatmentState() {\n        const params = { date: this.date }\n\n        const req = await AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/patients/${this.patientID}/status`,\n            params\n        )\n\n        if (req) this.treatmentState = req['status']\n    }\n\n    findAndGroupDrugSideEffects(drugs: Array<number>) {\n        const allSideEffects: any = {}\n\n        for (const date in this.sideEffects) {\n            const drugInduced = this.sideEffects[date]\n\n            for(const drug in drugInduced) {\n                if (!drugs.includes(parseInt(drug))) continue\n\n                if (!allSideEffects[date]) allSideEffects[date] = []\n\n                allSideEffects[date] = [\n                    ...allSideEffects[date], ...drugInduced[drug]\n                ]\n            }\n        }\n        return allSideEffects\n    }\n\n    calculatePillsPerDay(am: number, noon: number, pm: number) {\n        return parseFloat(am.toString()) + noon + pm\n    }\n\n    estimatePackSize(pillsPerDay: number, packSize=0) {\n        const packs = (pillsPerDay * this.nextVisitInterval) / packSize\n        \n        let roundedPacks = Math.round(packs)\n\n        if (roundedPacks <= 0) roundedPacks += 1\n\n        return roundedPacks\n    }\n\n    calculateDosage(morningTabs: number, eveningTabs: number): number {\n        let dose = 0\n        if (eveningTabs === 0) dose = morningTabs\n\n        if (morningTabs == 0) dose = eveningTabs\n\n        if (morningTabs > 0 && eveningTabs  > 0) {\n            dose = (morningTabs + eveningTabs) / 2\n        }\n        return dose\n    }\n    \n    calculateEquivalentDosage(morningTabs: number, eveningTabs: number): number {\n        return morningTabs + eveningTabs\n    }\n\n    calculateDateFromInterval() {\n        const dateObj = new Date(this.date)\n        dateObj.setDate(dateObj.getDate() + this.nextVisitInterval)\n        return HisDate.toStandardHisFormat(dateObj)\n    }\n\n    getDrugPackSize(drug: any) {\n        if (drug.pack_size) return drug.pack_size\n        try{\n            return drug.barcodes[0].tabs\n        }catch(e) {\n            return 30\n        }\n    }\n\n    getInstructions(drugName: string, morningTabs: number, eveningTabs: number, units: string): string {\n        return `${drugName} :- Morning: ${morningTabs} ${units}, Evening: ${eveningTabs} ${units}`\n    }\n\n    toOrderObj(id: number, name: string, units: string, am=0, pm=0, frequency=''): DrugInterface {\n        return {\n            'drug_inventory_id': id,\n            'equivalent_daily_dose': this.calculateEquivalentDosage(am, pm),\n            'start_date': this.date,\n            'auto_expire_date': this.calculateDateFromInterval(), \n            'units': units,\n            'instructions': this.getInstructions(name, am, pm, units),\n            'dose': this.calculateDosage(am, pm),\n            'frequency': frequency\n        }\n    }\n\n    async getReasonForRegimenSwitch() {\n        const reason = await AppEncounterService.getFirstValueText(this.patientID, 'Reason for ARV switch')\n        return reason ? reason : 'N/A'\n    }\n\n    async createDrugOrder(drugOrders: Array<DrugInterface>) {\n        return DrugOrderService.create({\n            'encounter_id': this.encounterID,\n            'drug_orders': drugOrders\n        })\n    }\n\n    async createHangingPillsObs(response: string) {\n        return this.saveValueTextObs('appointment type', response)\n    }\n\n    async createRegimenSwitchObs(reasonForSwitch: string): Promise<Observation> {\n        return this.saveValueTextObs('Reason for ARV switch', reasonForSwitch)\n    }\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport async function getVillagesByName(name='a', page=1): Promise<Option[]> {\n    const villages = await LocationService.getVillagesByName(name, page)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport function getLandmarks(): Option[] {\n    const landmarks = [\n        'Catholic Church',\n        'CCAP',\n        'Seventh Day',\n        'Mosque',\n        'Primary School',\n        'Borehole',\n        'Secondary School',\n        'College',\n        'Market',\n        'Football Ground',\n        'Other'\n    ]\n\n    return landmarks.map(landmark =>({\n        label: landmark,\n        value: landmark,\n        other: {\n            code: landmark\n        }\n    }))\n}\n","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/index.js??ref--0-1!./SideEffectsModal.vue?vue&type=style&index=0&id=546674a2&scoped=true&lang=css\""],"sourceRoot":""}