{"version":3,"sources":["webpack:///./src/apps/OPD/services/hmis_report_service.ts","webpack:///./src/apps/OPD/services/idsr_service.ts","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/apps/OPD/views/reports/moh/HMIS/HMISTemplate.vue?81f2","webpack:///./src/apps/OPD/views/reports/moh/HMIS/HMISTemplate.vue","webpack:///./src/apps/OPD/views/reports/moh/HMIS/HMISTemplate.vue?8e9a","webpack:///./src/apps/OPD/views/reports/ReportMixin.vue","webpack:///./src/apps/OPD/views/reports/ReportMixin.vue?afb2","webpack:///./src/apps/OPD/views/reports/moh/MOHReportHeader.vue?88ad","webpack:///./src/apps/OPD/views/reports/moh/MOHReportHeader.vue","webpack:///./src/apps/OPD/views/reports/moh/MOHReportHeader.vue?0644","webpack:///./src/apps/OPD/services/opd_report_service.ts"],"names":["HMISReportService","OpdReportService","constructor","super","this","regenerate","setRegenerate","requestHMIS15","getReport","request","requestHMIS17","renderResults","params","all","count","key","value","Object","entries","temp","condition","item","id","name","total","totalPatientIds","key1","value1","conditionDetails","length","push","getCSVString","IDSRConditionsObj","CSVString","row","IDSRReportService","requestIDSRWeekly","requestIDSRMonthly","lessThanFiveYears","lessThanFiveYearsPatientIds","greaterThanEqualFiveYears","greaterThanEqualFiveYearsPatientIds","epiWeeks","epiWeeksObj","Service","getJson","reverse","forEach","dates","split","startDate","endDate","txt","start","end","months","_payload","monthandyear","startandendmonths","trim","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","fields","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","defineComponent","components","TouchScreenForm","emits","data","props","type","Function","Boolean","default","String","required","methods","formData","computedData","$emit","i","__exports__","_hoisted_1","class","style","_component_report_table","_resolveComponent","_createElementBlock","_createVNode","columns","rows","config","tableCssTheme","ReportTable","conditions","table","thTxt","report","Conditions","buildRows","onDownload","dayjs","format","getCoreVersion","getApiVersion","periodDates","getLocationName","getSiteUUID","csvData","Blob","reportTitle","reportName","quarter","navigator","msSaveBlob","link","document","createElement","href","window","URL","createObjectURL","setAttribute","body","appendChild","click","removeChild","td","textAlign","buildRow","patientIds","tdLink","async","onDrillDown","watch","immediate","handler","reportReady","period","customFileName","drillDownCache","toDate","date","HisDate","toStandardHisDisplayFormat","confirmPatient","patient","$router","title","printW","open","content","getElementById","write","innerHTML","setTimeout","print","close","conditionName","isEmpty","rowParser","Promise","ids","map","personDetails","Patientservice","findByID","getGivenName","getFamilyName","getGender","getAge","getPhoneNumber","getCurrentDistrict","getCurrentVillage","getClosestLandmark","tdBtn","modalController","dismiss","path","drilldownData","asyncRows","modal","create","component","DrilldownTable","cssClass","componentProps","showFilters","rowsPerPage","paginated","showReportStamp","footerColor","present","getDefaultDrillDownTable","tableRows","index","defaultRow","getArvNumber","tdDate","getBirthdate","toString","runTableDrill","drill","values","getEpiweeksFields","helpText","FieldType","TT_SELECT","validation","val","Validation","options","getReportEpiWeeks","items","q","label","moment","other","getMonthlyFields","getReportMonths","getDateDurationFields","useQuarter","setCustomQuarterPeriod","maxQuarter","minDate","maxDate","getSessionDate","quarters","getReportQuarters","generateDateFields","f","estimation","allowUnknown","computeValue","unload","d","s","c","end_date","_","start_date","clinicName","reportparams","totalOPDVisits","Number","periodLabel","rangeLabel","range","colspan","sortable","exportable","mounted","initTable","newValue","oldValue","tableHeaders","LA_TYPES","one","two","three","four","NCD_TYPES","MENTAL_HEALTH_DIAGNOSIS","epiweek","programID","getProgramID","getPatientsWithNIDs","getClinicRegistrations","getAttendance","getDrugsGivenWithoutPrescription","getDrugsGivenWithPrescription","getDiagnosis","url","getDiagnosisByAddress","getLaPrescriptions","getMalariaReport","printLaReport","printService","PrintoutService","keys","v","printLbl","Url","parameterizeObjToString","getDateIntervalPeriod","setStartDate","setEndDate","setEpiWeek","getReportPeriod","buildRequest","payload","minDuration","year","getCurrentYear"],"mappings":"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","file":"js/chunk-48a533fb.25a54954.js","sourcesContent":["import { OpdReportService } from \"./opd_report_service\";\n\nexport class HMISReportService extends OpdReportService {\n    regenerate: boolean;\n    constructor() {\n        super()\n        this.regenerate = false\n    }\n\n    setRegenerate(regenerate: boolean) {\n        this.regenerate = regenerate\n    }\n\n    requestHMIS15() {\n        return this.getReport('generate_hmis_15_report', {\n            request: 'true'\n        })\n    }\n\n    requestHMIS17() {\n        return this.getReport('generate_hmis_17_report', {\n            request: 'true',\n        })\n    }\n\n    renderResults(params: any) {\n        const all = []\n        let count = 1\n        for (const [key, value] of Object.entries(params)) {\n            const temp: any = []\n            const condition: any = value\n            const item = {\n                id: 0,\n                name: '',\n                total: 0,\n                totalPatientIds: ''\n            }\n            item.name = key\n            let total = 0\n            item.id = count\n            count += 1 \n            for (const [key1, value1] of Object.entries(condition)) {\n                key1\n                const conditionDetails: any = value1\n                if (conditionDetails != null) {\n                    total +=conditionDetails.length;\n                    item.total = total\n                    if(conditionDetails.length) {\n                        temp.push(...conditionDetails)\n                        item.totalPatientIds = temp\n                    }\n            }\n          }\n          all.push(item)\n        }\n        return all\n    }\n\n    getCSVString(IDSRConditionsObj: any) {\n        let CSVString = `Diseases/Events/Conditions, #,\\n`\n        for(const condition of IDSRConditionsObj) {\n          const row = `${condition.name},${condition.total},\\n`\n          CSVString+=row\n        }\n        return {CSVString}\n    }\n}\n","import { OpdReportService } from \"./opd_report_service\";\nimport moment from \"dayjs\"\nimport { Service } from \"@/services/service\";\n\nexport interface CohortValidationInterface {\n    param: number | string;\n    error: (indicator: number, param: number) => string;\n    check: (indicator: number, param: number) => boolean;\n}\n\nexport interface CommonInterface {\n    name: string;\n    start: string;\n    end: string;\n}\n\nexport class IDSRReportService extends OpdReportService {\n    regenerate: boolean;\n    constructor() {\n        super()\n        this.regenerate = false\n    }\n\n    setRegenerate(regenerate: boolean) {\n        this.regenerate = regenerate\n    }\n\n    requestIDSRWeekly() {\n        return this.getReport('generate_weekly_idsr_report', {\n            request: 'true',\n        })\n    }\n\n    requestIDSRMonthly() {\n        return this.getReport('generate_monthly_idsr_report', {\n            request: 'true',\n        })\n    }\n\n    renderResults(params: any) {\n        const all = []\n        let count = 1\n        for (const [key, value] of Object.entries(params)) {\n            const temp: any = []\n            const condition: any = value\n            const item = {\n                id: 0,\n                name: '',\n                lessThanFiveYears: '',\n                lessThanFiveYearsPatientIds: '',\n                greaterThanEqualFiveYears: '',\n                greaterThanEqualFiveYearsPatientIds: '',\n                total: 0,\n                totalPatientIds: ''\n            }\n            item.name = key\n            let total = 0\n            item.id = count\n            count += 1 \n            for (const [key1, value1] of Object.entries(condition)) {\n                const conditionDetails: any = value1\n                if (conditionDetails != null) {\n                    total +=conditionDetails.length;\n                    item.total = total\n                    if(conditionDetails.length) {\n                        temp.push(...conditionDetails)\n                        item.totalPatientIds = temp\n                    }\n                    if (key1 == '<5yrs') {\n                    item.lessThanFiveYears = conditionDetails.length\n                    item.lessThanFiveYearsPatientIds = conditionDetails\n                    }\n                if (key1 == '>=5yrs') {\n                item.greaterThanEqualFiveYears = conditionDetails.length\n                item.greaterThanEqualFiveYearsPatientIds = conditionDetails\n                }\n            }\n          }\n          all.push(item)\n        }\n        return all\n    }\n\n    getCSVString(IDSRConditionsObj: any) {\n        let CSVString = `Diseases/Events/Conditions, <5 yrs, >=5 yrs, Total,\\n`\n        for(const condition of IDSRConditionsObj) {\n            CSVString += `${condition.name},${condition.lessThanFiveYears},${condition.greaterThanEqualFiveYears},${condition.total},\\n`  \n        }\n        return {CSVString}\n    }\n\n    static async getReportEpiWeeks() {\n        const epiWeeks: Array<CommonInterface> = []\n        const epiWeeksObj = await Service.getJson('get_weeks')\n        epiWeeksObj.reverse().forEach( (item: any) => { \n            const dates = item[1].split(\" \")\n            const startDate = dates[0]\n            const endDate = dates[2]\n            const txt = item[0].split('W')\n            const name = txt[0] +\"/W\"+ txt[1]\n            epiWeeks.push({ name: name, start: startDate, end: endDate })\n        })\n        return epiWeeks\n    }\n\n    static async getReportMonths() {\n        const months: Array<CommonInterface> = []\n        const epiWeeksObj = await Service.getJson('get_months')\n        epiWeeksObj.forEach( (item: any) => {\n            const _payload = item[1];\n            const monthandyear = _payload[0]\n            const startandendmonths = _payload[1];\n            const dates = startandendmonths.split(\"to\");\n            months.push({ name: monthandyear, start: dates[0], end: dates[1].trim() })\n        })\n        return months\n    }\n}\n","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = {\n  class: \"my-table\",\n  style: {\"margin\":\"auto\",\"width\":\"95%\",\"margin-top\":\"3%\",\"margin-bottom\":\"3%\"}\n}\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_report_table = _resolveComponent(\"report-table\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createVNode(_component_report_table, {\n      columns: _ctx.columns,\n      rows: _ctx.rows,\n      config: {tableCssTheme: _ctx.tableCssTheme}\n    }, null, 8, [\"columns\", \"rows\", \"config\"])\n  ]))\n}","\n/* eslint-disable @typescript-eslint/camelcase */\nimport { defineComponent } from 'vue'\nimport { HMISReportService } from \"@/apps/OPD/services/hmis_report_service\"\nimport { Service } from \"@/services/service\"\nimport dayjs from 'dayjs'\nimport ReportTable from \"@/components/DataViews/tables/ReportDataTable.vue\"\nimport table, { ColumnInterface, RowInterface } from \"@/components/DataViews/tables/ReportDataTable\"\n\nexport default defineComponent({\n  components: { ReportTable },\n  data: function(){\n    return {\n      conditions: [] as any,\n      tableCssTheme: 'opd-report-theme',\n      total: ' Total ',\n      rows: [] as RowInterface[][],\n      columns: [\n      [\n        table.thTxt(''),\n        table.thTxt('Diseases/Events/Conditions'),\n        table.thTxt('UNVERIFIED'),\n        table.thTxt('VERIFIED'),\n      ]\n    ] as ColumnInterface[][],\n    }\n  },\n  props: ['params', 'periodDates', 'quarter', 'onDrillDown', 'reportName'],\n  methods: {\n   renderResults() {\n     const report = new HMISReportService()\n     const Conditions = report.renderResults(this.params)\n     if(Conditions.length) {\n       this.conditions = Conditions\n       this.rows = this.buildRows(Conditions)\n     } \n   },\n   onDownload() {\n     const report = new HMISReportService()\n     let {CSVString} = report.getCSVString(this.conditions)\n     CSVString += `\n          Date Created: ${dayjs().format('DD/MMM/YYYY HH:MM:ss')}\n          His-Core Version: ${Service.getCoreVersion()}\n          API Version: ${Service.getApiVersion()}\n          Report Period: ${this.periodDates}\n          Site: ${Service.getLocationName()}\n          Site UUID: ${Service.getSiteUUID()}`\n          ;\n      // }\n      const csvData = new Blob([CSVString], { type: \"text/csv;charset=utf-8;\" });\n      //IE11 & Edge\n      const reportTitle = `${Service.getLocationName()} ${this.reportName} ${this.quarter}`;\n      \n      if (navigator.msSaveBlob) {\n        navigator.msSaveBlob(csvData, 'exportFilename');\n      } else {\n        //In FF link must be added to DOM to be clicked\n        const link = document.createElement(\"a\");\n        link.href = window.URL.createObjectURL(csvData);\n        link.setAttribute(\"download\", `${reportTitle}.csv`);\n        document.body.appendChild(link);\n        link.click();\n        document.body.removeChild(link);\n      }\n   },\n   buildRows(data: any): RowInterface[][] {\n     const rows: RowInterface[][] = []\n     data.forEach((condition: { \n       id: number;\n       name: string;\n       total: number;\n       totalPatientIds: any;\n\n       }) => {\n        rows.push([\n          table.td(condition.id, {style: {textAlign: 'left'}}),\n          table.td(condition.name, {style: {textAlign: 'left'}}),\n          this.buildRow(this.total+'('+condition.name+')', condition.total, condition.totalPatientIds),\n          table.td(''),\n        ])\n     })\n     return rows\n   },\n   buildRow(name: string, count: number, patientIds: any) {\n    if (!(count > 0)) {\n      return table.td(0)\n     } else {\n      return table.tdLink(\n      count,\n      async () =>  this.onDrillDown(name, patientIds)\n      )\n     }\n   }\n  },\n  watch: {\n    params: {\n      immediate: true,\n      handler() {\n        this.renderResults();\n      }\n    }\n  }\n})\n","import { render } from \"./HMISTemplate.vue?vue&type=template&id=0bcecae1&ts=true\"\nimport script from \"./HMISTemplate.vue?vue&type=script&lang=ts\"\nexport * from \"./HMISTemplate.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","\nimport { defineComponent } from 'vue'\nimport { Field } from '@/components/Forms/FieldInterface'\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport { modalController } from \"@ionic/vue\";\nimport DrilldownTable from \"@/apps/ART/views/reports/BasicReportTemplate.vue\"\nimport { OpdReportService } from \"@/apps/OPD/services/opd_report_service\"\nimport { IDSRReportService } from \"@/apps/OPD/services/idsr_service\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport moment from \"dayjs\"\nimport { Service } from '@/services/service';\nimport { isEmpty } from 'lodash'\n\nexport default defineComponent({\n    data: () => ({\n        fields: [] as Array<Field>,\n        report: {} as any,\n        reportReady: false as boolean,\n        period: '' as string,\n        startDate: '' as string,\n        endDate: '' as string,\n        customFileName: '' as string,\n        drillDownCache: {} as Record<number, Array<any>>\n    }),\n    methods: {\n        toDate(date: string) {\n            return HisDate.toStandardHisDisplayFormat(date)\n        },\n        confirmPatient(patient: number) {\n            return this.$router.push(`/patients/confirm?person_id=${patient}`)\n        },\n        async exportToCustomPDF(title: string) {\n            const printW = open('', '', 'width:1024px, height:768px')\n            const content = document.getElementById('report-content')\n            if (content && printW) {\n                printW.document.write(`\n                    <html>\n                    <head>\n                        <title>${title}</title>\n                        <link rel=\"stylesheet\" media=\"print\" href=\"/assets/css/cohort.css\" />\n                    </head>\n                    <body>\n                        ${content.innerHTML}\n                    </body>\n                    </html>\n                `)\n                setTimeout(() => { printW.print(); printW.close() }, 3500)\n            }\n        },\n        async onDrillDown(conditionName: string, patientIds: number[]) {\n            if(isEmpty(patientIds)) return\n            const columns = [[\n                table.thTxt('First name'),\n                table.thTxt('Last name'),\n                table.thTxt('Gender'),\n                table.thTxt('Age'),\n                table.thTxt('Phone'),\n                table.thTxt('Address'),\n                table.thTxt('Action')\n            ]]\n            const rowParser = async (ids: number[]) => {\n                return await Promise.all(ids.map(async (id) => {\n                const personDetails = await Patientservice.findByID(id)\n                const patient = new Patientservice(personDetails)\n                return [\n                    table.td(patient.getGivenName()),\n                    table.td(patient.getFamilyName()),\n                    table.td(patient.getGender()),\n                    table.td(patient.getAge()),\n                    table.td(patient.getPhoneNumber()),\n                    table.td(`${patient.getCurrentDistrict()}, ${patient.getCurrentVillage()}, ${patient.getClosestLandmark()}`),\n                    table.tdBtn('Select', async () => {\n                    await modalController.dismiss({})\n                    this.$router.push({ path: `/patient/dashboard/${id}`})\n                    })\n                ]\n                })) \n            }\n            return this.drilldownData(conditionName, columns, patientIds, rowParser)\n        },\n        async drilldownAsyncRows(title: string, columns: Array<any>, asyncRows: Function) {\n            const modal = await modalController.create({\n                component: DrilldownTable,\n                cssClass: 'large-modal',\n                componentProps: { \n                    title, \n                    columns, \n                    asyncRows,\n                    showFilters: true,\n                    rowsPerPage: 50,\n                    paginated: true,\n                    showReportStamp: false,\n                    footerColor: 'light',\n                    onFinish: () => modalController.dismiss()\n                }\n            })\n            modal.present()\n        },\n        async drilldownData(title: string, columns: Array<any>, rows: Array<any>, rowParser: any) {\n            const modal = await modalController.create({\n                component: DrilldownTable,\n                cssClass: 'large-modal',\n                componentProps: { \n                    title, \n                    columns, \n                    rows,\n                    rowParser,\n                    rowsPerPage: 50,\n                    showFilters: true,\n                    paginated: true,\n                    showReportStamp: false,\n                    footerColor: 'light',\n                    onFinish: () => modalController.dismiss()\n                }\n            })\n            modal.present()\n        },\n        getDefaultDrillDownTable() {\n            const columns = [\n                [\n                    table.thTxt('ARV number'), \n                    table.thTxt('Gender'),\n                    table.thTxt('Birth Date'), \n                    table.thTxt('Actions')\n                ]\n            ]\n            const rowParser = (tableRows: Array<any[]>) => {\n                return tableRows.map(async (defaultRow: Array<any>) => {\n                    const [index, id ] = defaultRow\n                    if (id in this.drillDownCache) {\n                        //const [oldIndex, ...rest] = this.drillDownCache[id]\n                        return [index] // Assign new index number and maintain patient record\n                    } \n    \n                    const data = await Patientservice.findByID(id)\n                    const patient = new Patientservice(data)\n                    const row = [\n                        index,\n                        table.td(patient.getArvNumber()), \n                        table.td(patient.getGender()), \n                        table.tdDate(patient.getBirthdate().toString()),\n                        table.tdBtn('Show', async () => {\n                            await modalController.dismiss({})\n                            this.$router.push({ path: `/patient/dashboard/${id}`})\n                        })\n                    ]\n                    this.drillDownCache[id] = row\n                    return row\n                })\n            }\n            return { rowParser, columns }\n        },\n        runTableDrill(data: any, title='Drilldown patients') {\n            const { columns, rowParser } = this.getDefaultDrillDownTable()\n            this.drilldownData(title, columns, data, rowParser)\n        },\n        drill(values: Array<number>, title='Drill table') {\n            if (values && values.length > 0) {\n                return table.tdLink(\n                    values.length, \n                    () => this.runTableDrill(values, title)\n                )\n            }\n            return table.td(0)\n        },\n        getEpiweeksFields(): Array<Field> {\n            return [\n                {\n                    id: 'epiweek',\n                    helpText: 'Select EPI week',\n                    type: FieldType.TT_SELECT,\n                    validation: (val: Option) => Validation.required(val),\n                    options: async () => {\n                        const epiWeeks = await IDSRReportService.getReportEpiWeeks()\n                        const items: Array<Option> = epiWeeks.map((q: any) => ({\n                            label: q.name +' - ('+ moment(q.start).format('DD/MMM/YYYY') +' - '+ moment(q.end).format('DD/MMM/YYYY')+')',\n                            value: q.start,\n                            other: q\n                        }))\n                        return items\n                    }\n                },\n            ]\n        },\n        getMonthlyFields(): Array<Field> {\n            return [\n                {\n                    id: 'idsrmonth',\n                    helpText: 'Select Month',\n                    type: FieldType.TT_SELECT,\n                    validation: (val: Option) => Validation.required(val),\n                    options: async () => {\n                        const epiWeeks = await IDSRReportService.getReportMonths()\n                        const items: Array<Option> = epiWeeks.map((q: any) => ({\n                            label: q.name +' - ('+ moment(q.start).format('DD/MMM/YYYY') +' - '+ moment(q.end).format('DD/MMM/YYYY')+')',\n                            value: q.start,\n                            other: q\n                        }))\n                        return items\n                    }\n                },\n            ]\n        },\n        getDateDurationFields(useQuarter=false, setCustomQuarterPeriod=false, maxQuarter=5): Array<Field> {\n            const minDate = '2001-01-01'\n            const maxDate = Service.getSessionDate()\n            return [\n                {\n                    id: 'quarter',\n                    helpText: 'Select Quarter',\n                    type: FieldType.TT_SELECT,\n                    condition: () => useQuarter,\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => {\n                        const quarters = OpdReportService.getReportQuarters(maxQuarter)\n                        let items: Array<Option> = quarters.map((q: any) => ({\n                            label: q.name,\n                            value: q.start,\n                            other: q\n                        }))\n                        if (setCustomQuarterPeriod) {\n                            items = [\n                                {\n                                    label: 'Set custom period',\n                                    value: 'custom_period',\n                                    other: {}\n                                },\n                                ...items\n                            ]\n                        }\n                        return items\n                    }\n                },\n                ...generateDateFields({\n                    id: 'start_date',\n                    helpText: 'Start',\n                    required: true,\n                    condition: (f: any) => f.quarter && f.quarter.value === 'custom_period' || !useQuarter,\n                    minDate: () => minDate,\n                    maxDate: () => maxDate,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string) => date \n                }),\n                ...generateDateFields({\n                    id: 'end_date',\n                    helpText: 'End',\n                    required: true,\n                    condition: (f: any) => f.quarter && f.quarter.value === 'custom_period' || !useQuarter,\n                    unload: (d: any, s: any, f: any, c: any) => {\n                        if (s === 'next') {\n                            this.endDate = c.end_date\n                        }\n                    },\n                    minDate: (_: any, c: any) => c.start_date,\n                    maxDate: () => maxDate,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string) => date\n                })\n            ]\n        }\n    }\n})\n","import script from \"./ReportMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./ReportMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = { style: {\"margin\":\"auto\",\"width\":\"95%\",\"margin-top\":\"1%\"} }\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_report_table = _resolveComponent(\"report-table\")!\n\n  return (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [\n    _createVNode(_component_report_table, {\n      columns: _ctx.columns,\n      rows: _ctx.rows,\n      config: {tableCssTheme: _ctx.tableCssTheme}\n    }, null, 8, [\"columns\", \"rows\", \"config\"])\n  ]))\n}","\nimport { defineComponent } from 'vue'\nimport ReportTable from \"@/components/DataViews/tables/ReportDataTable.vue\"\nimport table, { ColumnInterface, RowInterface } from \"@/components/DataViews/tables/ReportDataTable\"\n\nexport default defineComponent({\n    components: { ReportTable },\n    props: {\n      clinicName: {\n        type: String,\n        default: ''\n      },\n      reportparams: {\n        type: Object,\n        required: true\n      },\n      totalOPDVisits: {\n        type: Number,\n        required: true\n      },\n      reportName: {\n        type: String,\n        required: true\n      },\n      periodLabel: {\n        type: String,\n        required: true\n      },\n      periodDates: {\n        type: String,\n        required: true\n      },\n      rangeLabel: {\n        type: String,\n        required: true\n      },\n      range: {\n        type: String,\n        required: true\n      },\n    },\n    data: function() {\n      return {\n        tableCssTheme: 'opd-report-theme',\n        rows: [] as RowInterface[][],\n        columns: [\n            [\n              table.thTxt(this.reportName, {\n                colspan: 2,\n                sortable: false,\n                exportable: false \n              })\n            ]\n        ] as ColumnInterface[][],\n      }\n    },\n    mounted() {\n      this.initTable()\n    },\n    watch: {\n       totalOPDVisits(newValue, oldValue) {\n         this.initTable()\n       }\n    },\n    methods: {\n      initTable() {\n        const rows: RowInterface[][] = []\n        const tableHeaders = [\n          {\n            name: 'Country:',\n            value: 'Malawi',\n          },\n          {\n            name: 'Reporting Facility Name:',\n            value: this.clinicName\n          },\n          {\n            name: this.rangeLabel+':',\n            value: this.range\n          },\n          {\n            name: this.periodLabel+':',\n            value: this.periodDates\n          },\n          {\n            name: 'Total OPD Visits:',\n            value: this.totalOPDVisits\n          }\n\n        ]\n        tableHeaders.forEach(item => {\n          if(item.name !== 'undefined:') {\n                rows.push([\n                    table.td(item.name, {style: {textAlign: 'left'}}),\n                    table.td(item.value, {style: {textAlign: 'left'}}),\n                ])\n          }\n        })\n        this.rows = rows\n      }\n    }\n  })\n  ","import { render } from \"./MOHReportHeader.vue?vue&type=template&id=3d81af96&ts=true\"\nimport script from \"./MOHReportHeader.vue?vue&type=script&lang=ts\"\nexport * from \"./MOHReportHeader.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Service } from \"@/services/service\";\nimport HisDate from \"@/utils/Date\"\nimport { PrintoutService } from '@/services/printout_service';\nimport Url from \"@/utils/Url\";\n\nexport interface QuarterInterface {\n    name: string;\n    start: string;\n    end: string;\n}\n\nexport const AGE_GROUPS = [\n    '0-5 months', '6-11 months',\n    '12-23 months', '2-4 years', \n    '5-9 years', '10-14 years', \n    '15-17 years', '18-19 years', \n    '20-24 years', '25-29 years', \n    '30-34 years', '35-39 years', \n    '40-44 years', '45-49 years', \n    '50 plus years'\n]\n\nexport const OTHER_AGE_GROUPS = [\n    '<1 year', '1-4 years',\n    '5-9 years', '10-14 years',\n    '15-19 years', '20-24 years',\n    '25-29 years', '30-34 years',\n    '35-39 years', '40-44 years',\n    '45-49 years', '50 plus years'\n]\n\nexport const LA_TYPES: Record<string, string> = {\n    one: 'AL 1', \n    two: 'AL 2', \n    three: 'AL 3', \n    four: 'LA 4'\n}\n\nexport const NCD_TYPES = [\n    'Diabetes',\n    'Hypertension',\n    'Stroke',\n    'Suspected cancer',\n    'Confirmed cancer',\n    'Palliative cancer',\n    'Asthma',\n    'Depression',\n    'Acute psychosis',\n    'Chronic psychosis',\n    'Epilepsy'\n]\n\nexport const MENTAL_HEALTH_DIAGNOSIS = [\n    'Organic mental disorder (Chronic)',\n    'Organic mental disorder (acute)',\n    'Alcohol use mental disorder',\n    'Drug use mental disorder',\n    'Schizophrenia',\n    'Acute and transient psychotic disorder',\n    'Schizo-affective disorder',\n    'Mood-affective disorder (MANIC)',\n    'Mood-affective disorder (BIPOLAR)',\n    'Mood-affective disorder (DEPRESSION)',\n    'Anxiety disorder',\n    'Stress reaction adjustment disorder',\n    'Dissociative conversion disorder',\n    'Somatoform disorder',\n    'Puerperal mental disorder',\n    'Personality/Behaviour disorder',\n    'Mental retardation',\n    'Psychological mental disorder',\n    'Hyperkinetic conduct disorder',\n    'Epilepsy'\n]\n\nexport class OpdReportService extends Service {\n    programID: number;\n    startDate: string;\n    endDate: string;\n    date: string;\n    epiweek: string;\n    constructor() {\n        super()\n        this.endDate = ''\n        this.startDate = ''\n        this.epiweek = ''\n        this.date = Service.getSessionDate()\n        this.programID = Service.getProgramID()\n    }\n\n    getPatientsWithNIDs() {\n        return this.getReport('with_nids')\n    }\n\n    getClinicRegistrations(){\n        return this.getReport('registration');\n    }\n\n    getAttendance(){\n        return this.getReport(`programs/${this.programID}/reports/attendance`)\n    }\n\n    getDrugsGivenWithoutPrescription() {\n        return this.getReport('drugs_given_without_prescription')\n    }\n\n    getDrugsGivenWithPrescription() {\n        return this.getReport('drugs_given_with_prescription')\n    }\n\n    getDiagnosis(){\n        const url = `programs/${this.programID}/reports/diagnosis`\n        return Service.getJson(url, {\n            'start_date': this.startDate,\n            'end_date': this.endDate,\n            'date': this.date\n        })\n    }\n\n    getDiagnosisByAddress(){\n        return this.getReport('diagnosis_by_address')\n    }\n\n    getLaPrescriptions(){\n        const url = `programs/${this.programID}/reports/la_prescriptions`\n        return Service.getJson(url, {\n            'start_date': this.startDate,\n            'end_date': this.endDate,\n            \n        })\n    }\n\n    getMalariaReport(){\n        const url = `programs/${this.programID}/reports/malaria_report`\n        return Service.getJson(url, {\n            'start_date': this.startDate,\n            'end_date': this.endDate,\n            'date': this.date\n        })\n    }\n    \n    printLaReport(data: Record<string, any>){\n        const printService = new PrintoutService()\n        const url = `programs/${this.programID}/barcodes/la_report`\n        const params: Record<string, any> = {\n            \"date[start]\": this.startDate,\n            \"date[end]\": this.endDate\n        }\n        Object.keys(LA_TYPES).forEach((v, i) => {\n            i++\n            params[`${i}[prescription]`] = data[`total_la_${v}_prescribed_drugs`]\n            params[`${i}[dispensed]`] = data[`total_la_${v}_dispensed_drugs`]\n        })\n        return printService.printLbl(`${url}?${Url.parameterizeObjToString(params)}`)\n    }\n\n    getDateIntervalPeriod() {\n        return `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n    }\n\n    setStartDate(startDate: string) {\n        this.startDate = startDate\n    }  \n\n    setEndDate(endDate: string) {\n        this.endDate = endDate\n    }\n\n    setEpiWeek(epiweek: string) {\n        this.epiweek = epiweek\n    }\n\n    getReportPeriod() {\n        return this.startDate && this.endDate\n         ? `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n         : '-'\n    }\n\n    getReport(url: string, params={}) {\n        return Service.getJson(url, this.buildRequest(params))\n    }\n\n    buildRequest(config: Record<string, any> = {}) {\n        const payload: any = {'date': this.date, 'program_id': this.programID}\n        if (this.startDate && this.endDate) {\n            payload['start_date'] = this.startDate\n            payload['end_date'] = this.endDate\n        }\n        if (this.epiweek) {\n            payload['epiweek'] = this.epiweek\n        }\n        return { ...payload, ...config }\n    }\n\n    static getReportQuarters(minDuration= 4) {\n        const quarters: Array<QuarterInterface> = []\n        let year = HisDate.getCurrentYear()\n        for(let i=0; i < minDuration; ++i) {\n            quarters.push({ name: `Q4 ${year}`, start: `${year}-10-01`, end: `${year}-12-31` })\n            quarters.push({ name: `Q3 ${year}`, start: `${year}-07-01`, end: `${year}-09-30` })\n            quarters.push({ name: `Q2 ${year}`, start: `${year}-04-01`, end: `${year}-06-30` })\n            quarters.push({ name: `Q1 ${year}`, start: `${year}-01-01`, end: `${year}-03-31` })\n            --year\n        }\n        return quarters\n    }\n\n}"],"sourceRoot":""}