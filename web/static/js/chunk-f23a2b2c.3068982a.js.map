{"version":3,"sources":["webpack:///./src/apps/CxCa/views/reports/clinic/VisitReason.vue?f89a","webpack:///./src/apps/CxCa/views/reports/clinic/VisitReason.vue","webpack:///./src/apps/CxCa/views/reports/clinic/VisitReason.vue?a38e","webpack:///./src/apps/CxCa/services/reports/cxca_report_service.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_report_template","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","title","rows","fields","columns","period","onReportConfiguration","init","_","defineComponent","components","ReportTemplate","IonPage","mixins","ReportMixin","data","reportService","table","thTxt","created","this","getDateDurationFields","methods","config","CxCaReportService","setStartDate","start_date","setEndDate","end_date","getClinicReport","buildRows","formattedData","results","concepts","count","concept","undefined","record","result","reason","patientID","patient_id","push","td","length","__exports__","Service","constructor","super","endDate","startDate","date","getSessionDate","programID","getProgramID","getPepfarReport","reportName","getReport","getMohReport","getDateIntervalPeriod","HisDate","toStandardHisDisplayFormat","getReportPeriod","url","params","getJson","buildRequest","payload","minDuration","quarters","year","getCurrentYear","i","name","start","end"],"mappings":"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","file":"js/chunk-f23a2b2c.3068982a.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_report_template = _resolveComponent(\"report-template\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_report_template, {\n        title: _ctx.title,\n        rows: _ctx.rows,\n        fields: _ctx.fields,\n        columns: _ctx.columns,\n        period: _ctx.period,\n        onReportConfiguration: _ctx.init\n      }, null, 8, [\"title\", \"rows\", \"fields\", \"columns\", \"period\", \"onReportConfiguration\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from 'vue'\nimport ReportTemplate from \"@/views/reports/BaseTableReport.vue\"\nimport table, { ColumnInterface, RowInterface } from \"@/components/DataViews/tables/ReportDataTable\"\nimport ReportMixin from '@/apps/ART/views/reports/ReportMixin.vue'\nimport { IonPage } from \"@ionic/vue\";\nimport { CxCaReportService } from '@/apps/CxCa/services/reports/cxca_report_service'\nexport default defineComponent({\n\n  components: { ReportTemplate, IonPage },\n  mixins: [ReportMixin],\n  data: () => ({\n    title: 'Visit reasons',\n    rows: [] as RowInterface[],\n    reportService: {} as any,\n    columns: [\n      [\n        table.thTxt(''),\n        table.thTxt('Reason'),\n         table.thTxt('Number'),\n      ]\n    ] as ColumnInterface[][],\n  }),\n  created() {\n    this.fields = this.getDateDurationFields()\n  },\n  methods: {\n    async init(_: any, config: any) {\n      this.reportService = new CxCaReportService()\n      this.reportService.setStartDate(config.start_date)\n      this.reportService.setEndDate(config.end_date)\n      const data = await this.reportService.getClinicReport('VISIT REASONS');\n      this.rows = this.buildRows(data)\n\n    },\n    buildRows(data: any): RowInterface[] {\n      const formattedData: any = [];\n      const results: any = {};\n      const concepts = [\n        'Initial Screening',\n        'Postponed treatment',\n        'One year subsequent check-up after treatment',\n        'Subsequent screening',\n        'Problem visit after treatment',\n        'Referral'\n      ];\n\n      let count = 1;\n\n      for (const concept of concepts) {\n        if (results[concept] == undefined)\n          results[concept] = [];\n\n        for (const record of data) {\n          const result = record.reason;\n          const patientID = record.patient_id;\n          if (result != concept)\n            continue;\n\n          results[result].push(patientID);\n        }\n      }\n\n      for (const result in results) {\n        formattedData.push(\n          [table.td(count++), table.td(result), table.td(results[result].length)]\n        );\n      }\n      return formattedData;\n    },\n  },\n})\n","import { render } from \"./VisitReason.vue?vue&type=template&id=6b204074&ts=true\"\nimport script from \"./VisitReason.vue?vue&type=script&lang=ts\"\nexport * from \"./VisitReason.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Service } from \"@/services/service\";\nimport HisDate from \"@/utils/Date\"\n\nexport interface QuarterInterface {\n    name: string;\n    start: string;\n    end: string;\n}\n\n\n\nexport const AGE_GROUPS = [\n    '15-19 years', '20-24 years',\n    '25-29 years', '30-34 years',\n    '35-39 years', '40-44 years',\n    '45-49 years', '50 plus years'\n]\n\n\nexport class CxCaReportService extends Service {\n    programID: number;\n    startDate: string;\n    endDate: string;\n    date: string;\n    constructor() {\n        super()\n        this.endDate = ''\n        this.startDate = ''\n        this.date = Service.getSessionDate()\n        this.programID = Service.getProgramID()\n    }\n\n    getPepfarReport(reportName: string) {\n        return this.getReport('pepfar_cxca', {'report_name': reportName})\n    }\n    getClinicReport(reportName: string) {\n        return this.getReport('screened_for_cxca', {'report_name': reportName})\n    }\n    getMohReport(reportName: string) {\n        return this.getReport('screened_for_cxca', {'report_name': reportName})\n    }\n    \n    getDateIntervalPeriod() {\n        return `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n    }\n\n    setStartDate(startDate: string) {\n        this.startDate = startDate\n    }  \n\n    setEndDate(endDate: string) {\n        this.endDate = endDate\n    }\n\n   \n\n    getReportPeriod() {\n        return this.startDate && this.endDate\n         ? `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n         : '-'\n    }\n\n    getReport(url: string, params={}) {\n        return Service.getJson(url, this.buildRequest(params))\n    }\n\n    buildRequest(config: Record<string, any> = {}) {\n        const payload: any = {'date': this.date, 'program_id': 24}\n        if (this.startDate && this.endDate) {\n            payload['start_date'] = this.startDate\n            payload['end_date'] = this.endDate\n        }\n        return { ...payload, ...config }\n    }\n\n    static getReportQuarters(minDuration= 4) {\n        const quarters: Array<QuarterInterface> = []\n        let year = HisDate.getCurrentYear()\n        for(let i=0; i < minDuration; ++i) {\n            quarters.push({ name: `Q4 ${year}`, start: `${year}-10-01`, end: `${year}-12-31` })\n            quarters.push({ name: `Q3 ${year}`, start: `${year}-07-01`, end: `${year}-09-30` })\n            quarters.push({ name: `Q2 ${year}`, start: `${year}-04-01`, end: `${year}-06-30` })\n            quarters.push({ name: `Q1 ${year}`, start: `${year}-01-01`, end: `${year}-03-31` })\n            --year\n        }\n        return quarters\n    }\n\n}"],"sourceRoot":""}