{"version":3,"sources":["webpack:///./src/apps/ART/services/reports/art_report_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/apps/ART/views/reports/inconsistencies/DataCleaningVerification.vue?1c7b","webpack:///./src/apps/ART/views/reports/inconsistencies/DataCleaningVerification.vue","webpack:///./src/apps/ART/views/reports/inconsistencies/DataCleaningVerification.vue?84b3","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ART/services/reports/data_cleaning_report_service.ts"],"names":["ArtReportService","Service","constructor","super","this","endDate","startDate","quarter","date","getSessionDate","programID","getProgramID","getDateIntervalPeriod","HisDate","toStandardHisDisplayFormat","setStartDate","setEndDate","setQuarter","getReport","url","params","getJson","buildRequest","getMaternalStatus","patientIds","reportDefinition","Url","parameterizeObjToString","postJson","config","payload","year","daysInMonth","m","dayjs","startMonth","endMonth","qtr","start","end","qtrBounds","getQuarterBounds","getFullYear","Date","qtrName","name","maxQuarters","qtrs","currDate","currYear","curYr","getMonth","getDate","currentQtr","getQtrByDate","i","push","buildQtrObj","FlowState","dformat","d","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","facts","ready","watch","handler","route","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","username","split","provider","find","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","e","console","error","toastDanger","ProgramService","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","onFinishAction","onFinish","skipSummary","cancelDestinationPath","_","mixins","EncounterMixinVue","IonPage","created","id","helpText","type","FieldType","TT_FULL_DATE","computedValue","v","validation","Validation","required","field","PersonHelper","getGivenNameField","proxyID","getFamilyNameField","f","ok","DataCleaningReportService","saveDataCleaningVerification","back","isCondition","ignored","undefined","prop","includes","every","Boolean","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","CtIndicator","getCleaningToolReport","indicator","getEnrolledOnArtBeforeBirth","getIncompleteVisits"],"mappings":"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","file":"js/chunk-62afc79a.6544bfc1.js","sourcesContent":["import { Service } from \"@/services/service\";\nimport HisDate from \"@/utils/Date\"\nimport Url from \"@/utils/Url\";\nimport dayjs from \"dayjs\";\n\nexport interface QuarterInterface {\n    name: string;\n    start: string;\n    end: string;\n}\n\nexport class ArtReportService extends Service {\n    programID: number;\n    startDate: string;\n    endDate: string;\n    date: string;\n    quarter: string\n    constructor() {\n        super()\n        this.endDate = ''\n        this.startDate = ''\n        this.quarter = ''\n        this.date = Service.getSessionDate()\n        this.programID = Service.getProgramID()\n    }\n\n    getDateIntervalPeriod() {\n        return `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n    }\n\n    setStartDate(startDate: string) {\n        this.startDate = startDate\n    }  \n\n    setEndDate(endDate: string) {\n        this.endDate = endDate\n    }\n\n    setQuarter(quarter: string) {\n        this.quarter = quarter\n    }\n\n    getReport(url: string, params={}) {\n        return Service.getJson(url, this.buildRequest(params))\n    }\n\n    getMaternalStatus(patientIds: number[], reportDefinition = 'pepfar') {\n        const params = Url.parameterizeObjToString(this.buildRequest({ 'report_definition': reportDefinition }))\n        return Service.postJson(`vl_maternal_status?${params}`, {\n            'patient_ids': patientIds\n        })\n    }\n\n    buildRequest(config: Record<string, any> = {}) {\n        const payload: any = {'date': this.date, 'program_id': this.programID}\n        if (this.startDate && this.endDate) {\n            payload['start_date'] = this.startDate\n            payload['end_date'] = this.endDate\n        }\n        if (this.quarter) {\n            payload['quarter'] = this.quarter\n        }\n        return { ...payload, ...config }\n    }\n\n    static getQuarterBounds(year: number) {\n        const daysInMonth = (m: string) => dayjs(`${year}-${m}-01`).daysInMonth()\n        const startMonth = (m: string) => `${year}-${m}-01 00:00`\n        const endMonth = (m: string) => `${year}-${m}-${daysInMonth(m)} 00:00`\n\n        return {\n            'Q1': {\n                qtr: 1,\n                start: startMonth('01'),\n                end: endMonth('03')\n            },\n            'Q2': {\n                qtr: 2,\n                start: startMonth('04'),\n                end: endMonth('06')\n            },\n            'Q3': {\n                qtr: 3,\n                start: startMonth('07'),\n                end: endMonth('09')\n            },\n            'Q4': {\n                qtr: 4,\n                start: startMonth('10'),\n                end: endMonth('12')\n            }\n        }\n    }\n\n    static getQtrByDate(date: Date) {\n        const qtrBounds: any = this.getQuarterBounds(date.getFullYear())\n        for(const qtr in qtrBounds) {\n            const { start, end } = qtrBounds[qtr]\n            if (date >= new Date(start) && date <= new Date(end)) {\n                return qtrBounds[qtr]\n            }\n        }\n        return null\n    }\n\n    static buildQtrObj(qtrName: string, year: number): QuarterInterface {\n        const qtrBounds: any = this.getQuarterBounds(year)\n        const { start, end } = qtrBounds[qtrName]\n        return {\n            start,\n            end,\n            name: `${qtrName} ${year}`,\n        }\n    }\n\n    static getReportQuarters(maxQuarters=5) {\n        const qtrs: QuarterInterface[] = [];\n        let currDate = new Date();\n        let currYear = currDate.getFullYear();\n        const curYr = currYear\n        \n        currDate = new Date(`${curYr}-${currDate.getMonth() + 1}-${currDate.getDate()} 00:00`);\n        const currentQtr = this.getQtrByDate(currDate);\n        let qtr = currentQtr.qtr;\n        let i = 0;\n\n        if (qtr === 4) qtrs.push(this.buildQtrObj('Q1', currYear + 1))\n\n        while (i < maxQuarters) {\n          // Add following quarter\n          if (i === 0 && qtr < 4) qtrs.push(this.buildQtrObj(`Q${qtr + 1}`, currYear))\n\n          qtrs.push(this.buildQtrObj(`Q${qtr}`, currYear))\n          qtr = qtr > 0 ? (qtr -= 1) : qtr;\n          currYear = qtr == 0 ? currYear - 1 : currYear;\n          qtr =  qtr == 0 ? ( qtr += 4) : qtr;\n          i++;\n        }\n        return qtrs;\n    }\n}\n","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish,\n        skipSummary: true,\n        cancelDestinationPath: \"/\"\n      }, null, 8, [\"fields\", \"onFinishAction\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from \"vue\";\nimport { DataCleaningReportService, DataCleaningVerificationData } from \"@/apps/ART/services/reports/data_cleaning_report_service\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { IonPage } from \"@ionic/vue\";\nimport EncounterMixinVue from \"@/views/EncounterMixin.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { Option } from \"@/components/Forms/FieldInterface\";\nimport PersonHelper from \"@/utils/HisFormHelpers/PersonFieldHelper\"\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { IonPage },\n  created() {\n    this.fields = [\n        {\n            id: \"data_cleaning_datetime\",\n            helpText: \"Date data cleaning done\",\n            type: FieldType.TT_FULL_DATE,\n            computedValue: (v: Option) => v.value,\n            validation: (v: Option) => Validation.required(v)\n        },\n        (() => {\n            const field = PersonHelper.getGivenNameField()\n            field.helpText = \"Verifier's First name\"\n            field.proxyID = 'supervisors'\n            return field\n        })(),\n        (() => {\n            const field = PersonHelper.getFamilyNameField()\n            field.helpText = \"Verifier's Last name\"\n            field.proxyID = 'supervisors'\n            field.computedValue = (v: Option, f: any) => [`${f.given_name.value} ${v.value}`]\n            return field\n        })()\n    ]\n  },\n  methods: {\n    async onFinish(_: any, data: DataCleaningVerificationData) {\n        const ok = await new DataCleaningReportService().saveDataCleaningVerification(data)\n        if (ok) this.$router.back()\n    }\n  }\n})\n","import { render } from \"./DataCleaningVerification.vue?vue&type=template&id=4ea1f6f2&ts=true\"\nimport script from \"./DataCleaningVerification.vue?vue&type=script&lang=ts\"\nexport * from \"./DataCleaningVerification.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { ArtReportService } from \"./art_report_service\";\n\nexport enum CtIndicator {\n    DobMoreThanEnrolledDate = 'DOB MORE THAN DATE ENROLLED',\n    ClientsWithEncountersAfterDeath = 'CLIENTS WITH ENCOUNTERS AFTER DECLARED DEAD',\n    DateEnrolledLessThanEarliestStartDate = 'DATE ENROLLED LESS THAN EARLIEST START DATE',\n    MalesWithFemaleObs = 'MALE CLIENTS WITH FEMALE OBS',\n    PrescriptionWithoutDispensation = 'PRESCRIPTION WITHOUT DISPENSATION',\n    MissingDemographics = 'MISSING DEMOGRAPHICS',\n    MissingStartReasons = 'MISSING START REASONS',\n    MultipleStartReasons = 'MULTIPLE START REASONS',\n    PreArtOrUnknownOutcomes ='PRE ART OR UNKNOWN OUTCOMES',\n}\n\nexport interface DataCleaningVerificationData {\n    'data_cleaning_datetime': string;\n    'supervisors': string[];\n}\n\nexport class DataCleaningReportService extends ArtReportService {\n    constructor() {\n        super()\n    }\n    \n    saveDataCleaningVerification(data: DataCleaningVerificationData) {\n        return ArtReportService.postJson('data_cleaning_confirmation', data)\n    }\n\n    getCleaningToolReport(indicator: CtIndicator) {\n        return this.getReport('art_data_cleaning_tools', { \n            'report_name' : indicator \n        })\n    }\n\n    getEnrolledOnArtBeforeBirth() {\n        return ArtReportService.getJson('enrolled_on_art_before_birth')\n    }\n\n    getIncompleteVisits() {\n        return this.getReport('incomplete_visits', {\n            'tool_name': 'INCOMPLETE VISITS'\n        })\n    }\n}\n"],"sourceRoot":""}