{"version":3,"sources":["webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/apps/ART/guidelines/staging_guidelines.ts","webpack:///./src/apps/ART/services/staging_service.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ART/views/encounters/StagingMixin.vue","webpack:///./src/apps/ART/views/encounters/StagingMixin.vue?6de3"],"names":["FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","facts","ready","watch","handler","route","params","patient_id","this","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","status","_finding$actions4","program","e","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","isEmpty","person","names","_p$person2","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","CD4_AS_START_REASON_CUTOFF_DATE","ADULT_WHO_STAGE_CRITERIA","concept","stage","reasonForArt","reason","CHILD_WHO_STAGE_CRITERIA","CONTRADICTING_STAGE_DEFINITIONS_ALERTS","alertConfirmation","bmi","confirmBtnLabel","cancelBtnLabel","selectedCondition","keepAsymptomatic","selectedConditions","stageThreeConditions","stageFourConditions","stageTwoConditions","RECOMMENDED_CHILD_STAGING_CONDITIONS","isChecked","description","show","info","weightPercentile","disabled","includes","RECOMMENDED_ADULT_STAGING_CONDITIONS","CHILD_ART_ELIGIBILITY","ageInMonths","age","pshdConditions","ConceptService","getConceptsByCategory","pshdCondition","testType","cd4Date","date","Date","cd4","cd4Modifier","modifier","gender","breastFeeding","answer","pregnant","ADULT_ART_ELIGIBILITY","severeSymp","found","total","symp","StagingCategory","StagingService","AppEncounterService","constructor","super","_defineProperty","confirmatoryTest","isAdult","isPedaid","setAge","getFacilities","LocationService","getConfirmatoryTestType","cd4CountIsValid","match","getAlertGuidelines","getWhoStageGuidelines","getProgramEligibilityGuidelines","getRecommendedConditionGuidelines","getStagingConditions","category","getStagingCategoryByNum","getAllWhoStages","getAllReasonsForART","registrationDate","isMale","buildWhoStageObs","buildValueCoded","buildWhoCriteriaObs","buildReasonForArtObs","stageNumber","ADULT_STAGE_1","PEDAID_STAGE_1","ADULT_STAGE_2","PEDAID_STAGE_2","ADULT_STAGE_3","PEDAID_STAGE_3","ADULT_STAGE_4","PEDAID_STAGE_4","test","getFirstValueCoded","isCondition","ignored","undefined","prop","every","Boolean","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","text","mixins","EncounterMixinVue","staging","showStagingWeightChart","canShowStagingFields","bmiObj","stagingFacts","isChildBearing","stageOneConditions","whoStage","v","getID","getAge","loadHivConfirmatoryTestType","getBMI","getAgeInMonths","calculateWeightPercentile","computedValues","encounter","createEncounter","stagingObservations","derivedObservations","saveObservationList","_findings$","_findings$2","_findings$3","ok","updateStagingFacts","curIndex","buildStagingOptions","previouslySelected","_conceptFinding$actio","_conceptFinding$actio2","conceptFinding","concept_id","setWhoStage","_findings$4","setReasonForArt","_findings$5","notAsymptomatic","f","stageOneC","stage_1_conditions","asymptomatics","hasTransferLater","has_transfer_letter","hasStaging","getStagingSummaryField","helpText","id","type","FieldType","TT_ART_STAGING_SUMMARY","onload","config","hiddenFooterBtns","isANCclient","getSuspendedProgram","getStagingFields","TT_MULTIPLE_YES_NO","validation","Validation","anyEmpty","summaryMapValue","computedValue","factID","pregnancy_status","TT_WEIGHT_CHART","getWeightHistory","x","y","TT_MULTIPLE_SELECT","onValue","onStagingCondition","unload","onConditionFalse","val","TT_SELECT","required","TT_TEXT","charAt","count","substring","buildValueNumber","s","computedData","isCd4","customKeyboard","CD4_COUNT_PAD_LO","cd4_available","generateDateFields","minDate","maxDate","getDate","estimation","allowUnknown","computeValue","isEstimate","buildValueDate","defaultValue","getLocationName","buildValueText","_","showKeyboard","isFilterDataViaApi"],"mappings":"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","file":"js/chunk-4bce2b45.b877f395.js","sourcesContent":["import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { ConceptService } from \"@/services/concept_service\"\nimport { alertConfirmation } from \"@/utils/Alerts\"\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\"\n\nexport const CD4_AS_START_REASON_CUTOFF_DATE = \"2014-04-01\";\n\nexport const ADULT_WHO_STAGE_CRITERIA: Record<string, GuideLineInterface> = {\n    'Adults with stage 4 conditions': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4,\n        }\n    },\n    'Classify as stage 4 when reason for ART is WHO STAGE 4': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 2,\n        conditions: {\n            reasonForArt: (reason: string) => reason === 'WHO STAGE IV ADULT'\n        }\n    },\n    'Adults with stage 3 conditions': {\n        concept: 'WHO STAGE III ADULT',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3\n        }\n    },\n    'Adults with stage 2 conditions': {\n        concept: 'WHO STAGE II ADULT',\n        priority: 4,\n        conditions: {\n            stage: (stage: number) => stage === 2,\n        }\n    },\n    'Adults with stage 1 conditions': {\n        concept: 'WHO STAGE I ADULT',\n        priority: 5,\n        conditions: {\n            stage: (stage: number) => stage === 1\n        }\n    }\n}\n\nexport const CHILD_WHO_STAGE_CRITERIA: Record<string, GuideLineInterface> = {\n    'Children with stage 4 conditions': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4,\n        }\n    },\n    'Classify as stage 4 when reason for ART is WHO STAGE 4': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 2,\n        conditions: {\n            reasonForArt: (reason: string) => reason === 'WHO STAGE IV PEDS'\n        }\n    },\n    'For children with stage 3 conditions': {\n        concept: 'WHO STAGE III PEDS',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3\n        }\n    },\n    'Children with stage 2 conditions': {\n        concept: 'WHO STAGE II PEDS',\n        priority: 4,\n        conditions: {\n            stage: (stage: number) => stage === 2\n        }\n    },\n    'Children with stage 1 conditions': {\n        concept: 'WHO STAGE I PEDS',\n        priority: 5,\n        conditions: {\n            stage: (stage: number) => stage === 1\n        }\n    }\n}\n\nexport const CONTRADICTING_STAGE_DEFINITIONS_ALERTS: Record<string, GuideLineInterface> = {\n    \"Warn if Severe weight loss is selected when actual patient BMI is acceptable\": {\n        priority: 1,\n        actions: {\n            alert: async (facts: any) => await alertConfirmation(`Patient's BMI of ${facts.bmi} greater than 18.5, do you wish to proceed?`, {\n                confirmBtnLabel: 'Yes, keep severe weightloss',\n                cancelBtnLabel: 'No, cancel'\n            }),\n        },\n        conditions: {\n            selectedCondition (condition: string) {\n                return condition === 'Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained'\n            },\n            bmi:(bmi: number) => bmi > 18.5\n        }\n    },\n    \"Warn for contradicting stage defining conditions\": {\n        priority: 1,\n        actions: {\n            alert: async (facts: any) => {\n                const keepAsymptomatic = await alertConfirmation('CONTRADICTING STAGE DEFINING CONDITIONS', {\n                    confirmBtnLabel: \"Keep Asymptomatic\",\n                    cancelBtnLabel: 'Keep other(s)'\n                })\n                if(keepAsymptomatic) {\n                    facts.stage = 1\n                    facts.selectedConditions = []\n                    facts.stageThreeConditions = []\n                    facts.stageFourConditions = []\n                    facts.stageTwoConditions = []\n                    return true\n                }\n                return false\n            },\n        },\n        conditions: {\n            selectedCondition(condition: string){\n                return condition === 'Asymptomatic HIV infection'\n            },\n            stage: (stage: number) => stage >= 2\n        }\n    },\n}\n\nexport const RECOMMENDED_CHILD_STAGING_CONDITIONS: Record<string, GuideLineInterface> = {\n    'For children whose current weight percentile is less than 70' : {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Child has a low weight percentile of ${facts.weightPercentile}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Severe unexplained wasting or malnutrition not responding to treatment (weight-for-height/ -age <70% or MUAC less than 11cm or oedema)'\n            },\n            weightPercentile(weightPercentile: number){\n                return weightPercentile < 70\n            }\n        }\n    },\n    'Enable Moderate unexplained malnutrition for children whose weight for height is 70-79%': {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Child has weight percentile of ${facts.weightPercentile}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate unexplained wasting/malnutrition not responding to treatment (weight-for-height/ -age 70-79% or muac 11-12 cm)'\n            },\n            weightPercentile(weightPercentile: number){\n                return weightPercentile >= 70 && weightPercentile <= 79\n            }\n        }\n    },\n    'Disable moderate weight loss when Severe unexplained weight loss is chosen': {\n        priority: 2,\n        actions: {\n            isChecked: false,\n            disabled: true\n        },\n        description: {\n            color: 'secondary',\n            show: 'always',\n            info: () => 'Severe weight loss/manutrition was already selected',\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate unexplained wasting/malnutrition not responding to treatment (weight-for-height/ -age 70-79% or muac 11-12 cm)'\n            },\n            selectedConditions(conditions: Array<string>) {\n                return conditions.includes('Severe unexplained wasting or malnutrition not responding to treatment (weight-for-height/ -age <70% or MUAC less than 11cm or oedema)')\n            }\n        }\n    }\n}\n\nexport const RECOMMENDED_ADULT_STAGING_CONDITIONS: Record<string, GuideLineInterface> = {\n    'Adults with a BMI less than 16': {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Adult has a low BMI of ${facts.bmi}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained'\n            },\n            bmi: (bmi: number) => bmi < 16\n        }\n    },\n    'Adults whose BMI is between 16 and 18': {\n        priority: 3,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'warning',\n            show: 'onChecked',\n            info: (facts: any) => `BMI of ${facts.bmi} is between 16 and 18`,\n        },\n        conditions: {\n            selectedCondition: (condition: string) => condition === 'Moderate weight loss less than or equal to 10 percent, unexplained',\n            bmi: (bmi: number) => bmi >= 16.0 && bmi <= 18.5\n        }\n    },\n    \"Disable Moderate weight loss if severe weightloss is selected\": {\n        priority: 2,\n        actions: {\n            isChecked: false,\n            disabled: true\n        },\n        description: {\n            color: 'secondary',\n            show: 'always',\n            info: () => 'Severe weight loss was already selected',\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate weight loss less than or equal to 10 percent, unexplained'\n            },\n            selectedConditions(conditions: Array<string>) {\n                return conditions.includes('Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained')\n            }\n        }\n    }\n}\n\nexport const CHILD_ART_ELIGIBILITY: Record<string, GuideLineInterface> = {\n    'Has stage 4 conditions': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4\n        }\n    },\n    'Has stage 3 conditions': {\n        concept: 'WHO STAGE III PEDS',\n        priority: 2,\n        conditions: {\n            stage: (stage: number) => stage === 3,\n        }\n    },\n    'Children under twelve months who tested positive on Rapid test and have presumed severe HIV': {\n        concept: 'PRESUMED SEVERE HIV',\n        priority: 3,\n        conditions: {\n            ageInMonths(age: number){\n                return age < 12 \n            },\n            selectedConditions: (conditions: Array<string>) => {\n                const pshdConditions = ConceptService.getConceptsByCategory('pshd_condition')\n                for (const pshdCondition in pshdConditions) {\n                    if (conditions.includes(pshdCondition)) return true\n                }\n                return false\n            },\n            testType(testType: string){\n                return testType === 'HIV rapid test'\n            },\n        }\n    },\n    \"Children under twelve who tested positive via HIV DNA Polymerase Chain Reaction test\": {\n        concept: 'HIV DNA polymerase chain reaction',\n        priority: 4,\n        conditions: {\n            ageInMonths: (age: number) => age < 12,\n            testType: (testType: string) => testType === \"HIV DNA polymerase chain reaction\",\n        }\n    },\n    \"Children who are less than 24 months\": {\n        concept: 'HIV infected',\n        priority: 5,\n        conditions: {\n            ageInMonths: (age: number) => age < 24\n        }\n    },\n    \"Children between 24 and 56 months who have stage 2 or 1 conditions\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 750',\n        priority: 6,\n        conditions: {\n            ageInMonths(age: number) {\n                return age >= 24 && age <= 56\n            },\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 750\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            },\n            stage(stage: number) {\n                return stage <= 2\n            }\n        }\n    },\n    \"Children with CD4 count less than 500 and have stage 1 and stage 2 conditions\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 500',\n        priority: 7,\n        conditions: {\n            cd4(cd4: number){\n                return cd4 <= 500\n            },\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4Modifier(modifier: string){\n                return modifier === '<' || modifier === '='\n            },\n            stage(stage: number) {\n                return stage <= 2\n            }\n        }\n    },\n    \"Children over the date 2014-04-01 who are more than five years old and have cd4 count less than 500\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 500',\n        priority: 9,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            age(age: number) {\n                return age > 5\n            },\n            cd4(cd4: number) {\n                return cd4 <= 500\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    \"Children over date 2014-04-01 and less than Five years old\": {\n        concept: 'HIV infected',\n        priority: 10,\n        conditions: {\n            date(date: string) {\n                return date >= '2014-04-01'\n            },\n            age(age: number) {\n                return age <= 5\n            }\n        }\n    },\n    'Women who are breast feeding': {\n        concept: 'BREASTFEEDING',\n        priority: 11,\n        conditions: {\n            gender(gender: string){\n                return gender === 'F'\n            },\n            breastFeeding(answer: string){\n                return  answer === 'Yes'\n            },\n            stage: (stage: number) => stage <= 2\n        }\n    },\n    'Women who are pregnant': {\n        concept: 'PATIENT PREGNANT',\n        priority: 12,\n        conditions: {\n            gender(gender: string) {\n                return gender === 'F'\n            },\n            pregnant(answer: string){\n                return answer === 'Yes'\n            },\n            stage(stage: number) {\n                return stage <= 2\n            },\n        }\n    },\n    \"Asymptomatic patient with either stage one or stage two conditions\": {\n        concept: 'Asymptomatic',\n        priority: 13,\n        conditions: {\n            stage: (stage: number) => stage <= 2\n        }\n    }\n}\n\nexport const ADULT_ART_ELIGIBILITY: Record<string, GuideLineInterface> = {\n    'Has stage 4 conditions': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4\n        }\n    },\n    'Has HIV wasting syndrome identified in stage 3': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 2,\n        conditions: {\n            selectedConditions: (conditions: Array<string>) => {\n                const severeSymp = ConceptService.getConceptsByCategory('severe_hiv_wasting_syndrome')\n                const found = severeSymp.reduce((total, symp) => conditions.includes(symp.name) ? total + 1 : 0, 0)\n                return found >= 2\n            }\n        }\n    },\n    'Has stage 3 conditions': {\n        concept: 'WHO STAGE III ADULT',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3,\n        }\n    },\n    'CD4 less than 350 for adults before 2014': {\n        concept: 'cd4 less than or equal to 350',\n        priority: 4,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 350\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 250 for adults after 2014': {\n        concept: 'cd4 less than or equal to 250',\n        priority: 4,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 250\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 350 for adults after 2014': {\n        concept: 'cd4 less than or equal to 350',\n        priority: 5,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 350\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 500 for adults after 2014': {\n        concept: 'cd4 less than or equal to 500',\n        priority: 6,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number){\n                return cd4 <= 500\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'Women who are breast feeding': {\n        concept: 'BREASTFEEDING',\n        priority: 8,\n        conditions: {\n            gender(gender: string){\n                return gender === 'F'\n            },\n            breastFeeding(answer: string){\n                return  answer === 'Yes'\n            },\n            stage: (stage: number) => stage <= 2\n        }\n    },\n    'Women who are pregnant': {\n        concept: 'PATIENT PREGNANT',\n        priority: 7,\n        conditions: {\n            gender(gender: string) {\n                return gender === 'F'\n            },\n            pregnant(answer: string){\n                return answer === 'Yes'\n            },\n            stage(stage: number) {\n                return stage <= 2\n            },\n        }\n    },\n    \"Asymptomatic patient with either stage one or stage two conditions\": {\n        concept: 'Asymptomatic',\n        priority: 9,\n        conditions: {\n            stage: (stage: number) => stage <= 2,\n        }\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { LocationService } from \"@/services/location_service\"\nimport {\n    RECOMMENDED_ADULT_STAGING_CONDITIONS,\n    CHILD_ART_ELIGIBILITY,\n    ADULT_ART_ELIGIBILITY,\n    ADULT_WHO_STAGE_CRITERIA,\n    CHILD_WHO_STAGE_CRITERIA,\n    CONTRADICTING_STAGE_DEFINITIONS_ALERTS,\n    RECOMMENDED_CHILD_STAGING_CONDITIONS,\n    CD4_AS_START_REASON_CUTOFF_DATE\n} from \"@/apps/ART/guidelines/staging_guidelines\"\n\n/**\n * Enable for filtering staging categories in ConceptName Dictionary\n */\nenum StagingCategory {\n    ADULT_STAGE_4 = 'stage_4_conditions_adults',\n    ADULT_STAGE_3 = 'stage_3_conditions_adults',\n    ADULT_STAGE_2 = 'stage_2_conditions_adults',\n    ADULT_STAGE_1 = 'stage_1_conditions_adults',\n    PEDAID_STAGE_4 = 'stage_4_conditions_pedaids',\n    PEDAID_STAGE_3 = 'stage_3_conditions_pedaids',\n    PEDAID_STAGE_2 = 'stage_2_conditions_pedaids',\n    PEDAID_STAGE_1 = 'stage_1_conditions_pedaids'\n}\n\nexport class StagingService extends AppEncounterService {\n    age: number\n    confirmatoryTest: string | null;\n    constructor(patientID: number, age: number, providerID: number) {\n        super(patientID, 52, providerID) //TODO: Use encounter type reference name\n        this.age = age\n        this.confirmatoryTest = null\n    }\n\n    isAdult() { return this.age >= 15 }\n\n    isPedaid() { return this.age <= 14 }\n\n    setAge(age: number) {\n        this.age = age\n    }\n\n    getFacilities (filter='') { return LocationService.getFacilities({name: filter}) }\n    \n    getConfirmatoryTestType() { return this.confirmatoryTest }\n\n    cd4CountIsValid(value: string) {\n        try {\n            return value.match(/^(=|<|>)([0-9]*)$/m) ? true : false\n        }catch(e) {\n            return false\n        }\n    }\n\n    getAlertGuidelines() {\n        return CONTRADICTING_STAGE_DEFINITIONS_ALERTS\n    }\n\n    getWhoStageGuidelines() {\n        return this.isAdult() ? ADULT_WHO_STAGE_CRITERIA : CHILD_WHO_STAGE_CRITERIA\n    }\n\n    getProgramEligibilityGuidelines() {\n        return this.isAdult() ? ADULT_ART_ELIGIBILITY: CHILD_ART_ELIGIBILITY\n    }\n\n    getRecommendedConditionGuidelines() {\n        return this.isAdult() ? RECOMMENDED_ADULT_STAGING_CONDITIONS: RECOMMENDED_CHILD_STAGING_CONDITIONS\n    }\n\n    getStagingConditions(stage: number) {\n        const category = this.getStagingCategoryByNum(stage)\n        return AppEncounterService.getConceptsByCategory(category)\n    }\n\n    getAllWhoStages() {\n        return AppEncounterService.getConceptsByCategory('whole_staging_numbers')\n    }\n\n    getAllReasonsForART(registrationDate = this.date, isMale = false) {\n        return AppEncounterService.getConceptsByCategory('reason_for_art')\n            .filter(reason => {\n                if(new Date(registrationDate) > new Date(CD4_AS_START_REASON_CUTOFF_DATE) && reason.name.match(/cd4/i)) return false\n                if(isMale && reason.name.match(/breastfeeding|pregnant/i)) return false\n                return true\n            })\n    }\n\n    buildWhoStageObs(stage: string) {\n        return this.buildValueCoded('Who stage', stage)\n    }\n    \n    buildWhoCriteriaObs(condition: string) {\n        return this.buildValueCoded('Who stages criteria present', condition)\n    }\n\n    buildReasonForArtObs(reason: string) {\n        return this.buildValueCoded('Reason for ART eligibility', reason)\n    }\n\n    private getStagingCategoryByNum(stageNumber: number) {\n        switch(stageNumber) {\n            case 1:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_1 : StagingCategory.PEDAID_STAGE_1\n            case 2:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_2 : StagingCategory.PEDAID_STAGE_2\n            case 3:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_3 : StagingCategory.PEDAID_STAGE_3\n            case 4:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_4 : StagingCategory.PEDAID_STAGE_4\n            default: \n                return ''\n        }\n    }\n\n    async loadHivConfirmatoryTestType() {\n        const test = await AppEncounterService.getFirstValueCoded(\n            this.patientID, 'Confirmatory hiv test type'\n        )\n        if (test) this.confirmatoryTest = test\n    }\n}\n","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { StagingService } from \"@/apps/ART/services/staging_service\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from \"lodash\"\nimport { CD4_COUNT_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport {\n    getFacilities\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        staging: {} as any,\n        showStagingWeightChart: true,\n        canShowStagingFields: true as boolean,\n        bmiObj: {} as any, \n        stagingFacts : {\n            age: -1 as number,\n            bmi: -1 as number,\n            gender: '' as 'M' | 'F',\n            stage: -1 as number,\n            cd4: -1 as number,\n            cd4Date: '' as string,\n            date: '' as string,\n            isChildBearing: false as boolean,\n            stageOneConditions: [] as Array<string>,\n            stageTwoConditions: [] as Array<string>,\n            stageThreeConditions: [] as Array<string>,\n            stageFourConditions: [] as Array<string>,\n            reasonForArt: '' as string,\n            testType: '' as string,\n            pregnant: '' as 'Yes' | 'No',\n            breastFeeding: '' as 'Yes' | 'No',\n            selectedCondition: '' as string,\n            selectedConditions: [] as Array<string>,\n            weightPercentile: -1 as number,\n            ageInMonths: -1 as number,\n            cd4Modifier: '' as string,\n            whoStage: '' as string\n        }\n    }),\n    watch: {\n        ready : {\n            handler(v) {\n                if (v) {\n                    this.staging = new StagingService(this.patient.getID(), this.patient.getAge(), this.providerID)\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async initStaging(patient: any) {\n            await this.staging.loadHivConfirmatoryTestType()\n            this.bmiObj = await patient.getBMI()\n            this.stagingFacts.age = patient.getAge()\n            this.stagingFacts.bmi = this.bmiObj['index']\n            this.stagingFacts.date = StagingService.getSessionDate()\n            this.stagingFacts.gender = patient.isMale() ? 'M' : 'F' \n            this.stagingFacts.testType = this.staging.getConfirmatoryTestType()\n            this.stagingFacts.ageInMonths = patient.getAgeInMonths()\n            this.stagingFacts.isChildBearing = patient.isChildBearing()\n\n            if (this.staging.isPedaid()) {\n                this.stagingFacts.weightPercentile = await patient.calculateWeightPercentile()\n            }\n        },\n        async submitStaging(computedValues: any) {\n            const encounter = await this.staging.createEncounter()\n\n            if (!encounter) throw 'Unable to create staging encounter'\n\n            const stagingObservations = await this.resolveObs(computedValues, 'staging')\n            const derivedObservations = await Promise.all([\n                this.buildReasonForArtObs(), this.buildWhoStageObs()\n            ])\n\n            const obs = await this.staging.saveObservationList([\n                ...stagingObservations, ...derivedObservations\n            ])\n\n            if (!obs) throw 'Unable to save patient observations'\n        },\n        async onStagingCondition({ label }: Option) {\n            this.stagingFacts.selectedCondition = label\n \n            const guidelines =  this.staging.getAlertGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n\n            if (isEmpty(findings)) \n                return true\n\n            if (findings[0]?.actions && findings[0]?.actions.alert) {\n                const ok = await findings[0]?.actions.alert(this.stagingFacts)\n                return ok ? true : false\n            }\n            return true\n        },\n        getFacilities(filter='') {\n            return getFacilities(filter)\n        },\n        updateStagingFacts() {\n            const conditions = [\n                this.stagingFacts.stageOneConditions,\n                this.stagingFacts.stageTwoConditions,\n                this.stagingFacts.stageThreeConditions,\n                this.stagingFacts.stageFourConditions, \n            ]\n            this.stagingFacts.stage = conditions.reduce(\n                (stage, conditions: string[], curIndex) =>\n                    isEmpty(conditions) ? stage : curIndex + 1\n                , 0)\n            this.stagingFacts.selectedConditions = conditions.reduce(\n                (accum, cur) => accum.concat(cur), []\n            )\n        },\n        buildReasonForArtObs() {\n            return this.staging.buildReasonForArtObs(this.stagingFacts.reasonForArt)\n        },\n        buildWhoStageObs() {\n            return this.staging.buildWhoStageObs(this.stagingFacts.whoStage)\n        },\n        buildStagingOptions(stage: number, previouslySelected=[] as Array<string>) {\n            const guidelines = this.staging.getRecommendedConditionGuidelines()\n\n            return this.staging.getStagingConditions(stage).map((concept: any) => {\n                let disabled = false\n                let description: unknown\n                let isChecked = previouslySelected.includes(concept.name)\n                this.stagingFacts.selectedCondition = concept.name\n\n                const findings = matchToGuidelines(this.stagingFacts, guidelines)\n\n                if (!isEmpty(findings)) {\n                    const conceptFinding = findings[0] //get the first item only\n                    if (conceptFinding?.actions?.isChecked) {\n                        isChecked = true\n                    }\n                    if (conceptFinding?.actions?.disabled) {\n                        disabled = true\n                    }\n                    description = conceptFinding.description\n                }\n                return {\n                    label: concept.name,\n                    value: concept.concept_id,\n                    isChecked,\n                    disabled,\n                    description\n                }\n            })\n        },\n        setWhoStage() {\n            const guidelines = this.staging.getWhoStageGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n            this.stagingFacts.whoStage = findings[0]?.concept || ''\n        },\n        setReasonForArt() {\n            const guidelines = this.staging.getProgramEligibilityGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n            this.stagingFacts.reasonForArt = findings[0]?.concept || ''\n        },\n        notAsymptomatic(f: any) {\n            const stageOneC = f.stage_1_conditions\n            if (stageOneC) {\n                const asymptomatics = stageOneC.filter((i: Option) => {\n                    return i.label.match(/asymptomatic/i) && i.isChecked\n                })\n                return isEmpty(asymptomatics)\n            }\n            return true\n        },\n        hasTransferLater(f: Record<string, any>): boolean {\n            if ('has_transfer_letter' in f) {\n                return f.has_transfer_letter && f.has_transfer_letter.value === 'Yes'\n            }\n            return false\n        },\n        hasStaging(f: Record<string, any>) {\n            // For components that have Optional staging\n            if (this.hasTransferLater(f)) {\n                return true\n            }\n            return this.canShowStagingFields\n        },\n        getStagingSummaryField(helpText=\"Summary\" as string) {\n            return {\n                id: 'summary',\n                helpText,\n                type: FieldType.TT_ART_STAGING_SUMMARY,\n                condition: (f: any) => this.hasStaging(f),\n                onload: () => {\n                    this.setReasonForArt()\n                    this.setWhoStage()\n                },\n                options: () => [\n                    { \n                        label: 'WHO Stage', \n                        value: this.stagingFacts.whoStage,\n                        other: {\n                            type: 'title-section'\n                        }\n                    },\n                    { \n                        label: 'Condition on starting ART', \n                        value: this.stagingFacts.reasonForArt,\n                        other: {\n                            type: 'title-section'\n                        } \n                    },\n                    ...this.stagingFacts.selectedConditions.map((i: string) => ({ label: i, value: i }))\n                ],\n                config: {\n                    title: 'Selected stage defining conditions',\n                    hiddenFooterBtns: [\n                        'Clear'\n                    ]\n                }\n            }\n        },\n        isANCclient() {\n            return StagingService.getSuspendedProgram() === 'ANC'\n        },\n        getStagingFields(): Array<Field> {\n            return [\n                {\n                    id: 'pregnancy_status',\n                    helpText: 'Pregnant / Breastfeeding',\n                    type: FieldType.TT_MULTIPLE_YES_NO,\n                    validation: (v: any) => Validation.anyEmpty(v),\n                    summaryMapValue: (d: Option) => ({ \n                        label: d.label, \n                        value: d.value \n                    }),\n                    computedValue: (data: Array<Option>, f: Record<string, any>) => {\n                        let obs = []\n                        // For ANC clients, mark pregnancy status as 'Yes' always!!\n                        // The assumption here is also that the pregnancy option is not available for selection\n                        if (this.isANCclient() && !this.hasTransferLater(f)) {\n                            this.stagingFacts['pregnant'] = 'Yes' \n                            obs.push(this.staging.buildValueCoded('Is patient pregnant', 'Yes'))\n                        }\n                        obs = obs.concat(data.map(d => {\n                            const  { value, other } = d\n\n                            const factID: 'pregnant' | 'breastFeeding' = other.factID\n\n                            this.stagingFacts[factID] = `${value}`.match(/Yes/i) ? 'Yes' : 'No'\n\n                            return this.staging.buildValueCoded(other.concept, value)\n                        }))\n                        return {\n                            obs,\n                            tag: 'staging'\n                        }\n                    },\n                    options: (f: any) => {\n                        if (!isEmpty(f.pregnancy_status)) {\n                            return f.pregnancy_status\n                        } else {\n                            const options = []\n                            // Hide pregnancy option for ANC clients who are not transferr in\n                            if (!this.isANCclient() || this.hasTransferLater(f)) {\n                                options.push({\n                                    label: 'Pregnant?',\n                                    value: '',\n                                    other: {\n                                        values: this.yesNoOptions(),\n                                        concept: 'Is patient pregnant',\n                                        factID: 'pregnant'\n                                    }\n                                })\n                            }\n                            options.push({\n                                label: 'Breastfeeding?',\n                                value: '',\n                                other: {\n                                    values: this.yesNoOptions(),\n                                    concept: 'Is patient breast feeding',\n                                    factID: 'breastFeeding'\n                                }\n                            })\n                            return options\n                        }\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.stagingFacts.isChildBearing,\n                },\n                {\n                    id: 'patient_weight_chart',\n                    helpText: 'Weight history',\n                    type: FieldType.TT_WEIGHT_CHART,\n                    options: async () => {\n                        let values = await this.patient.getWeightHistory()\n                        values = values.map((d: any) => ({ \n                            x: HisDate.toStandardHisDisplayFormat(d.date), \n                            y: d.weight\n                        }))\n                        return [\n                            {\n                                label: \"Weight for patient\",\n                                value: \"Weight trail\",\n                                other: {\n                                    values,\n                                    age: this.patient.getAge(),\n                                    bmi: this.bmiObj\n                                }\n                            }\n                        ]\n                    },\n                    config: {\n                        hiddenFooterBtns: [\n                            'Clear'\n                        ]\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.showStagingWeightChart\n                },\n                {\n                    id: 'stage_4_conditions',\n                    helpText: 'Stage 4 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(4, this.stagingFacts.stageFourConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageFourConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageFourConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_3_conditions',\n                    helpText: 'Stage 3 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(3, this.stagingFacts.stageThreeConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageThreeConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageThreeConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_2_conditions',\n                    helpText: 'Stage 2 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(2, this.stagingFacts.stageTwoConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Option[]) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageTwoConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageTwoConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_1_conditions',\n                    helpText: 'Stage 1 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    validation: (val: any) => {\n                        if (isEmpty(val) && isEmpty(this.stagingFacts.selectedConditions))\n                            return ['Please provide atleast one staging condition']\n                    },\n                    options: () => this.buildStagingOptions(1, this.stagingFacts.stageOneConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        const data = d.map(i => i.label)\n                        this.stagingFacts.stageOneConditions = data\n                        this.updateStagingFacts()\n                        return {\n                            tag: 'staging',\n                            obs: data.map(i => this.staging.buildWhoCriteriaObs(i))\n                        }\n                    },\n                    condition: (f: any) => this.hasStaging(f),\n                },\n                {\n                    id: 'cd4_available',\n                    helpText: 'Recent CD4 count results available?',\n                    type: FieldType.TT_SELECT,\n                    condition: (f: any) => this.hasStaging(f),\n                    validation: (val: any) => Validation.required(val),\n                    options: () => this.yesNoOptions()\n                },\n                {\n                    id: 'cd4_count',\n                    helpText: 'CD4 Count',\n                    type: FieldType.TT_TEXT,\n                    computedValue: (d: Option) => {\n                        const value = d.value.toString()\n                        const modifier = value.charAt(0)\n                        const count = parseInt(value.substring(1))\n                        return {\n                            tag: 'staging',\n                            modifier,\n                            count,\n                            obs: this.staging.buildValueNumber(\n                                'CD4 count', count, modifier\n                            )\n                        }\n                    },\n                    unload: (d: any, s: any, f: any, computedData: any) => {\n                        const { count, modifier } = computedData['cd4_count']\n                        this.stagingFacts.cd4 = count\n                        this.stagingFacts.cd4Modifier = modifier\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.cd4 = -1\n                        this.stagingFacts.cd4Modifier = ''\n                    },\n                    validation: (val: any) => {\n                        const isCd4 = () => this.staging.cd4CountIsValid(val.value)\n                        return this.validateSeries([\n                            () => Validation.required(val),\n                            () => !isCd4() ? ['Please start with either modifier first: >, <, or ='] : null\n                        ])\n                    },\n                    config: {\n                        customKeyboard: [\n                            CD4_COUNT_PAD_LO,\n                            [\n                                ['Unknown', 'Delete']\n                            ]\n                        ]\n                    },\n                    condition: (f: any) => this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                },\n                ...generateDateFields({\n                    id: 'cd4_result_date',\n                    helpText: 'Cd4 Results',\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    condition: (f: any) =>  this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        this.stagingFacts.cd4Date = date\n                        return {\n                            date,\n                            tag: 'staging',\n                            isEstimate,\n                            obs: this.staging.buildValueDate('Cd4 count datetime', date) \n                        }\n                    }\n                }, this.staging.getDate()),\n                {\n                    id: 'location',\n                    helpText: 'CD4 Location',\n                    type: FieldType.TT_SELECT,\n                    defaultValue: () => StagingService.getLocationName(),\n                    computedValue: ({ label }: Option) => ({\n                        tag: 'staging',\n                        obs: this.staging.buildValueText('Cd4 count location', label)\n                    }),\n                    validation: (val: any) => Validation.required(val),\n                    options: (_, filter='') => this.getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    },\n                    condition: (f: any) => this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                }\n            ]\n        }\n    }\n})\n","import script from \"./StagingMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./StagingMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__"],"sourceRoot":""}