{"version":3,"sources":["webpack:///./src/views/FindByID.vue?d290","webpack:///./src/views/FindByID.vue","webpack:///./src/views/FindByID.vue?0389","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","activeField","fieldComponent","defineComponent","components","HisStandardForm","data","app","people","patient","assignNewARVNumber","suggestedARVNumber","created","this","setApp","getIdSelectionField","getIdSearchField","getARVDuplicatesField","getReassignARVNumberField","methods","id","helpText","type","FieldType","TT_SELECT","requireNext","validation","val","Validation","required","options","async","ids","programPatientIdentifiers","Object","values","resolvedProps","Promise","all","map","visible","globalPropertySetting","GlobalPropertyService","isProp","filter","index","useForSearch","identifier","label","name","value","other","dynamicHelpText","f","identifier_type","TT_TEXT","validateSeries","config","casing","initialKb","keyboardName","prependValue","prefix","TT_DATA_TABLE","condition","hasDuplicates","hiddenFooterBtns","columns","table","thTxt","thDate","colspan","rows","p","Patientservice","td","getGivenName","getFamilyName","getGender","tdDate","getBirthdate","toString","getCurrentVillage","tdBtn","selectPatient","getID","style","fontSize","textTransform","reassignARVNumber","computedValue","defaultValue","HisApp","getActiveApp","formData","findByOtherID","length","patientId","$router","push","loader","loadingController","create","present","NextARVNumber","ProgramService","getNextSuggestedARVNumber","arv_number","replace","dismiss","isEmpty","toastWarning","updateARVNumber","error","__exports__","_resolveDynamicComponent","formType","cancelDestinationPath","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","computedData","$emit","i"],"mappings":"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","file":"js/chunk-46236a85.55d5e58f.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    activeField: _ctx.fieldComponent\n  }, null, 8, [\"fields\", \"onFinishAction\", \"activeField\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { Patientservice } from \"@/services/patient_service\"\nimport { toastWarning } from \"@/utils/Alerts\"\nimport { AppInterface, ProgramIdentifierInterface } from \"@/apps/interfaces/AppInterface\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport HisApp from \"@/apps/app_lib\"\nimport { isEmpty } from \"lodash\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport { ProgramService } from \"@/services/program_service\";\nimport { loadingController } from \"@ionic/core\";\nimport { GlobalPropertyService } from \"@/services/global_property_service\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    app: {} as AppInterface,\n    fields: [] as Field[],\n    fieldComponent: '' as string,\n    people: [] as any[],\n    patient: {} as Patientservice,\n    assignNewARVNumber: false,\n    suggestedARVNumber: '' as string,\n  }),\n  created() {\n    this.setApp()\n    this.fields = [\n      this.getIdSelectionField(),\n      this.getIdSearchField(),\n      this.getARVDuplicatesField(),\n      this.getReassignARVNumberField()\n    ]\n  },\n  methods: {\n    getIdSelectionField(): Field {\n      return {\n        id: \"identifier_type\",\n        helpText: \"Select identifier type\",\n        type: FieldType.TT_SELECT,\n        requireNext: false,\n        validation: (val: Option) => Validation.required(val),\n        options: async () => {\n          const ids = this.app.programPatientIdentifiers\n            ? Object.values(this.app.programPatientIdentifiers) \n            : []\n\n          const resolvedProps = await Promise.all(ids.map(async (id) => {\n            if (typeof id.visible === 'function') {\n              return await id.visible()\n            }\n            if(id.globalPropertySetting){\n              return await GlobalPropertyService.isProp(id.globalPropertySetting)\n            }\n            return true\n          })) \n\n          return ids\n            .filter((id, index) => id.useForSearch && resolvedProps[index]) \n            .map(identifier => ({\n              label: identifier.name,\n              value: identifier.id,\n              other: identifier\n          }))\n        }\n      }\n    },\n    getIdSearchField(): Field {\n      return {\n        id: \"identifier\",\n        helpText: \"Identifier\",\n        dynamicHelpText: (f: any) => `Search by ${f.identifier_type.label}`,\n        type: FieldType.TT_TEXT,\n        validation: (val: Option, f: any) => Validation.validateSeries([\n          () => Validation.required(val),\n          () => (typeof f.identifier_type.other?.validation === 'function') \n            ? f.identifier_type.other.validation(val)\n            : null\n        ]),\n        config: {\n          casing: 'uppercase',\n          initialKb: (f: any) => f.identifier_type.other?.keyboardName || '0-9',\n          prependValue: (f: any) => f.identifier_type.other?.prefix() || '',\n        },\n      }\n    },\n    getARVDuplicatesField(): Field {\n      return {\n        id: 'arv_duplicates',\n        helpText: 'Duplicates',\n        dynamicHelpText: (f: any) => `Duplicate patients with identifer ${f.identifier.value}`,\n        type: FieldType.TT_DATA_TABLE,\n        requireNext: false,\n        condition:  async (f: any) => await this.hasDuplicates(f) && f.identifier_type.label === \"ARV Number\",\n        config: {\n          hiddenFooterBtns: [\"Clear\", \"Finish\"],\n          columns: () => [\n            [\n              table.thTxt('First Name'),\n              table.thTxt('Family Name'),\n              table.thTxt('Gender'),\n              table.thDate('Birthdate'),\n              table.thTxt('Current Village'),\n              table.thTxt('Actions', {colspan: 2}),\n            ]\n          ],\n          rows: () => this.people.map(p => {\n            const patient = new Patientservice(p)\n            return [\n              table.td(patient.getGivenName()),\n              table.td(patient.getFamilyName()),\n              table.td(patient.getGender()),\n              table.tdDate(patient.getBirthdate().toString()),\n              table.td(patient.getCurrentVillage()),\n              table.tdBtn('Select patient', () => this.selectPatient(patient.getID()), {\n                style: {\n                  fontSize: '12px',\n                  textTransform: 'none'\n                }\n              }, 'warning'),\n              table.tdBtn('Re-assign identifier', () => this.reassignARVNumber(patient), {\n                style: {\n                  fontSize: '12px',\n                  textTransform: 'none'\n                }\n              }, 'danger')\n            ]\n          })\n        }\n      }\n    },\n    getReassignARVNumberField(): Field {\n      return {\n        id: \"arv_number\",\n        helpText: \"ART number\",\n        type: FieldType.TT_TEXT,\n        computedValue: ({ value }: Option) => {\n          return value\n        },\n        validation: (val: any) => Validation.required(val),\n        condition: (f: any) => this.fieldComponent === 'arv_number' && this.assignNewARVNumber,\n        defaultValue: () => this.suggestedARVNumber,\n        config: {\n          initialKb: '0-9',\n          prependValue: (f: any) => {\n            return f.identifier_type.other.prefix()\n          }\n        },\n      }\n    },\n    setApp() {\n      const app = HisApp.getActiveApp()\n      if (app) this.app = app\n    },\n    async hasDuplicates(formData: any) {\n      this.people = await Patientservice.findByOtherID(formData.identifier_type.value, formData.identifier.value)\n      return this.people.length > 1\n    },\n    selectPatient(patientId: string | number) {\n      this.$router.push(`/patients/confirm?person_id=${patientId}`);\n    },\n    async reassignARVNumber(patient: Patientservice) {\n      const loader = await loadingController.create({})\n      loader.present()\n      const NextARVNumber = await ProgramService.getNextSuggestedARVNumber()\n      this.suggestedARVNumber = NextARVNumber.arv_number.replace(/^\\D+|\\s/g, \"\")\n      this.patient = patient\n      this.assignNewARVNumber = true,\n      this.fieldComponent = \"arv_number\"\n      loader.dismiss()\n    },\n    async onFinish(formData: Record<string, any>) {\n      if (isEmpty(this.people)) {\n        toastWarning('Client not found')\n      } else if(this.assignNewARVNumber && !isEmpty(this.patient)) {\n        try {\n          await this.patient.updateARVNumber(formData.arv_number.value)\n          this.selectPatient(this.patient.getID())\n        } catch (error) {\n          toastWarning(`${error}`)\n        }\n      } else {\n        const patient = new Patientservice(this.people[0])\n        this.selectPatient(patient.getID())\n      } \n    },\n  }\n});\n","import { render } from \"./FindByID.vue?vue&type=template&id=525b393f&ts=true\"\nimport script from \"./FindByID.vue?vue&type=script&lang=ts\"\nexport * from \"./FindByID.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}