{"version":3,"sources":["webpack:///./src/apps/ANC/Views/Encounters/AncVitals.vue","webpack:///./src/apps/ANC/Views/Encounters/AncVitals.vue?28f1","webpack:///./src/apps/ART/services/vitals_service.ts"],"names":["_defineComponent","__name","setup","__props","age","ref","recentHeight","recentWeight","recentWeightObsID","fields","vitalsService","patientDashboardUrl","goToNextTask","useEncounter","onConfigure","weightOption","label","value","other","modifier","icon","required","bpOption","ageOption","computed","doNotSave","visible","heightOption","disableHeight","async","providerId","patientId","patient","_lastWeight$value_num","_lastWeight$obs_id","VitalsService","lastWeight","getFirstObs","parseFloat","value_numeric","parseInt","obs_id","getAge","getRecentHeight","push","getVitalsField","validateVitals","vitals","l","checkRequiredVitals","length","map","val","v","sanitizeVitals","validateAll","filter","element","onUpdateAlertStatus","params","bp","find","sys","dis","split","status","color","getFinalWeight","enteredWeight","weightChange","changePercentage","Math","abs","prevWeightBtnTxt","newWeightBtnTxt","action","infoActionSheet","name","slot","alertConfirmation","voidObs","onChangeOption","activeItem","errs","validator","id","helpText","type","FieldType","TT_VITALS_ENTRY","validation","options","config","hiddenFooterBtns","buildBpObs","dia","buildValueNumber","buildVitalsObs","obs","Promise","all","vital","_vital$other","isEmpty","flat","onFinish","formData","createEncounter","vitalObs","saveObservationList","_ctx","_cache","_openBlock","_createBlock","HisStandardForm","onFinishAction","skipSummary","cancelDestinationPath","_unref","__exports__","AppEncounterService","constructor","patientID","providerID","super","isNotEmptyandNumber","match","isNotEmptyandFloat","checkMinMax","min","max","p","_val$other","_val$other2","j","this","isArray","mergeErrors","errors","holder","forEach","isValidBPReading","isValidBP","bpSystolic","bpDiastolic","values","emptyErrors","minErrors"],"mappings":"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","file":"js/chunk-5070e560.fb3bf5ec.js","sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nimport { Field, Option } from \"@/components/Forms/FieldInterface\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { VitalsService } from \"@/apps/ART/services/vitals_service\";\nimport { find, isEmpty } from \"lodash\";\nimport { Patientservice } from \"@/services/patient_service\";\nimport { infoActionSheet } from \"@/utils/ActionSheets\";\nimport { alertConfirmation } from \"@/utils/Alerts\";\nimport { computed, ref } from \"vue\";\nimport useEncounter from \"@/composables/useEncounter\";\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'AncVitals',\n  setup(__props) {\n\nconst age = ref(0);\nconst recentHeight = ref(-1);\nconst recentWeight = ref(-1);\nconst recentWeightObsID = ref(-1);\nconst fields = ref<Array<Field>>([]);\nlet vitalsService: VitalsService;\n\nconst { patientDashboardUrl, goToNextTask } = useEncounter(onConfigure);\n\nconst weightOption: Option = {\n  label: \"Weight\",\n  value: \"\",\n  other: {\n    modifier: \"KG\",\n    icon: \"weight\",\n    required: true,\n  },\n}\n\nconst bpOption: Option = {\n  label: \"BP\", \n  value: \"\", \n  other: {\n    modifier: \"mmHG\", \n    icon: \"bp\"\n  } \n}\n\nconst ageOption = computed(() => ({\n  label: \"Age\",\n  value: age.value,\n  other: {\n    doNotSave: true,\n    modifier: \"Years old\", \n    icon: \"\", \n    visible: false \n  }\n}));\n\nconst heightOption = computed(() => {\n  const disableHeight = recentHeight.value > 0 && age.value > 18;\n  return {\n    label: \"Height\",\n    value: `${disableHeight ? recentHeight.value : ''}`,\n    other: {\n      modifier: \"CM\",\n      icon: \"height\",\n      recentHeight: recentHeight.value,\n      visible: !disableHeight\n    }\n  }\n});\n\nasync function onConfigure (providerId: number, patientId: number, patient: Patientservice) {\n  vitalsService = new VitalsService(patientId, providerId);\n  const lastWeight = await VitalsService.getFirstObs(patientId, \"Weight\");\n  recentWeight.value = parseFloat(`${ lastWeight?.value_numeric ?? 0}`);\n  recentWeightObsID.value = parseInt(`${ lastWeight?.obs_id ?? -1 }`)\n  age.value = patient.getAge();\n  recentHeight.value = await patient.getRecentHeight();\n  fields.value.push(getVitalsField())\n}\n\nfunction validateVitals(vitals: any) {\n  const l = checkRequiredVitals(vitals);\n  if (l.length > 0) {\n    return l.map((val) => {\n      return [`${val.label} can not be empty`];\n    });\n  }\n  const v = sanitizeVitals(vitals);\n  return vitalsService.validateAll(v);\n}\n    \nfunction sanitizeVitals(vitals: Array<Option>) {\n  return vitals.filter((element) => {\n    if (element.label === \"Height\" && element.other.required == false) {\n      return false;\n    }\n    return element.value !== \"\" && element.label !== \"Age\";\n  })\n}\n\nfunction checkRequiredVitals(vitals: Array<Option>) {\n  return vitals.filter((element) => {\n    return element.value === \"\" && element.other.required === true;\n  });\n}\n\nfunction onUpdateAlertStatus (params: Option[]) {\n  const bp = find(params, { label: 'BP' })\n  if (bp && bp.value != '') {\n    const [sys, dis] = `${bp.value}`.split('/').map(v => parseInt(v))\n    if (sys >= 140 && dis >= 90) {\n      return {\n        status: 'Client is at risk of pre-eclampsia, refer for urine protein test.',\n        color: 'brown'\n      }\n    }\n    if (sys < 120 || sys > 140) {\n      return {\n        status: 'Systolic reading is out of normal range',\n        color: 'brown'\n      }\n    }\n    if (dis < 80 || dis > 90) {\n      return {\n        status: 'Diastolic reading is out of normal range',\n        color: 'brown'\n      }\n    }\n    if ((sys >= 130 && sys <= 139) && (dis >= 80 && dis <= 89)) {\n      return {\n        status: 'Prehypertension',\n        color: 'brown'\n      }\n    }\n  }\n  return { status: '', color: ''}\n}\n\nasync function getFinalWeight(weightOption: Option): Promise<number> {\n  const enteredWeight = parseFloat(`${weightOption.value || 0}`);\n  const weightChange = enteredWeight - recentWeight.value;\n  const changePercentage = (Math.abs(weightChange) / recentWeight.value || 1) * 100;\n\n  if (changePercentage > 30) {\n    const prevWeightBtnTxt = `Use ${recentWeight.value} Kg`\n    const newWeightBtnTxt = `Use ${enteredWeight} Kg`\n    const action = await infoActionSheet(\n      `Abnormal Weight Change`,\n      `Previous Weight \"${recentWeight.value} Kg\". Current Weight \"${enteredWeight} Kg\"`,\n      `Weight Reading has been ${ weightChange > 0 ? 'increased' : 'decresed'} by more than 30%. Please SELECT the correct Weight.)`,\n      [\n        {\n          name: prevWeightBtnTxt,\n          slot: 'start',\n          color: 'success'\n        },\n        {\n          name: newWeightBtnTxt,\n          slot: 'end',\n          color: 'danger'\n        }\n      ]\n    )\n    if (action === newWeightBtnTxt && recentWeightObsID) {\n      if ((await alertConfirmation(`Do you want to void Weight observation for ${recentWeight.value}`))) {\n        await VitalsService.voidObs(recentWeightObsID.value)\n      }\n    } else {\n      return recentWeight.value\n    }\n  }\n  return enteredWeight\n}\n\nasync function onChangeOption (activeItem: Option) {\n  if (!activeItem.value && activeItem.other.required) {\n    throw `Value for ${activeItem.label} is required`\n  }else if (activeItem.value) {\n    const errs = vitalsService.validator(activeItem)\n    if(errs && errs.length) throw errs\n  }\n  if(activeItem.label === \"Weight\" && recentWeight.value > 0) {\n    activeItem.value = await getFinalWeight(activeItem);\n  } \n}\n\nfunction getVitalsField(): Field {\n  return {\n    id: \"vitals\",\n    helpText: \"Vitals entry\",\n    type: FieldType.TT_VITALS_ENTRY,\n    validation: validateVitals,\n    options: () => [\n      weightOption,\n      heightOption.value,\n      bpOption,\n      ageOption.value\n    ],\n    config: {\n      onUpdateAlertStatus,\n      onChangeOption,\n      hiddenFooterBtns : ['Clear']\n    }\n  }\n}\n\nasync function buildBpObs(bp: string) {\n  const  [sys, dia] = bp.split(\"/\");\n  return [\n    await vitalsService.buildValueNumber(\"Systolic\", parseInt(sys)),\n    await vitalsService.buildValueNumber(\"Diastolic\", parseInt(dia))\n  ]\n}\n\nasync function buildVitalsObs(vitals: Array<Option>) {\n  const obs = await Promise.all(vitals.filter(vital => !(vital.other?.doNotSave || isEmpty(vital.value)))\n    .map(async (vital) => {\n      if(vital.label === \"BP\") return buildBpObs(vital.value as string);\n      if(vital.label === \"Weight\" && recentWeight.value > 0) {\n        vital.value = await getFinalWeight(vital)\n      }\n      return vitalsService.buildValueNumber(vital.label, vital.value as number);\n    }))\n  return obs.flat();\n}\n\nasync function onFinish(formData: any) {\n  await vitalsService.createEncounter();\n  const vitalObs = await buildVitalsObs(formData.vitals);\n  await vitalsService.saveObservationList(vitalObs);\n  goToNextTask();\n}\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createBlock(HisStandardForm, {\n    fields: fields.value,\n    onFinishAction: onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _unref(patientDashboardUrl)\n  }, null, 8, [\"fields\", \"cancelDestinationPath\"]))\n}\n}\n\n})","import script from \"./AncVitals.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./AncVitals.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { isArray } from \"lodash\";\nimport { Option } from '@/components/Forms/FieldInterface';\nexport class VitalsService extends AppEncounterService{\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 6, providerID);\n  }\n  isNotEmptyandNumber(vital: Option) {\n    return `${vital.value}`.match(/^-?\\d+\\.?\\d*$/) ? null : [`Invalid entry for ${vital.label}`]\n  }\n  isNotEmptyandFloat(vital: Option) {\n    return `${vital.value}`.match(/^\\d{1,3}\\.\\d{1,5}$/) \n      ? null \n      : [`Invalid entry for ${vital.label}. Don't forget to add a decimal. e.g. 56.2 ${vital.other?.modifier || ''}`]\n  }\n  checkMinMax(val: Option, min: number, max: number) {\n    const p = [];\n    if (parseFloat(`${val.value}`) < min) {\n      p.push([`${val.label} entered is less than minimum ${min} ${val?.other?.modifier || ''}`])\n    }\n    if (parseFloat(`${val.value}`) > max) {\n      p.push([`${val.label} entered is greater than maximum ${max} ${val?.other?.modifier || ''}`])\n    }\n    return p.length > 0 ? p : null;\n  }\n  validateAll(vitals: Option[]) {\n    const p: any = [];\n    vitals.map((vital: any) => {\n      const j = this.validator(vital);\n      return isArray(j) ? p.push(j) : null\n    })\n    return p.length > 0 ? p : null;\n  }\n\n  mergeErrors(errors: any[]) {\n    const holder: any = [];\n    errors.forEach(element => {\n      if (isArray(element)) {\n        holder.push(element)\n      }\n    });\n    return holder.length > 0 ? holder : null\n  }\n  isValidBPReading(vital: any) {\n    const p = [];\n    const isValidBP =  `${vital.value}`.match(/^\\d{1,3}\\/\\d{1,3}$/g) ? null : ['Invalid BP reading']\n    p.push(isValidBP);\n    if(isValidBP == null) {\n      const value = `${vital.value}`.split('/');\n      \n      const bpSystolic = {\n        label: 'Systolic',\n        value: value[0]\n      };\n      const bpDiastolic = {\n        label: 'Diastolic',\n        value: value[1]\n      };\n      p.push(this.checkMinMax(bpDiastolic, 30, 200))\n      p.push(this.checkMinMax(bpSystolic, 40, 250))\n    }\n    return this.mergeErrors(p)\n  }\n  validator(vital: Option) {\n    const values = [\n      {\n        name: \"Weight\",\n        validator: (val: Option) => {\n          const emptyErrors = this.isNotEmptyandFloat(val);\n          const minErrors = this.checkMinMax(val, 2.0, 250.0);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      },\n      {\n        name: \"Height\",\n        validator: (val: Option) => {\n          const errors = []\n          errors.push(this.isNotEmptyandNumber(val))\n          errors.push(this.checkMinMax(val, 40, 220))\n          return this.mergeErrors(errors); \n        },\n      }, {\n        name: \"BP\",\n        validator: (val: any) => {\n          return this.isValidBPReading(val)\n        },\n      }, {\n        name: \"Temp\",\n        validator: (val: any) => {\n          const emptyErrors = this.isNotEmptyandNumber(val);\n          const minErrors = this.checkMinMax(val, 30, 42);\n          return this.mergeErrors([emptyErrors, minErrors]); \n        },\n      }, {\n        name: \"SP02\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 40, 100);\n          return this.mergeErrors([minErrors]); \n        },\n      }, {\n        name: \"Pulse\",\n        validator: (val: any) => {\n          const minErrors = this.checkMinMax(val, 50, 120);\n          return this.mergeErrors([minErrors]); \n        },\n      }\n    ]\n    const v = values.filter(element => {\n      return element.name === vital.label;\n    });\n    if (v.length > 0) {\n      return v[0].validator(vital);\n    }\n    return null\n  }\n}"],"sourceRoot":""}