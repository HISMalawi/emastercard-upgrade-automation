{"version":3,"sources":["webpack:///./src/apps/ART/services/lab_order_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/LOS/views/OrderTests.vue?1bae","webpack:///./src/apps/LOS/views/OrderTests.vue","webpack:///./src/apps/LOS/views/OrderTests.vue?0c48"],"names":["LabOrderService","AppEncounterService","constructor","patientID","providerID","super","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","facts","ready","watch","handler","route","params","patient_id","this","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","status","_finding$actions4","program","e","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","isEmpty","person","names","_p$person2","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","isCondition","ignored","undefined","prop","includes","every","Boolean","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","onFinishAction","onSubmit","mixins","EncounterMixinVue","service","barcode","activityType","canScanDBS","isNextBtnDisabled","verifyingBarcode","ART_GLOBAL_PROP","query","type","PatientLabService","getClinianGivenNameField","getClinianFamilyNameField","getFacililityLocationField","getReasonForTestField","getTestSpecimensField","getTestSelectionField","getBarcodeInput","getTestCombinationField","_","conceptIdToDelete","ConceptService","getConceptID","plasmaConceptId","specimen","concept_id","indexToDelete","tests","findIndex","test","orders","encounter","createEncounter","deletedTest","splice","formattedOrders","buildLabOrders","OrderService","saveOrdersArray","encounter_id","toastWarning","invalidate","canPrintOrders","alertConfirmation","confirmBtnLabel","cancelBtnLabel","printSpecimenLabel","order_id","req","placeOrder","reason_for_test_id","target_lab","toStandardHisFormat","Service","requesting_clinician","loadingController","create","message","present","barcodeOk","trim","getTop","v","dismiss","accessionNumExists","id","helpText","FieldType","TT_SELECT","defaultValue","getLocationName","validation","val","Validation","required","getFacilities","computedValue","config","showKeyboard","isFilterDataViaApi","field","PersonField","getGivenNameField","proxyID","appearInSummary","getFamilyNameField","summaryMapValue","f","getCachedConceptID","getSpecimens","activeSpecimen","TT_GRID_SELECTOR","c","listData","getTestTypesBySpecimen","t","isChecked","TT_BARCODE","onValue","verifyingScanedBarcode","item","hiddenFooterBtns","overrideDefaultFooterBtns","nextBtn","disabled","default","showScannedBarcode"],"mappings":"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","file":"js/chunk-da4654ee.3b5cde02.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\";\nexport class LabOrderService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 57, providerID);\n  }\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: (facts: FactsInterface) => any;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: ConditionsInteface;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\nexport type FactsInterface = Record<string, any>\nexport type ConditionResolver = (value: any, facts: FactsInterface) => boolean | RegExpMatchArray | null\nexport type ConditionsInteface = Record<string, ConditionResolver>\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: FactsInterface, conditions: ConditionsInteface): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: FactsInterface, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"fields\", \"onFinishAction\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport {getFacilities} from \"@/utils/HisFormHelpers/LocationFieldOptions\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { PatientLabService } from \"@/apps/LOS/services/patient_lab_service\"\nimport { OrderService } from \"@/services/order_service\"\nimport { ConceptService } from '@/services/concept_service'\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\"\nimport ART_GLOBAL_PROP from \"@/apps/ART/art_global_props\"\nimport HisDate from \"@/utils/Date\"\nimport { LabOrderService } from \"@/apps/ART/services/lab_order_service\"\nimport Store from \"@/composables/ApiStore\"\nimport { alertConfirmation, toastDanger, toastWarning } from \"@/utils/Alerts\"\nimport { Service } from '@/services/service'\nimport { loadingController } from \"@ionic/vue\";\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        patientID: -1,\n        service: {} as any,\n        fields: [] as Field[],\n        barcode: '' as any,\n        activityType: '' as 'DRAW_SAMPLES' | 'ORDER_TESTS',\n        canScanDBS: false as boolean,\n        isNextBtnDisabled: true as boolean,\n        verifyingBarcode: false\n    }),\n    async created() {\n        this.canScanDBS = await ART_GLOBAL_PROP.canScanDBS()\n    },\n    watch: {\n        '$route': {\n            handler({query, params}: any) {\n                if (query && params) {\n                    this.patientID = params.patient_id\n                    this.activityType = query.type\n                    this.service = new PatientLabService(this.patientID)\n                    this.fields = [\n                        this.getClinianGivenNameField(),\n                        this.getClinianFamilyNameField(),\n                        this.getFacililityLocationField(),\n                        this.getReasonForTestField(),\n                        this.getTestSpecimensField(),\n                        this.getTestSelectionField(),\n                        this.getBarcodeInput(),\n                        this.getTestCombinationField()\n                    ]\n                }\n            },\n            immediate: true,\n            deep: true\n        },\n    },\n    methods: {\n        async onSubmit(_: any, computed: any) {\n            const conceptIdToDelete = await ConceptService.getConceptID('HIV viral load') \n            const plasmaConceptId = await ConceptService.getConceptID('Plasma') \n\n            if(computed.specimen.concept_id != plasmaConceptId){\n                const indexToDelete = computed.tests.findIndex((test: any) => test.concept_id === conceptIdToDelete);\n                if (indexToDelete !== -1) {\n                    const orders = new LabOrderService(parseInt(this.patientID), this.providerID);\n                    const encounter = await orders.createEncounter();\n\n                    if(encounter) {\n                        const deletedTest = computed.tests.splice(indexToDelete, 1)[0];\n                        const formattedOrders: any = this.buildLabOrders(computed, deletedTest.concept_id,encounter)\n                        const d =await  OrderService.saveOrdersArray(encounter.encounter_id, formattedOrders);\n            \n                        if(!d) return toastWarning('Unable to save lab orders')\n\n                        Store.invalidate('PATIENT_LAB_ORDERS')\n                        const canPrintOrders = await alertConfirmation('Lab orders and encounter created!, print out your last orders?', { \n                        confirmBtnLabel: 'Yes',\n                        cancelBtnLabel: 'No'\n                        })\n                        if(canPrintOrders) await this.service.printSpecimenLabel(d[0].order_id)\n                        if(computed.tests.length <= 0) this.$router.push(`/patient/dashboard/${this.patientID}`)\n                    }\n                } \n            }\n            \n            if(computed.tests.length > 0){\n                const req = await this.service.placeOrder(computed)\n                if (req) {\n                    await this.service.printSpecimenLabel(req[0].order_id)\n                    this.$router.push(`/patient/dashboard/${this.patientID}`)\n                } \n            }\n        },\n        buildLabOrders(computed: any, concept_id: any,encounter: any) {\n            return [{\n                'accession_number': this.barcode,\n                'encounter_id': encounter.encounter_id,\n                'tests': [{ 'concept_id': concept_id }],\n                'reason_for_test_id': computed.reason_for_test_id,\n                'target_lab': computed.target_lab,\n                'date': HisDate.toStandardHisFormat(Service.getSessionDate()),\n                'requesting_clinician': computed.requesting_clinician,\n                'specimen':{\"concept_id\": computed.specimen.concept_id}\n            }]\n        },\n        async verifyingScanedBarcode(barcode: string) {\n            this.verifyingBarcode = !this.verifyingBarcode;\n            if (this.verifyingBarcode) return false;\n            (await loadingController.create({ message: `Checking ${barcode}`})).present()\n            this.isNextBtnDisabled = true\n            // Expected barcode examples: L5728043 or 57280438\n            const barcodeOk = /^([A-Z]{1})?[0-9]{7,8}$/i.test(`${barcode}`.trim())\n            if (!barcodeOk) {\n                toastWarning(\"Invalid Barcode\")\n                this.verifyingBarcode = false\n                loadingController.getTop().then(v => v && loadingController.dismiss())\n                return false ;\n            }\n            /**\n             * Verify with API if barcode was already used:\n             */\n            try {\n                if (!(await OrderService.accessionNumExists(barcode))) {\n                    this.barcode = barcode\n                    this.isNextBtnDisabled = false\n                    return true\n                } else {\n                toastWarning(`Barcode ${barcode} was already used`)\n                }\n            } catch (e) {\n                toastDanger(\"Failed to confirm barcode \" + barcode + \", Please try again later\", 8000)  \n            }\n            this.verifyingBarcode = false\n            loadingController.getTop().then(v => v && loadingController.dismiss())\n        },\n        getFacililityLocationField(): Field {\n            return {\n                id: 'target_lab',\n                helpText: 'Requesting location',\n                type: FieldType.TT_SELECT,\n                defaultValue: () => PatientLabService.getLocationName(),\n                validation: (val: Option) => Validation.required(val),\n                options: (_: any, filter='') => getFacilities(filter),\n                computedValue: (val: Option) => val.label,\n                config: {\n                    showKeyboard: true,\n                    isFilterDataViaApi: true\n                }\n            }\n        },\n        getClinianGivenNameField(): Field {\n            const field = PersonField.getGivenNameField()\n            field.helpText = 'Requesting clinician - First name'\n            field.proxyID = 'requesting_clinician'\n            field.condition = () => this.activityType === 'DRAW_SAMPLES'\n            field.appearInSummary = () => false\n            return field\n        },\n        getClinianFamilyNameField(): Field {\n            const field = PersonField.getFamilyNameField()\n            field.helpText = 'Requesting clinician - Last name'\n            field.proxyID = 'requesting_clinician'\n            field.condition = () => this.activityType === 'DRAW_SAMPLES'\n            field.summaryMapValue = (v: any, f: any) => {\n                return {\n                    label: 'Clinician name', \n                    value: `${f.given_name.value} ${v.value}`\n                }\n            },\n            field.computedValue = (v: Option, f: any) => `${f.given_name.value} ${v.value}`\n            return field\n        },\n        getReasonForTestField(): Field {\n            return {\n                id: 'reason_for_test_id',\n                helpText: 'Reason for test',\n                type: FieldType.TT_SELECT,\n                validation: (val: Option) => Validation.required(val),\n                computedValue: (val: any) => ConceptService.getCachedConceptID(\n                    val.value, true\n                ),\n                options: () => [\n                    {label: 'Routine', value: 'Routine'},\n                    {label: 'Targeted', value: 'Targeted'},\n                    {label: 'Confirmatory', value: 'Confirmatory'},\n                    {label: 'Repeat / Missing', value: 'Repeat / Missing'},\n                    {label: 'Stat', value: 'Stat'}\n                ]\n            }\n        },\n        getTestSpecimensField(): Field {\n            return { \n                id: 'specimen',\n                helpText: 'Select specimen',\n                type: FieldType.TT_SELECT,\n                condition: () => this.activityType === 'DRAW_SAMPLES',\n                validation: (val: Option) => Validation.required(val),\n                computedValue: (v: Option) => ({'concept_id': v.value}),\n                options: async () => {\n                    const req = await OrderService.getSpecimens('')\n                    return req.map((d: any) => ({\n                        label: d.name, \n                        value: d.concept_id\n                    }))\n                },\n                config: {\n                    showKeyboard: true\n                }\n            }\n        },\n        getTestSelectionField(): Field {\n            let activeSpecimen = ''\n            return {\n                id: 'tests',\n                helpText: 'Select tests',\n                type: FieldType.TT_GRID_SELECTOR,\n                validation: (val: Option) => Validation.required(val),\n                computedValue: (val: Array<Option>) => {\n                    return val.map(v => ({'concept_id': v.value}))\n                },\n                options: async (f: any, c: any, listData: Option[]) => {\n                    if (f.specimen && f.specimen.label != activeSpecimen) {\n                        activeSpecimen = f.specimen.label\n                        const req = await OrderService.getTestTypesBySpecimen(\n                            f.specimen.label\n                        )\n                        return req.map((t: any) => ({\n                            label: t.name,\n                            value: t.concept_id,\n                            isChecked: false,\n                            other: t\n                        }))\n                    } else {\n                        return listData\n                    }\n                }\n            }\n        },\n        getBarcodeInput(): Field{\n            return  {\n            id: \"barcode\",\n            helpText: \"Scan viral load barcode\",\n            type: FieldType.TT_BARCODE,\n            onValue: async (id: string) => {\n                return await this.verifyingScanedBarcode(id)\n            },\n            summaryMapValue: (v: any) => {\n                    return {\n                        label: \"Scaned Barcode\",\n                        value: v\n                    }\n                },\n            condition: (val: any) => val.tests.some((item: any) => item.label === 'HIV viral load' && this.canScanDBS) &&\n            val.specimen.label !== \"Plasma\",\n            config : {\n                hiddenFooterBtns : ['Clear'],\n                overrideDefaultFooterBtns: {\n                    nextBtn: {\n                        name: 'Next',\n                        state: {\n                            disabled: {\n                                default: () => this.isNextBtnDisabled\n                            }\n                        },\n                    }\n                },\n                showScannedBarcode: true,\n            },\n        }\n\n        },\n        getTestCombinationField(): Field {\n            return {\n                id: 'combine_tests',\n                helpText: 'Combine test(s) in one order',\n                type: FieldType.TT_SELECT,\n                computedValue: (val: Option) => val.value === 'Yes',\n                condition: (f: any) => f.tests.length > 1,\n                validation: (val: Option) => Validation.required(val),\n                options: () => this.yesNoOptions()\n            }\n        }\n    }\n})\n","import { render } from \"./OrderTests.vue?vue&type=template&id=5137d4f4&ts=true\"\nimport script from \"./OrderTests.vue?vue&type=script&lang=ts\"\nexport * from \"./OrderTests.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/projects/malawi-emr/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}