{"version":3,"sources":["webpack:///./src/apps/SPINE/services/dispensation_service.ts","webpack:///./src/apps/SPINE/views/encounters/Dispensing.vue","webpack:///./src/apps/SPINE/views/encounters/Dispensing.vue?1a29","webpack:///./src/services/drug_order_service.ts"],"names":["DispensationService","AppEncounterService","constructor","patientID","providerID","super","_defineProperty","this","drugHistory","currentDrugOrder","getDrugHistory","getCurrentOrder","buildDispensations","orderId","quantity","date","saveDispensations","dispensations","postJson","getProgramID","void","res","DrugOrderService","getDrugOrderHistory","getDrugOrders","Promise","all","calcCompletePack","drug","units","drugOrderBarcodes","barcodes","sort","a","b","tabs","length","i","parseInt","smallestAvailableTab","completePack","_defineComponent","__name","setup","__props","dispensation","fields","ref","goToPatientDashboard","patientDashboardUrl","useEncounter","async","providerId","patientId","patient","loadCurrentDrugOrder","loadDrugHistory","value","push","getDispensationField","isDoneDispensing","orders","map","o","every","Boolean","calculateCompletePack","order","parseFloat","amount_needed","buildOrderOptions","d","label","name","other","drug_id","order_id","buildMedicationHistory","dateA","Date","start_date","dateB","medication","HisDate","toStandardHisDisplayFormat","amount","isValidDispensation","isOk","totalTabs","toString","amountNeeded","percentageGiven","alertConfirmation","onValueUpdate","onValue","isBarcodeScanned","voided","voidOrder","dispensed","toastWarning","id","helpText","type","FieldType","TT_DRUG_DISPENSER","config","medicationHistory","toolbarInfo","getFullName","getGender","getBirthdate","hiddenFooterBtns","options","_ctx","_cache","_openBlock","_createBlock","_unref","IonPage","default","_withCtx","_createVNode","HisStandardForm","skipSummary","cancelDestinationPath","_","__exports__","Service","getSessionDate","getJson","pageSize","drugID","params"],"mappings":"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","file":"js/chunk-3a4e23c4.4ba30a85.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\n\nexport class DispensationService extends AppEncounterService {\n  drugHistory: Array<any>;\n  currentDrugOrder: Array<any>;\n\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 54, providerID)\n    this.drugHistory = []\n    this.currentDrugOrder = []\n  }\n\n  getDrugHistory() {\n    return this.drugHistory\n  }\n\n  getCurrentOrder() {\n    return this.currentDrugOrder\n  }\n\n  buildDispensations(orderId: number, quantity: number) {\n    return [{\n      'drug_order_id': orderId,\n      date: this.date,\n      quantity: quantity\n    }]\n  }\n\n  saveDispensations(dispensations: Array<any>) {\n    return AppEncounterService.postJson('/dispensations', { \n      dispensations, \n      'program_id': AppEncounterService.getProgramID()\n    })\n  }\n\n  async voidOrder(orderId: number) {\n    return AppEncounterService.void(`/dispensations/${orderId}`, {})\n  }\n\n  async loadDrugHistory() {\n    const res = await DrugOrderService.getDrugOrderHistory(this.patientID)\n    if (res) {\n      this.drugHistory = res\n    }\n  }\n\n  async loadCurrentDrugOrder() {\n    const res = await DrugOrderService.getDrugOrders(this.patientID)\n    if (res) {\n      this.currentDrugOrder = await Promise.all(res)        \n    }\n  }\n\n  calcCompletePack(drug: any, units: number) {\n     //sorting in an ascending order by tabs\n    const drugOrderBarcodes = drug.barcodes.sort(function (a: any, b: any) {\n      return a.tabs - b.tabs;\n    });\n    if (drugOrderBarcodes.length == 0 || units == 0.0) {\n      return units;\n    }\n    for (let i = 0; i <= drugOrderBarcodes.length - 1; i++) {\n      if (parseInt(drugOrderBarcodes[i].tabs) >= units) {\n        return drugOrderBarcodes[i].tabs;\n      }\n    }\n    const smallestAvailableTab = parseInt(drugOrderBarcodes[0].tabs)\n    let completePack = parseInt(drugOrderBarcodes[drugOrderBarcodes.length - 1].tabs)\n    while (completePack < units) {\n      completePack += smallestAvailableTab\n    }\n    return completePack\n  }\n}\n","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { toastWarning, alertConfirmation } from \"@/utils/Alerts\"\nimport { DispensationService } from \"@/apps/SPINE/services/dispensation_service\"\nimport HisDate from \"@/utils/Date\"\nimport { IonPage } from '@ionic/vue'\nimport { ref } from 'vue'\nimport useEncounter from '@/composables/useEncounter'\nimport { Patientservice } from \"@/services/patient_service\";\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'Dispensing',\n  setup(__props) {\n\nlet dispensation: DispensationService;\nconst fields = ref<Array<Field>>([]);\n\nconst { goToPatientDashboard, patientDashboardUrl } = useEncounter(async (providerId, patientId, patient) => {\n  dispensation = new DispensationService(patientId, providerId)\n  await dispensation.loadCurrentDrugOrder()\n  await dispensation.loadDrugHistory()\n  fields.value.push(getDispensationField(patient));\n});\n\n\nfunction isDoneDispensing(orders: Array<Option>) {\n  return orders.map(o => o.value != 0).every(Boolean)\n}\n\nfunction calculateCompletePack(order: any) {\n  const units = parseFloat(order.amount_needed) - (order.quantity || 0)\n  const completePack = dispensation.calcCompletePack(order, units)\n  return completePack < 0 ? 0 : completePack\n}\n\nfunction buildOrderOptions() {\n  return dispensation.getCurrentOrder().map((d: any) => ({\n    label: d.drug.name,\n    value: d.quantity || 0,\n    other: {\n      'drug_id': d.drug.drug_id,\n      'order_id': d.order.order_id,\n      'amount_needed': calculateCompletePack(d),\n    }\n  }))\n}\n\nfunction buildMedicationHistory() {\n  return dispensation.getDrugHistory()\n    .sort((a: any, b: any) => {\n      const dateA: any = new Date(a.order.start_date)\n      const dateB: any = new Date(b.order.start_date)\n      return dateB - dateA\n    })\n    .map((d: any) => ({\n      medication: d.drug.name,\n      date: HisDate.toStandardHisDisplayFormat(d.order.start_date),\n      amount: d.quantity\n    }))\n}\n\nasync function isValidDispensation(order: Option) {\n  let isOk = true\n  const totalTabs = parseInt(order.value.toString())\n  const amountNeeded = order.other['amount_needed']\n  const percentageGiven = (totalTabs / amountNeeded) * 100\n  if (percentageGiven > 110) {\n    isOk = await alertConfirmation('Are you sure you want to dispense over 110% of the prescribed pill count?')\n  }\n  if (percentageGiven < 100) {\n    isOk = await alertConfirmation('Are you sure you want to dispense less than 100% of the prescribe amount?')\n  }\n  return isOk\n}\n\nasync function onValueUpdate(order: Option, orders: Array<Option>) {\n  if (order.value != -1 && isDoneDispensing(orders)) {\n    return goToPatientDashboard()\n  }\n  order.other['amount_needed'] = 0\n  await dispensation.loadCurrentDrugOrder()\n  return buildOrderOptions()\n}\n\nasync function onValue(order: Option, isBarcodeScanned: boolean) {\n  if (order.value === -1) {\n    const voided = await dispensation.voidOrder(order.other.order_id)\n    return voided ? true : false\n  }\n  if (!isBarcodeScanned && !(await isValidDispensation(order))) return false;\n  const dispensations = dispensation.buildDispensations(order.other.order_id, order.value as number);\n  const dispensed = await dispensation.saveDispensations(dispensations);\n  if (dispensed) return true;\n  toastWarning('Unable to save dispensation')\n  return false\n}\n\nfunction getDispensationField(patient: Patientservice) {\n  return {\n    id: 'dispenses',\n    helpText: 'Dispensation',\n    type: FieldType.TT_DRUG_DISPENSER,\n    onValueUpdate,\n    onValue,\n    config: {\n      medicationHistory: buildMedicationHistory(),\n      toolbarInfo: [\n        { label: 'Name', value: patient?.getFullName() },\n        { label: 'Gender', value: patient?.getGender() },\n        {\n          label: 'Date Of Birth', value: HisDate.toStandardHisDisplayFormat(\n            patient?.getBirthdate()\n          )\n        }\n      ],\n      hiddenFooterBtns: [\n        'Clear',\n        'Finish'\n      ]\n    },\n    options: () => buildOrderOptions()\n  }\n}\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createBlock(_unref(IonPage), null, {\n    default: _withCtx(() => [\n      _createVNode(HisStandardForm, {\n        skipSummary: true,\n        cancelDestinationPath: _unref(patientDashboardUrl),\n        fields: fields.value\n      }, null, 8, [\"cancelDestinationPath\", \"fields\"])\n    ]),\n    _: 1\n  }))\n}\n}\n\n})","import script from \"./Dispensing.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./Dispensing.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}"],"sourceRoot":""}