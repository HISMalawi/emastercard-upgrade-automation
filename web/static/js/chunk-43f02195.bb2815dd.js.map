{"version":3,"sources":["webpack:///./src/views/Confirmation.vue?b238","webpack:///./src/guidelines/confirmation_page_guidelines.ts","webpack:///./src/apps/ANC/Services/anc_pregnancy_status_service.ts","webpack:///./src/views/Confirmation.vue","webpack:///./src/views/Confirmation.vue?d80c","webpack:///./src/utils/ActionSheetHelpers/VoidReason.ts","webpack:///./src/views/Confirmation.vue?5a34","webpack:///./src/utils/GuidelineEngine.ts"],"names":["_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_1","class","_hoisted_2","_hoisted_3","_createElementVNode","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","_hoisted_17","_hoisted_18","_hoisted_19","_hoisted_20","render","_ctx","_cache","$props","$setup","$data","$options","_component_ion_col","_resolveComponent","_component_ion_row","_component_ion_toolbar","_component_ion_header","_component_confirmation_card","_component_ion_content","_component_ion_button","_component_ion_spinner","_component_ion_footer","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","translucent","_createTextVNode","_toDisplayString","demographics","patientName","birthdate","gender","_","ancestryDistrict","ancestryTA","ancestryVillage","currentDistrict","currentTA","currentVillage","_createElementBlock","_Fragment","_renderList","cards","card","index","key","title","label","items","values","isLoading","color","size","disabled","canVoidClient","onClick","onVoid","facts","anc","canInitiateNewPregnancy","slot","onInitiateNewAncPregnancy","_createCommentVNode","patientFound","isReady","nextTask","name","TargetEvent","FlowState","CONFIRMATION_PAGE_GUIDELINES","weight","targetEvent","ONLOAD","actions","alert","async","action","infoActionSheet","SEARCH_BY_NAME","GO_HOME","conditions","globalProperties","ddeEnabled","yes","tableActionSheet","invalidDemographics","GO_BACK","hasInvalidDemographics","scannedNpid","dde","voidedNpids","cols","rows","VIEW_MERGE_AUDIT_FOR_NPID","localNpidDiff","remoteNpidDiff","CREATE_NPID_WITH_REMOTE_DIFF","ASSIGN_NPID","currentNpid","npid","isUnknownOrEmpty","npidHasOverFiveDuplicates","isTrue","RESOLVE_DUPLICATE_NPIDS","npidHasDuplicates","ON_CONTINUE","CONTINUE","FORCE_EXIT","currentOutcome","outcome","patientType","contextualBtn","ADD_AS_DRUG_REFILL","ADD_AS_EXTERNAL_CONSULTATION","ADD_AS_NEW_PATIENT","programName","type","includes","ENROLL","EXIT","enrolledInProgram","enrolled","ACTIVATE_FN","identifiers","useFilingNumbers","UPDATE_DMG","patientIsComplete","isFound","diffRows","diffRowColors","UPDATE_LOCAL_DDE_DIFFS","REFRESH_DDE_DEMOGRAPHICS","hasDemographicConflict","PRINT_NPID","match","RegExp","hasInvalidNpid","userRoles","roles","hasHighViralLoad","isHigh","lmpMonths","INITIATE_ANC_PREGNANCY","currentPregnancyIsOverdue","g","toLowerCase","AncPregnancyStatusService","AppEncounterService","constructor","patientID","providerID","super","info","ProgramService","getProgramInformation","this","date_of_lnmp","lmp","dayjs","today","date","diff","getLmpInMonths","createEncounter","saveValueCodedObs","defineComponent","components","IonContent","IonHeader","IonFooter","IonPage","IonToolbar","IonSpinner","IonRow","IonCol","IonButton","ConfirmationCard","defineAsyncComponent","data","app","program","patient","localPatient","ddeInstance","useDDE","programInfo","programs","patientTypeLastUpdated","localDiffs","givenName","familyName","landmark","phoneNumber","created","initCards","HisApp","getActiveApp","mounted","updateCards","PatientDemographicsExchangeService","setGlobalPropertyFacts","then","query","$route","isEmpty","person_id","patient_barcode","findAndSetPatient","computed","HisDate","toStandardHisDisplayFormat","UserService","isDataManager","methods","i","confirmationSummary","cardItems","keys","Object","length","cardData","catch","e","console","error","c","val","init","asyncValue","value","staticValue","orders","OrderService","getOrders","getID","latestVLResult","reduce","result","order","_results","getVLResults","isHighViralLoadResult","id","req","searchNpid","Patientservice","findByID","findByNpid","handleSearchResults","toastDanger","results","IncompleteEntityError","entity","BadRequestError","Array","isArray","errors","msg","entities","setInvalidParametersFacts","Store","set","setPatientFacts","factPromises","push","setProgramFacts","setDDEFacts","setAncFacts","setViralLoadStatus","getNationalID","validateNpid","Promise","all","setVoidedNpidFacts","onEvent","getDocID","errorExceptions","map","entries","join","reloadPatient","undefined","getFullName","getGivenName","getFamilyName","getAttribute","getGender","getBirthdate","getHomeDistrict","getHomeTA","getHomeVillage","getCurrentDistrict","getCurrentTA","getCurrentVillage","getIdentifiers","get","applicationName","pregnancyIsOverdue","buildDDEDiffs","diffs","comparisons","refs","ref","diffIndexes","indexes","k","local","remote","rowColors","PatientProgramService","getProgram","isValueEmpty","getUserRoles","r","role","patientTypeObs","ObservationService","getFirstObs","value_coded","toStandardHisFormat","obs_datetime","_await$this$ddeInstan","localAndRemoteDiffs","getLocalAndRemoteDiffs","formatDiffValuesByType","warn","findVoidedIdentifier","d","p","$router","assignNpid","modalController","dismiss","toastWarning","callback","findings","matchToGuidelines","_finding$actions","finding","_finding$actions2","state","runFlowState","alertConfirmation","initiateNewAncPregnancy","createNewPregnancyStatus","states","back","enrollProgram","printNpid","delayPromise","createNPID","toastSuccess","alreadyAssigned","res","reassignNpid","PatientPrintoutService","printNidLbl","refreshDemographics","createPatientType","updateLocalDifferences","newPatientType","getSessionDate","PatientTypeService","savePatientType","popVoidReason","voidPatient","reason","__exports__","modal","optionsActionSheet","selection","isCondition","ignored","prop","every","Boolean","sortByPriority","sort","a","b","priority","sortByWeight","guidelines","target","sortBy","matches","guidelineIndex","targetValidations","some","description","text"],"mappings":"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","file":"js/chunk-43f02195.bb2815dd.js","sourcesContent":["import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-58076b70\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { class: \"tool-bar-medium-card\" }\nconst _hoisted_2 = { class: \"his-sm-text\" }\nconst _hoisted_3 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\nconst _hoisted_4 = { class: \"his-sm-text\" }\nconst _hoisted_5 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\nconst _hoisted_6 = { class: \"his-sm-text\" }\nconst _hoisted_7 = { class: \"tool-bar-medium-card\" }\nconst _hoisted_8 = { class: \"his-sm-text\" }\nconst _hoisted_9 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\nconst _hoisted_10 = { class: \"his-sm-text\" }\nconst _hoisted_11 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\nconst _hoisted_12 = { class: \"his-sm-text\" }\nconst _hoisted_13 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\nconst _hoisted_14 = { class: \"tool-bar-medium-card\" }\nconst _hoisted_15 = { class: \"his-sm-text\" }\nconst _hoisted_16 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\nconst _hoisted_17 = { class: \"his-sm-text\" }\nconst _hoisted_18 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\nconst _hoisted_19 = { class: \"his-sm-text\" }\nconst _hoisted_20 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_col = _resolveComponent(\"ion-col\")!\n  const _component_ion_row = _resolveComponent(\"ion-row\")!\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")!\n  const _component_ion_header = _resolveComponent(\"ion-header\")!\n  const _component_confirmation_card = _resolveComponent(\"confirmation-card\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_ion_button = _resolveComponent(\"ion-button\")!\n  const _component_ion_spinner = _resolveComponent(\"ion-spinner\")!\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_ion_header, { translucent: true }, {\n        default: _withCtx(() => [\n          _createVNode(_component_ion_toolbar, null, {\n            default: _withCtx(() => [\n              _createVNode(_component_ion_row, null, {\n                default: _withCtx(() => [\n                  _createVNode(_component_ion_col, null, {\n                    default: _withCtx(() => [\n                      _createElementVNode(\"div\", _hoisted_1, [\n                        _createElementVNode(\"span\", _hoisted_2, [\n                          _createTextVNode(\"Patient Name: \"),\n                          _createElementVNode(\"b\", null, _toDisplayString(_ctx.demographics.patientName), 1)\n                        ]),\n                        _createTextVNode(),\n                        _hoisted_3,\n                        _createElementVNode(\"span\", _hoisted_4, [\n                          _createTextVNode(\"Birthdate: \"),\n                          _createElementVNode(\"b\", null, _toDisplayString(_ctx.birthdate), 1)\n                        ]),\n                        _createTextVNode(),\n                        _hoisted_5,\n                        _createElementVNode(\"span\", _hoisted_6, [\n                          _createTextVNode(\"Gender: \"),\n                          _createElementVNode(\"b\", null, _toDisplayString(_ctx.demographics.gender), 1)\n                        ])\n                      ])\n                    ]),\n                    _: 1\n                  }),\n                  _createVNode(_component_ion_col, null, {\n                    default: _withCtx(() => [\n                      _createElementVNode(\"div\", _hoisted_7, [\n                        _createElementVNode(\"span\", _hoisted_8, [\n                          _createTextVNode(\"Ancestry district: \"),\n                          _createElementVNode(\"b\", null, _toDisplayString(_ctx.demographics.ancestryDistrict), 1)\n                        ]),\n                        _hoisted_9,\n                        _createElementVNode(\"span\", _hoisted_10, [\n                          _createTextVNode(\"Ancestry TA: \"),\n                          _createElementVNode(\"b\", null, _toDisplayString(_ctx.demographics.ancestryTA), 1)\n                        ]),\n                        _hoisted_11,\n                        _createElementVNode(\"span\", _hoisted_12, [\n                          _createTextVNode(\"Ancestry village: \"),\n                          _createElementVNode(\"b\", null, _toDisplayString(_ctx.demographics.ancestryVillage), 1)\n                        ]),\n                        _hoisted_13\n                      ])\n                    ]),\n                    _: 1\n                  }),\n                  _createVNode(_component_ion_col, null, {\n                    default: _withCtx(() => [\n                      _createElementVNode(\"div\", _hoisted_14, [\n                        _createElementVNode(\"span\", _hoisted_15, [\n                          _createTextVNode(\"Current District:\"),\n                          _createElementVNode(\"b\", null, _toDisplayString(_ctx.demographics.currentDistrict), 1),\n                          _hoisted_16\n                        ]),\n                        _createElementVNode(\"span\", _hoisted_17, [\n                          _createTextVNode(\"Current TA: \"),\n                          _createElementVNode(\"b\", null, _toDisplayString(_ctx.demographics.currentTA), 1),\n                          _hoisted_18\n                        ]),\n                        _createElementVNode(\"span\", _hoisted_19, [\n                          _createTextVNode(\"Current Village: \"),\n                          _createElementVNode(\"b\", null, _toDisplayString(_ctx.demographics.currentVillage), 1),\n                          _hoisted_20\n                        ])\n                      ])\n                    ]),\n                    _: 1\n                  })\n                ]),\n                _: 1\n              })\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      }),\n      _createVNode(_component_ion_content, null, {\n        default: _withCtx(() => [\n          _createVNode(_component_ion_row, null, {\n            default: _withCtx(() => [\n              (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.cards, (card, index) => {\n                return (_openBlock(), _createBlock(_component_ion_col, {\n                  \"size-md\": \"4\",\n                  \"size-sm\": \"12\",\n                  key: index\n                }, {\n                  default: _withCtx(() => [\n                    (_openBlock(), _createBlock(_component_confirmation_card, {\n                      key: `card-${index}`,\n                      title: card.label,\n                      items: card.values,\n                      isLoading: card.isLoading\n                    }, null, 8, [\"title\", \"items\", \"isLoading\"]))\n                  ]),\n                  _: 2\n                }, 1024))\n              }), 128))\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      }),\n      _createVNode(_component_ion_footer, null, {\n        default: _withCtx(() => [\n          _createVNode(_component_ion_toolbar, { color: \"dark\" }, {\n            default: _withCtx(() => [\n              _createVNode(_component_ion_button, {\n                color: \"danger\",\n                size: \"large\",\n                \"router-link\": \"/\"\n              }, {\n                default: _withCtx(() => [\n                  _createTextVNode(\" Cancel \")\n                ]),\n                _: 1\n              }),\n              _createVNode(_component_ion_button, {\n                disabled: !_ctx.canVoidClient,\n                color: \"danger left\",\n                size: \"large\",\n                onClick: _ctx.onVoid\n              }, {\n                default: _withCtx(() => [\n                  _createTextVNode(\"Void Client\")\n                ]),\n                _: 1\n              }, 8, [\"disabled\", \"onClick\"]),\n              (_ctx.facts.anc.canInitiateNewPregnancy)\n                ? (_openBlock(), _createBlock(_component_ion_button, {\n                    key: 0,\n                    slot: \"end\",\n                    size: \"large\",\n                    onClick: _ctx.onInitiateNewAncPregnancy\n                  }, {\n                    default: _withCtx(() => [\n                      _createTextVNode(\" New Pregnancy \")\n                    ]),\n                    _: 1\n                  }, 8, [\"onClick\"]))\n                : _createCommentVNode(\"\", true),\n              _createVNode(_component_ion_button, {\n                disabled: !_ctx.facts.patientFound || _ctx.facts.patientFound && !_ctx.isReady,\n                slot: \"end\",\n                color: \"success\",\n                size: \"large\",\n                onClick: _ctx.nextTask\n              }, {\n                default: _withCtx(() => [\n                  (!_ctx.isReady)\n                    ? (_openBlock(), _createBlock(_component_ion_spinner, {\n                        key: 0,\n                        name: \"crescent\"\n                      }))\n                    : _createCommentVNode(\"\", true),\n                  _createTextVNode(\" Continue \")\n                ]),\n                _: 1\n              }, 8, [\"disabled\", \"onClick\"])\n            ]),\n            _: 1\n          })\n        ]),\n        _: 1\n      })\n    ]),\n    _: 1\n  }))\n}","/**\n * This guideline will manage popup reminders or actions\n * that are brought to a user's attention pertaining to \n * a Patient's state.\n*/\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\"\nimport { infoActionSheet, tableActionSheet } from \"@/utils/ActionSheets\"\nimport { isUnknownOrEmpty } from '@/utils/Strs';\n\nexport enum TargetEvent {\n    ON_CONTINUE = 'oncontinue',\n    ONLOAD = 'onload'\n}\nexport enum FlowState {\n    FORCE_EXIT = 'forceExit',\n    GO_HOME = 'gotoHome',\n    GO_BACK = 'goBack',\n    CONTINUE = 'continue',\n    ENROLL = 'enroll',\n    EXIT = 'exit',\n    ACTIVATE_FN = 'activateFn',\n    ASSIGN_NPID = 'assignNpid',\n    UPDATE_DMG = 'updateDemographics',\n    PRINT_NPID = 'printNPID',\n    CREATE_NPID_WITH_REMOTE_DIFF = 'createNpiDWithRemote',\n    REFRESH_DDE_DEMOGRAPHICS = 'refreshDemographicsDDE',\n    UPDATE_LOCAL_DDE_DIFFS = 'updateLocalDiffs',\n    RESOLVE_DUPLICATE_NPIDS = 'resolveDuplicateNpids',\n    ADD_AS_DRUG_REFILL = 'addAsDrugRefill',\n    ADD_AS_NEW_PATIENT = 'addAsNewPatient',\n    ADD_AS_EXTERNAL_CONSULTATION = 'addAsExternalConsultation',\n    INITIATE_ANC_PREGNANCY = 'initiateNewAncPregnancy',\n    VIEW_MERGE_AUDIT_FOR_NPID = 'viewMergeAuditForNpid',\n    SEARCH_BY_NAME = 'searchByName',\n}\n\nexport const CONFIRMATION_PAGE_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"[DDE NOT ENABLED] Do not proceed if patient is not found in the system\" : {\n        weight: 98,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    ' 0 Search results',\n                    'Patient has not been found',\n                    'Choose how to proceed',\n                    [\n                        { \n                            name: 'Close', \n                            slot: 'start', \n                            color: 'primary',\n                        },\n                        {\n                            name: 'Search by name',\n                            slot: 'end',\n                            color: 'success'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Search by name' \n                    ? FlowState.SEARCH_BY_NAME\n                    : FlowState.GO_HOME\n            }\n        },\n        conditions: {\n            globalProperties({ddeEnabled}: any) {\n                return ddeEnabled === false\n            },\n            patientFound(yes: boolean) {\n                return yes === false\n            }\n        }\n    },\n    \"[DDE ENABLED] Show invalid attributes for a patient whose remote\": {\n        weight: 78,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async (facts: any) => {\n                await tableActionSheet(\n                    `DDE Entity Error`,\n                    'Remote patient has invalid attributes',\n                    [ 'Attribute', 'Errors' ],\n                    facts.demographics.invalidDemographics,\n                    [\n                        { \n                            name: 'Close', \n                            slot: 'start', \n                            color: 'danger',\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return FlowState.GO_BACK\n            }\n        },\n        conditions: {\n            demographics({hasInvalidDemographics}: any) {\n                return hasInvalidDemographics === true\n            }\n        }\n    },\n    \"[DDE ENABLED] Do not proceed if NPID is not found and Provide history of voided NPIDS\" : {\n        weight: 98,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async (facts: any) => {\n                const action = await tableActionSheet(\n                    `Voided patients with ID ${facts.scannedNpid}`,\n                    'NPID was not found. Please review available patient with similar ID',\n                    facts.dde.voidedNpids.cols,\n                    facts.dde.voidedNpids.rows,\n                    [\n                        { \n                            name: 'Close', \n                            slot: 'start', \n                            color: 'primary',\n                        },\n                        {\n                            name: 'Merge history',\n                            slot: 'end',\n                            color: 'primary'\n                        },\n                        {\n                            name: 'Search by name',\n                            slot: 'end',\n                            color: 'success'\n                        }\n                        \n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Merge history' \n                    ?  FlowState.VIEW_MERGE_AUDIT_FOR_NPID \n                    : action === 'Search by name' \n                    ? FlowState.SEARCH_BY_NAME\n                    : FlowState.GO_HOME\n            }\n        },\n        conditions: {\n            globalProperties({ddeEnabled}: any) {\n                return ddeEnabled === true\n            },\n            patientFound(yes: boolean) {\n                return yes === false\n            }\n        }\n    },\n    \"[DDE NOT ENABLED] Notify the user to proceed with Remote NPID if local NPID does not match remote\": {\n        weight: 77,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async ({dde}: any) => {\n                await infoActionSheet(\n                    'Missing Local NPID',\n                    `Local NPID of \"${dde.localNpidDiff}\" does not match remote \"${dde.remoteNpidDiff}\"`,\n                    `Proceed to Fix issue`,\n                    [\n                        { \n                            name: 'Resolve issue', \n                            slot: 'start', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return FlowState.CREATE_NPID_WITH_REMOTE_DIFF\n            }\n        },\n        conditions: {\n            dde({localNpidDiff, remoteNpidDiff}: any) {\n                return localNpidDiff != remoteNpidDiff\n            },\n            globalProperties({ddeEnabled}: any) {\n                return ddeEnabled === true\n            }\n        }\n    },\n    \"Warn if patient is missing National ID and assign them one\": {\n        weight: 75,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                await infoActionSheet(\n                    'Missing National ID',\n                    'Patient was found BUT has no National ID',\n                    'The system is going to assign the patient with a new ID',\n                    [\n                        { \n                            name: 'OK', \n                            slot: 'start', \n                            color: 'primary'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return FlowState.ASSIGN_NPID\n            }\n        },\n        conditions: {\n            currentNpid: (npid: string) => isUnknownOrEmpty(npid)\n        }\n    },\n    \"Detect NPID over 5 duplicates and prompt the user to resolve them\" : {\n        weight: 99,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async ({ scannedNpid }: any) => {\n                const action = await infoActionSheet(\n                    'More than 5 duplicates found',\n                    `There are more than 5 duplicates for this NPID (${scannedNpid}). Please search by name and gender`,\n                    `Choose how to proceed`,\n                    [\n                        { \n                            name: 'Close', \n                            slot: 'start', \n                            color: 'danger',\n                        },\n                        { \n                            name: 'Search by name', \n                            slot: 'start', \n                            color: 'primary'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Search by name' ? FlowState.SEARCH_BY_NAME : FlowState.GO_HOME\n            }\n        },\n        conditions: {\n            npidHasOverFiveDuplicates(isTrue: boolean) {\n                return isTrue\n            }\n        }\n    },\n    \"Detect NPID duplicates and prompt the user to resolve them\" : {\n        weight: 99,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async ({ scannedNpid }: any) => {\n                await infoActionSheet(\n                    'DUPLICATE NPID',\n                    `NPID ${scannedNpid} is currently assigned to multiple patients`,\n                    'Proceed to resolve the issue',\n                    [\n                        { \n                            name: 'Resolve Duplicate NPIDs', \n                            slot: 'start', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return FlowState.RESOLVE_DUPLICATE_NPIDS\n            }\n        },\n        conditions: {\n            npidHasDuplicates(isTrue: boolean) {\n                return isTrue\n            }\n        }\n    },\n    \"Warn before proceeding if patient is deceased based on current Patient state\": {\n        weight: 50,\n        targetEvent: TargetEvent.ON_CONTINUE,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Deceased Patient',\n                    'Patient outcome is Died!',\n                    'Do you want to continue?',\n                    [\n                        { \n                            name: 'Yes', \n                            slot: 'start', \n                            color: 'danger'\n                        },\n                        { \n                            name: 'No',  \n                            slot: 'end', \n                            color: 'success'\n                        }\n                    ],\n                    'his-warning-color'\n                )\n                return action === 'Yes' ? FlowState.CONTINUE : FlowState.FORCE_EXIT\n            }\n        },\n        conditions: { \n            currentOutcome: (outcome: string) => outcome === 'Patient died' \n        }\n    },\n    \"Warn before proceeding if patient stopped treatment based on current Patient state\": {\n        weight: 49,\n        targetEvent: TargetEvent.ON_CONTINUE,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Stopped Treatment',\n                    'Patient outcome is Stopped Treatment ',\n                    'Do you want to continue?',\n                    [\n                        { \n                            name: 'Yes', \n                            slot: 'start', \n                            color: 'danger'\n                        },\n                        { \n                            name: 'No',  \n                            slot: 'end', \n                            color: 'success'\n                        }\n                    ],\n                    'his-warning-color'\n                )\n                return action === 'Yes' ? FlowState.CONTINUE : FlowState.FORCE_EXIT\n            }\n        },\n        conditions: {\n            currentOutcome: (outcome: string) => outcome === 'Treatment stopped'\n        }\n    },\n    \"[ART patient visit purpose] Select purpose of visit if patient is Transferred out or Emergency supply\": {\n        weight: 70,\n        targetEvent: TargetEvent.ON_CONTINUE,\n        actions: {\n            alert: async ({patientType, currentOutcome}: any) => {\n                let contextualBtn: any = []\n                if (patientType === 'External consultation' || currentOutcome === 'Patient transferred out') { \n                    contextualBtn = [\n                        {\n                            name: 'Emergency supply', \n                            slot: 'start', \n                            color: 'primary'\n                        },\n                        { \n                            name: 'New Patient',\n                            slot: 'end',\n                            color: 'primary'\n                        }\n                    ]\n                }  \n                if (patientType === 'Emergency supply') {\n                    contextualBtn = [\n                        { \n                            name: 'External Consultation',\n                            slot: 'start', \n                            color: 'primary'\n                        },\n                        { \n                            name: 'New Patient',\n                            slot: 'end',\n                            color: 'primary'\n                        }\n                    ]\n                }\n                if (patientType === 'New patient') {\n                    contextualBtn = [\n                        { \n                            name: 'External Consultation',\n                            slot: 'start', \n                            color: 'primary'\n                        },\n                        {\n                            name: 'Emergency supply', \n                            slot: 'start', \n                            color: 'primary'\n                        }\n                    ] \n                }\n                const action = await infoActionSheet(\n                    'Purpose of visit',\n                    `Patient type: ${patientType} | State: ${currentOutcome}`,\n                    'Please select purpose of the visit',\n                    [\n                        ...contextualBtn,\n                        {\n                            name: 'Continue',\n                            slot: 'end',\n                            color: 'success'\n                        }\n                    ]\n                )\n                switch(action) { \n                    case 'Emergency supply':\n                        return FlowState.ADD_AS_DRUG_REFILL\n                    case 'External Consultation':\n                        return FlowState.ADD_AS_EXTERNAL_CONSULTATION\n                    case 'New Patient':\n                        return FlowState.ADD_AS_NEW_PATIENT\n                    default: \n                        return FlowState.CONTINUE\n                }\n            }\n        },\n        conditions: {\n            programName: (name: string) => name === 'ART',\n            patientType: (type: string, { currentOutcome }: any) => {\n                return ['Emergency supply', 'External consultation'].includes(type) ||\n                    currentOutcome === 'Patient transferred out'\n            }\n        }\n    },\n    \"Prompt patient enrollment in current programme if not enrolled\" : {\n        weight: 30,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Programme Enrollment',\n                    'Patient is not enrolled in current programme, do you want to enroll?',\n                    '',\n                    [\n                        { \n                            name: 'Yes', \n                            slot: 'start', \n                            color: 'success'\n                        },\n                        { \n                            name: 'No',  \n                            slot: 'end', \n                            color: 'danger'\n                        }\n                    ]\n                )\n                return action === 'Yes' ? FlowState.ENROLL : FlowState.EXIT\n            }\n        },\n        conditions: {\n            enrolledInProgram: (enrolled: boolean) => enrolled === false\n        }\n    },\n    \"(ART Filing numbers) Prompt dormant filing number reactivation if patient has a dormant filing number\": {\n        weight: 25,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Filing Numbers',\n                    'Activate dormant #?',\n                    '',\n                    [\n                        { \n                            name: 'Yes', \n                            slot: 'start', \n                            color: 'success'\n                        },\n                        { \n                            name: 'No',  \n                            slot: 'end', \n                            color: 'danger'\n                        }\n                    ]\n                )\n                return action === 'Yes' ? FlowState.ACTIVATE_FN : FlowState.EXIT\n            }\n        },\n        conditions: {\n            programName: (programName: string) => programName === 'ART',\n            identifiers: (identifiers: string[]) => identifiers.includes('Archived filing number'),\n            currentOutcome: (outcome: string) => ![\n                'Treatment stopped', \n                'Patient transferred out', \n                'Patient died'\n            ].includes(outcome),\n            globalProperties({useFilingNumbers}: Record<string, boolean>) {\n                return useFilingNumbers\n            }\n        }\n    },\n    \"[DDE OFF] Prompt the user to update patient demographics when data is incomplete\": {\n        weight: 92,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Demographics',\n                    'Patient data is incomplete',\n                    'Do you want to review and update now?',\n                    [\n                        { \n                            name: 'Yes', \n                            slot: 'start', \n                            color: 'success'\n                        },\n                        { \n                            name: 'No',  \n                            slot: 'end', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Yes' ? FlowState.UPDATE_DMG : FlowState.EXIT\n            }\n        },\n        conditions: {\n            globalProperties({ddeEnabled}: any) {\n                return ddeEnabled === false\n            },\n            demographics: ({patientIsComplete}: any) => {\n                return patientIsComplete === false\n            },\n            patientFound: (isFound: boolean) => {\n                return isFound === true\n            }\n        }\n    },\n    \"[DDE] Alert When remote Patient demographics dont match Local Demographics \": {\n        weight: 93,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async ({dde}: any) => {\n                const action = await tableActionSheet(\n                    'Demographics Mismatch',\n                    'Local Demographics do not match Remote Demographics',\n                    ['Attributes', 'Local', 'Remote'],\n                    dde.diffRows,\n                    [\n                        { \n                            name: 'Use Local',\n                            slot: 'start', \n                            color: 'primary'\n                        },\n                        { \n                            name: 'Use Remote', \n                            slot: 'start', \n                            color: 'primary'\n                        }\n                    ], \n                    'his-danger-color',\n                    dde.diffRowColors\n                )\n                return action === 'Use Local' \n                    ? FlowState.UPDATE_LOCAL_DDE_DIFFS\n                    : FlowState.REFRESH_DDE_DEMOGRAPHICS\n            }\n        },\n        conditions: {\n            dde({hasDemographicConflict}: any) {\n                return hasDemographicConflict\n            }\n        }\n    },\n    \"[DDE] Alert to print newer NPID when the scanned NPID doesnt match active NPID\": {\n        weight: 69,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async ({ currentNpid }: any) => {\n                await infoActionSheet(\n                    '[DDE] NATIONAL ID',\n                    `Patient has a newer National Identifier ${currentNpid}`,\n                    'Print and proceed',\n                    [\n                        { \n                            name: 'Print', \n                            slot: 'start', \n                            color: 'primary'\n                        }\n                    ])\n                return FlowState.PRINT_NPID\n            }\n        },\n        conditions: {\n            globalProperties({ddeEnabled}: any) {\n                return ddeEnabled === true\n            },\n            scannedNpid(scannedNpid: string, {currentNpid}: any) {\n                return !scannedNpid.match(new RegExp(currentNpid, 'i'))\n            }\n        }\n    },\n    \"assign newer NPID when the current one is invalid\": {\n        weight: 68,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async ({ currentNpid }: any) => {\n                await infoActionSheet(\n                    'NATIONAL ID',\n                    `Current NPID ${currentNpid} is invalid`,\n                    'Reasign and Print',\n                    [\n                        { \n                            name: 'Reassign', \n                            slot: 'start', \n                            color: 'primary'\n                        }\n                    ]\n                )\n                return FlowState.ASSIGN_NPID\n            }\n        },\n        conditions: {\n            demographics: ({patientIsComplete}: any) => {\n                return patientIsComplete === true\n            },\n            patientFound: (isFound: boolean) => {\n                return isFound === true\n            },\n            hasInvalidNpid(isTrue: boolean) {\n                return isTrue\n            }\n        }\n    },\n    \"[DDE ON] Warn program managers when Patient has incomplete demographics. Dont force them to update though\": {\n        weight: 91,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Demographics',\n                    'Patient data is incomplete data',\n                    'Do you want to review and update now?',\n                    [\n                        { \n                            name: 'Yes', \n                            slot: 'start', \n                            color: 'success'\n                        },\n                        { \n                            name: 'No',  \n                            slot: 'end', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Yes' ? FlowState.UPDATE_DMG : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            globalProperties({ddeEnabled}: any) {\n                return ddeEnabled === true\n            },\n            demographics: ({patientIsComplete}: any) => {\n                return patientIsComplete === false\n            },\n            patientFound: (isFound: boolean) => {\n                return isFound === true\n            },\n            userRoles(roles: string[]) {\n                return roles.includes(\"Program Manager\") === true\n            }\n        }\n    },\n    \"[DDE ON] Force Users to update Incomplete Patient demographics\": {\n        weight: 92,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Patient Demographics',\n                    'Demographic data is incomplete',\n                    'Continue to update',\n                    [\n                        { \n                            name: 'Update', \n                            slot: 'start', \n                            color: 'success'\n                        },\n                        { \n                            name: 'Cancel', \n                            slot: 'start', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-warning-color'\n                )\n                return action === 'Cancel' ? FlowState.GO_HOME : FlowState.UPDATE_DMG\n            }\n        },\n        conditions: {\n            globalProperties({ddeEnabled}: any) {\n                return ddeEnabled === true\n            },\n            demographics: ({patientIsComplete}: any) => {\n                return patientIsComplete === false\n            },\n            userRoles: (roles: string[]) => {\n                return roles.includes('Program Manager') === false\n            }\n        }\n    },\n    \"Warn the user when patient has high viral load\": {\n        weight: 45,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                await infoActionSheet(\n                    'High Viral Load',\n                    'Patient has a high viral load, please take immediate action!',\n                    '',\n                    [\n                        { \n                            name: 'OK',  \n                            slot: 'end', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            hasHighViralLoad: (isHigh: boolean)  => isHigh === true\n        }\n    },\n    \"[ANC] Warn last LMP is more than 8 months ago and ask to initiate new pregnancy\": {\n        weight: 32,\n        targetEvent: TargetEvent.ON_CONTINUE,\n        actions: {\n            alert: async ({anc}: any) => {\n                const action = await infoActionSheet(\n                    'Pregancy overdue',\n                    `Last menstrual period was ${anc.lmpMonths} months ago!`,\n                    'Would you like to initiate new pregnancy?',\n                    [\n                        { \n                            name: 'Yes',  \n                            slot: 'end', \n                            color: 'success'\n                        },\n                        { \n                            name: 'No',  \n                            slot: 'end', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Yes' \n                    ? FlowState.INITIATE_ANC_PREGNANCY \n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            programName: (name: string) => name === 'ANC',\n            anc: (anc: any)  => anc.currentPregnancyIsOverdue === true\n        }        \n    },\n    \"[ANC] Exit if client is NOT ELIGIBLE for ANC\": {\n        weight: 89,\n        targetEvent: TargetEvent.ONLOAD,\n        actions: {\n            alert: async () => {\n                const action = await infoActionSheet(\n                    'Client not eligible for ANC',\n                    `This program is for women eligible for ANC only`,\n                    'If this is a mistake, please update client Demographics or Exit',\n                    [\n                        { \n                            name: 'EXIT',\n                            slot: 'end', \n                            color: 'success'\n                        },\n                        { \n                            name: 'EDIT DEMOGRAPHICS',\n                            slot: 'end', \n                            color: 'danger'\n                        }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'EXIT' ? FlowState.GO_HOME : FlowState.UPDATE_DMG\n            }\n        },\n        conditions: {\n            demographics: ({gender}: any) => {\n                const g = gender.toLowerCase()\n                return g === 'm' || g === 'male'\n            },\n            programName: (name: string) => {\n                return name === 'ANC'\n            } \n        }\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { ProgramService } from \"@/services/program_service\";\nimport dayjs from \"dayjs\";\n\nexport class AncPregnancyStatusService extends AppEncounterService {\n    constructor(patientID: number, providerID: number){\n        super(patientID, 111, providerID)\n    }\n\n    async getLmpInMonths() {\n        const info = await ProgramService.getProgramInformation(this.patientID)\n        if (info.date_of_lnmp) {\n            const lmp = dayjs(info.date_of_lnmp)\n            const today = dayjs(this.date)\n            return today.diff(lmp, 'months')\n        }\n        return -1\n    }\n\n    async pregnancyIsOverdue() {\n        return (await this.getLmpInMonths()) > 9\n    }\n\n    async canInitiateNewPregnancy() {\n        return (await this.getLmpInMonths()) >= 7\n    }\n\n    async createNewPregnancyStatus() { \n        await this.createEncounter()\n        return this.saveValueCodedObs('Pregnancy status', 'New')\n    }\n}\n","\nimport { isEmpty } from \"lodash\";\nimport HisDate from \"@/utils/Date\"\nimport HisApp from \"@/apps/app_lib\"\nimport { defineAsyncComponent, defineComponent } from \"vue\";\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { UserService } from \"@/services/user_service\";\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport { Patientservice } from \"@/services/patient_service\";\nimport { PatientProgramService } from \"@/services/patient_program_service\"\nimport { alertConfirmation, toastDanger, toastSuccess, toastWarning } from \"@/utils/Alerts\"\nimport { Patient } from \"@/interfaces/patient\"\nimport {\n  IonContent,\n  IonHeader,\n  IonFooter,\n  IonPage,\n  IonToolbar,\n  IonRow,\n  IonCol,\n  IonSpinner,\n  IonButton,\n  modalController\n} from \"@ionic/vue\";\nimport {\n  FlowState, \n  TargetEvent,\n  CONFIRMATION_PAGE_GUIDELINES\n} from \"@/guidelines/confirmation_page_guidelines\"\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\nimport { PatientDemographicsExchangeService } from \"@/services/patient_demographics_exchange_service\"\nimport { IncompleteEntityError, BadRequestError } from \"@/services/service\"\nimport { OrderService } from \"@/services/order_service\";\nimport { PatientTypeService } from \"@/apps/ART/services/patient_type_service\";\nimport { ObservationService } from \"@/services/observation_service\";\nimport { delayPromise } from \"@/utils/Timers\";\nimport { AncPregnancyStatusService } from \"@/apps/ANC/Services/anc_pregnancy_status_service\"\nimport popVoidReason from \"@/utils/ActionSheetHelpers/VoidReason\";\nimport { isUnknownOrEmpty, isValueEmpty } from \"@/utils/Strs\";\nimport Store from \"@/composables/ApiStore\"\nimport { Order } from \"@/interfaces/order\";\nimport { Result } from \"@/interfaces/result\";\n\nexport default defineComponent({\n  name: \"Patient Confirmation\",\n  components: {\n    IonContent,\n    IonHeader,\n    IonFooter,\n    IonPage,\n    IonToolbar,\n    IonSpinner,\n    IonRow,\n    IonCol,\n    IonButton,\n    ConfirmationCard: defineAsyncComponent(()=>import(\"@/components/Cards/PatientConfirmationCards.vue\")),\n  },\n  data: () => ({\n    app: {} as any,\n    program: {} as any,\n    patient: {} as any,\n    localPatient: {} as any, // Patient found without dde\n    ddeInstance: {} as any,\n    useDDE: false as boolean,\n    programInfo: {} as any,\n    isReady: false as boolean,\n    cards: [] as any[],\n    facts: {\n      hasHighViralLoad: false as boolean,\n      patientFound: false as boolean,\n      npidHasDuplicates: false as boolean,\n      npidHasOverFiveDuplicates: false as boolean,\n      userRoles: [] as string[],\n      scannedNpid: '' as string,\n      currentNpid: '' as string,\n      hasInvalidNpid: false as boolean,\n      enrolledInProgram: false as boolean,\n      programName: 'N/A' as string,\n      currentOutcome: '' as string,\n      programs: [] as string[],\n      identifiers: [] as string[],\n      patientType: 'N/A' as string,\n      patientTypeLastUpdated: '' as string,\n      anc: {\n        lmpMonths: -1,\n        canInitiateNewPregnancy: false,\n        currentPregnancyIsOverdue: false\n      },\n      dde: {\n        localNpidDiff: '',\n        remoteNpidDiff: '',\n        voidedNpids: {\n         cols: [] as string[],\n         rows: [] as any\n        },\n        hasDemographicConflict: false,\n        localDiffs: {},\n        diffRows: [],\n        diffRowColors: [] as Array<{indexes: number[]; class: string}>\n      } as any,\n      demographics: {\n        patientIsComplete: false as boolean,\n        hasInvalidDemographics: false as boolean,\n        invalidDemographics: [] as string[],\n        givenName: '' as string,\n        familyName: '' as string,\n        patientName: '' as string,\n        landmark: '' as string,\n        phoneNumber: '' as string,\n        currentDistrict: '' as string,\n        currentTA: '' as string,\n        currentVillage: '' as string,\n        ancestryDistrict: '' as string,\n        ancestryTA: '' as string,\n        ancestryVillage: '' as string,\n        gender: '' as string,\n        birthdate: '' as string,\n      } as any,\n      globalProperties: {\n        useFilingNumbers: false,\n        ddeEnabled: false\n      } as any\n    }\n  }),\n  created() {\n    this.initCards()\n    this.app = HisApp.getActiveApp() || {}\n  },\n  mounted() {\n    if (this.app) {\n      this.updateCards()\n      this.ddeInstance = new PatientDemographicsExchangeService()\n      this.setGlobalPropertyFacts().then(() => {\n        const query = this.$route.query\n        if (!isEmpty(query) && (query.person_id || query.patient_barcode)) {\n          this.findAndSetPatient(query.person_id as any, query.patient_barcode as any)\n        }\n      })\n    }\n  },\n  computed: {\n    demographics(): any {\n      return this.facts.demographics\n    },\n    birthdate(): string {\n      return HisDate.toStandardHisDisplayFormat(\n        this.facts.demographics.birthdate\n      )\n    },\n    canVoidClient() {\n      return this.facts.patientFound && UserService.isDataManager()\n    }\n  },\n  methods: {\n    initCards() {\n      for(let i=0; i < 6; i++) {\n        this.cards[i] = {\n          label: '-',\n          isLoading: true,\n          values: []\n        }\n      }\n    },\n    async updateCards() {\n      if (typeof this.app.confirmationSummary === 'function') {\n        const cardItems: any = this.app.confirmationSummary(\n          this.patient, this.program, this.facts\n        )\n        const keys: any = Object.keys(cardItems)\n        for(let i = 0; i < this.cards.length; i++) {\n          const cardData = keys[i] ? cardItems[keys[i]]() : []\n          this.cards[i] = {\n            label: keys[i] || '-',\n            isLoading: false,\n            values: cardData\n          }\n          if (typeof cardData === 'object' && cardData.then) {\n            this.cards[i].isLoading = true\n            if (!isEmpty(this.patient)) {\n              cardData.then((data: any) => {\n                this.cards[i].isLoading = false\n                this.cards[i].values = data\n              }).catch((e: any) => {\n                this.cards[i].isLoading = false\n                console.error(`${e}`)\n              })\n            }\n          } else {\n            // Render static label value pairs\n            for (let c=0; c < cardData.length; ++c) {\n              const val = cardData[c]\n              this.cards[i].values[c] = val\n              if (!isEmpty(this.patient)) {\n                if (typeof val.init === 'function') {\n                  await val.init()\n                }\n                if (typeof val.asyncValue === 'function') {\n                  val.asyncValue().then((val: any) => {\n                    this.cards[i].values[c].value = val\n                  }).catch((e: any) => {\n                    this.cards[i].values[c].value = '_ERROR_'  \n                    console.error(`${e}`)\n                  })\n                } else if (typeof val.staticValue === 'function') {\n                  this.cards[i].values[c].value = val.staticValue()\n                }\n              }\n            }\n          }\n        }\n      }\n    },\n    async setViralLoadStatus() {\n      try {\n        const orders = await OrderService.getOrders(this.patient.getID())      \n        const latestVLResult = orders.reduce((result: Result, order: Order) => {\n          const _results = OrderService.getVLResults(order)\n          return isEmpty(_results) || _results[0].date < result.date\n            ? result \n            : _results[0] \n        }, {} as Result);\n  \n        this.facts.hasHighViralLoad = OrderService.isHighViralLoadResult(latestVLResult)     \n      } catch (e) {\n        console.error(e)\n      }\n    },\n    /**\n     * Resolve patient by either patient ID or NpID.\n     * Note: \n     *  - DDE Service only supports NPID search.\n    */\n    async findAndSetPatient(id: number | undefined, npid: string | undefined) {\n      let req = null\n      this.isReady = false\n      this.localPatient = {} // Patient found without using DDE\n      if (!this.facts.scannedNpid) {\n        this.facts.scannedNpid = npid || ''\n      }\n      if (this.useDDE && npid) {\n        req = this.ddeInstance.searchNpid(npid)\n      } else if (id) {\n        req = Patientservice.findByID(id)\n      } else {\n        req = Patientservice.findByNpid(npid as string)\n      }\n      this.handleSearchResults(req)\n        .then(() => this.isReady = true)\n        .catch((e) => toastDanger(`${e}`, 300000))\n    },\n    /**\n     * Handle search result promises and handle entity related errors.\n     * This is also an entrypoint to initialise Ui Data and facts\n     */\n    async handleSearchResults(patient: Promise<Patient | Patient[]>) {\n      let results: Patient[] | Patient = []\n      try {\n        results = await patient as Patient[] | Patient\n      } catch (e) {\n        // [DDE] A person might have missing attributes such as home_village, \n        // or home_ta.\n        if (e instanceof IncompleteEntityError && !isEmpty(e.entity)) {\n          results = e.entity\n        } else if (e instanceof BadRequestError && Array.isArray(e.errors)) {\n          const [msg, ...entities] = e.errors\n          if (typeof msg === 'string' && msg === \"Invalid parameter(s)\") {\n            this.setInvalidParametersFacts(entities)\n          }\n        } else {\n          toastDanger(`${e}`, 300000)\n        }\n      }\n\n      // Use local patient if available if DDE never found them\n      if (isEmpty(results) && !isEmpty(this.localPatient)) results = this.localPatient\n      \n      if(Array.isArray(results) && results.length > 1){\n        this.facts.npidHasDuplicates = results.length <= 5\n        this.facts.npidHasOverFiveDuplicates = results.length > 5\n      } else {\n        this.facts.patientFound = !isEmpty(results)\n      }\n\n      if (this.facts.patientFound) {\n        this.patient = new Patientservice(\n          Array.isArray(results)\n            ? results[0]\n            : results\n          )\n        this.updateCards()\n        Store.set('ACTIVE_PATIENT', this.patient)\n        this.setPatientFacts()\n        const factPromises = []\n        factPromises.push(this.setProgramFacts())\n        if (this.useDDE) {\n          factPromises.push(this.setDDEFacts())\n        } \n        if (this.facts.programName === 'ANC') {\n          factPromises.push(this.setAncFacts())\n        }\n        if (this.facts.programName === 'ART') {\n          factPromises.push(this.setViralLoadStatus())\n        }\n        this.facts.currentNpid = this.patient.getNationalID()\n        factPromises.push(this.validateNpid())\n        await Promise.all(factPromises)\n      } else {\n        // [DDE] a user might scan a deleted npid but might have a newer one.\n        // The function below checks for newer version\n        if (this.facts.scannedNpid) this.setVoidedNpidFacts(this.facts.scannedNpid)\n      }\n      this.onEvent(TargetEvent.ONLOAD)\n        .then(() => this.isReady = true)\n        .catch(e => { toastDanger(`${e}`, 300000); this.isReady = true })\n    },\n    async validateNpid () {\n      if(this.useDDE){\n        this.facts.hasInvalidNpid = !this.patient.getDocID() || (\n          this.patient.getDocID() && isUnknownOrEmpty(this.patient.getNationalID())\n        )\n      } else {\n        const results = await Patientservice.findByNpid(this.facts.currentNpid, {\"page_size\": 2})\n        this.facts.hasInvalidNpid = Array.isArray(results) && results.length > 1\n      }\n    },\n    /**\n     * DDE sometimes sends 400 bad request which contains\n     * a list of invalid demographic attributes \n     */\n    setInvalidParametersFacts(errorExceptions: any) {\n      this.facts.demographics.hasInvalidDemographics = true\n      // Create a turple of attribute and error pairs\n      this.facts.demographics.invalidDemographics =\n        errorExceptions.map((e: any) => {\n          const data = Object.entries(e)\n          const entity = data[0][0]\n          const errors = data[0][1] as string[]\n          return [entity, errors.join(', ')]\n        })      \n    },\n    /**\n     * Reloads patient facts and information.\n     * Note: Use this when you know the patient is loaded\n     */\n    reloadPatient() {\n      return this.findAndSetPatient(this.patient.getID(), undefined)\n    },\n    /**\n     * Facts are used by the Guideline Engine to crosscheck \n     * conditions to execute. The more the data the better\n     * the decision support. These facts are also presented \n     * on the User interface\n    */\n    setPatientFacts() {\n      this.facts.demographics.patientIsComplete = this.patient.patientIsComplete()\n      this.facts.demographics.patientName = this.patient.getFullName()\n      this.facts.demographics.givenName = this.patient.getGivenName()\n      this.facts.demographics.familyName = this.patient.getFamilyName()\n      this.facts.demographics.landmark = this.patient.getAttribute(19)\n      this.facts.demographics.phoneNumber = this.patient.getAttribute(12)\n      this.facts.demographics.gender = this.patient.getGender()\n      this.facts.demographics.birthdate = this.patient.getBirthdate()\n      this.facts.demographics.ancestryDistrict = this.patient.getHomeDistrict()\n      this.facts.demographics.ancestryTA = this.patient.getHomeTA()\n      this.facts.demographics.ancestryVillage = this.patient.getHomeVillage()\n      this.facts.demographics.currentDistrict = this.patient.getCurrentDistrict()\n      this.facts.demographics.currentTA = this.patient.getCurrentTA()\n      this.facts.demographics.currentVillage = this.patient.getCurrentVillage()\n      this.facts.identifiers = this.patient.getIdentifiers()\n        .map((id: any) => id.type.name)\n    },\n    async setGlobalPropertyFacts() {\n      this.facts.globalProperties.ddeEnabled = await Store.get('IS_DDE_ENABLED')\n      this.useDDE = this.facts.globalProperties.ddeEnabled\n      if (this.app.applicationName === 'ART') {\n        this.facts.globalProperties.useFilingNumbers = await Store.get('IS_ART_FILING_NUMBER_ENABLED')\n      }\n    },\n    async setAncFacts() {\n      const anc = new AncPregnancyStatusService(this.patient.getID(), -1)\n      this.facts.anc.canInitiateNewPregnancy = await anc.canInitiateNewPregnancy()\n      this.facts.anc.currentPregnancyIsOverdue = await anc.pregnancyIsOverdue()\n      this.facts.anc.lmpMonths = await anc.getLmpInMonths()\n    },\n    buildDDEDiffs(diffs: any) {\n      const comparisons: Array<string[]> = []\n      const refs: any = {\n        givenName : { label: 'First Name', ref: 'given_name' },\n        familyName: { label: 'Last Name', ref: 'family_name'},\n        birthdate: { label: 'Birthdate', ref: 'birthdate'},\n        gender: { label: 'Gender', ref: 'gender' },\n        phoneNumber: {label: 'Phone number', ref: 'phone_number'},\n        ancestryDistrict: { label: 'Home District', ref: 'home_district'},\n        ancestryTA: { label: 'Home TA', ref: 'home_traditional_authority'},\n        ancestryVillage: { label: 'Home Village', ref: 'home_village'},\n        currentDistrict: { label: 'Current District', ref: 'current_district'},\n        currentTA: { label: 'Current TA', ref: 'current_traditional_authority'},\n        currentVillage: { label: 'Current Village', ref: 'current_village'}\n      }\n      let index = 0\n      const diffIndexes: any = { indexes: [], class: 'his-empty-set-color'}\n\n      for(const k in refs) {\n        let local = this.facts.demographics[k]\n        let remote = local\n\n        if (refs[k].ref in diffs) {\n          diffIndexes.indexes.push(index)\n          local = diffs[refs[k].ref].local\n          remote = diffs[refs[k].ref].remote\n        }\n\n        comparisons.push([\n          refs[k].label,\n          local,\n          remote\n        ])\n        ++index\n      }\n      return {comparisons, rowColors: [diffIndexes]}\n    },\n    async setProgramFacts() {\n      this.facts.programName = this.app.applicationName\n      try {\n        this.program = new PatientProgramService(this.patient.getID())\n        this.programInfo = await this.program.getProgram()\n        Store.set('PATIENT_PROGRAM', this.programInfo)\n        const { program, outcome }: any =  this.programInfo\n        this.facts.enrolledInProgram = !(isValueEmpty(program) || program.match(/n\\/a/i))\n        this.facts.currentOutcome = outcome\n        this.facts.userRoles = UserService.getUserRoles().map((r: any) => r.role)\n        const patientTypeObs = await ObservationService.getFirstObs(this.patient.getID(), 'Type of patient')\n        if (patientTypeObs?.value_coded) {\n          this.facts.patientType = patientTypeObs.value_coded\n          this.facts.patientTypeLastUpdated = HisDate.toStandardHisFormat(patientTypeObs.obs_datetime)\n        }\n      } catch (e) {\n        console.error(`${e}`)\n      }\n    },\n    /**\n     * Set dde facts if service is enabled.\n     * Please Note that DDE has to be configured per Program in the backend.\n     * If a program isnt configured for DDE, it crashes by default hence \n     * exception handling is required\n     */\n    async setDDEFacts() {\n      try {\n        const localAndRemoteDiffs = (await this.ddeInstance.getLocalAndRemoteDiffs())?.diff\n        this.facts.dde.localDiffs = this.ddeInstance.formatDiffValuesByType(\n          localAndRemoteDiffs, 'local'\n        )\n        const { comparisons, rowColors } = this.buildDDEDiffs(localAndRemoteDiffs)\n        this.facts.dde.diffRows = comparisons\n        this.facts.dde.diffRowColors = rowColors\n        if (localAndRemoteDiffs.npid) {\n          const {local, remote} = localAndRemoteDiffs.npid\n          this.facts.dde.localNpidDiff = local\n          this.facts.dde.remoteNpidDiff = remote\n          delete localAndRemoteDiffs.npid\n        }\n        this.facts.dde.hasDemographicConflict = !isEmpty(localAndRemoteDiffs)\n      } catch (e) {\n        console.warn(e)\n      }\n    },\n    async setVoidedNpidFacts(npid: string) {\n      const cols = [\n        'Name', 'Birthdate', 'Gender', 'Ancestry Home', 'CurrentID', 'Action'\n      ]\n      let rows = []\n      const req = await this.ddeInstance.findVoidedIdentifier(npid)\n      if (req) {\n        rows = req.map((d: any) => {\n          const p = new Patientservice(d)\n          return [\n            p.getFullName(),\n            p.getBirthdate(),\n            p.getGender(),\n            p.getHomeTA(),\n            p.getNationalID(),\n            {\n              type: 'button',\n              name: 'Select',\n              action: async () => {\n                if (!p.patientIsComplete()) {\n                  return this.$router.push(`/patient/registration?edit_person=${p.getID()}`)\n                } else if (p.getNationalID().match(/unknown/i) || !p.getDocID()) {\n                  try {\n                    await p.assignNpid()\n                    await this.findAndSetPatient(p.getID(), undefined)\n                    return modalController.dismiss()\n                  } catch (e) {\n                    toastWarning('Failed to assign npid to patient with unknown npid.')\n                    return console.error(e)\n                  }\n                }\n                await modalController.dismiss()\n                await this.findAndSetPatient(undefined, p.getNationalID())\n              }\n            }\n          ]\n        })\n        this.facts.dde.voidedNpids.cols = cols\n        this.facts.dde.voidedNpids.rows = rows\n      }\n    },\n    /**\n     * Executes CONFIRMATION_PAGE GUIDELINES with given TargetEvent\n    */\n    async onEvent(targetEvent: TargetEvent, callback={}) {\n      const findings = matchToGuidelines(\n        this.facts, CONFIRMATION_PAGE_GUIDELINES, '', targetEvent, 'weight'\n      )\n      for(const index in findings) {\n        const finding = findings[index]\n        if (finding?.actions?.alert) {\n          const state = await finding?.actions?.alert(this.facts)\n          if ((await this.runFlowState(state))\n              === FlowState.FORCE_EXIT) {\n              return false \n            }\n        }\n      }\n      if (typeof callback === 'function') callback()\n    },\n    async onInitiateNewAncPregnancy() {\n      if ((await alertConfirmation('Are you sure you want to initiate new pregnancy?'))) {\n        if ((await this.initiateNewAncPregnancy())) {\n          this.facts.anc.canInitiateNewPregnancy = false\n          this.facts.anc.currentPregnancyIsOverdue = false\n          this.nextTask()\n        } else {\n          toastWarning('Unable to initiate new pregnancy')\n        }\n      }\n    },\n    initiateNewAncPregnancy() {\n      return new AncPregnancyStatusService(this.patient.getID(), -1).createNewPregnancyStatus()\n    },\n    /**\n     * Maps FlowStates defined in the Guideline to\n     * Functions definitions that are executed.\n     */\n    async runFlowState(state: FlowState) {\n      const states: Record<string, () => any> = {}\n      states[FlowState.GO_HOME] = () => {\n          this.$router.push('/')\n          return FlowState.FORCE_EXIT\n      }\n      states[FlowState.GO_BACK] = () => {\n        this.$router.back()\n        return FlowState.FORCE_EXIT\n      }\n      states[FlowState.ENROLL] = () => {\n        return this.program.enrollProgram()\n      }\n      states[FlowState.ACTIVATE_FN] = () => {\n        this.$router.push(`/art/filing_numbers/${this.patient.getID()}?assign=true`)\n        return FlowState.FORCE_EXIT\n      }\n      states[FlowState.UPDATE_DMG] = () => {\n        this.$router.push(`/patient/registration?edit_person=${this.patient.getID()}`)\n        return FlowState.FORCE_EXIT\n      }\n      states[FlowState.PRINT_NPID] = async () => {\n        await this.ddeInstance.printNpid(this.patient.getID())\n        await delayPromise(1800)\n        return FlowState.CONTINUE\n      }\n      states[FlowState.CREATE_NPID_WITH_REMOTE_DIFF] = async () => {\n        const npid = this.facts.dde.remoteNpidDiff\n        try {\n          if (npid && (await this.ddeInstance.createNPID(npid))) {\n            this.facts.scannedNpid = npid\n            this.facts.currentNpid = npid\n            this.facts.dde.localNpidDiff = npid\n            toastSuccess('Remote NPID successfully updated')\n            await delayPromise(300)\n            await this.ddeInstance.printNpid()\n            await this.findAndSetPatient(undefined, npid)\n            return FlowState.FORCE_EXIT\n          }\n        } catch (e) {\n          const alreadyAssigned = /Identifier already assigned to another patient/i\n          if (e instanceof BadRequestError && e.errors.join(',').match(alreadyAssigned)) {\n            const res = await this.ddeInstance.reassignNpid(this.patient.getDocID())\n            if (res) {\n              this.patient = new Patientservice(res)\n              toastSuccess('Patient has been reassigned NPID')\n              await delayPromise(300)\n              await this.ddeInstance.printNpid()\n              await this.findAndSetPatient(undefined, this.patient.getNationalID())\n              return FlowState.FORCE_EXIT\n            }\n          }\n          toastDanger(`Unable to assign NPID: ${e}`)\n        }\n      }\n      states[FlowState.ASSIGN_NPID] = async () => {\n        await this.patient.assignNpid()\n        await (new PatientPrintoutService(this.patient.getID())).printNidLbl()\n        await delayPromise(300)\n        await this.reloadPatient()\n        return FlowState.FORCE_EXIT\n      },\n      states[FlowState.INITIATE_ANC_PREGNANCY] = async () => {\n        await this.initiateNewAncPregnancy()\n        return FlowState.CONTINUE\n      }\n      states[FlowState.VIEW_MERGE_AUDIT_FOR_NPID] = () => {\n        this.$router.push(`/merge/rollback/${this.facts.scannedNpid}`)\n        return FlowState.FORCE_EXIT\n      }\n      states[FlowState.RESOLVE_DUPLICATE_NPIDS] = () => {\n        this.$router.push(`/npid/duplicates/${this.facts.scannedNpid}`)\n        return FlowState.FORCE_EXIT\n      }\n      states[FlowState.REFRESH_DDE_DEMOGRAPHICS] = async () => {\n        await this.ddeInstance.refreshDemographics()\n        await this.reloadPatient()\n        return FlowState.FORCE_EXIT\n      }\n      states[FlowState.ADD_AS_DRUG_REFILL] = async () => {\n        await this.createPatientType('Emergency supply')\n        return FlowState.CONTINUE\n      }\n      states[FlowState.ADD_AS_NEW_PATIENT] = async () => {\n        await this.createPatientType('New patient')\n        return FlowState.CONTINUE\n      }\n      states[FlowState.ADD_AS_EXTERNAL_CONSULTATION] = async () => {\n        await this.createPatientType('External consultation')\n        return FlowState.CONTINUE\n      }\n      states[FlowState.SEARCH_BY_NAME] = () => {\n        this.$router.push('/patient/registration')\n        return FlowState.FORCE_EXIT\n      }\n      states[FlowState.UPDATE_LOCAL_DDE_DIFFS] = async () => {\n        await this.ddeInstance.updateLocalDifferences(\n          this.facts.dde.localDiffs\n        )\n        await this.reloadPatient()\n        return FlowState.FORCE_EXIT\n      }\n      if (state in states) {\n        try {\n          return await states[state]()\n        }catch(e) {\n          toastDanger(`${e}`)\n        }\n      }\n      return state\n    },\n    async createPatientType(newPatientType: 'Emergency supply' | 'External consultation' | 'New patient') {\n      if (newPatientType != this.facts.patientType && this.facts.patientTypeLastUpdated === Patientservice.getSessionDate()) {\n        if (!(await alertConfirmation(`This client was flagged today as \"${this.facts.patientType}\", altering patient type to \"${newPatientType}\" may affect record integrity, do you want to affect change?`))) {\n          return\n        }\n      }\n      const type = new PatientTypeService(this.patient.getID(), -1)\n      await type.createEncounter()\n      await type.savePatientType(newPatientType)\n    },\n    async onVoid() {\n      popVoidReason(async (reason: string) => {\n        try {\n          await Patientservice.voidPatient(this.patient.getID(), reason)\n          this.$router.push('/')\n        } catch (e) {\n          toastDanger(`${e}`)\n        }\n      }, 'void-modal')\n    },\n    nextTask() {\n      this.onEvent(TargetEvent.ON_CONTINUE, () => {\n        nextTask(this.patient.getID(), this.$router)\n      })\n    }\n  }\n})\n","import { render } from \"./Confirmation.vue?vue&type=template&id=58076b70&scoped=true&ts=true\"\nimport script from \"./Confirmation.vue?vue&type=script&lang=ts\"\nexport * from \"./Confirmation.vue?vue&type=script&lang=ts\"\n\nimport \"./Confirmation.vue?vue&type=style&index=0&id=58076b70&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/daniel/projects/malawi-emr/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-58076b70\"]])\n\nexport default __exports__","import { optionsActionSheet } from '@/utils/ActionSheets'\n\ntype OnVoidHandler = (reason: string) => Promise<void> | void\n\nexport default async function popVoidReason(callback: OnVoidHandler, size = 'action-sheet-modal') {\n    const modal = await optionsActionSheet(\n        'Are you sure you want to void record?',\n        'Please specify reason for voiding this record',\n        [\n          'Mistake/ Wrong Entry',\n          'Duplicate',\n          'System Error' \n        ],\n        [\n            { name: 'Cancel', slot:'start'},\n            { name: 'Void', color: 'danger', slot:'end', role: 'action'}\n        ],\n        '',\n        size\n    )\n    if (modal.selection && modal.action === 'Void') {\n        await callback(modal.selection)\n    }\n}\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./Confirmation.vue?vue&type=style&index=0&id=58076b70&scoped=true&lang=css\"","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: (facts: FactsInterface) => any;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: ConditionsInteface;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\nexport type FactsInterface = Record<string, any>\nexport type ConditionResolver = (value: any, facts: FactsInterface) => boolean | RegExpMatchArray | null\nexport type ConditionsInteface = Record<string, ConditionResolver>\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: FactsInterface, conditions: ConditionsInteface): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: FactsInterface, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}