{"version":3,"sources":["webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/apps/ART/guidelines/staging_guidelines.ts","webpack:///./src/apps/ART/services/staging_service.ts","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/apps/ART/views/encounters/StagingMixin.vue","webpack:///./src/apps/ART/views/encounters/StagingMixin.vue?d80f","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["DEFAULT_KEYPAD","PRESCRIPTION_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","facts","ready","watch","handler","route","params","patient_id","this","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","e","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","isEmpty","person","names","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","CD4_AS_START_REASON_CUTOFF_DATE","ADULT_WHO_STAGE_CRITERIA","concept","stage","reasonForArt","reason","CHILD_WHO_STAGE_CRITERIA","CONTRADICTING_STAGE_DEFINITIONS_ALERTS","alertConfirmation","bmi","confirmBtnLabel","cancelBtnLabel","selectedCondition","keepAsymptomatic","selectedConditions","stageThreeConditions","stageFourConditions","stageTwoConditions","RECOMMENDED_CHILD_STAGING_CONDITIONS","isChecked","description","show","info","weightPercentile","disabled","includes","RECOMMENDED_ADULT_STAGING_CONDITIONS","CHILD_ART_ELIGIBILITY","ageInMonths","age","pshdConditions","ConceptService","getConceptsByCategory","pshdCondition","testType","cd4Date","date","Date","cd4","cd4Modifier","modifier","gender","breastFeeding","answer","pregnant","ADULT_ART_ELIGIBILITY","severeSymp","found","total","symp","StagingCategory","StagingService","AppEncounterService","constructor","super","confirmatoryTest","isAdult","isPedaid","setAge","getFacilities","LocationService","getConfirmatoryTestType","cd4CountIsValid","match","getAlertGuidelines","getWhoStageGuidelines","getProgramEligibilityGuidelines","getRecommendedConditionGuidelines","getStagingConditions","category","getStagingCategoryByNum","getAllWhoStages","getAllReasonsForART","registrationDate","reasons","buildWhoStageObs","buildValueCoded","buildWhoCriteriaObs","buildReasonForArtObs","stageNumber","ADULT_STAGE_1","PEDAID_STAGE_1","ADULT_STAGE_2","PEDAID_STAGE_2","ADULT_STAGE_3","PEDAID_STAGE_3","ADULT_STAGE_4","PEDAID_STAGE_4","test","getFirstValueCoded","EstimationFieldType","getYearField","id","showUnknown","primaryFunctions","helpText","appearInSummary","FieldType","TT_TEXT","config","customKeyboard","getMonthField","TT_SELECT","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","getDefaultDate","form","field","datePart","defaultValue","year","month","day","validateMinMax","minDate","min","maxDate","max","generateDateFields","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","estimation","allowUnknown","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","f","buildHelpTextDate","part","parts","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","proxyID","unload","v","validation","c","StandardValidations","isNaN","minYear","getYear","summaryMapValue","summaryLabel","_","ref","computedValue","val","computeValue","beforeNext","keyboardActions","valueEstimateCondition","estimateType","estimationFieldType","every","ageEstimateRegex","dayjs","Service","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","MONTH_ESTIMATE_FIELD","isCondition","ignored","prop","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","text","mixins","EncounterMixinVue","staging","showStagingWeightChart","canShowStagingFields","bmiObj","stagingFacts","isChildBearing","stageOneConditions","whoStage","getID","getAge","loadHivConfirmatoryTestType","getBMI","isMale","getAgeInMonths","calculateWeightPercentile","computedValues","encounter","createEncounter","stagingObservations","derivedObservations","saveObservationList","ok","updateStagingFacts","curIndex","buildStagingOptions","previouslySelected","conceptFinding","concept_id","setWhoStage","setReasonForArt","notAsymptomatic","stageOneC","stage_1_conditions","asymptomatics","hasTransferLater","has_transfer_letter","hasStaging","getStagingSummaryField","TT_ART_STAGING_SUMMARY","onload","hiddenFooterBtns","isANCclient","getSuspendedProgram","getStagingFields","TT_MULTIPLE_YES_NO","Validation","anyEmpty","factID","pregnancy_status","TT_WEIGHT_CHART","getWeightHistory","x","y","TT_MULTIPLE_SELECT","onValue","onStagingCondition","onConditionFalse","charAt","count","substring","buildValueNumber","isCd4","cd4_available","getDate","isEstimate","buildValueDate","getLocationName","buildValueText","showKeyboard","isFilterDataViaApi","facilities","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id","getVillagesByName","page","getLandmarks","landmarks","landmark","code"],"mappings":"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","file":"js/chunk-003dec3c.7e366b1d.js","sourcesContent":["export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const PRESCRIPTION_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del', '0', '.'],\n    ['Unknown', '', ''],\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { ConceptService } from \"@/services/concept_service\"\nimport { alertConfirmation } from \"@/utils/Alerts\"\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\"\n\nexport const CD4_AS_START_REASON_CUTOFF_DATE = \"2014-04-01\";\n\nexport const ADULT_WHO_STAGE_CRITERIA: Record<string, GuideLineInterface> = {\n    'Adults with stage 4 conditions': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4,\n        }\n    },\n    'Classify as stage 4 when reason for ART is WHO STAGE 4': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 2,\n        conditions: {\n            reasonForArt: (reason: string) => reason === 'WHO STAGE IV ADULT'\n        }\n    },\n    'Adults with stage 3 conditions': {\n        concept: 'WHO STAGE III ADULT',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3\n        }\n    },\n    'Adults with stage 2 conditions': {\n        concept: 'WHO STAGE II ADULT',\n        priority: 4,\n        conditions: {\n            stage: (stage: number) => stage === 2,\n        }\n    },\n    'Adults with stage 1 conditions': {\n        concept: 'WHO STAGE I ADULT',\n        priority: 5,\n        conditions: {\n            stage: (stage: number) => stage === 1\n        }\n    }\n}\n\nexport const CHILD_WHO_STAGE_CRITERIA: Record<string, GuideLineInterface> = {\n    'Children with stage 4 conditions': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4,\n        }\n    },\n    'Classify as stage 4 when reason for ART is WHO STAGE 4': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 2,\n        conditions: {\n            reasonForArt: (reason: string) => reason === 'WHO STAGE IV PEDS'\n        }\n    },\n    'For children with stage 3 conditions': {\n        concept: 'WHO STAGE III PEDS',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3\n        }\n    },\n    'Children with stage 2 conditions': {\n        concept: 'WHO STAGE II PEDS',\n        priority: 4,\n        conditions: {\n            stage: (stage: number) => stage === 2\n        }\n    },\n    'Children with stage 1 conditions': {\n        concept: 'WHO STAGE I PEDS',\n        priority: 5,\n        conditions: {\n            stage: (stage: number) => stage === 1\n        }\n    }\n}\n\nexport const CONTRADICTING_STAGE_DEFINITIONS_ALERTS: Record<string, GuideLineInterface> = {\n    \"Warn if Severe weight loss is selected when actual patient BMI is acceptable\": {\n        priority: 1,\n        actions: {\n            alert: async (facts: any) => await alertConfirmation(`Patient's BMI of ${facts.bmi} greater than 18.5, do you wish to proceed?`, {\n                confirmBtnLabel: 'Yes, keep severe weightloss',\n                cancelBtnLabel: 'No, cancel'\n            }),\n        },\n        conditions: {\n            selectedCondition (condition: string) {\n                return condition === 'Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained'\n            },\n            bmi:(bmi: number) => bmi > 18.5\n        }\n    },\n    \"Warn for contradicting stage defining conditions\": {\n        priority: 1,\n        actions: {\n            alert: async (facts: any) => {\n                const keepAsymptomatic = await alertConfirmation('CONTRADICTING STAGE DEFINING CONDITIONS', {\n                    confirmBtnLabel: \"Keep Asymptomatic\",\n                    cancelBtnLabel: 'Keep other(s)'\n                })\n                if(keepAsymptomatic) {\n                    facts.stage = 1\n                    facts.selectedConditions = []\n                    facts.stageThreeConditions = []\n                    facts.stageFourConditions = []\n                    facts.stageTwoConditions = []\n                    return true\n                }\n                return false\n            },\n        },\n        conditions: {\n            selectedCondition(condition: string){\n                return condition === 'Asymptomatic HIV infection'\n            },\n            stage: (stage: number) => stage >= 2\n        }\n    },\n}\n\nexport const RECOMMENDED_CHILD_STAGING_CONDITIONS: Record<string, GuideLineInterface> = {\n    'For children whose current weight percentile is less than 70' : {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Child has a low weight percentile of ${facts.weightPercentile}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Severe unexplained wasting or malnutrition not responding to treatment (weight-for-height/ -age <70% or MUAC less than 11cm or oedema)'\n            },\n            weightPercentile(weightPercentile: number){\n                return weightPercentile < 70\n            }\n        }\n    },\n    'Enable Moderate unexplained malnutrition for children whose weight for height is 70-79%': {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Child has weight percentile of ${facts.weightPercentile}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate unexplained wasting/malnutrition not responding to treatment (weight-for-height/ -age 70-79% or muac 11-12 cm)'\n            },\n            weightPercentile(weightPercentile: number){\n                return weightPercentile >= 70 && weightPercentile <= 79\n            }\n        }\n    },\n    'Disable moderate weight loss when Severe unexplained weight loss is chosen': {\n        priority: 2,\n        actions: {\n            isChecked: false,\n            disabled: true\n        },\n        description: {\n            color: 'secondary',\n            show: 'always',\n            info: () => 'Severe weight loss/manutrition was already selected',\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate unexplained wasting/malnutrition not responding to treatment (weight-for-height/ -age 70-79% or muac 11-12 cm)'\n            },\n            selectedConditions(conditions: Array<string>) {\n                return conditions.includes('Severe unexplained wasting or malnutrition not responding to treatment (weight-for-height/ -age <70% or MUAC less than 11cm or oedema)')\n            }\n        }\n    }\n}\n\nexport const RECOMMENDED_ADULT_STAGING_CONDITIONS: Record<string, GuideLineInterface> = {\n    'Adults with a BMI less than 16': {\n        priority: 1,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'danger',\n            show: 'always',\n            info: (facts: any) => `Adult has a low BMI of ${facts.bmi}`\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained'\n            },\n            bmi: (bmi: number) => bmi < 16\n        }\n    },\n    'Adults whose BMI is between 16 and 18': {\n        priority: 3,\n        actions: {\n            isChecked: true\n        },\n        description: {\n            color: 'warning',\n            show: 'onChecked',\n            info: (facts: any) => `BMI of ${facts.bmi} is between 16 and 18`,\n        },\n        conditions: {\n            selectedCondition: (condition: string) => condition === 'Moderate weight loss less than or equal to 10 percent, unexplained',\n            bmi: (bmi: number) => bmi >= 16.0 && bmi <= 18.5\n        }\n    },\n    \"Disable Moderate weight loss if severe weightloss is selected\": {\n        priority: 2,\n        actions: {\n            isChecked: false,\n            disabled: true\n        },\n        description: {\n            color: 'secondary',\n            show: 'always',\n            info: () => 'Severe weight loss was already selected',\n        },\n        conditions: {\n            selectedCondition(condition: string) {\n                return condition === 'Moderate weight loss less than or equal to 10 percent, unexplained'\n            },\n            selectedConditions(conditions: Array<string>) {\n                return conditions.includes('Severe weight loss >10% and/or BMI <18.5kg/m^2, unexplained')\n            }\n        }\n    }\n}\n\nexport const CHILD_ART_ELIGIBILITY: Record<string, GuideLineInterface> = {\n    'Has stage 4 conditions': {\n        concept: 'WHO STAGE IV PEDS',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4\n        }\n    },\n    'Has stage 3 conditions': {\n        concept: 'WHO STAGE III PEDS',\n        priority: 2,\n        conditions: {\n            stage: (stage: number) => stage === 3,\n        }\n    },\n    'Children under twelve months who tested positive on Rapid test and have presumed severe HIV': {\n        concept: 'PRESUMED SEVERE HIV',\n        priority: 3,\n        conditions: {\n            ageInMonths(age: number){\n                return age < 12 \n            },\n            selectedConditions: (conditions: Array<string>) => {\n                const pshdConditions = ConceptService.getConceptsByCategory('pshd_condition')\n                for (const pshdCondition in pshdConditions) {\n                    if (conditions.includes(pshdCondition)) return true\n                }\n                return false\n            },\n            testType(testType: string){\n                return testType === 'HIV rapid test'\n            },\n        }\n    },\n    \"Children under twelve who tested positive via HIV DNA Polymerase Chain Reaction test\": {\n        concept: 'HIV DNA polymerase chain reaction',\n        priority: 4,\n        conditions: {\n            ageInMonths: (age: number) => age < 12,\n            testType: (testType: string) => testType === \"HIV DNA polymerase chain reaction\",\n        }\n    },\n    \"Children who are less than 24 months\": {\n        concept: 'HIV infected',\n        priority: 5,\n        conditions: {\n            ageInMonths: (age: number) => age < 24\n        }\n    },\n    \"Children between 24 and 56 months who have stage 2 or 1 conditions\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 750',\n        priority: 6,\n        conditions: {\n            ageInMonths(age: number) {\n                return age >= 24 && age <= 56\n            },\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 750\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            },\n            stage(stage: number) {\n                return stage <= 2\n            }\n        }\n    },\n    \"Children with CD4 count less than 500 and have stage 1 and stage 2 conditions\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 500',\n        priority: 7,\n        conditions: {\n            cd4(cd4: number){\n                return cd4 <= 500\n            },\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4Modifier(modifier: string){\n                return modifier === '<' || modifier === '='\n            },\n            stage(stage: number) {\n                return stage <= 2\n            }\n        }\n    },\n    \"Children over the date 2014-04-01 who are more than five years old and have cd4 count less than 500\": {\n        concept: 'CD4 COUNT LESS THAN OR EQUAL TO 500',\n        priority: 9,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            age(age: number) {\n                return age > 5\n            },\n            cd4(cd4: number) {\n                return cd4 <= 500\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    \"Children over date 2014-04-01 and less than Five years old\": {\n        concept: 'HIV infected',\n        priority: 10,\n        conditions: {\n            date(date: string) {\n                return date >= '2014-04-01'\n            },\n            age(age: number) {\n                return age <= 5\n            }\n        }\n    },\n    'Women who are breast feeding': {\n        concept: 'BREASTFEEDING',\n        priority: 11,\n        conditions: {\n            gender(gender: string){\n                return gender === 'F'\n            },\n            breastFeeding(answer: string){\n                return  answer === 'Yes'\n            },\n            stage: (stage: number) => stage <= 2\n        }\n    },\n    'Women who are pregnant': {\n        concept: 'PATIENT PREGNANT',\n        priority: 12,\n        conditions: {\n            gender(gender: string) {\n                return gender === 'F'\n            },\n            pregnant(answer: string){\n                return answer === 'Yes'\n            },\n            stage(stage: number) {\n                return stage <= 2\n            },\n        }\n    },\n    \"Asymptomatic patient with either stage one or stage two conditions\": {\n        concept: 'Asymptomatic',\n        priority: 13,\n        conditions: {\n            stage: (stage: number) => stage <= 2\n        }\n    }\n}\n\nexport const ADULT_ART_ELIGIBILITY: Record<string, GuideLineInterface> = {\n    'Has stage 4 conditions': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 1,\n        conditions: {\n            stage: (stage: number) => stage === 4\n        }\n    },\n    'Has HIV wasting syndrome identified in stage 3': {\n        concept: 'WHO STAGE IV ADULT',\n        priority: 2,\n        conditions: {\n            selectedConditions: (conditions: Array<string>) => {\n                const severeSymp = ConceptService.getConceptsByCategory('severe_hiv_wasting_syndrome')\n                const found = severeSymp.reduce((total, symp) => conditions.includes(symp.name) ? total + 1 : 0, 0)\n                return found >= 2\n            }\n        }\n    },\n    'Has stage 3 conditions': {\n        concept: 'WHO STAGE III ADULT',\n        priority: 3,\n        conditions: {\n            stage: (stage: number) => stage === 3,\n        }\n    },\n    'CD4 less than 350 for adults before 2014': {\n        concept: 'cd4 less than or equal to 350',\n        priority: 4,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 350\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 250 for adults after 2014': {\n        concept: 'cd4 less than or equal to 250',\n        priority: 4,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 250\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 350 for adults after 2014': {\n        concept: 'cd4 less than or equal to 350',\n        priority: 5,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number) {\n                return cd4 <= 350\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'CD4 less than 500 for adults after 2014': {\n        concept: 'cd4 less than or equal to 500',\n        priority: 6,\n        conditions: {\n            cd4Date: (date: string) => {\n                return new Date(date) <= new Date(\"2014-04-01\")\n            },\n            cd4(cd4: number){\n                return cd4 <= 500\n            },\n            cd4Modifier(modifier: string) {\n                return modifier === '<' || modifier === '='\n            }\n        }\n    },\n    'Women who are breast feeding': {\n        concept: 'BREASTFEEDING',\n        priority: 8,\n        conditions: {\n            gender(gender: string){\n                return gender === 'F'\n            },\n            breastFeeding(answer: string){\n                return  answer === 'Yes'\n            },\n            stage: (stage: number) => stage <= 2\n        }\n    },\n    'Women who are pregnant': {\n        concept: 'PATIENT PREGNANT',\n        priority: 7,\n        conditions: {\n            gender(gender: string) {\n                return gender === 'F'\n            },\n            pregnant(answer: string){\n                return answer === 'Yes'\n            },\n            stage(stage: number) {\n                return stage <= 2\n            },\n        }\n    },\n    \"Asymptomatic patient with either stage one or stage two conditions\": {\n        concept: 'Asymptomatic',\n        priority: 9,\n        conditions: {\n            stage: (stage: number) => stage <= 2,\n        }\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { LocationService } from \"@/services/location_service\"\nimport {\n    RECOMMENDED_ADULT_STAGING_CONDITIONS,\n    CHILD_ART_ELIGIBILITY,\n    ADULT_ART_ELIGIBILITY,\n    ADULT_WHO_STAGE_CRITERIA,\n    CHILD_WHO_STAGE_CRITERIA,\n    CONTRADICTING_STAGE_DEFINITIONS_ALERTS,\n    RECOMMENDED_CHILD_STAGING_CONDITIONS,\n    CD4_AS_START_REASON_CUTOFF_DATE\n} from \"@/apps/ART/guidelines/staging_guidelines\"\n\n/**\n * Enable for filtering staging categories in ConceptName Dictionary\n */\nenum StagingCategory {\n    ADULT_STAGE_4 = 'stage_4_conditions_adults',\n    ADULT_STAGE_3 = 'stage_3_conditions_adults',\n    ADULT_STAGE_2 = 'stage_2_conditions_adults',\n    ADULT_STAGE_1 = 'stage_1_conditions_adults',\n    PEDAID_STAGE_4 = 'stage_4_conditions_pedaids',\n    PEDAID_STAGE_3 = 'stage_3_conditions_pedaids',\n    PEDAID_STAGE_2 = 'stage_2_conditions_pedaids',\n    PEDAID_STAGE_1 = 'stage_1_conditions_pedaids'\n}\n\nexport class StagingService extends AppEncounterService {\n    age: number\n    confirmatoryTest: string | null;\n    constructor(patientID: number, age: number, providerID: number) {\n        super(patientID, 52, providerID) //TODO: Use encounter type reference name\n        this.age = age\n        this.confirmatoryTest = null\n    }\n\n    isAdult() { return this.age >= 15 }\n\n    isPedaid() { return this.age <= 14 }\n\n    setAge(age: number) {\n        this.age = age\n    }\n\n    getFacilities (filter='') { return LocationService.getFacilities({name: filter}) }\n    \n    getConfirmatoryTestType() { return this.confirmatoryTest }\n\n    cd4CountIsValid(value: string) {\n        try {\n            return value.match(/^(=|<|>)([0-9]*)$/m) ? true : false\n        }catch(e) {\n            return false\n        }\n    }\n\n    getAlertGuidelines() {\n        return CONTRADICTING_STAGE_DEFINITIONS_ALERTS\n    }\n\n    getWhoStageGuidelines() {\n        return this.isAdult() ? ADULT_WHO_STAGE_CRITERIA : CHILD_WHO_STAGE_CRITERIA\n    }\n\n    getProgramEligibilityGuidelines() {\n        return this.isAdult() ? ADULT_ART_ELIGIBILITY: CHILD_ART_ELIGIBILITY\n    }\n\n    getRecommendedConditionGuidelines() {\n        return this.isAdult() ? RECOMMENDED_ADULT_STAGING_CONDITIONS: RECOMMENDED_CHILD_STAGING_CONDITIONS\n    }\n\n    getStagingConditions(stage: number) {\n        const category = this.getStagingCategoryByNum(stage)\n        return AppEncounterService.getConceptsByCategory(category)\n    }\n\n    getAllWhoStages() {\n        return AppEncounterService.getConceptsByCategory('whole_staging_numbers')\n    }\n\n    getAllReasonsForART(registrationDate = this.date) {\n        const reasons = AppEncounterService.getConceptsByCategory('reason_for_art')\n        if(new Date(registrationDate) < new Date(CD4_AS_START_REASON_CUTOFF_DATE)) return reasons\n        return reasons.filter(reason => !reason.name.match(/cd4/i))\n    }\n\n    buildWhoStageObs(stage: string) {\n        return this.buildValueCoded('Who stage', stage)\n    }\n    \n    buildWhoCriteriaObs(condition: string) {\n        return this.buildValueCoded('Who stages criteria present', condition)\n    }\n\n    buildReasonForArtObs(reason: string) {\n        return this.buildValueCoded('Reason for ART eligibility', reason)\n    }\n\n    private getStagingCategoryByNum(stageNumber: number) {\n        switch(stageNumber) {\n            case 1:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_1 : StagingCategory.PEDAID_STAGE_1\n            case 2:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_2 : StagingCategory.PEDAID_STAGE_2\n            case 3:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_3 : StagingCategory.PEDAID_STAGE_3\n            case 4:\n                return this.isAdult() ? StagingCategory.ADULT_STAGE_4 : StagingCategory.PEDAID_STAGE_4\n            default: \n                return ''\n        }\n    }\n\n    async loadHivConfirmatoryTestType() {\n        const test = await AppEncounterService.getFirstValueCoded(\n            this.patientID, 'Confirmatory hiv test type'\n        )\n        if (test) this.confirmatoryTest = test\n    }\n}\n","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { StagingService } from \"@/apps/ART/services/staging_service\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { isEmpty } from \"lodash\"\nimport { CD4_COUNT_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport {\n    getFacilities\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        staging: {} as any,\n        showStagingWeightChart: true,\n        canShowStagingFields: true as boolean,\n        bmiObj: {} as any, \n        stagingFacts : {\n            age: -1 as number,\n            bmi: -1 as number,\n            gender: '' as 'M' | 'F',\n            stage: -1 as number,\n            cd4: -1 as number,\n            cd4Date: '' as string,\n            date: '' as string,\n            isChildBearing: false as boolean,\n            stageOneConditions: [] as Array<string>,\n            stageTwoConditions: [] as Array<string>,\n            stageThreeConditions: [] as Array<string>,\n            stageFourConditions: [] as Array<string>,\n            reasonForArt: '' as string,\n            testType: '' as string,\n            pregnant: '' as 'Yes' | 'No',\n            breastFeeding: '' as 'Yes' | 'No',\n            selectedCondition: '' as string,\n            selectedConditions: [] as Array<string>,\n            weightPercentile: -1 as number,\n            ageInMonths: -1 as number,\n            cd4Modifier: '' as string,\n            whoStage: '' as string\n        }\n    }),\n    watch: {\n        ready : {\n            handler(v) {\n                if (v) {\n                    this.staging = new StagingService(this.patient.getID(), this.patient.getAge(), this.providerID)\n                }\n            },\n            immediate: true\n        }\n    },\n    methods: {\n        async initStaging(patient: any) {\n            await this.staging.loadHivConfirmatoryTestType()\n            this.bmiObj = await patient.getBMI()\n            this.stagingFacts.age = patient.getAge()\n            this.stagingFacts.bmi = this.bmiObj['index']\n            this.stagingFacts.date = StagingService.getSessionDate()\n            this.stagingFacts.gender = patient.isMale() ? 'M' : 'F' \n            this.stagingFacts.testType = this.staging.getConfirmatoryTestType()\n            this.stagingFacts.ageInMonths = patient.getAgeInMonths()\n            this.stagingFacts.isChildBearing = patient.isChildBearing()\n\n            if (this.staging.isPedaid()) {\n                this.stagingFacts.weightPercentile = await patient.calculateWeightPercentile()\n            }\n        },\n        async submitStaging(computedValues: any) {\n            const encounter = await this.staging.createEncounter()\n\n            if (!encounter) throw 'Unable to create staging encounter'\n\n            const stagingObservations = await this.resolveObs(computedValues, 'staging')\n            const derivedObservations = await Promise.all([\n                this.buildReasonForArtObs(), this.buildWhoStageObs()\n            ])\n\n            const obs = await this.staging.saveObservationList([\n                ...stagingObservations, ...derivedObservations\n            ])\n\n            if (!obs) throw 'Unable to save patient observations'\n        },\n        async onStagingCondition({ label }: Option) {\n            this.stagingFacts.selectedCondition = label\n \n            const guidelines =  this.staging.getAlertGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n\n            if (isEmpty(findings)) \n                return true\n\n            if (findings[0]?.actions && findings[0]?.actions.alert) {\n                const ok = await findings[0]?.actions.alert(this.stagingFacts)\n                return ok ? true : false\n            }\n            return true\n        },\n        getFacilities(filter='') {\n            return getFacilities(filter)\n        },\n        updateStagingFacts() {\n            const conditions = [\n                this.stagingFacts.stageOneConditions,\n                this.stagingFacts.stageTwoConditions,\n                this.stagingFacts.stageThreeConditions,\n                this.stagingFacts.stageFourConditions, \n            ]\n            this.stagingFacts.stage = conditions.reduce(\n                (stage, conditions: string[], curIndex) =>\n                    isEmpty(conditions) ? stage : curIndex + 1\n                , 0)\n            this.stagingFacts.selectedConditions = conditions.reduce(\n                (accum, cur) => accum.concat(cur), []\n            )\n        },\n        buildReasonForArtObs() {\n            return this.staging.buildReasonForArtObs(this.stagingFacts.reasonForArt)\n        },\n        buildWhoStageObs() {\n            return this.staging.buildWhoStageObs(this.stagingFacts.whoStage)\n        },\n        buildStagingOptions(stage: number, previouslySelected=[] as Array<string>) {\n            const guidelines = this.staging.getRecommendedConditionGuidelines()\n\n            return this.staging.getStagingConditions(stage).map((concept: any) => {\n                let disabled = false\n                let description: unknown\n                let isChecked = previouslySelected.includes(concept.name)\n                this.stagingFacts.selectedCondition = concept.name\n\n                const findings = matchToGuidelines(this.stagingFacts, guidelines)\n\n                if (!isEmpty(findings)) {\n                    const conceptFinding = findings[0] //get the first item only\n                    if (conceptFinding?.actions?.isChecked) {\n                        isChecked = true\n                    }\n                    if (conceptFinding?.actions?.disabled) {\n                        disabled = true\n                    }\n                    description = conceptFinding.description\n                }\n                return {\n                    label: concept.name,\n                    value: concept.concept_id,\n                    isChecked,\n                    disabled,\n                    description\n                }\n            })\n        },\n        setWhoStage() {\n            const guidelines = this.staging.getWhoStageGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n            this.stagingFacts.whoStage = findings[0]?.concept || ''\n        },\n        setReasonForArt() {\n            const guidelines = this.staging.getProgramEligibilityGuidelines()\n            const findings = matchToGuidelines(this.stagingFacts, guidelines)\n            this.stagingFacts.reasonForArt = findings[0]?.concept || ''\n        },\n        notAsymptomatic(f: any) {\n            const stageOneC = f.stage_1_conditions\n            if (stageOneC) {\n                const asymptomatics = stageOneC.filter((i: Option) => {\n                    return i.label.match(/asymptomatic/i) && i.isChecked\n                })\n                return isEmpty(asymptomatics)\n            }\n            return true\n        },\n        hasTransferLater(f: Record<string, any>): boolean {\n            if ('has_transfer_letter' in f) {\n                return f.has_transfer_letter && f.has_transfer_letter.value === 'Yes'\n            }\n            return false\n        },\n        hasStaging(f: Record<string, any>) {\n            // For components that have Optional staging\n            if (this.hasTransferLater(f)) {\n                return true\n            }\n            return this.canShowStagingFields\n        },\n        getStagingSummaryField(helpText=\"Summary\" as string) {\n            return {\n                id: 'summary',\n                helpText,\n                type: FieldType.TT_ART_STAGING_SUMMARY,\n                condition: (f: any) => this.hasStaging(f),\n                onload: () => {\n                    this.setReasonForArt()\n                    this.setWhoStage()\n                },\n                options: () => [\n                    { \n                        label: 'WHO Stage', \n                        value: this.stagingFacts.whoStage,\n                        other: {\n                            type: 'title-section'\n                        }\n                    },\n                    { \n                        label: 'Condition on starting ART', \n                        value: this.stagingFacts.reasonForArt,\n                        other: {\n                            type: 'title-section'\n                        } \n                    },\n                    ...this.stagingFacts.selectedConditions.map((i: string) => ({ label: i, value: i }))\n                ],\n                config: {\n                    title: 'Selected stage defining conditions',\n                    hiddenFooterBtns: [\n                        'Clear'\n                    ]\n                }\n            }\n        },\n        isANCclient() {\n            return StagingService.getSuspendedProgram() === 'ANC'\n        },\n        getStagingFields(): Array<Field> {\n            return [\n                {\n                    id: 'pregnancy_status',\n                    helpText: 'Pregnant / Breastfeeding',\n                    type: FieldType.TT_MULTIPLE_YES_NO,\n                    validation: (v: any) => Validation.anyEmpty(v),\n                    summaryMapValue: (d: Option) => ({ \n                        label: d.label, \n                        value: d.value \n                    }),\n                    computedValue: (data: Array<Option>, f: Record<string, any>) => {\n                        let obs = []\n                        // For ANC clients, mark pregnancy status as 'Yes' always!!\n                        // The assumption here is also that the pregnancy option is not available for selection\n                        if (this.isANCclient() && !this.hasTransferLater(f)) {\n                            this.stagingFacts['pregnant'] = 'Yes' \n                            obs.push(this.staging.buildValueCoded('Is patient pregnant', 'Yes'))\n                        }\n                        obs = obs.concat(data.map(d => {\n                            const  { value, other } = d\n\n                            const factID: 'pregnant' | 'breastFeeding' = other.factID\n\n                            this.stagingFacts[factID] = `${value}`.match(/Yes/i) ? 'Yes' : 'No'\n\n                            return this.staging.buildValueCoded(other.concept, value)\n                        }))\n                        return {\n                            obs,\n                            tag: 'staging'\n                        }\n                    },\n                    options: (f: any) => {\n                        if (!isEmpty(f.pregnancy_status)) {\n                            return f.pregnancy_status\n                        } else {\n                            const options = []\n                            // Hide pregnancy option for ANC clients who are not transferr in\n                            if (!this.isANCclient() || this.hasTransferLater(f)) {\n                                options.push({\n                                    label: 'Pregnant?',\n                                    value: '',\n                                    other: {\n                                        values: this.yesNoOptions(),\n                                        concept: 'Is patient pregnant',\n                                        factID: 'pregnant'\n                                    }\n                                })\n                            }\n                            options.push({\n                                label: 'Breastfeeding?',\n                                value: '',\n                                other: {\n                                    values: this.yesNoOptions(),\n                                    concept: 'Is patient breast feeding',\n                                    factID: 'breastFeeding'\n                                }\n                            })\n                            return options\n                        }\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.stagingFacts.isChildBearing,\n                },\n                {\n                    id: 'patient_weight_chart',\n                    helpText: 'Weight history',\n                    type: FieldType.TT_WEIGHT_CHART,\n                    options: async () => {\n                        let values = await this.patient.getWeightHistory()\n                        values = values.map((d: any) => ({ \n                            x: HisDate.toStandardHisDisplayFormat(d.date), \n                            y: d.weight\n                        }))\n                        return [\n                            {\n                                label: \"Weight for patient\",\n                                value: \"Weight trail\",\n                                other: {\n                                    values,\n                                    age: this.patient.getAge(),\n                                    bmi: this.bmiObj\n                                }\n                            }\n                        ]\n                    },\n                    config: {\n                        hiddenFooterBtns: [\n                            'Clear'\n                        ]\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.showStagingWeightChart\n                },\n                {\n                    id: 'stage_4_conditions',\n                    helpText: 'Stage 4 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(4, this.stagingFacts.stageFourConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageFourConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageFourConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_3_conditions',\n                    helpText: 'Stage 3 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(3, this.stagingFacts.stageThreeConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageThreeConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageThreeConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_2_conditions',\n                    helpText: 'Stage 2 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    options: () => this.buildStagingOptions(2, this.stagingFacts.stageTwoConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Option[]) => {\n                        return {\n                            tag: 'staging',\n                            obs: d.map(i => this.staging.buildWhoCriteriaObs(i.label))\n                        }\n                    },\n                    unload: (d: Option[]) => {\n                        this.stagingFacts.stageTwoConditions = d.map(i => i.label)\n                        this.updateStagingFacts()\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.stageTwoConditions = []\n                        this.updateStagingFacts()\n                    },\n                    condition: (f: any) => this.hasStaging(f) && this.notAsymptomatic(f),\n                },\n                {\n                    id: 'stage_1_conditions',\n                    helpText: 'Stage 1 conditions',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    validation: (val: any) => {\n                        if (isEmpty(val) && isEmpty(this.stagingFacts.selectedConditions))\n                            return ['Please provide atleast one staging condition']\n                    },\n                    options: () => this.buildStagingOptions(1, this.stagingFacts.stageOneConditions),\n                    onValue: (v: Option) => this.onStagingCondition(v),\n                    computedValue: (d: Array<Option>) => {\n                        const data = d.map(i => i.label)\n                        this.stagingFacts.stageOneConditions = data\n                        this.updateStagingFacts()\n                        return {\n                            tag: 'staging',\n                            obs: data.map(i => this.staging.buildWhoCriteriaObs(i))\n                        }\n                    },\n                    condition: (f: any) => this.hasStaging(f),\n                },\n                {\n                    id: 'cd4_available',\n                    helpText: 'Recent CD4 count results available?',\n                    type: FieldType.TT_SELECT,\n                    condition: (f: any) => this.hasStaging(f),\n                    validation: (val: any) => Validation.required(val),\n                    options: () => this.yesNoOptions()\n                },\n                {\n                    id: 'cd4_count',\n                    helpText: 'CD4 Count',\n                    type: FieldType.TT_TEXT,\n                    computedValue: (d: Option) => {\n                        const value = d.value.toString()\n                        const modifier = value.charAt(0)\n                        const count = parseInt(value.substring(1))\n                        return {\n                            tag: 'staging',\n                            modifier,\n                            count,\n                            obs: this.staging.buildValueNumber(\n                                'CD4 count', count, modifier\n                            )\n                        }\n                    },\n                    unload: (d: any, s: any, f: any, computedData: any) => {\n                        const { count, modifier } = computedData['cd4_count']\n                        this.stagingFacts.cd4 = count\n                        this.stagingFacts.cd4Modifier = modifier\n                    },\n                    onConditionFalse: () => {\n                        this.stagingFacts.cd4 = -1\n                        this.stagingFacts.cd4Modifier = ''\n                    },\n                    validation: (val: any) => {\n                        const isCd4 = () => this.staging.cd4CountIsValid(val.value)\n                        return this.validateSeries([\n                            () => Validation.required(val),\n                            () => !isCd4() ? ['Please start with either modifier first: >, <, or ='] : null\n                        ])\n                    },\n                    config: {\n                        customKeyboard: [\n                            CD4_COUNT_PAD_LO,\n                            [\n                                ['Unknown', 'Delete']\n                            ]\n                        ]\n                    },\n                    condition: (f: any) => this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                },\n                ...generateDateFields({\n                    id: 'cd4_result_date',\n                    helpText: 'Cd4 Results',\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => this.staging.getDate(),\n                    condition: (f: any) =>  this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => {\n                        this.stagingFacts.cd4Date = date\n                        return {\n                            date,\n                            tag: 'staging',\n                            isEstimate,\n                            obs: this.staging.buildValueDate('Cd4 count datetime', date) \n                        }\n                    }\n                }, this.staging.getDate()),\n                {\n                    id: 'location',\n                    helpText: 'CD4 Location',\n                    type: FieldType.TT_SELECT,\n                    defaultValue: () => StagingService.getLocationName(),\n                    computedValue: ({ label }: Option) => ({\n                        tag: 'staging',\n                        obs: this.staging.buildValueText('Cd4 count location', label)\n                    }),\n                    validation: (val: any) => Validation.required(val),\n                    options: (_, filter='') => this.getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    },\n                    condition: (f: any) => this.hasStaging(f) && f.cd4_available.value === 'Yes',\n                }\n            ]\n        }\n    }\n})\n","import script from \"./StagingMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./StagingMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport async function getVillagesByName(name='a', page=1): Promise<Option[]> {\n    const villages = await LocationService.getVillagesByName(name, page)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport function getLandmarks(): Option[] {\n    const landmarks = [\n        'Catholic Church',\n        'CCAP',\n        'Seventh Day',\n        'Mosque',\n        'Primary School',\n        'Borehole',\n        'Secondary School',\n        'College',\n        'Market',\n        'Football Ground',\n        'Other'\n    ]\n\n    return landmarks.map(landmark =>({\n        label: landmark,\n        value: landmark,\n        other: {\n            code: landmark\n        }\n    }))\n}\n"],"sourceRoot":""}