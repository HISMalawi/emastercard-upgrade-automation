{"version":3,"sources":["webpack:///./src/apps/ART/services/htn_service.ts","webpack:///./src/services/regimen_service.ts","webpack:///./src/services/drug_order_service.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/apps/ART/views/encounters/Prescription.vue?5f7a","webpack:///./src/apps/ART/guidelines/prescription_guidelines.ts","webpack:///./src/apps/ART/views/encounters/Prescription.vue","webpack:///./src/apps/ART/views/encounters/Prescription.vue?b2e0","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/components/Forms/BaseFormElements.ts","webpack:///./src/apps/ART/services/prescription_service.ts","webpack:///./src/components/FormElements lazy ^\\.\\/.*\\.vue$ namespace object"],"names":["HTN_SESSION_KEY","BPManagementService","AppEncounterService","constructor","patientID","providerID","super","sbp","dbp","bpTrail","firstRecentGrade","secondRecentGrade","Object","values","sort","a","b","date","map","bp","this","getBpGrade","getSystolicBp","ObservationService","getFirstValueNumber","getDiastolicBp","query","getFirstValueCoded","getJson","drugID","pills","postJson","state","getDrugs","HCZ","drugs","drugName","amount","current","selected","isChecked","dispensed","expectedRemaining","adherence","notes","Enalapril","remaining","Amlodipine","Atenolol","RegimenService","Service","getProgramID","patientId","weight","onTbTreatment","getSessionDate","name","DrugOrderService","orders","dispensations","order","pageSize","params","defineComponent","components","HisStandardForm","data","patient","fields","providers","facts","sessionDate","apiDate","encounterName","isBdeMode","birthDate","outcome","outcomeStartDate","ready","watch","handler","route","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","states","FlowState","SET_PROVIDER","selection","username","split","provider","find","person_id","CONTINUE","CHANGE_SESSION_DATE","$router","push","EXIT","CHANGE_PATIENT_OUTCOME","GO_TO_PATIENT_DASHBOARD","gotoPatientDashboard","findings","matchToGuidelines","ENCOUNTER_GUIDELINES","index","_finding$actions","_finding$actions3","finding","actions","alert","_finding$actions2","status","_finding$actions4","flowState","value","program","startDate","e","console","error","toastDanger","ProgramService","getCachedApiDate","isBDE","getBirthdate","$route","toString","toUpperCase","usernameA","usernameB","p","_p$person","isEmpty","person","names","_p$person2","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","filter","d","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","conditions","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","_component_his_standard_form","_resolveComponent","$event","fieldComponent","onSubmit","Target","TargetEvent","PRESCRIPTION_GUIDELINES","priority","async","regimenName","infoActionSheet","slot","color","target","ARV_REGIMENS","targetEvent","ON_VALUE","regimenCode","code","includes","medicationOrders","match","regimenCodeStr","sideEffectsTable","columns","rows","action","tableActionSheet","BEFORE_NEXT","hasSideEffects","isTrue","lastSideEffectDate","currentDate","listActionSheet","age","modal","optionsActionSheet","currentRegimenStr","role","reasonForSwitch","currentRegimenCode","treatmentInitiationState","starterPackNeeded","hangingPillsStatus","INTERVAL_SELECTION","hangingPills","hanging","drug","some","join","isChildBearing","isBearing","lpvType","toLowerCase","enabled","ON_BUILD","prescriptionType","selectedInterval","interval","isNeeded","tptPrescriptionCount","count","Math","round","DRUG_FREQUENCY_GUIDELINE","concept","MEDICATION_STYLE","style","fontSize","borderBottom","background","mixins","EncounterMixinVue","prescription","patientToolbar","regimenExtras","programInfo","allDrugs","gender","tptStatus","contraindications","regimenDrugs","PrescriptionService","loadMedicationOrders","loadFastTrackStatus","medicationOrdersAvailable","isFastTrack","toastWarning","loadHangingPills","loadRegimenExtras","loadTreatmentState","loadDrugInduced","loadContraindications","loadTptPrescriptionCount","initFacts","shouldPrescribeExtras","getRegimenExtras","htnDrugs","resolveHtnDrugs","loadFastTrackMedications","getFastTrackMedications","shouldPrescribeArvs","getPatientToolBar","getFields","drug_id","getProgramInformation","getID","getAge","getGender","getRecentWeight","getHangingPills","getTreatmentState","current_regimen","extractRegimenCode","getMedicationOrders","getContraindications","getTptPrescriptionCount","getLastSideEffectDate","ConsultationService","getTptTreatmentStatus","form","encounter","createEncounter","setNextVisitInterval","payload","mapOrder","drugOrder","createDrugOrder","createRegimenSwitchObs","createHangingPillsObs","keys","saveObservationList","toastSuccess","invalidate","onBuildOptions","sideEffects","findAndGroupDrugSideEffects","buildSideEffectsTable","event","onEvent","getLpvDrugs","getStarterPackDrugs","getLvpDrugsByType","sessionData","sessionStorage","getItem","Prescription","JSON","parse","isPlainObject","warn","getRegimenStarterpack","setCustomDrugs","HisDate","toStandardHisDisplayFormat","regimenCategories","getPatientRegimens","r","alternative_drug_name","concept_name","buildIntervalOptions","intervals","config","getDrugEstimates","getDrugFrequency","regimen","substring","regimens","nextAppointment","calculateDateFromInterval","drugPacks","packSize","getDrugPackSize","pillsPerDay","calculatePillsPerDay","am","noon","pm","estimatedPackSize","estimatePackSize","drug_name","toOrderObj","units","frequency","getReasonForRegimenSwitch","id","helpText","FieldType","TT_ART_REGIMEN_SELECTION","validation","val","Validation","buildRegimenOptions","onload","onValue","onRegimen","beforeNext","onBeforeRegimenNext","toolbarInfo","footerBtns","onClick","TT_MULTIPLE_SELECT","o","concept_id","areRequiredDrugsSelected","v","every","conceptID","alertConfirmation","getCustomIngridients","tpt","test","tb_treatment","disabled","description","show","text","completed","showKeyboard","hiddenFooterBtns","size","visible","TT_DOSAGE_INPUT","f","custom_regimen","empty","unload","summaryMapValue","getInstructions","fdata","barcodes","TT_DATA_TABLE","dataTableConfig","showIndex","viewPortStyle","height","table","thTxt","conf","cssClass","regimen_category","td","TT_NEXT_VISIT_INTERVAL_SELECTION","showRegimenCardTitle","TT_NOTE","computedValue","buildValueText","dformat","isCondition","ignored","undefined","prop","sortByPriority","sortByWeight","guidelines","sortBy","matches","guidelineIndex","targetValidations","title","info","COMPONENT_REFS","TT_ASYNC_MULTI_SELECT","TT_LINKAGE_CODE","TT_MULTI_SELECT_GRID","TT_AGE_INPUT","TT_BARCODE","TT_SELECT","TT_CARD_SELECTOR","TT_TEXT","TT_NUMBER","TT_MONTHLY_DAYS","TT_TABLE_VIEWER","TT_YES_NO","TT_MULTIPLE_YES_NO","TT_WEIGHT_CHART","TT_VITALS_ENTRY","TT_APPOINTMENTS_ENTRY","TT_COMPLAINTS_PICKER","TT_CLINIC_HOLIDAY_PICKER","TT_SUMMARY","TT_ART_STAGING_SUMMARY","TT_ADHERENCE_INPUT","TT_LAB_ORDERS","TT_PERSON_RESULT_VIEW","TT_PROGRAM_SELECTION","TT_DATE_PICKER","TT_RELATION_SELECTION","TT_FILING_NUMBER_VIEW","TT_PERSON_MATCH_VIEW","TT_FULL_DATE","TT_BATCH_ENTRY","TT_BATCH_VERIFICATION","TT_BATCH_MOVEMENT","TT_IP_ADDRESS","TT_TEXT_BANNER","TT_DISPENSATION_INPUT","TT_GROUP_SELECTOR","TT_ANC_PREGNANCY_INPUT_CONFIG","TT_ANC_PREGNANCY_DETAILS_INPUT","TT_ANC_LMP_DATE_INPUT","TT_DRUG_TRANSFER_IN","TT_GRID_SELECTOR","TT_ANC_DRUGSET_INPUT","TT_RADIOLOGY_PICKER","TT_PRESCRIPTION_INPUT","TT_INFINITE_SCROLL_MULTIPLE_SELECT","TT_DRUG_DISPENSER","AdverseEffectsCategories","_defineProperty","nextVisitInterval","fastTrack","fastTrackMedications","treatmentState","getCachedConceptName","getSideEffects","getRegimens","getARVs","arvs","getCachedConceptID","extras","getConceptsByCategory","extrasAvailable","patientWeight","contraindication","getConceptID","getObs","forEach","toStandardHisFormat","obs_datetime","value_coded","drugInduced","value_drug","res","yes","meds","getAll","value_numeric","toDate","_o$order","drug_order","drug_inventory_id","getLastDrugsReceived","withDosages","dosage","getDrugDosages","req","allSideEffects","parseFloat","packs","roundedPacks","calculateDosage","morningTabs","eveningTabs","dose","calculateEquivalentDosage","dateObj","Date","setDate","getDate","pack_size","tabs","reason","getFirstValueText","drugOrders","create","encounterID","response","saveValueTextObs","webpackAsyncContext","__webpack_require__","resolve","Error","ids","slice","module","exports"],"mappings":"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BAAiB,wBAAyBzU,M,qBCpV9D,IAAIhP,EAAM,CACT,wBAAyB,CACxB,OACA,qBAED,wBAAyB,CACxB,OACA,qBAED,iCAAkC,CACjC,OACA,qBAED,+BAAgC,CAC/B,OACA,qBAED,0BAA2B,CAC1B,OACA,qBAED,yBAA0B,CACzB,OACA,iBACA,qBAED,sBAAuB,CACtB,OACA,qBAED,kCAAmC,CAClC,OACA,qBAED,0BAA2B,CAC1B,OACA,iBACA,qBAED,mBAAoB,CACnB,OACA,qBAED,yBAA0B,CACzB,OACA,sBAED,6BAA8B,CAC7B,OACA,sBAED,0BAA2B,CAC1B,OACA,iBACA,sBAED,oBAAqB,CACpB,OACA,sBAED,wBAAyB,CACxB,OACA,iBACA,sBAED,+BAAgC,CAC/B,OACA,sBAED,wBAAyB,CACxB,OACA,sBAED,sBAAuB,CACtB,OACA,iBACA,iBACA,sBAED,yBAA0B,CACzB,OACA,iBACA,iBACA,sBAED,6BAA8B,CAC7B,OACA,iBACA,iBACA,sBAED,wBAAyB,CACxB,OACA,sBAED,+BAAgC,CAC/B,OACA,iBACA,sBAED,4BAA6B,CAC5B,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,sBAAuB,CACtB,OACA,iBACA,sBAED,uBAAwB,CACvB,OACA,iBACA,sBAED,wBAAyB,CACxB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,wCAAyC,CACxC,OACA,sBAED,qBAAsB,CACrB,OACA,iBACA,sBAED,uBAAwB,CACvB,OACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,0BAA2B,CAC1B,OACA,iBACA,sBAED,6BAA8B,CAC7B,OACA,sBAED,gBAAiB,CAChB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,6BAA8B,CAC7B,OACA,iBACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,kBAAmB,CAClB,OACA,sBAED,mBAAoB,CACnB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,sBAAuB,CACtB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,wBAAyB,CACxB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,oBAAqB,CACpB,OACA,sBAED,oBAAqB,CACpB,OACA,uBAGF,SAAS0jB,EAAoBvB,GAC5B,IAAIwB,EAAoBxK,EAAEnZ,EAAKmiB,GAC9B,OAAOpY,QAAQ6Z,UAAUxf,MAAK,WAC7B,IAAI4C,EAAI,IAAI6c,MAAM,uBAAyB1B,EAAM,KAEjD,MADAnb,EAAE2G,KAAO,mBACH3G,KAIR,IAAI8c,EAAM9jB,EAAImiB,GAAMjK,EAAK4L,EAAI,GAC7B,OAAO/Z,QAAQC,IAAI8Z,EAAIC,MAAM,GAAG/jB,IAAI2jB,EAAoB3c,IAAI5C,MAAK,WAChE,OAAOuf,EAAoBzL,MAG7BwL,EAAoB/O,KAAO,WAC1B,OAAOjV,OAAOiV,KAAK3U,IAEpB0jB,EAAoBxL,GAAK,OACzB8L,EAAOC,QAAUP","file":"js/chunk-44f7ff80.0d002f85.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { ObservationService } from \"@/services/observation_service\"\n\nexport enum HTN_SESSION_KEY {\n  Prescription = \"htnPrescription\"\n}\n\nexport class BPManagementService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n      super(patientID, 48, providerID) //TODO: Use encounter type reference name'\n    }\n\n    static getBpGrade(sbp: number, dbp: number) {\n      if ((sbp < 140) && (dbp < 90)) {\n        return \"normal\"\n      }\n      else if ((sbp >= 140 && sbp < 160) || (dbp >= 100 && dbp < 110)) {\n        return \"grade 1\"\n      }\n      else if ((sbp >= 180 && dbp > 110) || sbp >= 180) {\n        return \"grade 3\"\n      }\n      else if ((sbp >= 160 && sbp < 180) || (dbp >= 110)) {\n        return \"grade 2\"\n      }\n      return 'N/A'\n    }\n\n    /**\n     * BP is normointensive if two most recent consecutive tests are normal\n     * @param bpTrail \n     * @returns\n    */\n    static isBpNormotensive(bpTrail: any) {\n      const [ firstRecentGrade, secondRecentGrade ] = Object.values(bpTrail)\n        .sort((a: any, b: any) => a.date < b.date ? 1 : 0)\n        .map((bp: any) => this.getBpGrade(bp.sbp, bp.dbp))\n      return firstRecentGrade === 'normal' && secondRecentGrade === 'normal'\n    }\n\n    getSystolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Systolic blood pressure')\n    }\n\n    getDiastolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Diastolic blood pressure')\n    }\n\n    async onBpDrugs() {\n      const query = await ObservationService.getFirstValueCoded(this.patientID, 'Treatment status')\n      return query ? query === 'Yes' : false\n    }\n  \n    async getBPTrail() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/bp_trail`);\n    }\n    async getCurrentDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/current_bp_drugs`);\n    }\n    async getLastDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/last_bp_drugs_dispensation`);\n    }\n    async getAdherence(drugID: number, pills: number) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/remaining_bp_drugs`, {\n        'drug_id': drugID,\n        pills: pills\n      });\n    }\n    async enrollPatient(state: any) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/update_or_create_htn_state`, state);\n    }\n    static htnDrugReferences() {\n      return [\n        { \n          'drug_id': 275,\n          'drug_name': \"HCZ (25mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 942,\n          'drug_name': \"Enalapril (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 943,\n          'drug_name': \"Enalapril (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 558,\n          'drug_name': \"Amlodipine (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 559,\n          'drug_name': \"Amlodipine (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 117,\n          'drug_name': \"Atenolol (50mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 11,\n          'drug_name': \"Atenolol(100mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        }\n      ]\n    }\n    getDrugs() {\n        return {\n        HCZ: {\n          drugs: [\n            {\n              drugName: \"HCZ (25mg tablet)\",\n              drugID: 275,\n              amount: '25mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Enalapril: {\n          drugs: [\n            {\n              drugName: \"Enalapril (5mg tablet)\",\n              drugID: 942,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Enalapril (10mg tablet)\",\n              drugID: 943,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Amlodipine: {\n          drugs: [\n            {\n              drugName: \"Amlodipine (5mg tablet)\",\n              drugID: 558,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Amlodipine (10mg tablet)\",\n              drugID: 559,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Atenolol: {\n          drugs: [\n            {\n              drugName: \"Atenolol (50mg tablet)\",\n              drugID: 117,\n              amount: '50mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Atenolol(100mg tablet)\",\n              drugID: 11,\n              amount: '100mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n      }\n    }\n}","import { Service } from \"./service\";\n\nexport class RegimenService extends Service {\n    constructor() {\n        super()\n    } \n\n    static getAllArvRegimens() {\n        return this.getJson(`programs/${this.getProgramID()}/all_arv_regimens`)\n    }\n\n    static getRegimens(patientId: number) {\n        return this.getJson(`programs/${this.getProgramID()}/regimens`, {'patient_id': patientId})\n    }\n\n    static getRegimensByWeight(weight: number, onTbTreatment = false) {\n        return this.getJson(`programs/${this.getProgramID()}/regimens`, {\n            weight,\n            'tb_dosage': onTbTreatment,\n        })\n    }\n\n    static getCustomIngridients() {\n        return this.getJson(`programs/${this.getProgramID()}/custom_regimen_ingredients`)\n    }\n\n    static getCurrentRegimen(patientId: number, date=this.getSessionDate()) {\n        return this.getJson(`programs/${this.getProgramID()}/${patientId}`, {date})   \n    }\n\n    static getRegimenExtras(name: string, weight: number) {\n        return this.getJson(`programs/${this.getProgramID()}/regimen_extras`, {name, weight})\n    }\n}","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","\n/**\n * @deprecated moved to useEncounter composable\n * \n */\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/anthony/Documents/source/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    skipSummary: true,\n    onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (_ctx.fieldComponent='')),\n    activeField: _ctx.fieldComponent,\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"activeField\", \"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","/**\n * QUICK FACTS ABOUT ART REGIMENS (Malawi Clinical HIV Guidelines 2018 Version 1)\n *  - ART regimens are grouped into first and secondline\n *  - Each regimen is identified by a number. \n *    [0, 2, 4, 5, 6, 8, 9, 10, 11, 13, 14]\n *  - Firstline regimens include [0, 2, 4, 5, 6, 13, 14]\n *  - Secondline regimens include [7, 8, 9, 10, 11]\n *  - Some regimens are \"phased in\" on initiation (Due to adverse reaction). As such, \n *    a starter pack is provided for atleast two weeks. Regimens that require a\n *    starter pack include [0, 2, 6]\n */\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\"\nimport { tableActionSheet, listActionSheet, infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\"\n\nexport enum Target {\n    ARV_REGIMENS = 'arv_regimens',\n    INTERVAL_SELECTION = 'next_visit_interval'\n}\nexport enum FlowState {\n    EXIT = 'exit',\n    CONTINUE = 'continue'\n}\nexport enum TargetEvent {\n    ON_VALUE = 'onValue',\n    ON_BUILD = 'onBuild',\n    BEFORE_NEXT = 'beforeNext',\n}\nexport const PRESCRIPTION_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Do not prescribe LPV regimens together with 3HP\": {\n        priority: 1,\n        actions: {\n            alert: async ({ regimenName }: any) => {\n                await infoActionSheet(\n                    '3HP - LPV/r conflict',\n                    regimenName,\n                    `Regimens containing LPV/r <b>cannot</b> be prescribed together with 3HP`,\n                    [\n                        { name: 'Close', slot: 'end', color: 'danger' }\n                    ],\n                    'his-danger-color'\n                    )\n                    return FlowState.EXIT\n                }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.ON_VALUE,\n        conditions: {\n            regimenCode(code: number) {\n                return [7, 8, 9, 10, 11, 12].includes(code)\n            },\n            medicationOrders(orders: Array<string>) {\n                return orders.filter(i => `${i}`.match(/3hp/i) ? true : false).length >= 1\n            }\n        }\n    },\n    \"Check for any adverse effects or contraindications associated with the regimen\": {\n        priority: 1,\n        actions: {\n            alert: async ({ regimenCodeStr, sideEffectsTable }: any) => {\n                const { columns, rows } = sideEffectsTable\n                const action = await tableActionSheet(\n                    `Contraindications / Side effects for ${regimenCodeStr}`,'',\n                    columns, rows,\n                    [\n                        { name: 'Select other regimen', slot: 'start'},\n                        { name: 'Keep selected regimen', slot: 'end', color: 'danger' }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Select other regimen' ? FlowState.EXIT : FlowState.CONTINUE\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            hasSideEffects(isTrue: boolean){\n                return isTrue\n            },\n            lastSideEffectDate(date: string, { currentDate }: any){\n                return date >= currentDate\n            }\n        }\n    },\n    \"Recommend 2nd line regimen to children under 3\": {\n        priority: 1,\n        actions: {\n            alert: async () => {\n                const action = await listActionSheet(\n                    'Recommendation',\n                    '',\n                    [\n                        \"Children under 3 years often have a high viral load and may be infected with drug-resistant HIV from previous exposure to ARVs (mother's ART and/or infant nevirapine prophylaxis)\",\n                        \"Therefore, children under <b>3 years</b> respond better when <b>started immediately on 2nd line regimen</b> (Regimen <b>11</b>)\",\n                    ],\n                    [\n                        { name: 'Select another regimen', slot: 'start' }, \n                        { name: 'Keep selected regimen', slot: 'end', color: 'danger' }\n                    ],\n                    'his-warning-color'\n                )\n                return action === 'Select another regimen' ? FlowState.EXIT : FlowState.CONTINUE\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            age(age: number) {\n                return age < 3\n            },\n            regimenCode(code: number) {\n                return code != 11\n            }\n        }\n    }, \n    'Provide a reason for switching regimens when patient already has one': {\n        priority: 1,\n        actions : {\n            alert: async (facts: any) => {\n                const modal = await optionsActionSheet(\n                    `Are you sure you want to replace ${facts.currentRegimenStr}?`,\n                    'Specify reason for switching regimen',\n                    [ \n                        'Policy change', \n                        'Ease of administration (pill burden, swallowing)',\n                        'Drug drug interaction', \n                        'Pregnancy intention',\n                        'Side effects', \n                        'Treatment failure', \n                        'Weight Change', \n                        'Other'\n                    ],\n                    [\n                        { name: 'Cancel', slot:'start', color: 'danger' },\n                        { name: 'Continue', slot: 'end', role: 'action' }\n                    ]\n                )\n\n                if (modal.selection && modal.action != 'Cancel') {\n                    facts.reasonForSwitch = modal.selection\n                    return FlowState.CONTINUE\n                }\n                return FlowState.EXIT\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.ON_VALUE,\n        conditions: {\n            regimenCode(code: string, { currentRegimenCode }: any){\n                return currentRegimenCode != -1 && code != currentRegimenCode\n            }\n        }\n    },\n    \"Provide 14 day starter pack for LPV regimens for children under 3 years old\": {\n        priority: 3,\n        actions: {\n            alert: async (facts: any) => {\n                const action = await infoActionSheet(\n                    'Starter pack needed for 14 days',\n                    `${ facts.treatmentInitiationState}`, \n                    `${ facts.regimenName }`,\n                    [\n                        { name: 'Cancel', slot: 'start', color: 'danger'},\n                        { name: 'Prescribe starter pack', slot: 'end' }\n                    ],\n                    'his-info-color'\n                )\n\n                if (action === 'Prescribe starter pack') {\n                    facts.starterPackNeeded = true\n                    return FlowState.CONTINUE\n                }\n                return FlowState.EXIT\n            },\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            age(age: number) {\n                return age < 3\n            },\n            regimenCode(code: number) {\n                return code === 11\n            },\n            treatmentInitiationState(state: string) {\n                return ['Initiation', 'Re-initiation'].includes(state)\n            }\n        }\n    },\n    \"Provide 14 day starter pack for NVP based regimens on newly initiated/re-initiation patients\": {\n        priority: 3,\n        actions: {\n            alert: async (facts: any) => {\n                const action = await infoActionSheet(\n                    'Starter pack needed for 14 days',\n                    `${ facts.treatmentInitiationState}`, \n                    `${ facts.regimenName }`,\n                    [\n                        { name: 'Cancel', slot: 'start', color: 'danger'},\n                        { name: 'Prescribe starter pack', slot: 'end' }\n                    ],\n                    'his-info-color'\n                )\n\n                if (action === 'Prescribe starter pack') {\n                    facts.starterPackNeeded = true\n                    return FlowState.CONTINUE\n                }\n                return FlowState.EXIT\n            },\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            regimenCode(code: number) {\n                return [0, 2, 6].includes(code)\n            },\n            treatmentInitiationState(state: string) {\n                return ['Initiation', 'Re-initiation'].includes(state)\n            }\n        }\n    },\n    \"Ask to reuse hanging pills if any\": {\n        priority: 5,\n        actions: {\n            alert: async (facts: any) => {\n                const action  = await infoActionSheet(\n                    'Hanging pills recommendation',\n                    'Add hanging pills?', '',\n                    [\n                        { name: 'No', slot: 'start', color: 'warning'},\n                        { name: 'Yes', slot: 'end'}\n                    ],\n                    'his-info-color'\n                )\n                if (action === 'Yes') {\n                    facts.hangingPillsStatus = 'Optimize - including hanging pills'\n                } else {\n                    facts.hangingPillsStatus = 'Exact - excluding hanging pills'\n                }\n                return FlowState.CONTINUE\n            }\n        },\n        target: Target.INTERVAL_SELECTION,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n           drugs(d: Array<string>, { hangingPills }: any){\n                const hanging = d.map(drug => hangingPills.includes(drug))\n                return hanging.some(Boolean)\n           }\n        }\n    },\n    \"Provide warning of use of DTG regimen to women of reproductive age\" : {\n        priority: 2,\n        actions: {\n            alert: async ({regimenName}: any) => {\n                const action = await infoActionSheet(\n                    `Use of DTG or EFV in women of reproductive age`,\n                    regimenName,\n                    [\n                        'There is currently <u>no confirmation</u>',\n                        'that <b>DTG</b> is safe in <u>very early pregnancy</u>',\n                        'DTG-based regimens are therefore not used as standard 1st line regimens for',\n                        '<u>girls and women</u> who may get pregnancy'\n                    ].join(' '),\n                    [\n                        { name: 'Select another regimen', slot: 'start' }, \n                        { name: 'Continue with regimen', slot: 'end', color: 'danger'}\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Select another regimen' ? FlowState.EXIT : FlowState.CONTINUE\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            regimenCode(code: number) {\n                return code >= 12\n            },\n            isChildBearing(isBearing: boolean){\n                return isBearing\n            }\n        }\n    },\n    \"Provide pallet options for LPV regimens for patient's whose weight is between 3 and 25 kgs\" : {\n        priority: 6,\n        actions: {\n            alert: async (facts: any) => {\n                const action = await infoActionSheet(\n                    'Pellets (cups) / Tabs', \n                    '',\n                    'Prescribe LPV/r in <b>Pellets (cups)</b> or <b>Tablets</b>?',\n                    [\n                        { name: 'Granules', slot: 'start' },\n                        { name: 'Pellets', slot:'end' },\n                        { name: 'Tabs', slot:'end' }\n                    ],\n                    'his-info-color'\n                )\n                facts.lpvType = action.toLowerCase()\n                return FlowState.CONTINUE\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            weight(weight: number){\n                return weight >= 3 && weight <= 25\n            },\n            regimenCode(code: number){\n                return code === 11 || code === 9\n            }\n        }\n    },\n    \"Provide 14 day interval for NVP or LVP Regimen starter pack\": {\n        priority: 1,\n        data: {\n            enabled: false\n        },\n        target: Target.INTERVAL_SELECTION,\n        targetEvent: TargetEvent.ON_BUILD,\n        conditions: {\n            prescriptionType(type: string){\n                return type === 'Regimen'\n            },\n            selectedInterval(interval: number) {\n                return interval > 14\n            },\n            starterPackNeeded(isNeeded: boolean) {\n                return isNeeded\n            },\n            regimenCode(code: number) {\n                return [0, 2, 6, 11].includes(code)\n            }\n        }\n    },\n    \"Provide intervals upto 1 month, 2nd up to 2 months, and 3rd up to 6 months for Patients receiving TPT\" : {\n        priority: 2,\n        data: {\n            enabled: false\n        },\n        target: Target.INTERVAL_SELECTION,\n        targetEvent: TargetEvent.ON_BUILD,\n        conditions: {\n            prescriptionType(type: string){\n                return type === 'Regimen'\n            },\n            medicationOrders(orders: Array<string>) {\n                return orders.map(i => `${i}`.match(/3hp/i) ? true : false).some(Boolean)\n            },\n            tptPrescriptionCount(count: number, {selectedInterval}: any){\n                return Math.round(selectedInterval / 30) > count\n            }\n        }\n    }\n}\n\nexport const DRUG_FREQUENCY_GUIDELINE: Record<string, GuideLineInterface> = {\n    'Rifapentine or isoniazid should be taken weekly': {\n        concept: 'Weekly (QW)',\n        priority: 1,\n        conditions: {\n            drug(d: string) {\n                return `${d}`.match(/Rifapentine|Isoniazid/i)\n            }\n        }\n    },\n    'Use daily frequency for any other drugs': {\n        concept: 'Daily (QOD)',\n        priority: 2,\n        conditions: {\n            drug(d: string) {\n                return !`${d}`.match(/Rifapentine|Isoniazid/i)\n            }\n        }\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { RegimenInterface } from \"@/interfaces/Regimen\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { PrescriptionService } from \"@/apps/ART/services/prescription_service\"\nimport { toastWarning, toastSuccess, alertConfirmation } from \"@/utils/Alerts\"\nimport HisDate from \"@/utils/Date\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport { isEmpty, isPlainObject } from \"lodash\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport { \n    PRESCRIPTION_GUIDELINES,\n    DRUG_FREQUENCY_GUIDELINE,\n    TargetEvent, \n    Target, \n    FlowState \n} from \"@/apps/ART/guidelines/prescription_guidelines\"\nimport { HTN_SESSION_KEY } from '../../services/htn_service'\nimport { ProgramService } from '@/services/program_service'\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport Store from \"@/composables/ApiStore\"\nimport { ConsultationService } from '../../services/consultation_service'\n\nconst MEDICATION_STYLE = { style : { fontSize:'1.3rem !important', borderBottom: 'solid 2px #ccc', color: 'black', background: 'white' }}\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        drugs: [] as Array<RegimenInterface>,\n        prescription: {} as any,\n        patientToolbar: [] as Array<Option>,\n        fieldComponent: '' as string,\n        regimenExtras: [] as Array<any>,\n        programInfo: [] as any,\n        allDrugs: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            weight: -1 as number,\n            currentDate: '' as string,\n            isChildBearing: false as boolean,\n            prescriptionType: '' as 'Custom' | 'Regimen',\n            tptStatus: {} as any,\n            tptPrescriptionCount: 0,\n            currentRegimenCode: -1 as number,\n            currentRegimenStr: '' as string,\n            drug: '' as string,\n            drugs: [] as Array<any>,\n            contraindications: {} as any,\n            hasSideEffects: false as boolean,\n            sideEffectsTable: {} as any,\n            lastSideEffectDate: '' as string,\n            regimenCode: -1 as number,\n            regimenCodeStr: '' as string,\n            regimenName: '' as string,\n            regimenDrugs: [] as any,\n            hangingPills: [] as Array<any>,\n            reasonForSwitch: '' as string,\n            starterPackNeeded: false as boolean,\n            hangingPillsStatus: '' as string,\n            treatmentInitiationState: '' as string,\n            lpvType: '' as string,\n            medicationOrders: [] as Array<any>,\n            selectedInterval: 0 as number\n        }\n    }),\n    watch: {\n        ready: {\n            async handler(ready: boolean) {\n                if (!ready) return\n                this.prescription = new PrescriptionService(this.patientID, this.providerID)\n                await this.prescription.loadMedicationOrders()\n                await this.prescription.loadFastTrackStatus()\n                if (!this.prescription.medicationOrdersAvailable() && !this.prescription.isFastTrack()) {\n                    toastWarning('Patient is not eligible for treatment Today! Please check HIV Clinic Consultation')\n                    return this.gotoPatientDashboard()\n                }\n                if ((await Store.get('ASK_HANGING_PILLS'))) {\n                    await this.prescription.loadHangingPills()\n                }\n                await this.prescription.loadRegimenExtras()\n                await this.prescription.loadTreatmentState()\n                await this.prescription.loadDrugInduced()\n                await this.prescription.loadContraindications()\n                await this.prescription.loadTptPrescriptionCount()\n\n                await this.initFacts(this.patient)\n\n                if (this.prescription.shouldPrescribeExtras()) {\n                    this.regimenExtras = this.prescription.getRegimenExtras()\n                }\n\n                const htnDrugs = this.resolveHtnDrugs()\n\n                if (!isEmpty(htnDrugs)) this.regimenExtras = [...this.regimenExtras, ...htnDrugs]\n\n                if (this.prescription.isFastTrack()) {\n                    await this.prescription.loadFastTrackMedications()\n                    this.drugs = this.prescription.getFastTrackMedications()\n                    this.fieldComponent = 'next_visit_interval'\n\n                } else if (!this.prescription.shouldPrescribeArvs() && !isEmpty(this.regimenExtras)) {\n                    this.drugs = this.regimenExtras\n                }\n                this.patientToolbar = await this.getPatientToolBar()\n                this.fields = this.getFields()\n            },\n            immediate: true\n        },\n        drugs: {\n            handler(drugs: Array<any>) {\n                this.facts.drugs = drugs.map(d => d.drug_id)\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async initFacts(patient: any) {\n            this.programInfo = await ProgramService.getProgramInformation(patient.getID())\n            this.facts.age = patient.getAge()\n            this.facts.gender = patient.getGender()\n            this.facts.weight = await patient.getRecentWeight()\n            this.facts.hangingPills = this.prescription.getHangingPills()\n            this.facts.treatmentInitiationState = this.prescription.getTreatmentState()\n            this.facts.currentRegimenStr = this.programInfo.current_regimen\n            this.facts.currentRegimenCode = this.extractRegimenCode(this.programInfo.current_regimen)\n            this.facts.medicationOrders = this.prescription.getMedicationOrders()\n            this.facts.contraindications = this.prescription.getContraindications()\n            this.facts.tptPrescriptionCount = this.prescription.getTptPrescriptionCount()\n            this.facts.lastSideEffectDate = this.prescription.getLastSideEffectDate()\n            this.facts.currentDate = PrescriptionService.getSessionDate()\n            this.facts.isChildBearing = patient.isChildBearing()\n            this.facts.tptStatus = await new ConsultationService(this.patientID, this.providerID).getTptTreatmentStatus()\n        },\n        async onSubmit(form: any, computedData: any) {\n            const encounter = await this.prescription.createEncounter()\n\n            this.prescription.setNextVisitInterval(form[Target.INTERVAL_SELECTION].value)\n\n            const payload = this.mapOrder(this.drugs)\n\n            if (!encounter) return toastWarning('Unable to create treatment encounter')\n\n            const drugOrder = await this.prescription.createDrugOrder(payload) \n\n            if(!drugOrder) return toastWarning('Unable to create drug orders!')\n\n            if (this.facts.reasonForSwitch) {\n                await this.prescription.createRegimenSwitchObs(this.facts.reasonForSwitch)\n            }\n\n            if (this.facts.hangingPillsStatus) {\n                await this.prescription.createHangingPillsObs(this.facts.hangingPillsStatus)\n            }\n\n            if (Object.keys(computedData).length) {\n                await this.prescription.saveObservationList((await this.resolveObs(computedData)))\n            }\n\n            toastSuccess('Drug order has been created')\n            Store.invalidate('PATIENT_PROGRAM')\n            this.nextTask()\n        },\n        async onEvent(target: Target, targetEvent: TargetEvent) {\n            const findings = matchToGuidelines(this.facts, PRESCRIPTION_GUIDELINES, target, targetEvent)\n            for(const index in findings) {\n                const finding = findings[index]\n\n                if (finding?.actions?.alert) {\n                    const state = await finding?.actions?.alert(this.facts)\n                    if (state === FlowState.EXIT)\n                        return false\n                }\n            }\n            return true\n        },\n        onBuildOptions(target: Target, targetEvent: TargetEvent){\n            const findings = matchToGuidelines(this.facts, PRESCRIPTION_GUIDELINES, target, targetEvent)\n            for(const index in findings) {\n                const finding = findings[index]\n\n                if (finding.data) return finding.data\n            }\n            return {}\n        },\n        async onRegimen({ label, value, other }: Option) {\n            this.facts.lpvType = ''\n            this.facts.hangingPillsStatus = ''\n            this.facts.starterPackNeeded = false\n            this.facts.regimenName = `${value} (${label})`\n            this.facts.regimenCodeStr = value.toString()\n            this.facts.regimenCode = this.extractRegimenCode(value.toString())\n            this.facts.regimenDrugs = other.regimenDrugs\n            this.facts.drugs = other.regimenDrugs.map((d: any) => d.drug_id)\n\n            const sideEffects = this.prescription.findAndGroupDrugSideEffects(this.facts.drugs)\n            this.facts.hasSideEffects = !isEmpty(sideEffects)\n            this.facts.sideEffectsTable = this.buildSideEffectsTable(sideEffects)\n        },\n        async onBeforeRegimenNext() {\n            const event = await this.onEvent(Target.ARV_REGIMENS, TargetEvent.BEFORE_NEXT)\n            let drugs = []\n\n            if (!event) return false\n\n            if (this.facts.lpvType) {\n               drugs = await this.getLpvDrugs()\n            } else if (this.facts.starterPackNeeded) {\n               drugs = await this.getStarterPackDrugs()\n               if (isEmpty(drugs)) {\n                    drugs = this.facts.regimenDrugs\n               }\n            } else {\n                drugs = this.facts.regimenDrugs\n            }\n            this.drugs = [...this.regimenExtras, ...drugs]\n            return true\n        },\n        getLpvDrugs() {\n            return this.prescription.getLvpDrugsByType(\n                this.facts.lpvType, this.facts.regimenCode\n            ) \n        },\n        resolveHtnDrugs() {\n            try {\n                const sessionData = sessionStorage.getItem(HTN_SESSION_KEY.Prescription)\n                if (typeof sessionData === 'string') {\n                    const data = JSON.parse(sessionData)\n                    if (isPlainObject(data) && data[this.patientID]) {\n                        return data[this.patientID]\n                    }\n                }\n            } catch (e) {\n                console.warn(e)\n            }\n            return []\n        },\n        getStarterPackDrugs() {\n            return this.prescription.getRegimenStarterpack(\n                this.facts.regimenCode, this.facts.weight\n            )\n        },\n        setCustomDrugs(drugs: any) {\n            this.drugs = drugs.map((drug: Option) => drug.other)\n        },\n        buildSideEffectsTable(sideEffects: any) {\n            const columns = ['Date', 'Contraindication(s)', 'Side effect(s)']\n            const rows = []\n            for(const date in sideEffects) {\n                const contraindications = this.facts.contraindications[date] || []\n                rows.push([\n                    HisDate.toStandardHisDisplayFormat(date), \n                    contraindications.join(', '),\n                    sideEffects[date].join(', ')\n                ])\n            }\n            return { columns, rows }\n        },\n        async buildRegimenOptions() {\n            const regimenCategories = await this.prescription.getPatientRegimens()\n            const options = []\n            for(const value in regimenCategories) {\n                const regimenDrugs = regimenCategories[value]\n                const label = regimenDrugs.map((r: RegimenInterface) => \n                    r.alternative_drug_name || r.concept_name).sort().join(' + ')\n\n                options.push({ \n                    label, \n                    value, \n                    other: {\n                        regimenDrugs \n                    } \n                })\n            }\n            return options\n        },\n        buildIntervalOptions() {\n            const intervals = [\n                { label: '2 weeks', value: 14 },\n                { label: '1 month', value: 28 },\n                { label: '2 months', value: 56 },\n                { label: '3 months', value: 84 },\n                { label: '4 months', value: 112 },\n                { label: '5 months', value: 140 },\n                { label: '6 months', value: 168 },\n                { label: '7 months', value: 196 },\n                { label: '8 months', value: 224 },\n                { label: '9 months', value: 252 },\n                { label: '10 months', value: 280 },\n                { label: '11 months', value: 308 },                        \n                { label: '12 months', value: 336 },\n            ]\n            return intervals.map(({label, value}: Option) => {\n                this.facts.selectedInterval = parseInt(value.toString())\n                const config = this.onBuildOptions(Target.INTERVAL_SELECTION, TargetEvent.ON_BUILD)\n                return {\n                    label,\n                    value,\n                    other: {\n                        ...config,\n                        ...this.getDrugEstimates(this.drugs, this.facts.selectedInterval)\n                    }\n                }\n            })\n        },\n        getDrugFrequency(drugName: string){\n            this.facts.drug = drugName\n            const findings = matchToGuidelines(this.facts, DRUG_FREQUENCY_GUIDELINE)\n\n            if (!isEmpty(findings)) {\n                return findings[0].concept\n            }\n        },\n        extractRegimenCode(regimen: string): number {\n          try {\n               if (regimen.match(/n\\/a/i)) return -1\n\n               return parseInt(regimen.substring(0, regimen.length))\n           } catch (e) {\n               console.warn(e)\n               return -1\n           }\n        },\n        getDrugEstimates(regimens: any, interval: number) {\n            this.prescription.setNextVisitInterval(interval)\n            const nextAppointment = this.prescription.calculateDateFromInterval()\n            const drugPacks = regimens.map((regimen: RegimenInterface) => {\n                const packSize = this.prescription.getDrugPackSize(regimen)\n                const pillsPerDay = this.prescription.calculatePillsPerDay(regimen.am, regimen.noon, regimen.pm)\n                const estimatedPackSize = this.prescription.estimatePackSize(pillsPerDay, packSize)     \n                return {\n                    label: regimen.alternative_drug_name || regimen.drug_name,\n                    value: estimatedPackSize\n                } \n            })\n            return {\n                label: 'Medication run-out date:',\n                value: HisDate.toStandardHisDisplayFormat(nextAppointment),\n                other: {\n                    label: \"Estimated packs/tins:\",\n                    value: drugPacks\n                }\n            }\n        },\n        mapOrder(regimens: Array<RegimenInterface>) {\n            return regimens.map((regimen: any) => {\n                return this.prescription.toOrderObj(\n                    regimen.drug_id, \n                    regimen.alternative_drug_name || regimen.drug_name,\n                    regimen.units, \n                    regimen.am, \n                    regimen.pm,\n                    regimen.frequency || this.getDrugFrequency(regimen.drug_name)\n                )\n            })\n        },\n        async getPatientToolBar() {\n            const reasonForSwitch = await this.prescription.getReasonForRegimenSwitch()\n            return [\n                { label: 'Age', value: `${this.patient.getAge()} Year(s)` },\n                { label: 'Gender', value: this.patient.getGender() },\n                { label: 'Current Regimen', value: this.programInfo.current_regimen },\n                { label: 'Current weight', value: `${this.facts.weight} kg(s)` || 'Unknown' },\n                { label: 'Reason for change', value: reasonForSwitch }\n            ]\n        },\n        getFields(): Array<Field> {\n            return [\n                {\n                    id: Target.ARV_REGIMENS,\n                    helpText: 'ARV Regimen(s)',\n                    type: FieldType.TT_ART_REGIMEN_SELECTION,\n                    condition: () => this.prescription.shouldPrescribeArvs(),\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => this.buildRegimenOptions(),\n                    onload: () => this.facts.prescriptionType = 'Regimen',\n                    onValue: (regimen: Option) => {\n                        this.onRegimen(regimen)\n                        return this.onEvent(Target.ARV_REGIMENS, TargetEvent.ON_VALUE)\n                    },\n                    beforeNext: () => this.onBeforeRegimenNext(),\n                    config: {\n                        toolbarInfo: this.patientToolbar,\n                        footerBtns: [\n                            {\n                                name: 'Custom Regimen',\n                                slot: 'end',\n                                onClick: () => {\n                                    this.fieldComponent = 'custom_regimen'\n                                }\n                            }\n                        ]\n                    }\n                },\n                {\n                    id: 'custom_regimen',\n                    helpText: 'Custom prescription',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    condition: () => this.facts.prescriptionType === 'Custom',\n                    onload: () => this.facts.prescriptionType = 'Custom',\n                    validation: (val: Option) => Validation.required(val),\n                    beforeNext: async (options: Option[]) => {\n                        const selected = options.map(o => o.other.concept_id)\n                        const areRequiredDrugsSelected = this.regimenExtras.map(v => v.concept_id)\n                            .every(conceptID => selected.includes(conceptID))\n                        if (!areRequiredDrugsSelected) {\n                            return (await alertConfirmation(`One or more required drugs in \"${this.regimenExtras.map((d: any) => d.drug_name)}\" is missing from your selection, do you want to proceed?`))\n                        }\n                        return true\n                    },\n                    options: async () => {\n                        if (isEmpty(this.allDrugs)) {\n                            this.allDrugs = await this.prescription.getCustomIngridients()\n                        }\n                        return this.allDrugs.map((drug: any) => {\n                            const option: Option = {\n                                label: drug.name,\n                                value: drug.drug_id,\n                                other: { ...drug }\n                            }\n                            if (this.facts.tptStatus.tpt != null && /INH|3HP|RIF|Isoniazid/i.test(drug.name)) {\n                                if (this.facts.tptStatus.tb_treatment) {\n                                    return {\n                                        ...option,\n                                        disabled: true,\n                                        description: {\n                                            color: 'danger',\n                                            show: 'always',\n                                            text: 'Client on TB Treatment'\n                                        }\n                                    }\n                                }\n                                if (this.facts.tptStatus.completed) {\n                                    return {\n                                        ...option,\n                                        disabled: true,\n                                        description: {\n                                            color: 'danger',\n                                            show: 'always',\n                                            text: 'Client completed ' + this.facts.tptStatus.tpt\n                                        }\n                                    }\n                                }\n                                if (/IPT/i.test(this.facts.tptStatus.tpt) && /3HP|RIF/i.test(drug.name)) {\n                                    return {\n                                        ...option,\n                                        disabled: true,\n                                        description: {\n                                            color: \"danger\",\n                                            show: \"always\",\n                                            text: \"Client is on IPT\"\n                                        }\n                                    }\n                                }\n                            }\n                            return option\n                        })\n                    },\n                    config: {\n                        showKeyboard: true,\n                        hiddenFooterBtns: [ 'Back' ],\n                        footerBtns: [\n                            {\n                                name: 'Standard Regimen',\n                                size: 'large',\n                                slot: 'end',\n                                color: 'primary',\n                                visible: false,\n                                onClick: () => {\n                                    this.fieldComponent = 'arv_regimens'\n                                }\n                            }\n                        ]\n                    }\n                },\n                {\n                    id: 'custom_dosage',\n                    helpText: 'Custom dose',\n                    type: FieldType.TT_DOSAGE_INPUT,\n                    condition: (f: any) => !isEmpty(f.custom_regimen),\n                    validation: (val: Array<Option>) => {\n                        if (Validation.required(val)) return ['Drugs are not available']\n\n                        const empty = val.map(({ other }: Option) => other.am <= 0 && other.pm <= 0)\n                        return empty.some(Boolean) ? ['Missing dosage configuration on some drugs'] : null\n                    },\n                    unload: (data: any) => this.setCustomDrugs(data),\n                    summaryMapValue: ({other}: any) => ({\n                        label: 'Dosages', \n                        value: this.prescription.getInstructions(\n                            other.drug_name, other.am, other.pm, other.units\n                        ) \n                    }),\n                    options: (fdata: any) => {\n                        return fdata.custom_regimen.map((regimen: Option) => ({\n                            label: regimen.label,\n                            value: regimen.value,\n                            other: {\n                                'drug_id': regimen.other.drug_id,\n                                'drug_name': regimen.label,\n                                'barcodes': regimen.other.barcodes,\n                                'units': regimen.other.units,\n                                'am': 0,\n                                'noon': 0,\n                                'pm': 0,\n                                'frequency': this.getDrugFrequency(regimen.label)\n                            }\n                        }))\n                    }\n                },\n                {\n                    id: 'selected_meds',\n                    helpText: 'Selected medication',\n                    type: FieldType.TT_DATA_TABLE,\n                    config: {\n                        toolbarInfo: this.patientToolbar,\n                        hiddenFooterBtns: [ 'Clear' ],\n                        dataTableConfig: {\n                            showIndex: false\n                        },\n                        viewPortStyle: {\n                            height: '76vh'\n                        },\n                        columns: () => [\n                            [\n                                table.thTxt('Drug name', MEDICATION_STYLE),\n                                table.thTxt('Units', MEDICATION_STYLE),\n                                table.thTxt('AM', MEDICATION_STYLE),\n                                table.thTxt('Noon',  MEDICATION_STYLE),\n                                table.thTxt('PM', MEDICATION_STYLE),\n                                table.thTxt('Frequency', MEDICATION_STYLE)\n                            ]\n                        ],\n                        rows: () => this.drugs.map((d: any) => {\n                            const conf = {\n                                style: {\n                                    'height': '6vh'\n                                },\n                                cssClass:  (() => {\n                                    if (d.drug_name.match(/cotrimoxazole/i)) {\n                                        return 'adult-regimen-formulation'\n                                    }\n                                    switch(d.regimen_category) {\n                                        case 'A':\n                                            return 'adult-regimen-formulation'\n                                        case 'P':\n                                            return 'peads-regimen-formulation'\n                                    }\n                                })()\n                            }\n                            return [\n                                table.td(d.alternative_drug_name || d.drug_name, conf),\n                                table.td(d.units, conf),\n                                table.td(d.am, conf),\n                                table.td(d.noon, conf),\n                                table.td(d.pm, conf),\n                                table.td(d.frequency || this.getDrugFrequency(d.drug_name), conf)\n                            ]         \n                        })\n                    }\n                },\n                {\n                    id: Target.INTERVAL_SELECTION,\n                    helpText: 'Interval to next visit',\n                    type: FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => this.buildIntervalOptions(),\n                    onValue: () => this.onEvent(Target.INTERVAL_SELECTION, TargetEvent.ON_VALUE),\n                    beforeNext: () => this.onEvent(Target.INTERVAL_SELECTION, TargetEvent.BEFORE_NEXT), \n                    config: {\n                        showRegimenCardTitle: false\n                    }\n                },\n                {\n                    id: \"reason_for_longer_duration\",\n                    helpText: \"Specify reason for prescribing medication over 6 months\",\n                    type: FieldType.TT_NOTE,\n                    condition: (f: any) => f[Target.INTERVAL_SELECTION].value > 168,\n                    validation: (val: Option) => Validation.required(val),\n                    computedValue: (val: Option) => {\n                        return {\n                            obs: this.prescription.buildValueText(\n                                \"Why prescribe medication for more than 6 months?\",\n                                `${val.value}`\n                            )\n                        }\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./Prescription.vue?vue&type=template&id=4c19635e&ts=true\"\nimport script from \"./Prescription.vue?vue&type=script&lang=ts\"\nexport * from \"./Prescription.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/anthony/Documents/source/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: (facts: FactsInterface) => any;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: ConditionsInteface;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\nexport type FactsInterface = Record<string, any>\nexport type ConditionResolver = (value: any, facts: FactsInterface) => boolean | RegExpMatchArray | null\nexport type ConditionsInteface = Record<string, ConditionResolver>\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: FactsInterface, conditions: ConditionsInteface): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: FactsInterface, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","/**\n * Map all formElements/components defined in \"@/components/FormElements\" \n * in the Enum below by their file name.\n * \n * Next step is to add FieldType entry in COMPONENT_REFS in the \n * Array below the FieldType Enum\n */\nexport enum FieldType {\n    TT_ASYNC_MULTI_SELECT = 'AsyncMultiSelect',\n    TT_LINKAGE_CODE = 'LinkageCodeInput',\n    TT_MULTI_SELECT_GRID= 'HisMultiSelectGrid',\n    TT_AGE_INPUT='HisAgeInput',\n    TT_GROUP_SELECTOR = 'HisGroupSelector',\n    TT_DATA_TABLE = 'HisDataTable',\n    TT_GRID_SELECTOR = 'HisGridSelector',\n    TT_NOTE = 'HisNote',\n    TT_BARCODE = 'HisBarcodeInput',\n    TT_MONTHLY_DAYS=\"HisMonthlyDays\",\n    TT_TEXT=\"HisTextInput\",\n    TT_NUMBER = \"HisNumberInput\",\n    TT_DATETIME=\"datetime\",\n    TT_SELECT=\"HisSelect\",\n    TT_MULTIPLE_SELECT=\"HisMultipleSelect\",\n    TT_ART_REGIMEN_SELECTION=\"HisArtRegimenSelection\",\n    TT_NEXT_VISIT_INTERVAL_SELECTION=\"HisNextVisitInterval\",\n    TT_TABLE_VIEWER=\"HisTableViewer\",\n    TT_DOSAGE_INPUT=\"HisDosageInput\",\n    TT_YES_NO=\"YesNoSelect\",\n    TT_MULTIPLE_YES_NO=\"MultiYesNoSelect\",\n    TT_SUMMARY=\"HisSummary\",\n    TT_WEIGHT_CHART = \"HisWeightChart\",\n    TT_VITALS_ENTRY=\"HisVitalsEntry\",\n    TT_ADHERENCE_INPUT = \"HisAdherenceInput\",\n    TT_ART_STAGING_SUMMARY = \"ArtStagingSummary\",\n    TT_LAB_ORDERS = \"HisLabOrders\",\n    TT_APPOINTMENTS_ENTRY = \"HisAppointments\",\n    TT_DISPENSATION_INPUT = 'DrugDispensationSelection',\n    TT_PROGRAM_SELECTION = 'ProgramSelection',\n    TT_DATE_PICKER = 'HisDatePicker',\n    TT_PERSON_RESULT_VIEW = 'PersonSearchView',\n    TT_RELATION_SELECTION = 'RelationsSelection',\n    TT_FILING_NUMBER_VIEW = 'FilingNumberView',\n    TT_CARD_SELECTOR = 'HisCardSelector',\n    TT_PERSON_MATCH_VIEW = 'PersonMatchView',\n    TT_FULL_DATE = 'HisDateInput',\n    TT_BATCH_ENTRY = 'HisBatchEntry',\n    TT_BATCH_VERIFICATION = 'HisBatchVerification',\n    TT_BATCH_MOVEMENT = 'HisBatchMovement',\n    TT_COMPLAINTS_PICKER = 'HisComplaintsPicker',\n    TT_RADIOLOGY_PICKER = 'HisRadiologyPicker',\n    TT_IP_ADDRESS = 'HisIPAddress',\n    TT_TEXT_BANNER = 'HisTextBanner',\n    TT_DRUG_DISPENSER = 'GeneralDrugDispenser',\n    TT_CLINIC_HOLIDAY_PICKER = 'HisClinicHolidayPicker',\n    TT_ANC_PREGNANCY_INPUT_CONFIG = 'AncPregnancyInfoConfig',\n    TT_ANC_PREGNANCY_DETAILS_INPUT = 'AncPregnancyDetailsInput',\n    TT_ANC_LMP_DATE_INPUT = 'AncLmpDateInput',\n    TT_ANC_DRUGSET_INPUT = 'AncDrugSetInput',\n    TT_DRUG_TRANSFER_IN = 'DrugTransferInput',\n    TT_PRESCRIPTION_INPUT = 'HisPrescriptionInput',\n    TT_INFINITE_SCROLL_MULTIPLE_SELECT=\"HisInfiniteScrollMultipleSelect\"\n}\n\n// Register FieldTypes here that will be registered at runtime\nexport const COMPONENT_REFS: FieldType[] = [\n    FieldType.TT_ASYNC_MULTI_SELECT,\n    FieldType.TT_LINKAGE_CODE,\n    FieldType.TT_MULTI_SELECT_GRID,\n    FieldType.TT_AGE_INPUT,\n    FieldType.TT_BARCODE,\n    FieldType.TT_NOTE,\n    FieldType.TT_SELECT,\n    FieldType.TT_CARD_SELECTOR,\n    FieldType.TT_MULTIPLE_SELECT,\n    FieldType.TT_TEXT,\n    FieldType.TT_NUMBER,\n    FieldType.TT_MONTHLY_DAYS,\n    FieldType.TT_ART_REGIMEN_SELECTION,\n    FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n    FieldType.TT_TABLE_VIEWER,\n    FieldType.TT_DOSAGE_INPUT,\n    FieldType.TT_YES_NO,\n    FieldType.TT_MULTIPLE_YES_NO,\n    FieldType.TT_WEIGHT_CHART,\n    FieldType.TT_VITALS_ENTRY,\n    FieldType.TT_APPOINTMENTS_ENTRY,\n    FieldType.TT_COMPLAINTS_PICKER,\n    FieldType.TT_CLINIC_HOLIDAY_PICKER,\n    FieldType.TT_SUMMARY,\n    FieldType.TT_ART_STAGING_SUMMARY,\n    FieldType.TT_ADHERENCE_INPUT,\n    FieldType.TT_LAB_ORDERS,\n    FieldType.TT_PERSON_RESULT_VIEW,\n    FieldType.TT_PROGRAM_SELECTION,\n    FieldType.TT_DATE_PICKER,\n    FieldType.TT_RELATION_SELECTION,\n    FieldType.TT_FILING_NUMBER_VIEW,\n    FieldType.TT_PERSON_MATCH_VIEW,\n    FieldType.TT_FULL_DATE,\n    FieldType.TT_BATCH_ENTRY,\n    FieldType.TT_BATCH_VERIFICATION,\n    FieldType.TT_BATCH_MOVEMENT,\n    FieldType.TT_IP_ADDRESS,\n    FieldType.TT_TEXT_BANNER,\n    FieldType.TT_DISPENSATION_INPUT,\n    FieldType.TT_DATA_TABLE,\n    FieldType.TT_GROUP_SELECTOR,\n    FieldType.TT_ANC_PREGNANCY_INPUT_CONFIG,\n    FieldType.TT_ANC_PREGNANCY_DETAILS_INPUT,\n    FieldType.TT_ANC_LMP_DATE_INPUT,\n    FieldType.TT_DRUG_TRANSFER_IN,\n    FieldType.TT_GRID_SELECTOR,\n    FieldType.TT_ANC_DRUGSET_INPUT,\n    FieldType.TT_RADIOLOGY_PICKER,\n    FieldType.TT_PRESCRIPTION_INPUT,\n    FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n    FieldType.TT_DRUG_DISPENSER\n]\n","import { DrugInterface } from \"@/interfaces/Drug\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { Observation } from \"@/interfaces/observation\";\nimport HisDate from \"@/utils/Date\"\nimport { RegimenService } from \"@/services/regimen_service\";\nimport { isEmpty } from \"lodash\"\nimport { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { toDate } from \"@/utils/Strs\";\n\nexport enum AdverseEffectsCategories {\n    CONTRAINDICATION = \"contraindication\",\n    SIDE_EFFECT = \"side_effect\"\n}\n\nexport class PrescriptionService extends AppEncounterService {\n    nextVisitInterval: number;\n    fastTrack: boolean;\n    regimenExtras: Array<Record<string, any>>;\n    hangingPills: Array<Record<string, any>>;\n    fastTrackMedications: Array<Record<string, any>>;\n    medicationOrders: Array<number>;\n    treatmentState: string;\n    contraindications: Record<string, any>;\n    sideEffects: Record<string, any>;\n    tptPrescriptionCount: number;\n    lastSideEffectDate: string;\n\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 25, providerID) //TODO: Use encounter type reference name\n        this.nextVisitInterval = 0\n        this.fastTrack = false\n        this.regimenExtras = []\n        this.fastTrackMedications = []\n        this.hangingPills = []\n        this.medicationOrders = []\n        this.treatmentState = ''\n        this.contraindications = {}\n        this.sideEffects = {}\n        this.tptPrescriptionCount = 0\n        this.lastSideEffectDate = ''\n    }\n\n    setNextVisitInterval(nextVisitInterval: number) {\n        this.nextVisitInterval = nextVisitInterval\n    }\n\n    getHangingPills() {\n        return this.hangingPills\n    }\n\n    getMedicationOrders() {\n        return this.medicationOrders.map((i: number) => {\n            return AppEncounterService.getCachedConceptName(i)\n        })\n    }\n\n    getTptPrescriptionCount() {\n        return this.tptPrescriptionCount\n    }\n\n    getLastSideEffectDate() {\n        return this.lastSideEffectDate\n    }\n\n    getContraindications() { return this.contraindications }\n\n    getSideEffects() { return this.sideEffects }\n\n    getRegimenExtras() { return this.regimenExtras }\n\n    getPatientRegimens() { return RegimenService.getRegimens(this.patientID) }\n\n    getARVs() {\n        return RegimenService.getJson('arv_drugs')\n    }\n\n    getCustomIngridients() { return RegimenService.getCustomIngridients() }\n\n    getFastTrackMedications() { return this.fastTrackMedications }\n\n    getTreatmentState() { return this.treatmentState }\n\n    isFastTrack() { return this.fastTrack }\n\n    medicationOrdersAvailable() { return !isEmpty(this.medicationOrders) }\n\n    shouldPrescribeArvs() { \n        const arvs = AppEncounterService.getCachedConceptID(\"Antiretroviral drugs\")\n        return this.medicationOrders.includes(arvs)\n    }\n\n    shouldPrescribeExtras() {\n        const extras = AppEncounterService.getConceptsByCategory('art_extra_medication_order')\n        const extrasAvailable = extras.map((i: any) => this.medicationOrders.includes(i.concept_id))\n        return extrasAvailable.some(Boolean)\n    }\n\n    getRegimenStarterpack(regimenCode: number, patientWeight: number) {\n        const params = { weight: patientWeight, regimen: regimenCode }\n\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimen_starter_packs`,\n            params\n        )\n    }\n\n    async getLvpDrugsByType(type: string, regimen: number) {\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimens/${regimen}`,\n            {\n                'patient_id': this.patientID,\n                'lpv_drug_type': type\n            }\n        )\n    }\n\n    async loadContraindications() {\n        const contraindication = await AppEncounterService.getConceptID('Contraindications')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': contraindication, 'person_id': this.patientID \n        })\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.contraindications[date]) this.contraindications[date] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.contraindications[date].push(concept)\n        })\n    }\n\n    async loadDrugInduced() {\n        const drugInduced = await AppEncounterService.getConceptID('Drug induced')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': drugInduced, 'person_id': this.patientID \n        })\n\n        if (!obs) return\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.lastSideEffectDate) this.lastSideEffectDate = date\n\n            if (!o.value_drug || !o.value_coded) return\n\n            if (!this.sideEffects[date]) this.sideEffects[date] = {}\n\n            if (!this.sideEffects[date][o.value_drug]) this.sideEffects[date][o.value_drug] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.sideEffects[date][o.value_drug].push(concept)\n        })\n    }\n\n    async loadTptPrescriptionCount() {\n        const res = await AppEncounterService.getJson(\n            `tpt_prescription_count`, {\n                'patient_id': this.patientID,\n                'date': this.date\n            }\n        )\n\n        if (res) {\n            const count = res.count + 1\n            this.tptPrescriptionCount = count > 3 ? 3 : count\n        } \n    }\n\n    async loadFastTrackStatus() {\n        const isFastTrack = await AppEncounterService.getFirstValueCoded(this.patientID, 'Fast track')\n        const yes = await AppEncounterService.getConceptID('yes')\n\n        if (isFastTrack) this.fastTrack = isFastTrack === yes\n    }\n    \n    async loadRegimenExtras(date=this.date) {\n        const meds = await RegimenService.getJson(\n            `programs/${RegimenService.getProgramID()}/patients/${this.patientID}/dosages`,\n            {date}\n        )\n        if (meds) this.regimenExtras = Object.values(meds)\n    }\n\n    async loadMedicationOrders() {\n        const medicationOrders = await AppEncounterService.getConceptID(\"Medication orders\")\n        const orders = await AppEncounterService.getObs({\n            'concept_id': medicationOrders,\n            'date': this.date,\n            'person_id': this.patientID,\n            'page_size': 5\n        })\n        this.medicationOrders = orders.map((i: Observation) => i.value_coded)\n    }\n\n    async loadHangingPills() {\n        const pills = (await AppEncounterService.getAll(this.patientID, 'Pills brought'))||[]\n        this.hangingPills = pills.filter((o: any) => {\n            if (o.value_numeric >= 1) {\n                // Condition for detecting pills brought during transfer in.. This is a bit hack-ish\n                if (o.value_drug && toDate(o.obs_datetime) === toDate(this.date)) {\n                    return true\n                }\n                // This is for normal workflow adherence pills\n                return o.order||false\n            }\n            return false\n        }).map((o: any) => o?.order?.drug_order?.drug_inventory_id||o.value_drug)        \n    }\n\n    async loadFastTrackMedications() {\n        const drugs = await DrugOrderService.getLastDrugsReceived(this.patientID)\n        const withDosages = drugs.map(async(data: any) => {\n            const { drug } = data\n            const dosage = await DrugOrderService.getDrugDosages(this.patientID, drug.drug_id)\n            return {\n                'drug_id': drug.drug_id,\n                'drug_name': drug.name,\n                'units': drug.units,\n                'am': dosage.am,\n                'noon': dosage.noon,\n                'pm': dosage.pm,\n                'frequency': data.frequency\n            }\n        })\n        this.fastTrackMedications = await Promise.all(withDosages)\n    }\n\n    async loadTreatmentState() {\n        const params = { date: this.date }\n\n        const req = await AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/patients/${this.patientID}/status`,\n            params\n        )\n\n        if (req) this.treatmentState = req['status']\n    }\n\n    findAndGroupDrugSideEffects(drugs: Array<number>) {\n        const allSideEffects: any = {}\n\n        for (const date in this.sideEffects) {\n            const drugInduced = this.sideEffects[date]\n\n            for(const drug in drugInduced) {\n                if (!drugs.includes(parseInt(drug))) continue\n\n                if (!allSideEffects[date]) allSideEffects[date] = []\n\n                allSideEffects[date] = [\n                    ...allSideEffects[date], ...drugInduced[drug]\n                ]\n            }\n        }\n        return allSideEffects\n    }\n\n    calculatePillsPerDay(am: number, noon: number, pm: number) {\n        return parseFloat(am.toString()) + noon + pm\n    }\n\n    estimatePackSize(pillsPerDay: number, packSize=0) {\n        const packs = (pillsPerDay * this.nextVisitInterval) / (packSize || 1)\n        \n        let roundedPacks = Math.round(packs)\n\n        if (roundedPacks <= 0) roundedPacks += 1\n\n        return roundedPacks\n    }\n\n    calculateDosage(morningTabs: number, eveningTabs: number): number {\n        let dose = 0\n        if (eveningTabs === 0) dose = morningTabs\n\n        if (morningTabs == 0) dose = eveningTabs\n\n        if (morningTabs > 0 && eveningTabs  > 0) {\n            dose = (morningTabs + eveningTabs) / 2\n        }\n        return dose\n    }\n    \n    calculateEquivalentDosage(morningTabs: number, eveningTabs: number): number {\n        return morningTabs + eveningTabs\n    }\n\n    calculateDateFromInterval() {\n        const dateObj = new Date(this.date)\n        dateObj.setDate(dateObj.getDate() + this.nextVisitInterval)\n        return HisDate.toStandardHisFormat(dateObj)\n    }\n\n    getDrugPackSize(drug: any) {\n        if (drug.pack_size) return drug.pack_size\n        try{\n            return drug.barcodes[0].tabs\n        }catch(e) {\n            return 30\n        }\n    }\n\n    getInstructions(drugName: string, morningTabs: number, eveningTabs: number, units: string): string {\n        return `${drugName} :- Morning: ${morningTabs} ${units}, Evening: ${eveningTabs} ${units}`\n    }\n\n    toOrderObj(id: number, name: string, units: string, am=0, pm=0, frequency=''): DrugInterface {\n        return {\n            'drug_inventory_id': id,\n            'equivalent_daily_dose': this.calculateEquivalentDosage(am, pm),\n            'start_date': this.date,\n            'auto_expire_date': this.calculateDateFromInterval(), \n            'units': units,\n            'instructions': this.getInstructions(name, am, pm, units),\n            'dose': this.calculateDosage(am, pm),\n            'frequency': frequency\n        }\n    }\n\n    async getReasonForRegimenSwitch() {\n        const reason = await AppEncounterService.getFirstValueText(this.patientID, 'Reason for ARV switch')\n        return reason ? reason : 'N/A'\n    }\n\n    async createDrugOrder(drugOrders: Array<DrugInterface>) {\n        return DrugOrderService.create({\n            'encounter_id': this.encounterID,\n            'drug_orders': drugOrders\n        })\n    }\n\n    async createHangingPillsObs(response: string) {\n        return this.saveValueTextObs('appointment type', response)\n    }\n\n    async createRegimenSwitchObs(reasonForSwitch: string): Promise<Observation> {\n        return this.saveValueTextObs('Reason for ARV switch', reasonForSwitch)\n    }\n}\n","var map = {\n\t\"./AncDrugSetInput.vue\": [\n\t\t\"c99f\",\n\t\t\"TouchFormElement0\"\n\t],\n\t\"./AncLmpDateInput.vue\": [\n\t\t\"101a\",\n\t\t\"TouchFormElement1\"\n\t],\n\t\"./AncPregnancyDetailsInput.vue\": [\n\t\t\"b043\",\n\t\t\"TouchFormElement2\"\n\t],\n\t\"./AncPregnancyInfoConfig.vue\": [\n\t\t\"262e\",\n\t\t\"TouchFormElement3\"\n\t],\n\t\"./ArtStagingSummary.vue\": [\n\t\t\"43db\",\n\t\t\"TouchFormElement4\"\n\t],\n\t\"./AsyncMultiSelect.vue\": [\n\t\t\"5de2\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement5\"\n\t],\n\t\"./BaseTextInput.vue\": [\n\t\t\"36ad\",\n\t\t\"TouchFormElement6\"\n\t],\n\t\"./DrugDispensationSelection.vue\": [\n\t\t\"05d5\",\n\t\t\"TouchFormElement7\"\n\t],\n\t\"./DrugTransferInput.vue\": [\n\t\t\"de42\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement8\"\n\t],\n\t\"./FieldMixin.vue\": [\n\t\t\"51c8\",\n\t\t\"TouchFormElement9\"\n\t],\n\t\"./FilingNumberView.vue\": [\n\t\t\"c650\",\n\t\t\"TouchFormElement10\"\n\t],\n\t\"./GeneralDrugDispenser.vue\": [\n\t\t\"7737\",\n\t\t\"TouchFormElement11\"\n\t],\n\t\"./HisAdherenceInput.vue\": [\n\t\t\"f2c3\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement12\"\n\t],\n\t\"./HisAgeInput.vue\": [\n\t\t\"c05f\",\n\t\t\"TouchFormElement13\"\n\t],\n\t\"./HisAppointments.vue\": [\n\t\t\"b2eb\",\n\t\t\"chunk-228c9c72\",\n\t\t\"TouchFormElement14\"\n\t],\n\t\"./HisArtRegimenSelection.vue\": [\n\t\t\"47b9\",\n\t\t\"TouchFormElement15\"\n\t],\n\t\"./HisBarcodeInput.vue\": [\n\t\t\"dd65\",\n\t\t\"TouchFormElement16\"\n\t],\n\t\"./HisBatchEntry.vue\": [\n\t\t\"f2ab\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement17\"\n\t],\n\t\"./HisBatchMovement.vue\": [\n\t\t\"5148\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement18\"\n\t],\n\t\"./HisBatchVerification.vue\": [\n\t\t\"7b0f\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement19\"\n\t],\n\t\"./HisCardSelector.vue\": [\n\t\t\"0734\",\n\t\t\"TouchFormElement20\"\n\t],\n\t\"./HisClinicHolidayPicker.vue\": [\n\t\t\"4030\",\n\t\t\"chunk-228c9c72\",\n\t\t\"TouchFormElement21\"\n\t],\n\t\"./HisComplaintsPicker.vue\": [\n\t\t\"82d1\",\n\t\t\"TouchFormElement22\"\n\t],\n\t\"./HisDataTable.vue\": [\n\t\t\"a6ba\",\n\t\t\"TouchFormElement23\"\n\t],\n\t\"./HisDateInput.vue\": [\n\t\t\"374c\",\n\t\t\"TouchFormElement24\"\n\t],\n\t\"./HisDatePicker.vue\": [\n\t\t\"9b30\",\n\t\t\"chunk-228c9c72\",\n\t\t\"TouchFormElement25\"\n\t],\n\t\"./HisDosageInput.vue\": [\n\t\t\"b34c\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement26\"\n\t],\n\t\"./HisGridSelector.vue\": [\n\t\t\"112a\",\n\t\t\"TouchFormElement27\"\n\t],\n\t\"./HisGroupSelector.vue\": [\n\t\t\"81cf\",\n\t\t\"TouchFormElement28\"\n\t],\n\t\"./HisIPAddress.vue\": [\n\t\t\"2a82\",\n\t\t\"TouchFormElement29\"\n\t],\n\t\"./HisInfiniteScrollMultipleSelect.vue\": [\n\t\t\"52a3\",\n\t\t\"TouchFormElement30\"\n\t],\n\t\"./HisLabOrders.vue\": [\n\t\t\"e614\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement31\"\n\t],\n\t\"./HisMonthlyDays.vue\": [\n\t\t\"69cf\",\n\t\t\"TouchFormElement32\"\n\t],\n\t\"./HisMultiSelectGrid.vue\": [\n\t\t\"0fa3\",\n\t\t\"TouchFormElement33\"\n\t],\n\t\"./HisMultipleSelect.vue\": [\n\t\t\"2fd5\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement34\"\n\t],\n\t\"./HisNextVisitInterval.vue\": [\n\t\t\"3126\",\n\t\t\"TouchFormElement35\"\n\t],\n\t\"./HisNote.vue\": [\n\t\t\"c927\",\n\t\t\"TouchFormElement36\"\n\t],\n\t\"./HisNumberInput.vue\": [\n\t\t\"5e75\",\n\t\t\"TouchFormElement37\"\n\t],\n\t\"./HisPrescriptionInput.vue\": [\n\t\t\"87e5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement38\"\n\t],\n\t\"./HisRadiologyPicker.vue\": [\n\t\t\"adc7\",\n\t\t\"TouchFormElement39\"\n\t],\n\t\"./HisSelect.vue\": [\n\t\t\"d11f\",\n\t\t\"TouchFormElement40\"\n\t],\n\t\"./HisSummary.vue\": [\n\t\t\"e0bd\",\n\t\t\"TouchFormElement41\"\n\t],\n\t\"./HisTableViewer.vue\": [\n\t\t\"8904\",\n\t\t\"TouchFormElement42\"\n\t],\n\t\"./HisTextBanner.vue\": [\n\t\t\"952c\",\n\t\t\"TouchFormElement43\"\n\t],\n\t\"./HisTextInput.vue\": [\n\t\t\"6ef9\",\n\t\t\"TouchFormElement44\"\n\t],\n\t\"./HisVitalsEntry.vue\": [\n\t\t\"e333\",\n\t\t\"TouchFormElement45\"\n\t],\n\t\"./HisWeightChart.vue\": [\n\t\t\"26a1\",\n\t\t\"TouchFormElement46\"\n\t],\n\t\"./LinkageCodeInput.vue\": [\n\t\t\"ac86\",\n\t\t\"TouchFormElement47\"\n\t],\n\t\"./MultiYesNoSelect.vue\": [\n\t\t\"5fd1\",\n\t\t\"TouchFormElement48\"\n\t],\n\t\"./PersonMatchView.vue\": [\n\t\t\"6591\",\n\t\t\"TouchFormElement49\"\n\t],\n\t\"./PersonSearchView.vue\": [\n\t\t\"28b2\",\n\t\t\"TouchFormElement50\"\n\t],\n\t\"./ProgramSelection.vue\": [\n\t\t\"e3b4\",\n\t\t\"TouchFormElement51\"\n\t],\n\t\"./RelationsSelection.vue\": [\n\t\t\"0e57\",\n\t\t\"TouchFormElement52\"\n\t],\n\t\"./SelectMixin.vue\": [\n\t\t\"82a9\",\n\t\t\"TouchFormElement53\"\n\t],\n\t\"./YesNoSelect.vue\": [\n\t\t\"71f2\",\n\t\t\"TouchFormElement54\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"f159\";\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}