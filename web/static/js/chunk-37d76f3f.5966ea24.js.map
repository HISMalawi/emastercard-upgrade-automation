{"version":3,"sources":["webpack:///./src/apps/ART/services/htn_service.ts","webpack:///./src/services/regimen_service.ts","webpack:///./src/services/drug_order_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/apps/ART/views/encounters/Prescription.vue?60bc","webpack:///./src/apps/ART/guidelines/prescription_guidelines.ts","webpack:///./src/apps/ART/views/encounters/Prescription.vue","webpack:///./src/apps/ART/views/encounters/Prescription.vue?b2e0","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/components/Forms/BaseFormElements.ts","webpack:///./src/apps/ART/services/prescription_service.ts","webpack:///./src/components/FormElements lazy ^\\.\\/.*\\.vue$ namespace object"],"names":["HTN_SESSION_KEY","BPManagementService","AppEncounterService","constructor","patientID","providerID","super","sbp","dbp","bpTrail","firstRecentGrade","secondRecentGrade","Object","values","sort","a","b","date","map","bp","this","getBpGrade","getSystolicBp","ObservationService","getFirstValueNumber","getDiastolicBp","query","getFirstValueCoded","getJson","drugID","pills","postJson","state","getDrugs","HCZ","drugs","drugName","amount","current","selected","isChecked","dispensed","expectedRemaining","adherence","notes","Enalapril","remaining","Amlodipine","Atenolol","RegimenService","Service","getProgramID","patientId","weight","onTbTreatment","getSessionDate","name","DrugOrderService","orders","dispensations","order","pageSize","params","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","facts","ready","watch","handler","route","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","status","_finding$actions4","program","e","console","error","toastDanger","ProgramService","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","usernameA","usernameB","p","_p$person","isEmpty","person","names","_p$person2","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","_component_his_standard_form","_resolveComponent","$event","fieldComponent","onSubmit","Target","TargetEvent","PRESCRIPTION_GUIDELINES","regimenName","target","ARV_REGIMENS","targetEvent","ON_VALUE","regimenCode","code","includes","medicationOrders","match","regimenCodeStr","sideEffectsTable","columns","rows","tableActionSheet","BEFORE_NEXT","hasSideEffects","isTrue","lastSideEffectDate","currentDate","listActionSheet","age","currentRegimenStr","reasonForSwitch","currentRegimenCode","treatmentInitiationState","starterPackNeeded","hangingPillsStatus","INTERVAL_SELECTION","hangingPills","hanging","drug","some","join","isChildBearing","isBearing","lpvType","toLowerCase","enabled","ON_BUILD","prescriptionType","selectedInterval","interval","isNeeded","tptPrescriptionCount","count","Math","round","DRUG_FREQUENCY_GUIDELINE","concept","MEDICATION_STYLE","style","fontSize","borderBottom","background","mixins","EncounterMixinVue","prescription","patientToolbar","regimenExtras","programInfo","allDrugs","gender","tptStatus","contraindications","regimenDrugs","PrescriptionService","loadMedicationOrders","loadFastTrackStatus","medicationOrdersAvailable","isFastTrack","toastWarning","loadHangingPills","loadRegimenExtras","loadTreatmentState","loadDrugInduced","loadContraindications","loadTptPrescriptionCount","initFacts","shouldPrescribeExtras","getRegimenExtras","htnDrugs","resolveHtnDrugs","loadFastTrackMedications","getFastTrackMedications","shouldPrescribeArvs","getPatientToolBar","getFields","drug_id","getProgramInformation","getID","getAge","getGender","getRecentWeight","getHangingPills","getTreatmentState","current_regimen","extractRegimenCode","getMedicationOrders","getContraindications","getTptPrescriptionCount","getLastSideEffectDate","ConsultationService","getTptTreatmentStatus","form","encounter","createEncounter","setNextVisitInterval","payload","mapOrder","drugOrder","createDrugOrder","createRegimenSwitchObs","createHangingPillsObs","toastSuccess","invalidate","onBuildOptions","sideEffects","findAndGroupDrugSideEffects","buildSideEffectsTable","event","onEvent","getLpvDrugs","getStarterPackDrugs","getLvpDrugsByType","sessionData","sessionStorage","getItem","Prescription","JSON","parse","isPlainObject","warn","getRegimenStarterpack","setCustomDrugs","regimenCategories","getPatientRegimens","r","alternative_drug_name","concept_name","buildIntervalOptions","intervals","config","getDrugEstimates","getDrugFrequency","regimen","substring","regimens","nextAppointment","calculateDateFromInterval","drugPacks","packSize","getDrugPackSize","pillsPerDay","calculatePillsPerDay","am","noon","pm","estimatedPackSize","estimatePackSize","drug_name","toOrderObj","units","frequency","getReasonForRegimenSwitch","id","helpText","FieldType","TT_ART_REGIMEN_SELECTION","validation","val","Validation","buildRegimenOptions","onload","onValue","onRegimen","beforeNext","onBeforeRegimenNext","toolbarInfo","footerBtns","onClick","TT_MULTIPLE_SELECT","o","concept_id","areRequiredDrugsSelected","v","every","conceptID","alertConfirmation","getCustomIngridients","tpt","test","tb_treatment","disabled","description","show","text","completed","showKeyboard","hiddenFooterBtns","size","visible","TT_DOSAGE_INPUT","f","custom_regimen","empty","unload","summaryMapValue","getInstructions","fdata","barcodes","TT_DATA_TABLE","dataTableConfig","showIndex","viewPortStyle","height","table","thTxt","conf","cssClass","regimen_category","td","TT_NEXT_VISIT_INTERVAL_SELECTION","showRegimenCardTitle","isCondition","ignored","undefined","prop","sortByPriority","sortByWeight","guidelines","sortBy","matches","guidelineIndex","targetValidations","title","info","COMPONENT_REFS","TT_LINKAGE_CODE","TT_MULTI_SELECT_GRID","TT_AGE_INPUT","TT_BARCODE","TT_NOTE","TT_SELECT","TT_CARD_SELECTOR","TT_TEXT","TT_NUMBER","TT_MONTHLY_DAYS","TT_TABLE_VIEWER","TT_YES_NO","TT_MULTIPLE_YES_NO","TT_WEIGHT_CHART","TT_VITALS_ENTRY","TT_APPOINTMENTS_ENTRY","TT_COMPLAINTS_PICKER","TT_CLINIC_HOLIDAY_PICKER","TT_SUMMARY","TT_ART_STAGING_SUMMARY","TT_ADHERENCE_INPUT","TT_LAB_ORDERS","TT_PERSON_RESULT_VIEW","TT_PROGRAM_SELECTION","TT_DATE_PICKER","TT_RELATION_SELECTION","TT_FILING_NUMBER_VIEW","TT_PERSON_MATCH_VIEW","TT_FULL_DATE","TT_BATCH_ENTRY","TT_BATCH_VERIFICATION","TT_BATCH_MOVEMENT","TT_IP_ADDRESS","TT_TEXT_BANNER","TT_DISPENSATION_INPUT","TT_GROUP_SELECTOR","TT_ANC_PREGNANCY_INPUT_CONFIG","TT_ANC_PREGNANCY_DETAILS_INPUT","TT_ANC_LMP_DATE_INPUT","TT_DRUG_TRANSFER_IN","TT_GRID_SELECTOR","TT_ANC_DRUGSET_INPUT","TT_RADIOLOGY_PICKER","TT_PRESCRIPTION_INPUT","TT_INFINITE_SCROLL_MULTIPLE_SELECT","TT_DRUG_DISPENSER","AdverseEffectsCategories","_defineProperty","nextVisitInterval","fastTrack","fastTrackMedications","treatmentState","getCachedConceptName","getSideEffects","getRegimens","getARVs","arvs","getCachedConceptID","extras","getConceptsByCategory","extrasAvailable","patientWeight","contraindication","getConceptID","getObs","forEach","toStandardHisFormat","obs_datetime","value_coded","drugInduced","value_drug","res","yes","meds","getAll","value_numeric","toDate","_o$order","_o$order$drug_order","drug_order","drug_inventory_id","getLastDrugsReceived","withDosages","dosage","getDrugDosages","req","allSideEffects","parseFloat","packs","roundedPacks","calculateDosage","morningTabs","eveningTabs","dose","calculateEquivalentDosage","dateObj","Date","setDate","getDate","pack_size","tabs","reason","getFirstValueText","drugOrders","create","encounterID","response","saveValueTextObs","webpackAsyncContext","__webpack_require__","resolve","Error","ids","slice","keys","module","exports"],"mappings":"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","file":"js/chunk-37d76f3f.5966ea24.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { ObservationService } from \"@/services/observation_service\"\n\nexport enum HTN_SESSION_KEY {\n  Prescription = \"htnPrescription\"\n}\n\nexport class BPManagementService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n      super(patientID, 48, providerID) //TODO: Use encounter type reference name'\n    }\n\n    static getBpGrade(sbp: number, dbp: number) {\n      if ((sbp < 140) && (dbp < 90)) {\n        return \"normal\"\n      }\n      else if ((sbp >= 140 && sbp < 160) || (dbp >= 100 && dbp < 110)) {\n        return \"grade 1\"\n      }\n      else if ((sbp >= 180 && dbp > 110) || sbp >= 180) {\n        return \"grade 3\"\n      }\n      else if ((sbp >= 160 && sbp < 180) || (dbp >= 110)) {\n        return \"grade 2\"\n      }\n      return 'N/A'\n    }\n\n    /**\n     * BP is normointensive if two most recent consecutive tests are normal\n     * @param bpTrail \n     * @returns\n    */\n    static isBpNormotensive(bpTrail: any) {\n      const [ firstRecentGrade, secondRecentGrade ] = Object.values(bpTrail)\n        .sort((a: any, b: any) => a.date < b.date ? 1 : 0)\n        .map((bp: any) => this.getBpGrade(bp.sbp, bp.dbp))\n      return firstRecentGrade === 'normal' && secondRecentGrade === 'normal'\n    }\n\n    getSystolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Systolic blood pressure')\n    }\n\n    getDiastolicBp() {\n      return ObservationService.getFirstValueNumber(this.patientID, 'Diastolic blood pressure')\n    }\n\n    async onBpDrugs() {\n      const query = await ObservationService.getFirstValueCoded(this.patientID, 'Treatment status')\n      return query ? query === 'Yes' : false\n    }\n  \n    async getBPTrail() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/bp_trail`);\n    }\n    async getCurrentDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/current_bp_drugs`);\n    }\n    async getLastDrugs() {\n      return await AppEncounterService.getJson(`/patients/${this.patientID}/last_bp_drugs_dispensation`);\n    }\n    async getAdherence(drugID: number, pills: number) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/remaining_bp_drugs`, {\n        'drug_id': drugID,\n        pills: pills\n      });\n    }\n    async enrollPatient(state: any) {\n      return await AppEncounterService.postJson(`/patients/${this.patientID}/update_or_create_htn_state`, state);\n    }\n    static htnDrugReferences() {\n      return [\n        { \n          'drug_id': 275,\n          'drug_name': \"HCZ (25mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 942,\n          'drug_name': \"Enalapril (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 943,\n          'drug_name': \"Enalapril (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 558,\n          'drug_name': \"Amlodipine (5mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 559,\n          'drug_name': \"Amlodipine (10mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 117,\n          'drug_name': \"Atenolol (50mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        },\n        {\n          'drug_id': 11,\n          'drug_name': \"Atenolol(100mg tablet)\",\n          'units': 'tab(s)',\n          'am': 0,\n          'noon': 0,\n          'pm': 1,\n          'frequency': 'Daily (QOD)'\n        }\n      ]\n    }\n    getDrugs() {\n        return {\n        HCZ: {\n          drugs: [\n            {\n              drugName: \"HCZ (25mg tablet)\",\n              drugID: 275,\n              amount: '25mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Enalapril: {\n          drugs: [\n            {\n              drugName: \"Enalapril (5mg tablet)\",\n              drugID: 942,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Enalapril (10mg tablet)\",\n              drugID: 943,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Amlodipine: {\n          drugs: [\n            {\n              drugName: \"Amlodipine (5mg tablet)\",\n              drugID: 558,\n              amount: '5mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Amlodipine (10mg tablet)\",\n              drugID: 559,\n              amount: '10mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n        Atenolol: {\n          drugs: [\n            {\n              drugName: \"Atenolol (50mg tablet)\",\n              drugID: 117,\n              amount: '50mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n            {\n              drugName: \"Atenolol(100mg tablet)\",\n              drugID: 11,\n              amount: '100mg',\n              current: false,\n              selected: false,\n              isChecked: false,\n              dispensed: null,\n              expectedRemaining: null,\n              adherence: null,\n              remaining: null,\n            },\n          ],\n          selected: null,\n          notes: [],\n        },\n      }\n    }\n}","import { Service } from \"./service\";\n\nexport class RegimenService extends Service {\n    constructor() {\n        super()\n    } \n\n    static getAllArvRegimens() {\n        return this.getJson(`programs/${this.getProgramID()}/all_arv_regimens`)\n    }\n\n    static getRegimens(patientId: number) {\n        return this.getJson(`programs/${this.getProgramID()}/regimens`, {'patient_id': patientId})\n    }\n\n    static getRegimensByWeight(weight: number, onTbTreatment = false) {\n        return this.getJson(`programs/${this.getProgramID()}/regimens`, {\n            weight,\n            'tb_dosage': onTbTreatment,\n        })\n    }\n\n    static getCustomIngridients() {\n        return this.getJson(`programs/${this.getProgramID()}/custom_regimen_ingredients`)\n    }\n\n    static getCurrentRegimen(patientId: number, date=this.getSessionDate()) {\n        return this.getJson(`programs/${this.getProgramID()}/${patientId}`, {date})   \n    }\n\n    static getRegimenExtras(name: string, weight: number) {\n        return this.getJson(`programs/${this.getProgramID()}/regimen_extras`, {name, weight})\n    }\n}","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/projects/malawi-emr/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    skipSummary: true,\n    onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (_ctx.fieldComponent='')),\n    activeField: _ctx.fieldComponent,\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"activeField\", \"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","/**\n * QUICK FACTS ABOUT ART REGIMENS (Malawi Clinical HIV Guidelines 2018 Version 1)\n *  - ART regimens are grouped into first and secondline\n *  - Each regimen is identified by a number. \n *    [0, 2, 4, 5, 6, 8, 9, 10, 11, 13, 14]\n *  - Firstline regimens include [0, 2, 4, 5, 6, 13, 14]\n *  - Secondline regimens include [7, 8, 9, 10, 11]\n *  - Some regimens are \"phased in\" on initiation (Due to adverse reaction). As such, \n *    a starter pack is provided for atleast two weeks. Regimens that require a\n *    starter pack include [0, 2, 6]\n */\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\"\nimport { tableActionSheet, listActionSheet, infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\"\n\nexport enum Target {\n    ARV_REGIMENS = 'arv_regimens',\n    INTERVAL_SELECTION = 'next_visit_interval'\n}\nexport enum FlowState {\n    EXIT = 'exit',\n    CONTINUE = 'continue'\n}\nexport enum TargetEvent {\n    ON_VALUE = 'onValue',\n    ON_BUILD = 'onBuild',\n    BEFORE_NEXT = 'beforeNext',\n}\nexport const PRESCRIPTION_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Do not prescribe LPV regimens together with 3HP\": {\n        priority: 1,\n        actions: {\n            alert: async ({ regimenName }: any) => {\n                await infoActionSheet(\n                    '3HP - LPV/r conflict',\n                    regimenName,\n                    `Regimens containing LPV/r <b>cannot</b> be prescribed together with 3HP`,\n                    [\n                        { name: 'Close', slot: 'end', color: 'danger' }\n                    ],\n                    'his-danger-color'\n                    )\n                    return FlowState.EXIT\n                }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.ON_VALUE,\n        conditions: {\n            regimenCode(code: number) {\n                return [7, 8, 9, 10, 11, 12].includes(code)\n            },\n            medicationOrders(orders: Array<string>) {\n                return orders.filter(i => `${i}`.match(/3hp/i) ? true : false).length >= 1\n            }\n        }\n    },\n    \"Check for any adverse effects or contraindications associated with the regimen\": {\n        priority: 1,\n        actions: {\n            alert: async ({ regimenCodeStr, sideEffectsTable }: any) => {\n                const { columns, rows } = sideEffectsTable\n                const action = await tableActionSheet(\n                    `Contraindications / Side effects for ${regimenCodeStr}`,'',\n                    columns, rows,\n                    [\n                        { name: 'Select other regimen', slot: 'start'},\n                        { name: 'Keep selected regimen', slot: 'end', color: 'danger' }\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Select other regimen' ? FlowState.EXIT : FlowState.CONTINUE\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            hasSideEffects(isTrue: boolean){\n                return isTrue\n            },\n            lastSideEffectDate(date: string, { currentDate }: any){\n                return date >= currentDate\n            }\n        }\n    },\n    \"Recommend 2nd line regimen to children under 3\": {\n        priority: 1,\n        actions: {\n            alert: async () => {\n                const action = await listActionSheet(\n                    'Recommendation',\n                    '',\n                    [\n                        \"Children under 3 years often have a high viral load and may be infected with drug-resistant HIV from previous exposure to ARVs (mother's ART and/or infant nevirapine prophylaxis)\",\n                        \"Therefore, children under <b>3 years</b> respond better when <b>started immediately on 2nd line regimen</b> (Regimen <b>11</b>)\",\n                    ],\n                    [\n                        { name: 'Select another regimen', slot: 'start' }, \n                        { name: 'Keep selected regimen', slot: 'end', color: 'danger' }\n                    ],\n                    'his-warning-color'\n                )\n                return action === 'Select another regimen' ? FlowState.EXIT : FlowState.CONTINUE\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            age(age: number) {\n                return age < 3\n            },\n            regimenCode(code: number) {\n                return code != 11\n            }\n        }\n    }, \n    'Provide a reason for switching regimens when patient already has one': {\n        priority: 1,\n        actions : {\n            alert: async (facts: any) => {\n                const modal = await optionsActionSheet(\n                    `Are you sure you want to replace ${facts.currentRegimenStr}?`,\n                    'Specify reason for switching regimen',\n                    [ \n                        'Policy change', \n                        'Ease of administration (pill burden, swallowing)',\n                        'Drug drug interaction', \n                        'Pregnancy intention',\n                        'Side effects', \n                        'Treatment failure', \n                        'Weight Change', \n                        'Other'\n                    ],\n                    [\n                        { name: 'Cancel', slot:'start', color: 'danger' },\n                        { name: 'Continue', slot: 'end', role: 'action' }\n                    ]\n                )\n\n                if (modal.selection && modal.action != 'Cancel') {\n                    facts.reasonForSwitch = modal.selection\n                    return FlowState.CONTINUE\n                }\n                return FlowState.EXIT\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.ON_VALUE,\n        conditions: {\n            regimenCode(code: string, { currentRegimenCode }: any){\n                return currentRegimenCode != -1 && code != currentRegimenCode\n            }\n        }\n    },\n    \"Provide 14 day starter pack for LPV regimens for children under 3 years old\": {\n        priority: 3,\n        actions: {\n            alert: async (facts: any) => {\n                const action = await infoActionSheet(\n                    'Starter pack needed for 14 days',\n                    `${ facts.treatmentInitiationState}`, \n                    `${ facts.regimenName }`,\n                    [\n                        { name: 'Cancel', slot: 'start', color: 'danger'},\n                        { name: 'Prescribe starter pack', slot: 'end' }\n                    ],\n                    'his-info-color'\n                )\n\n                if (action === 'Prescribe starter pack') {\n                    facts.starterPackNeeded = true\n                    return FlowState.CONTINUE\n                }\n                return FlowState.EXIT\n            },\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            age(age: number) {\n                return age < 3\n            },\n            regimenCode(code: number) {\n                return code === 11\n            },\n            treatmentInitiationState(state: string) {\n                return ['Initiation', 'Re-initiation'].includes(state)\n            }\n        }\n    },\n    \"Provide 14 day starter pack for NVP based regimens on newly initiated/re-initiation patients\": {\n        priority: 3,\n        actions: {\n            alert: async (facts: any) => {\n                const action = await infoActionSheet(\n                    'Starter pack needed for 14 days',\n                    `${ facts.treatmentInitiationState}`, \n                    `${ facts.regimenName }`,\n                    [\n                        { name: 'Cancel', slot: 'start', color: 'danger'},\n                        { name: 'Prescribe starter pack', slot: 'end' }\n                    ],\n                    'his-info-color'\n                )\n\n                if (action === 'Prescribe starter pack') {\n                    facts.starterPackNeeded = true\n                    return FlowState.CONTINUE\n                }\n                return FlowState.EXIT\n            },\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            regimenCode(code: number) {\n                return [0, 2, 6].includes(code)\n            },\n            treatmentInitiationState(state: string) {\n                return ['Initiation', 'Re-initiation'].includes(state)\n            }\n        }\n    },\n    \"Ask to reuse hanging pills if any\": {\n        priority: 5,\n        actions: {\n            alert: async (facts: any) => {\n                const action  = await infoActionSheet(\n                    'Hanging pills recommendation',\n                    'Add hanging pills?', '',\n                    [\n                        { name: 'No', slot: 'start', color: 'warning'},\n                        { name: 'Yes', slot: 'end'}\n                    ],\n                    'his-info-color'\n                )\n                if (action === 'Yes') {\n                    facts.hangingPillsStatus = 'Optimize - including hanging pills'\n                } else {\n                    facts.hangingPillsStatus = 'Exact - excluding hanging pills'\n                }\n                return FlowState.CONTINUE\n            }\n        },\n        target: Target.INTERVAL_SELECTION,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n           drugs(d: Array<string>, { hangingPills }: any){\n                const hanging = d.map(drug => hangingPills.includes(drug))\n                return hanging.some(Boolean)\n           }\n        }\n    },\n    \"Provide warning of use of DTG regimen to women of reproductive age\" : {\n        priority: 2,\n        actions: {\n            alert: async ({regimenName}: any) => {\n                const action = await infoActionSheet(\n                    `Use of DTG or EFV in women of reproductive age`,\n                    regimenName,\n                    [\n                        'There is currently <u>no confirmation</u>',\n                        'that <b>DTG</b> is safe in <u>very early pregnancy</u>',\n                        'DTG-based regimens are therefore not used as standard 1st line regimens for',\n                        '<u>girls and women</u> who may get pregnancy'\n                    ].join(' '),\n                    [\n                        { name: 'Select another regimen', slot: 'start' }, \n                        { name: 'Continue with regimen', slot: 'end', color: 'danger'}\n                    ],\n                    'his-danger-color'\n                )\n                return action === 'Select another regimen' ? FlowState.EXIT : FlowState.CONTINUE\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            regimenCode(code: number) {\n                return code >= 12\n            },\n            isChildBearing(isBearing: boolean){\n                return isBearing\n            }\n        }\n    },\n    \"Provide pallet options for LPV regimens for patient's whose weight is between 3 and 25 kgs\" : {\n        priority: 6,\n        actions: {\n            alert: async (facts: any) => {\n                const action = await infoActionSheet(\n                    'Pellets (cups) / Tabs', \n                    '',\n                    'Prescribe LPV/r in <b>Pellets (cups)</b> or <b>Tablets</b>?',\n                    [\n                        { name: 'Granules', slot: 'start' },\n                        { name: 'Pellets', slot:'end' },\n                        { name: 'Tabs', slot:'end' }\n                    ],\n                    'his-info-color'\n                )\n                facts.lpvType = action.toLowerCase()\n                return FlowState.CONTINUE\n            }\n        },\n        target: Target.ARV_REGIMENS,\n        targetEvent: TargetEvent.BEFORE_NEXT,\n        conditions: {\n            weight(weight: number){\n                return weight >= 3 && weight <= 25\n            },\n            regimenCode(code: number){\n                return code === 11 || code === 9\n            }\n        }\n    },\n    \"Provide 14 day interval for NVP or LVP Regimen starter pack\": {\n        priority: 1,\n        data: {\n            enabled: false\n        },\n        target: Target.INTERVAL_SELECTION,\n        targetEvent: TargetEvent.ON_BUILD,\n        conditions: {\n            prescriptionType(type: string){\n                return type === 'Regimen'\n            },\n            selectedInterval(interval: number) {\n                return interval > 14\n            },\n            starterPackNeeded(isNeeded: boolean) {\n                return isNeeded\n            },\n            regimenCode(code: number) {\n                return [0, 2, 6, 11].includes(code)\n            }\n        }\n    },\n    \"Provide intervals upto 1 month, 2nd up to 2 months, and 3rd up to 6 months for Patients receiving TPT\" : {\n        priority: 2,\n        data: {\n            enabled: false\n        },\n        target: Target.INTERVAL_SELECTION,\n        targetEvent: TargetEvent.ON_BUILD,\n        conditions: {\n            prescriptionType(type: string){\n                return type === 'Regimen'\n            },\n            medicationOrders(orders: Array<string>) {\n                return orders.map(i => `${i}`.match(/3hp/i) ? true : false).some(Boolean)\n            },\n            tptPrescriptionCount(count: number, {selectedInterval}: any){\n                return Math.round(selectedInterval / 30) > count\n            }\n        }\n    }\n}\n\nexport const DRUG_FREQUENCY_GUIDELINE: Record<string, GuideLineInterface> = {\n    'Rifapentine or isoniazid should be taken weekly': {\n        concept: 'Weekly (QW)',\n        priority: 1,\n        conditions: {\n            drug(d: string) {\n                return `${d}`.match(/Rifapentine|Isoniazid/i)\n            }\n        }\n    },\n    'Use daily frequency for any other drugs': {\n        concept: 'Daily (QOD)',\n        priority: 2,\n        conditions: {\n            drug(d: string) {\n                return !`${d}`.match(/Rifapentine|Isoniazid/i)\n            }\n        }\n    }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { RegimenInterface } from \"@/interfaces/Regimen\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { PrescriptionService } from \"@/apps/ART/services/prescription_service\"\nimport { toastWarning, toastSuccess, alertConfirmation } from \"@/utils/Alerts\"\nimport HisDate from \"@/utils/Date\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport { isEmpty, isPlainObject } from \"lodash\"\nimport EncounterMixinVue from '../../../../views/EncounterMixin.vue'\nimport { \n    PRESCRIPTION_GUIDELINES,\n    DRUG_FREQUENCY_GUIDELINE,\n    TargetEvent, \n    Target, \n    FlowState \n} from \"@/apps/ART/guidelines/prescription_guidelines\"\nimport { HTN_SESSION_KEY } from '../../services/htn_service'\nimport { ProgramService } from '@/services/program_service'\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport Store from \"@/composables/ApiStore\"\nimport { ConsultationService } from '../../services/consultation_service'\n\nconst MEDICATION_STYLE = { style : { fontSize:'1.3rem !important', borderBottom: 'solid 2px #ccc', color: 'black', background: 'white' }}\n\nexport default defineComponent({\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        drugs: [] as Array<RegimenInterface>,\n        prescription: {} as any,\n        patientToolbar: [] as Array<Option>,\n        fieldComponent: '' as string,\n        regimenExtras: [] as Array<any>,\n        programInfo: [] as any,\n        allDrugs: [] as any,\n        facts: {\n            age: -1 as number,\n            gender: '' as string,\n            weight: -1 as number,\n            currentDate: '' as string,\n            isChildBearing: false as boolean,\n            prescriptionType: '' as 'Custom' | 'Regimen',\n            tptStatus: {} as any,\n            tptPrescriptionCount: 0,\n            currentRegimenCode: -1 as number,\n            currentRegimenStr: '' as string,\n            drug: '' as string,\n            drugs: [] as Array<any>,\n            contraindications: {} as any,\n            hasSideEffects: false as boolean,\n            sideEffectsTable: {} as any,\n            lastSideEffectDate: '' as string,\n            regimenCode: -1 as number,\n            regimenCodeStr: '' as string,\n            regimenName: '' as string,\n            regimenDrugs: [] as any,\n            hangingPills: [] as Array<any>,\n            reasonForSwitch: '' as string,\n            starterPackNeeded: false as boolean,\n            hangingPillsStatus: '' as string,\n            treatmentInitiationState: '' as string,\n            lpvType: '' as string,\n            medicationOrders: [] as Array<any>,\n            selectedInterval: 0 as number\n        }\n    }),\n    watch: {\n        ready: {\n            async handler(ready: boolean) {\n                if (!ready) return\n                this.prescription = new PrescriptionService(this.patientID, this.providerID)\n                await this.prescription.loadMedicationOrders()\n                await this.prescription.loadFastTrackStatus()\n                if (!this.prescription.medicationOrdersAvailable() && !this.prescription.isFastTrack()) {\n                    toastWarning('Patient is not eligible for treatment Today! Please check HIV Clinic Consultation')\n                    return this.gotoPatientDashboard()\n                }\n                if ((await Store.get('ASK_HANGING_PILLS'))) {\n                    await this.prescription.loadHangingPills()\n                }\n                await this.prescription.loadRegimenExtras()\n                await this.prescription.loadTreatmentState()\n                await this.prescription.loadDrugInduced()\n                await this.prescription.loadContraindications()\n                await this.prescription.loadTptPrescriptionCount()\n\n                await this.initFacts(this.patient)\n\n                if (this.prescription.shouldPrescribeExtras()) {\n                    this.regimenExtras = this.prescription.getRegimenExtras()\n                }\n\n                const htnDrugs = this.resolveHtnDrugs()\n\n                if (!isEmpty(htnDrugs)) this.regimenExtras = [...this.regimenExtras, ...htnDrugs]\n\n                if (this.prescription.isFastTrack()) {\n                    await this.prescription.loadFastTrackMedications()\n                    this.drugs = this.prescription.getFastTrackMedications()\n                    this.fieldComponent = 'next_visit_interval'\n\n                } else if (!this.prescription.shouldPrescribeArvs() && !isEmpty(this.regimenExtras)) {\n                    this.drugs = this.regimenExtras\n                }\n                this.patientToolbar = await this.getPatientToolBar()\n                this.fields = this.getFields()\n            },\n            immediate: true\n        },\n        drugs: {\n            handler(drugs: Array<any>) {\n                this.facts.drugs = drugs.map(d => d.drug_id)\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async initFacts(patient: any) {\n            this.programInfo = await ProgramService.getProgramInformation(patient.getID())\n            this.facts.age = patient.getAge()\n            this.facts.gender = patient.getGender()\n            this.facts.weight = await patient.getRecentWeight()\n            this.facts.hangingPills = this.prescription.getHangingPills()\n            this.facts.treatmentInitiationState = this.prescription.getTreatmentState()\n            this.facts.currentRegimenStr = this.programInfo.current_regimen\n            this.facts.currentRegimenCode = this.extractRegimenCode(this.programInfo.current_regimen)\n            this.facts.medicationOrders = this.prescription.getMedicationOrders()\n            this.facts.contraindications = this.prescription.getContraindications()\n            this.facts.tptPrescriptionCount = this.prescription.getTptPrescriptionCount()\n            this.facts.lastSideEffectDate = this.prescription.getLastSideEffectDate()\n            this.facts.currentDate = PrescriptionService.getSessionDate()\n            this.facts.isChildBearing = patient.isChildBearing()\n            this.facts.tptStatus = await new ConsultationService(this.patientID, this.providerID).getTptTreatmentStatus()\n        },\n        async onSubmit(form: any) {\n            const encounter = await this.prescription.createEncounter()\n\n            this.prescription.setNextVisitInterval(form[Target.INTERVAL_SELECTION].value)\n\n            const payload = this.mapOrder(this.drugs)\n\n            if (!encounter) return toastWarning('Unable to create treatment encounter')\n\n            const drugOrder = await this.prescription.createDrugOrder(payload) \n\n            if(!drugOrder) return toastWarning('Unable to create drug orders!')\n\n            if (this.facts.reasonForSwitch) {\n                await this.prescription.createRegimenSwitchObs(this.facts.reasonForSwitch)\n            }\n\n            if (this.facts.hangingPillsStatus) {\n                await this.prescription.createHangingPillsObs(this.facts.hangingPillsStatus)\n            }\n            toastSuccess('Drug order has been created')\n            Store.invalidate('PATIENT_PROGRAM')\n            this.nextTask()\n        },\n        async onEvent(target: Target, targetEvent: TargetEvent) {\n            const findings = matchToGuidelines(this.facts, PRESCRIPTION_GUIDELINES, target, targetEvent)\n            for(const index in findings) {\n                const finding = findings[index]\n\n                if (finding?.actions?.alert) {\n                    const state = await finding?.actions?.alert(this.facts)\n                    if (state === FlowState.EXIT)\n                        return false\n                }\n            }\n            return true\n        },\n        onBuildOptions(target: Target, targetEvent: TargetEvent){\n            const findings = matchToGuidelines(this.facts, PRESCRIPTION_GUIDELINES, target, targetEvent)\n            for(const index in findings) {\n                const finding = findings[index]\n\n                if (finding.data) return finding.data\n            }\n            return {}\n        },\n        async onRegimen({ label, value, other }: Option) {\n            this.facts.lpvType = ''\n            this.facts.hangingPillsStatus = ''\n            this.facts.starterPackNeeded = false\n            this.facts.regimenName = `${value} (${label})`\n            this.facts.regimenCodeStr = value.toString()\n            this.facts.regimenCode = this.extractRegimenCode(value.toString())\n            this.facts.regimenDrugs = other.regimenDrugs\n            this.facts.drugs = other.regimenDrugs.map((d: any) => d.drug_id)\n\n            const sideEffects = this.prescription.findAndGroupDrugSideEffects(this.facts.drugs)\n            this.facts.hasSideEffects = !isEmpty(sideEffects)\n            this.facts.sideEffectsTable = this.buildSideEffectsTable(sideEffects)\n        },\n        async onBeforeRegimenNext() {\n            const event = await this.onEvent(Target.ARV_REGIMENS, TargetEvent.BEFORE_NEXT)\n            let drugs = []\n\n            if (!event) return false\n\n            if (this.facts.lpvType) {\n               drugs = await this.getLpvDrugs()\n            } else if (this.facts.starterPackNeeded) {\n               drugs = await this.getStarterPackDrugs()\n               if (isEmpty(drugs)) {\n                    drugs = this.facts.regimenDrugs\n               }\n            } else {\n                drugs = this.facts.regimenDrugs\n            }\n            this.drugs = [...this.regimenExtras, ...drugs]\n            return true\n        },\n        getLpvDrugs() {\n            return this.prescription.getLvpDrugsByType(\n                this.facts.lpvType, this.facts.regimenCode\n            ) \n        },\n        resolveHtnDrugs() {\n            try {\n                const sessionData = sessionStorage.getItem(HTN_SESSION_KEY.Prescription)\n                if (typeof sessionData === 'string') {\n                    const data = JSON.parse(sessionData)\n                    if (isPlainObject(data) && data[this.patientID]) {\n                        return data[this.patientID]\n                    }\n                }\n            } catch (e) {\n                console.warn(e)\n            }\n            return []\n        },\n        getStarterPackDrugs() {\n            return this.prescription.getRegimenStarterpack(\n                this.facts.regimenCode, this.facts.weight\n            )\n        },\n        setCustomDrugs(drugs: any) {\n            this.drugs = drugs.map((drug: Option) => drug.other)\n        },\n        buildSideEffectsTable(sideEffects: any) {\n            const columns = ['Date', 'Contraindication(s)', 'Side effect(s)']\n            const rows = []\n            for(const date in sideEffects) {\n                const contraindications = this.facts.contraindications[date] || []\n                rows.push([\n                    HisDate.toStandardHisDisplayFormat(date), \n                    contraindications.join(', '),\n                    sideEffects[date].join(', ')\n                ])\n            }\n            return { columns, rows }\n        },\n        async buildRegimenOptions() {\n            const regimenCategories = await this.prescription.getPatientRegimens()\n            const options = []\n            for(const value in regimenCategories) {\n                const regimenDrugs = regimenCategories[value]\n                const label = regimenDrugs.map((r: RegimenInterface) => \n                    r.alternative_drug_name || r.concept_name).sort().join(' + ')\n\n                options.push({ \n                    label, \n                    value, \n                    other: {\n                        regimenDrugs \n                    } \n                })\n            }\n            return options\n        },\n        buildIntervalOptions() {\n            const intervals = [\n                { label: '2 weeks', value: 14 },\n                { label: '1 month', value: 28 },\n                { label: '2 months', value: 56 },\n                { label: '3 months', value: 84 },\n                { label: '4 months', value: 112 },\n                { label: '5 months', value: 140 },\n                { label: '6 months', value: 168 },\n                { label: '7 months', value: 196 },\n                { label: '8 months', value: 224 },\n                { label: '9 months', value: 252 },\n                { label: '10 months', value: 280 },\n                { label: '11 months', value: 308 },                        \n                { label: '12 months', value: 336 },\n            ]\n            return intervals.map(({label, value}: Option) => {\n                this.facts.selectedInterval = parseInt(value.toString())\n                const config = this.onBuildOptions(Target.INTERVAL_SELECTION, TargetEvent.ON_BUILD)\n                return {\n                    label,\n                    value,\n                    other: {\n                        ...config,\n                        ...this.getDrugEstimates(this.drugs, this.facts.selectedInterval)\n                    }\n                }\n            })\n        },\n        getDrugFrequency(drugName: string){\n            this.facts.drug = drugName\n            const findings = matchToGuidelines(this.facts, DRUG_FREQUENCY_GUIDELINE)\n\n            if (!isEmpty(findings)) {\n                return findings[0].concept\n            }\n        },\n        extractRegimenCode(regimen: string): number {\n          try {\n               if (regimen.match(/n\\/a/i)) return -1\n\n               return parseInt(regimen.substring(0, regimen.length))\n           } catch (e) {\n               console.warn(e)\n               return -1\n           }\n        },\n        getDrugEstimates(regimens: any, interval: number) {\n            this.prescription.setNextVisitInterval(interval)\n            const nextAppointment = this.prescription.calculateDateFromInterval()\n            const drugPacks = regimens.map((regimen: RegimenInterface) => {\n                const packSize = this.prescription.getDrugPackSize(regimen)\n                const pillsPerDay = this.prescription.calculatePillsPerDay(regimen.am, regimen.noon, regimen.pm)\n                const estimatedPackSize = this.prescription.estimatePackSize(pillsPerDay, packSize)     \n                return {\n                    label: regimen.alternative_drug_name || regimen.drug_name,\n                    value: estimatedPackSize\n                } \n            })\n            return {\n                label: 'Medication run-out date:',\n                value: HisDate.toStandardHisDisplayFormat(nextAppointment),\n                other: {\n                    label: \"Estimated packs/tins:\",\n                    value: drugPacks\n                }\n            }\n        },\n        mapOrder(regimens: Array<RegimenInterface>) {\n            return regimens.map((regimen: any) => {\n                return this.prescription.toOrderObj(\n                    regimen.drug_id, \n                    regimen.alternative_drug_name || regimen.drug_name,\n                    regimen.units, \n                    regimen.am, \n                    regimen.pm,\n                    regimen.frequency || this.getDrugFrequency(regimen.drug_name)\n                )\n            })\n        },\n        async getPatientToolBar() {\n            const reasonForSwitch = await this.prescription.getReasonForRegimenSwitch()\n            return [\n                { label: 'Age', value: `${this.patient.getAge()} Year(s)` },\n                { label: 'Gender', value: this.patient.getGender() },\n                { label: 'Current Regimen', value: this.programInfo.current_regimen },\n                { label: 'Current weight', value: `${this.facts.weight} kg(s)` || 'Unknown' },\n                { label: 'Reason for change', value: reasonForSwitch }\n            ]\n        },\n        getFields(): Array<Field> {\n            return [\n                {\n                    id: Target.ARV_REGIMENS,\n                    helpText: 'ARV Regimen(s)',\n                    type: FieldType.TT_ART_REGIMEN_SELECTION,\n                    condition: () => this.prescription.shouldPrescribeArvs(),\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => this.buildRegimenOptions(),\n                    onload: () => this.facts.prescriptionType = 'Regimen',\n                    onValue: (regimen: Option) => {\n                        this.onRegimen(regimen)\n                        return this.onEvent(Target.ARV_REGIMENS, TargetEvent.ON_VALUE)\n                    },\n                    beforeNext: () => this.onBeforeRegimenNext(),\n                    config: {\n                        toolbarInfo: this.patientToolbar,\n                        footerBtns: [\n                            {\n                                name: 'Custom Regimen',\n                                slot: 'end',\n                                onClick: () => {\n                                    this.fieldComponent = 'custom_regimen'\n                                }\n                            }\n                        ]\n                    }\n                },\n                {\n                    id: 'custom_regimen',\n                    helpText: 'Custom prescription',\n                    type: FieldType.TT_MULTIPLE_SELECT,\n                    condition: () => this.facts.prescriptionType === 'Custom',\n                    onload: () => this.facts.prescriptionType = 'Custom',\n                    validation: (val: Option) => Validation.required(val),\n                    beforeNext: async (options: Option[]) => {\n                        const selected = options.map(o => o.other.concept_id)\n                        const areRequiredDrugsSelected = this.regimenExtras.map(v => v.concept_id)\n                            .every(conceptID => selected.includes(conceptID))\n                        if (!areRequiredDrugsSelected) {\n                            return (await alertConfirmation(`One or more required drugs in \"${this.regimenExtras.map((d: any) => d.drug_name)}\" is missing from your selection, do you want to proceed?`))\n                        }\n                        return true\n                    },\n                    options: async () => {\n                        if (isEmpty(this.allDrugs)) {\n                            this.allDrugs = await this.prescription.getCustomIngridients()\n                        }\n                        return this.allDrugs.map((drug: any) => {\n                            const option: Option = {\n                                label: drug.name,\n                                value: drug.drug_id,\n                                other: { ...drug }\n                            }\n                            if (this.facts.tptStatus.tpt != null && /INH|3HP|RIF|Isoniazid/i.test(drug.name)) {\n                                if (this.facts.tptStatus.tb_treatment) {\n                                    return {\n                                        ...option,\n                                        disabled: true,\n                                        description: {\n                                            color: 'danger',\n                                            show: 'always',\n                                            text: 'Client on TB Treatment'\n                                        }\n                                    }\n                                }\n                                if (this.facts.tptStatus.completed) {\n                                    return {\n                                        ...option,\n                                        disabled: true,\n                                        description: {\n                                            color: 'danger',\n                                            show: 'always',\n                                            text: 'Client completed ' + this.facts.tptStatus.tpt\n                                        }\n                                    }\n                                }\n                                if (/IPT/i.test(this.facts.tptStatus.tpt) && /3HP|RIF/i.test(drug.name)) {\n                                    return {\n                                        ...option,\n                                        disabled: true,\n                                        description: {\n                                            color: \"danger\",\n                                            show: \"always\",\n                                            text: \"Client is on IPT\"\n                                        }\n                                    }\n                                }\n                            }\n                            return option\n                        })\n                    },\n                    config: {\n                        showKeyboard: true,\n                        hiddenFooterBtns: [ 'Back' ],\n                        footerBtns: [\n                            {\n                                name: 'Standard Regimen',\n                                size: 'large',\n                                slot: 'end',\n                                color: 'primary',\n                                visible: false,\n                                onClick: () => {\n                                    this.fieldComponent = 'arv_regimens'\n                                }\n                            }\n                        ]\n                    }\n                },\n                {\n                    id: 'custom_dosage',\n                    helpText: 'Custom dose',\n                    type: FieldType.TT_DOSAGE_INPUT,\n                    condition: (f: any) => !isEmpty(f.custom_regimen),\n                    validation: (val: Array<Option>) => {\n                        if (Validation.required(val)) return ['Drugs are not available']\n\n                        const empty = val.map(({ other }: Option) => other.am <= 0 && other.pm <= 0)\n                        return empty.some(Boolean) ? ['Missing dosage configuration on some drugs'] : null\n                    },\n                    unload: (data: any) => this.setCustomDrugs(data),\n                    summaryMapValue: ({other}: any) => ({\n                        label: 'Dosages', \n                        value: this.prescription.getInstructions(\n                            other.drug_name, other.am, other.pm, other.units\n                        ) \n                    }),\n                    options: (fdata: any) => {\n                        return fdata.custom_regimen.map((regimen: Option) => ({\n                            label: regimen.label,\n                            value: regimen.value,\n                            other: {\n                                'drug_id': regimen.other.drug_id,\n                                'drug_name': regimen.label,\n                                'barcodes': regimen.other.barcodes,\n                                'units': regimen.other.units,\n                                'am': 0,\n                                'noon': 0,\n                                'pm': 0,\n                                'frequency': this.getDrugFrequency(regimen.label)\n                            }\n                        }))\n                    }\n                },\n                {\n                    id: 'selected_meds',\n                    helpText: 'Selected medication',\n                    type: FieldType.TT_DATA_TABLE,\n                    config: {\n                        toolbarInfo: this.patientToolbar,\n                        hiddenFooterBtns: [ 'Clear' ],\n                        dataTableConfig: {\n                            showIndex: false\n                        },\n                        viewPortStyle: {\n                            height: '76vh'\n                        },\n                        columns: () => [\n                            [\n                                table.thTxt('Drug name', MEDICATION_STYLE),\n                                table.thTxt('Units', MEDICATION_STYLE),\n                                table.thTxt('AM', MEDICATION_STYLE),\n                                table.thTxt('Noon',  MEDICATION_STYLE),\n                                table.thTxt('PM', MEDICATION_STYLE),\n                                table.thTxt('Frequency', MEDICATION_STYLE)\n                            ]\n                        ],\n                        rows: () => this.drugs.map((d: any) => {\n                            const conf = {\n                                style: {\n                                    'height': '6vh'\n                                },\n                                cssClass:  (() => {\n                                    if (d.drug_name.match(/cotrimoxazole/i)) {\n                                        return 'adult-regimen-formulation'\n                                    }\n                                    switch(d.regimen_category) {\n                                        case 'A':\n                                            return 'adult-regimen-formulation'\n                                        case 'P':\n                                            return 'peads-regimen-formulation'\n                                    }\n                                })()\n                            }\n                            return [\n                                table.td(d.alternative_drug_name || d.drug_name, conf),\n                                table.td(d.units, conf),\n                                table.td(d.am, conf),\n                                table.td(d.noon, conf),\n                                table.td(d.pm, conf),\n                                table.td(d.frequency || this.getDrugFrequency(d.drug_name), conf)\n                            ]         \n                        })\n                    }\n                },\n                {\n                    id: Target.INTERVAL_SELECTION,\n                    helpText: 'Interval to next visit',\n                    type: FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => this.buildIntervalOptions(),\n                    onValue: () => this.onEvent(Target.INTERVAL_SELECTION, TargetEvent.ON_VALUE),\n                    beforeNext: () => this.onEvent(Target.INTERVAL_SELECTION, TargetEvent.BEFORE_NEXT), \n                    config: {\n                        showRegimenCardTitle: false\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./Prescription.vue?vue&type=template&id=79f479b4&ts=true\"\nimport script from \"./Prescription.vue?vue&type=script&lang=ts\"\nexport * from \"./Prescription.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/projects/malawi-emr/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: (facts: FactsInterface) => any;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: ConditionsInteface;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\nexport type FactsInterface = Record<string, any>\nexport type ConditionResolver = (value: any, facts: FactsInterface) => boolean | RegExpMatchArray | null\nexport type ConditionsInteface = Record<string, ConditionResolver>\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: FactsInterface, conditions: ConditionsInteface): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: FactsInterface, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","/**\n * Map all formElements/components defined in \"@/components/FormElements\" \n * in the Enum below by their file name.\n * \n * Next step is to add FieldType entry in COMPONENT_REFS in the \n * Array below the FieldType Enum\n */\nexport enum FieldType {\n    TT_LINKAGE_CODE = 'LinkageCodeInput',\n    TT_MULTI_SELECT_GRID= 'HisMultiSelectGrid',\n    TT_AGE_INPUT='HisAgeInput',\n    TT_GROUP_SELECTOR = 'HisGroupSelector',\n    TT_DATA_TABLE = 'HisDataTable',\n    TT_GRID_SELECTOR = 'HisGridSelector',\n    TT_NOTE = 'HisNote',\n    TT_BARCODE = 'HisBarcodeInput',\n    TT_MONTHLY_DAYS=\"HisMonthlyDays\",\n    TT_TEXT=\"HisTextInput\",\n    TT_NUMBER = \"HisNumberInput\",\n    TT_DATETIME=\"datetime\",\n    TT_SELECT=\"HisSelect\",\n    TT_MULTIPLE_SELECT=\"HisMultipleSelect\",\n    TT_ART_REGIMEN_SELECTION=\"HisArtRegimenSelection\",\n    TT_NEXT_VISIT_INTERVAL_SELECTION=\"HisNextVisitInterval\",\n    TT_TABLE_VIEWER=\"HisTableViewer\",\n    TT_DOSAGE_INPUT=\"HisDosageInput\",\n    TT_YES_NO=\"YesNoSelect\",\n    TT_MULTIPLE_YES_NO=\"MultiYesNoSelect\",\n    TT_SUMMARY=\"HisSummary\",\n    TT_WEIGHT_CHART = \"HisWeightChart\",\n    TT_VITALS_ENTRY=\"HisVitalsEntry\",\n    TT_ADHERENCE_INPUT = \"HisAdherenceInput\",\n    TT_ART_STAGING_SUMMARY = \"ArtStagingSummary\",\n    TT_LAB_ORDERS = \"HisLabOrders\",\n    TT_APPOINTMENTS_ENTRY = \"HisAppointments\",\n    TT_DISPENSATION_INPUT = 'DrugDispensationSelection',\n    TT_PROGRAM_SELECTION = 'ProgramSelection',\n    TT_DATE_PICKER = 'HisDatePicker',\n    TT_PERSON_RESULT_VIEW = 'PersonSearchView',\n    TT_RELATION_SELECTION = 'RelationsSelection',\n    TT_FILING_NUMBER_VIEW = 'FilingNumberView',\n    TT_CARD_SELECTOR = 'HisCardSelector',\n    TT_PERSON_MATCH_VIEW = 'PersonMatchView',\n    TT_FULL_DATE = 'HisDateInput',\n    TT_BATCH_ENTRY = 'HisBatchEntry',\n    TT_BATCH_VERIFICATION = 'HisBatchVerification',\n    TT_BATCH_MOVEMENT = 'HisBatchMovement',\n    TT_COMPLAINTS_PICKER = 'HisComplaintsPicker',\n    TT_RADIOLOGY_PICKER = 'HisRadiologyPicker',\n    TT_IP_ADDRESS = 'HisIPAddress',\n    TT_TEXT_BANNER = 'HisTextBanner',\n    TT_DRUG_DISPENSER = 'GeneralDrugDispenser',\n    TT_CLINIC_HOLIDAY_PICKER = 'HisClinicHolidayPicker',\n    TT_ANC_PREGNANCY_INPUT_CONFIG = 'AncPregnancyInfoConfig',\n    TT_ANC_PREGNANCY_DETAILS_INPUT = 'AncPregnancyDetailsInput',\n    TT_ANC_LMP_DATE_INPUT = 'AncLmpDateInput',\n    TT_ANC_DRUGSET_INPUT = 'AncDrugSetInput',\n    TT_DRUG_TRANSFER_IN = 'DrugTransferInput',\n    TT_PRESCRIPTION_INPUT = 'HisPrescriptionInput',\n    TT_INFINITE_SCROLL_MULTIPLE_SELECT=\"HisInfiniteScrollMultipleSelect\"\n}\n\n// Register FieldTypes here that will be registered at runtime\nexport const COMPONENT_REFS: FieldType[] = [\n    FieldType.TT_LINKAGE_CODE,\n    FieldType.TT_MULTI_SELECT_GRID,\n    FieldType.TT_AGE_INPUT,\n    FieldType.TT_BARCODE,\n    FieldType.TT_NOTE,\n    FieldType.TT_SELECT,\n    FieldType.TT_CARD_SELECTOR,\n    FieldType.TT_MULTIPLE_SELECT,\n    FieldType.TT_TEXT,\n    FieldType.TT_NUMBER,\n    FieldType.TT_MONTHLY_DAYS,\n    FieldType.TT_ART_REGIMEN_SELECTION,\n    FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n    FieldType.TT_TABLE_VIEWER,\n    FieldType.TT_DOSAGE_INPUT,\n    FieldType.TT_YES_NO,\n    FieldType.TT_MULTIPLE_YES_NO,\n    FieldType.TT_WEIGHT_CHART,\n    FieldType.TT_VITALS_ENTRY,\n    FieldType.TT_APPOINTMENTS_ENTRY,\n    FieldType.TT_COMPLAINTS_PICKER,\n    FieldType.TT_CLINIC_HOLIDAY_PICKER,\n    FieldType.TT_SUMMARY,\n    FieldType.TT_ART_STAGING_SUMMARY,\n    FieldType.TT_ADHERENCE_INPUT,\n    FieldType.TT_LAB_ORDERS,\n    FieldType.TT_PERSON_RESULT_VIEW,\n    FieldType.TT_PROGRAM_SELECTION,\n    FieldType.TT_DATE_PICKER,\n    FieldType.TT_RELATION_SELECTION,\n    FieldType.TT_FILING_NUMBER_VIEW,\n    FieldType.TT_PERSON_MATCH_VIEW,\n    FieldType.TT_FULL_DATE,\n    FieldType.TT_BATCH_ENTRY,\n    FieldType.TT_BATCH_VERIFICATION,\n    FieldType.TT_BATCH_MOVEMENT,\n    FieldType.TT_IP_ADDRESS,\n    FieldType.TT_TEXT_BANNER,\n    FieldType.TT_DISPENSATION_INPUT,\n    FieldType.TT_DATA_TABLE,\n    FieldType.TT_GROUP_SELECTOR,\n    FieldType.TT_ANC_PREGNANCY_INPUT_CONFIG,\n    FieldType.TT_ANC_PREGNANCY_DETAILS_INPUT,\n    FieldType.TT_ANC_LMP_DATE_INPUT,\n    FieldType.TT_DRUG_TRANSFER_IN,\n    FieldType.TT_GRID_SELECTOR,\n    FieldType.TT_ANC_DRUGSET_INPUT,\n    FieldType.TT_RADIOLOGY_PICKER,\n    FieldType.TT_PRESCRIPTION_INPUT,\n    FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n    FieldType.TT_DRUG_DISPENSER\n]\n","import { DrugInterface } from \"@/interfaces/Drug\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { Observation } from \"@/interfaces/observation\";\nimport HisDate from \"@/utils/Date\"\nimport { RegimenService } from \"@/services/regimen_service\";\nimport { isEmpty } from \"lodash\"\nimport { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { toDate } from \"@/utils/Strs\";\n\nexport enum AdverseEffectsCategories {\n    CONTRAINDICATION = \"contraindication\",\n    SIDE_EFFECT = \"side_effect\"\n}\n\nexport class PrescriptionService extends AppEncounterService {\n    nextVisitInterval: number;\n    fastTrack: boolean;\n    regimenExtras: Array<Record<string, any>>;\n    hangingPills: Array<Record<string, any>>;\n    fastTrackMedications: Array<Record<string, any>>;\n    medicationOrders: Array<number>;\n    treatmentState: string;\n    contraindications: Record<string, any>;\n    sideEffects: Record<string, any>;\n    tptPrescriptionCount: number;\n    lastSideEffectDate: string;\n\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 25, providerID) //TODO: Use encounter type reference name\n        this.nextVisitInterval = 0\n        this.fastTrack = false\n        this.regimenExtras = []\n        this.fastTrackMedications = []\n        this.hangingPills = []\n        this.medicationOrders = []\n        this.treatmentState = ''\n        this.contraindications = {}\n        this.sideEffects = {}\n        this.tptPrescriptionCount = 0\n        this.lastSideEffectDate = ''\n    }\n\n    setNextVisitInterval(nextVisitInterval: number) {\n        this.nextVisitInterval = nextVisitInterval\n    }\n\n    getHangingPills() {\n        return this.hangingPills\n    }\n\n    getMedicationOrders() {\n        return this.medicationOrders.map((i: number) => {\n            return AppEncounterService.getCachedConceptName(i)\n        })\n    }\n\n    getTptPrescriptionCount() {\n        return this.tptPrescriptionCount\n    }\n\n    getLastSideEffectDate() {\n        return this.lastSideEffectDate\n    }\n\n    getContraindications() { return this.contraindications }\n\n    getSideEffects() { return this.sideEffects }\n\n    getRegimenExtras() { return this.regimenExtras }\n\n    getPatientRegimens() { return RegimenService.getRegimens(this.patientID) }\n\n    getARVs() {\n        return RegimenService.getJson('arv_drugs')\n    }\n\n    getCustomIngridients() { return RegimenService.getCustomIngridients() }\n\n    getFastTrackMedications() { return this.fastTrackMedications }\n\n    getTreatmentState() { return this.treatmentState }\n\n    isFastTrack() { return this.fastTrack }\n\n    medicationOrdersAvailable() { return !isEmpty(this.medicationOrders) }\n\n    shouldPrescribeArvs() { \n        const arvs = AppEncounterService.getCachedConceptID(\"Antiretroviral drugs\")\n        return this.medicationOrders.includes(arvs)\n    }\n\n    shouldPrescribeExtras() {\n        const extras = AppEncounterService.getConceptsByCategory('art_extra_medication_order')\n        const extrasAvailable = extras.map((i: any) => this.medicationOrders.includes(i.concept_id))\n        return extrasAvailable.some(Boolean)\n    }\n\n    getRegimenStarterpack(regimenCode: number, patientWeight: number) {\n        const params = { weight: patientWeight, regimen: regimenCode }\n\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimen_starter_packs`,\n            params\n        )\n    }\n\n    async getLvpDrugsByType(type: string, regimen: number) {\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimens/${regimen}`,\n            {\n                'patient_id': this.patientID,\n                'lpv_drug_type': type\n            }\n        )\n    }\n\n    async loadContraindications() {\n        const contraindication = await AppEncounterService.getConceptID('Contraindications')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': contraindication, 'person_id': this.patientID \n        })\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.contraindications[date]) this.contraindications[date] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.contraindications[date].push(concept)\n        })\n    }\n\n    async loadDrugInduced() {\n        const drugInduced = await AppEncounterService.getConceptID('Drug induced')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': drugInduced, 'person_id': this.patientID \n        })\n\n        if (!obs) return\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.lastSideEffectDate) this.lastSideEffectDate = date\n\n            if (!o.value_drug || !o.value_coded) return\n\n            if (!this.sideEffects[date]) this.sideEffects[date] = {}\n\n            if (!this.sideEffects[date][o.value_drug]) this.sideEffects[date][o.value_drug] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.sideEffects[date][o.value_drug].push(concept)\n        })\n    }\n\n    async loadTptPrescriptionCount() {\n        const res = await AppEncounterService.getJson(\n            `tpt_prescription_count`, {\n                'patient_id': this.patientID,\n                'date': this.date\n            }\n        )\n\n        if (res) {\n            const count = res.count + 1\n            this.tptPrescriptionCount = count > 3 ? 3 : count\n        } \n    }\n\n    async loadFastTrackStatus() {\n        const isFastTrack = await AppEncounterService.getFirstValueCoded(this.patientID, 'Fast track')\n        const yes = await AppEncounterService.getConceptID('yes')\n\n        if (isFastTrack) this.fastTrack = isFastTrack === yes\n    }\n    \n    async loadRegimenExtras(date=this.date) {\n        const meds = await RegimenService.getJson(\n            `programs/${RegimenService.getProgramID()}/patients/${this.patientID}/dosages`,\n            {date}\n        )\n        if (meds) this.regimenExtras = Object.values(meds)\n    }\n\n    async loadMedicationOrders() {\n        const medicationOrders = await AppEncounterService.getConceptID(\"Medication orders\")\n        const orders = await AppEncounterService.getObs({\n            'concept_id': medicationOrders,\n            'date': this.date,\n            'person_id': this.patientID,\n            'page_size': 5\n        })\n        this.medicationOrders = orders.map((i: Observation) => i.value_coded)\n    }\n\n    async loadHangingPills() {\n        const pills = (await AppEncounterService.getAll(this.patientID, 'Pills brought'))||[]\n        this.hangingPills = pills.filter((o: any) => {\n            if (o.value_numeric >= 1) {\n                // Condition for detecting pills brought during transfer in.. This is a bit hack-ish\n                if (o.value_drug && toDate(o.obs_datetime) === toDate(this.date)) {\n                    return true\n                }\n                // This is for normal workflow adherence pills\n                return o.order||false\n            }\n            return false\n        }).map((o: any) => o?.order?.drug_order?.drug_inventory_id||o.value_drug)        \n    }\n\n    async loadFastTrackMedications() {\n        const drugs = await DrugOrderService.getLastDrugsReceived(this.patientID)\n        const withDosages = drugs.map(async(data: any) => {\n            const { drug } = data\n            const dosage = await DrugOrderService.getDrugDosages(this.patientID, drug.drug_id)\n            return {\n                'drug_id': drug.drug_id,\n                'drug_name': drug.name,\n                'units': drug.units,\n                'am': dosage.am,\n                'noon': dosage.noon,\n                'pm': dosage.pm,\n                'frequency': data.frequency\n            }\n        })\n        this.fastTrackMedications = await Promise.all(withDosages)\n    }\n\n    async loadTreatmentState() {\n        const params = { date: this.date }\n\n        const req = await AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/patients/${this.patientID}/status`,\n            params\n        )\n\n        if (req) this.treatmentState = req['status']\n    }\n\n    findAndGroupDrugSideEffects(drugs: Array<number>) {\n        const allSideEffects: any = {}\n\n        for (const date in this.sideEffects) {\n            const drugInduced = this.sideEffects[date]\n\n            for(const drug in drugInduced) {\n                if (!drugs.includes(parseInt(drug))) continue\n\n                if (!allSideEffects[date]) allSideEffects[date] = []\n\n                allSideEffects[date] = [\n                    ...allSideEffects[date], ...drugInduced[drug]\n                ]\n            }\n        }\n        return allSideEffects\n    }\n\n    calculatePillsPerDay(am: number, noon: number, pm: number) {\n        return parseFloat(am.toString()) + noon + pm\n    }\n\n    estimatePackSize(pillsPerDay: number, packSize=0) {\n        const packs = (pillsPerDay * this.nextVisitInterval) / (packSize || 1)\n        \n        let roundedPacks = Math.round(packs)\n\n        if (roundedPacks <= 0) roundedPacks += 1\n\n        return roundedPacks\n    }\n\n    calculateDosage(morningTabs: number, eveningTabs: number): number {\n        let dose = 0\n        if (eveningTabs === 0) dose = morningTabs\n\n        if (morningTabs == 0) dose = eveningTabs\n\n        if (morningTabs > 0 && eveningTabs  > 0) {\n            dose = (morningTabs + eveningTabs) / 2\n        }\n        return dose\n    }\n    \n    calculateEquivalentDosage(morningTabs: number, eveningTabs: number): number {\n        return morningTabs + eveningTabs\n    }\n\n    calculateDateFromInterval() {\n        const dateObj = new Date(this.date)\n        dateObj.setDate(dateObj.getDate() + this.nextVisitInterval)\n        return HisDate.toStandardHisFormat(dateObj)\n    }\n\n    getDrugPackSize(drug: any) {\n        if (drug.pack_size) return drug.pack_size\n        try{\n            return drug.barcodes[0].tabs\n        }catch(e) {\n            return 30\n        }\n    }\n\n    getInstructions(drugName: string, morningTabs: number, eveningTabs: number, units: string): string {\n        return `${drugName} :- Morning: ${morningTabs} ${units}, Evening: ${eveningTabs} ${units}`\n    }\n\n    toOrderObj(id: number, name: string, units: string, am=0, pm=0, frequency=''): DrugInterface {\n        return {\n            'drug_inventory_id': id,\n            'equivalent_daily_dose': this.calculateEquivalentDosage(am, pm),\n            'start_date': this.date,\n            'auto_expire_date': this.calculateDateFromInterval(), \n            'units': units,\n            'instructions': this.getInstructions(name, am, pm, units),\n            'dose': this.calculateDosage(am, pm),\n            'frequency': frequency\n        }\n    }\n\n    async getReasonForRegimenSwitch() {\n        const reason = await AppEncounterService.getFirstValueText(this.patientID, 'Reason for ARV switch')\n        return reason ? reason : 'N/A'\n    }\n\n    async createDrugOrder(drugOrders: Array<DrugInterface>) {\n        return DrugOrderService.create({\n            'encounter_id': this.encounterID,\n            'drug_orders': drugOrders\n        })\n    }\n\n    async createHangingPillsObs(response: string) {\n        return this.saveValueTextObs('appointment type', response)\n    }\n\n    async createRegimenSwitchObs(reasonForSwitch: string): Promise<Observation> {\n        return this.saveValueTextObs('Reason for ARV switch', reasonForSwitch)\n    }\n}\n","var map = {\n\t\"./AncDrugSetInput.vue\": [\n\t\t\"c99f\",\n\t\t\"TouchFormElement0\"\n\t],\n\t\"./AncLmpDateInput.vue\": [\n\t\t\"101a\",\n\t\t\"TouchFormElement1\"\n\t],\n\t\"./AncPregnancyDetailsInput.vue\": [\n\t\t\"b043\",\n\t\t\"TouchFormElement2\"\n\t],\n\t\"./AncPregnancyInfoConfig.vue\": [\n\t\t\"262e\",\n\t\t\"TouchFormElement3\"\n\t],\n\t\"./ArtStagingSummary.vue\": [\n\t\t\"43db\",\n\t\t\"TouchFormElement4\"\n\t],\n\t\"./BaseTextInput.vue\": [\n\t\t\"36ad\",\n\t\t\"TouchFormElement5\"\n\t],\n\t\"./DrugDispensationSelection.vue\": [\n\t\t\"05d5\",\n\t\t\"TouchFormElement6\"\n\t],\n\t\"./DrugTransferInput.vue\": [\n\t\t\"de42\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement7\"\n\t],\n\t\"./FieldMixin.vue\": [\n\t\t\"51c8\",\n\t\t\"TouchFormElement8\"\n\t],\n\t\"./FilingNumberView.vue\": [\n\t\t\"c650\",\n\t\t\"TouchFormElement9\"\n\t],\n\t\"./GeneralDrugDispenser.vue\": [\n\t\t\"7737\",\n\t\t\"TouchFormElement10\"\n\t],\n\t\"./HisAdherenceInput.vue\": [\n\t\t\"f2c3\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement11\"\n\t],\n\t\"./HisAgeInput.vue\": [\n\t\t\"c05f\",\n\t\t\"TouchFormElement12\"\n\t],\n\t\"./HisAppointments.vue\": [\n\t\t\"b2eb\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement13\"\n\t],\n\t\"./HisArtRegimenSelection.vue\": [\n\t\t\"47b9\",\n\t\t\"TouchFormElement14\"\n\t],\n\t\"./HisBarcodeInput.vue\": [\n\t\t\"dd65\",\n\t\t\"TouchFormElement15\"\n\t],\n\t\"./HisBatchEntry.vue\": [\n\t\t\"f2ab\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement16\"\n\t],\n\t\"./HisBatchMovement.vue\": [\n\t\t\"5148\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement17\"\n\t],\n\t\"./HisBatchVerification.vue\": [\n\t\t\"7b0f\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement18\"\n\t],\n\t\"./HisCardSelector.vue\": [\n\t\t\"0734\",\n\t\t\"TouchFormElement19\"\n\t],\n\t\"./HisClinicHolidayPicker.vue\": [\n\t\t\"4030\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement20\"\n\t],\n\t\"./HisComplaintsPicker.vue\": [\n\t\t\"82d1\",\n\t\t\"TouchFormElement21\"\n\t],\n\t\"./HisDataTable.vue\": [\n\t\t\"a6ba\",\n\t\t\"TouchFormElement22\"\n\t],\n\t\"./HisDateInput.vue\": [\n\t\t\"374c\",\n\t\t\"TouchFormElement23\"\n\t],\n\t\"./HisDatePicker.vue\": [\n\t\t\"9b30\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement24\"\n\t],\n\t\"./HisDosageInput.vue\": [\n\t\t\"b34c\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement25\"\n\t],\n\t\"./HisGridSelector.vue\": [\n\t\t\"112a\",\n\t\t\"TouchFormElement26\"\n\t],\n\t\"./HisGroupSelector.vue\": [\n\t\t\"81cf\",\n\t\t\"TouchFormElement27\"\n\t],\n\t\"./HisIPAddress.vue\": [\n\t\t\"2a82\",\n\t\t\"TouchFormElement28\"\n\t],\n\t\"./HisInfiniteScrollMultipleSelect.vue\": [\n\t\t\"52a3\",\n\t\t\"TouchFormElement29\"\n\t],\n\t\"./HisLabOrders.vue\": [\n\t\t\"e614\",\n\t\t\"TouchFormElement30\"\n\t],\n\t\"./HisMonthlyDays.vue\": [\n\t\t\"69cf\",\n\t\t\"TouchFormElement31\"\n\t],\n\t\"./HisMultiSelectGrid.vue\": [\n\t\t\"0fa3\",\n\t\t\"TouchFormElement32\"\n\t],\n\t\"./HisMultipleSelect.vue\": [\n\t\t\"2fd5\",\n\t\t\"chunk-45847ec4\",\n\t\t\"TouchFormElement33\"\n\t],\n\t\"./HisNextVisitInterval.vue\": [\n\t\t\"3126\",\n\t\t\"TouchFormElement34\"\n\t],\n\t\"./HisNote.vue\": [\n\t\t\"c927\",\n\t\t\"TouchFormElement35\"\n\t],\n\t\"./HisNumberInput.vue\": [\n\t\t\"5e75\",\n\t\t\"TouchFormElement36\"\n\t],\n\t\"./HisPrescriptionInput.vue\": [\n\t\t\"87e5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement37\"\n\t],\n\t\"./HisRadiologyPicker.vue\": [\n\t\t\"adc7\",\n\t\t\"chunk-bfc3872a\",\n\t\t\"TouchFormElement38\"\n\t],\n\t\"./HisSelect.vue\": [\n\t\t\"d11f\",\n\t\t\"TouchFormElement39\"\n\t],\n\t\"./HisSummary.vue\": [\n\t\t\"e0bd\",\n\t\t\"TouchFormElement40\"\n\t],\n\t\"./HisTableViewer.vue\": [\n\t\t\"8904\",\n\t\t\"TouchFormElement41\"\n\t],\n\t\"./HisTextBanner.vue\": [\n\t\t\"952c\",\n\t\t\"TouchFormElement42\"\n\t],\n\t\"./HisTextInput.vue\": [\n\t\t\"6ef9\",\n\t\t\"TouchFormElement43\"\n\t],\n\t\"./HisVitalsEntry.vue\": [\n\t\t\"e333\",\n\t\t\"TouchFormElement44\"\n\t],\n\t\"./HisWeightChart.vue\": [\n\t\t\"26a1\",\n\t\t\"TouchFormElement45\"\n\t],\n\t\"./LinkageCodeInput.vue\": [\n\t\t\"ac86\",\n\t\t\"TouchFormElement46\"\n\t],\n\t\"./MultiYesNoSelect.vue\": [\n\t\t\"5fd1\",\n\t\t\"TouchFormElement47\"\n\t],\n\t\"./PersonMatchView.vue\": [\n\t\t\"6591\",\n\t\t\"TouchFormElement48\"\n\t],\n\t\"./PersonSearchView.vue\": [\n\t\t\"28b2\",\n\t\t\"TouchFormElement49\"\n\t],\n\t\"./ProgramSelection.vue\": [\n\t\t\"e3b4\",\n\t\t\"TouchFormElement50\"\n\t],\n\t\"./RelationsSelection.vue\": [\n\t\t\"0e57\",\n\t\t\"TouchFormElement51\"\n\t],\n\t\"./SelectMixin.vue\": [\n\t\t\"82a9\",\n\t\t\"TouchFormElement52\"\n\t],\n\t\"./YesNoSelect.vue\": [\n\t\t\"71f2\",\n\t\t\"TouchFormElement53\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"f159\";\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}