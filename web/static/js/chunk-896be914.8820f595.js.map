{"version":3,"sources":["webpack:///./src/views/GuardianRegistration.vue?1a99","webpack:///./src/views/GuardianRegistration.vue","webpack:///./src/views/GuardianRegistration.vue?f058","webpack:///./src/services/person_attributes_service.ts","webpack:///./src/services/patient_registration_service.ts","webpack:///./src/services/relations_service.ts","webpack:///./src/utils/ActionSheetHelpers/VoidReason.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","onOnIndex","$event","fieldComponent","skipSummary","activeField","fields","onFinishAction","onFinish","cancelDestinationPath","patientData","id","defineComponent","components","HisStandardForm","data","guardianData","fieldAction","form","redirectURL","currentAddressAttributes","homeAddressAttributes","watch","params","query","patient_id","patient","Patientservice","findByID","this","PersonFieldHelper","mapPersonData","person","edit_guardian","getFields","source","immediate","deep","methods","push","guardianSelection","guardianIndex","scanGuardian","givenNameField","familyNameField","genderField","searchResultField","concat","dobFields","homeRegionField","homeDistrictField","homeTAField","homeVillageField","currentRegionField","currentDistrictField","currentTAField","currentVillage","landmarkFields","cellPhoneField","relationsField","computedData","isEditMode","reg","PatientRegistrationService","setPersonID","updatePerson","PersonField","resolvePerson","Object","keys","forEach","i","_computedData$i","date","_this$guardianData","relation","RelationsService","amendRelation","relationship_id","relations","other","relationship_type_id","isSameAsPatient","toastWarning","guardianID","isRegistrationMode","guardian","registerGuardian","getPersonID","createRelation","$router","name","$route","nextTask","isSearchMode","includes","canEdit","groups","defaultCondition","mandatoryCondition","birthdate","gender","HisDate","toStandardHisDisplayFormat","birth_date","given_name","family_name","toLowerCase","helpText","type","FieldType","TT_SELECT","condition","validation","v","Validation","required","options","async","relationship","RelationshipService","getRelationships","isEmpty","map","r","label","b_is_to_a","value","person_id","details","delayPromise","action","infoActionSheet","slot","color","back","config","footerBtns","onClick","getDefaultVal","fieldID","e","TT_TABLE_VIEWER","f","select_guardian","editButton","attribute","rows","cell_phone_number","home_district","home_traditional_authority","home_village","current_district","current_traditional_authority","landmark","overrideDefaultFooterBtns","nextBtn","popVoidReason","voidRelation","reason","hiddenFooterBtns","getGivenNameField","defaultValue","getFamilyNameField","getGenderField","dob","getDobConfig","generateDateFields","home","getHomeRegionField","district","getHomeDistrictField","ta","getHomeTaField","home_region","match","village","getHomeVillageField","region","getCurrentRegionField","currentDistrict","getCurrentDistrictField","currentTA","getCurrentTAfield","current_region","getCurrentVillageField","cellPhone","getCellNumberField","landmarks","getLandmarkFields","proxyID","TT_RELATION_SELECTION","val","onload","context","cdata","relationships","getRelations","description","TT_BARCODE","requireNext","onValue","searchResults","findByNpid","TT_PERSON_RESULT_VIEW","dynamicHelpText","appearInSummary","patients","search","item","getPersonAttributeOptions","state","disabled","default","_","results","__exports__","PersonAttributeService","Service","constructor","super","attributes","postJson","_defineProperty","personId","personID","personAttributes","createPerson","createPersonAttributes","createPatient","printPatient","PersonService","update","create","ProgramService","index","PatientPrintoutService","printNidLbl","patientID","relationID","void","curRelationID","newRelationTypeID","getJson","patientA","patientB","relationType","callback","size","modal","optionsActionSheet","role","selection"],"mappings":"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","file":"js/chunk-896be914.8820f595.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (_ctx.fieldComponent='')),\n    skipSummary: true,\n    activeField: _ctx.fieldComponent,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    cancelDestinationPath: `/patient/dashboard/${_ctx.patientData.id}`\n  }, null, 8, [\"activeField\", \"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport { RelationsService } from \"@/services/relations_service\"\nimport { isEmpty } from \"lodash\"\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\"\nimport { PatientRegistrationService } from \"@/services/patient_registration_service\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { toastWarning } from \"@/utils/Alerts\";\nimport { RelationshipService } from \"@/services/relationship_service\";\nimport PersonFieldHelper from \"@/utils/HisFormHelpers/PersonFieldHelper\";\nimport { infoActionSheet } from \"@/utils/ActionSheets\";\nimport { delayPromise } from \"@/utils/Timers\";\nimport popVoidReason from \"@/utils/ActionSheetHelpers/VoidReason\";\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    patientData: {} as any,\n    guardianData: {} as any,\n    fieldAction: '' as 'Scan' | 'Search' | 'Registration' | 'edit',\n    fieldComponent: '' as string,\n    fields: [] as Array<Field>,\n    form: {} as Record<string, Option> | Record<string, null>,\n    redirectURL: '' as string,\n    activeField: '' as string,\n    currentAddressAttributes: [\n        'current_region',\n        'current_district',\n        'current_village',\n        'current_traditional_authority'\n    ] as string[],\n    homeAddressAttributes: [\n        'home_region',\n        'home_district',\n        'home_traditional_authority',\n        'home_village'\n    ] as string[]\n  }),\n  watch: {\n    '$route': {\n        async handler({params, query}: any) {\n            if (params.patient_id) {\n                const patient = await Patientservice.findByID(params.patient_id)\n                if (patient) {\n                    this.patientData = PersonFieldHelper.mapPersonData(patient.person)\n                    if (query.edit_guardian) {\n                        this.fieldAction = 'edit'\n                    }\n                    this.fields = this.getFields()\n                }\n            }\n            if(query.source) this.redirectURL = query.source\n        },\n        immediate: true,\n        deep: true\n    }\n  },\n  methods: {\n    getFields(): Array<Field> {\n        let fields: Array<Field> = []\n        fields.push(this.guardianSelection())\n        fields.push(this.guardianIndex())\n        fields.push(this.scanGuardian())\n        fields.push(this.givenNameField())\n        fields.push(this.familyNameField())\n        fields.push(this.genderField())\n        fields.push(this.searchResultField())\n        fields = fields.concat(this.dobFields())\n        fields.push(this.homeRegionField())\n        fields.push(this.homeDistrictField())\n        fields.push(this.homeTAField())\n        fields.push(this.homeVillageField())\n        fields.push(this.currentRegionField())\n        fields.push(this.currentDistrictField())\n        fields.push(this.currentTAField())\n        fields.push(this.currentVillage())\n        fields = fields.concat(this.landmarkFields())\n        fields.push(this.cellPhoneField())\n        fields.push(this.relationsField())\n        return fields\n    },\n    async onFinish(form: any, computedData: any) {\n        if (this.isEditMode()) {\n            if (this.activeField != 'relations') {\n                const reg = new PatientRegistrationService()\n                reg.setPersonID(this.guardianData.id)\n                await reg.updatePerson(PersonField.resolvePerson(computedData))\n                // Patch updated values\n                Object.keys(computedData).forEach((i: string) => {\n                    if (i in this.guardianData) {\n                        this.guardianData[i] = computedData[i]?.date || computedData[i].person\n                    }\n                })\n            } else {\n                if (this.guardianData?.relation) {\n                    const relation = await RelationsService.amendRelation(\n                        this.patientData.id,\n                        this.guardianData.id,\n                        this.guardianData.relation.relationship_id,\n                        form.relations.other.relationship_type_id\n                    )\n                    if (relation) {\n                        this.guardianData.relation = relation\n                    }\n                }\n            }\n            this.fieldComponent = 'guardian_index'\n        } else {\n            if(this.isSameAsPatient(computedData)) {\n                toastWarning(\"Guardian cannot be the same patient\")\n            } else {\n                let guardianID = -1\n                if (this.isRegistrationMode()) {\n                    const guardian: any = new PatientRegistrationService()\n                    await guardian.registerGuardian(PersonField.resolvePerson(computedData))\n                    guardianID = guardian.getPersonID()\n                } else {\n                    guardianID = this.guardianData.id\n                }\n                await RelationsService.createRelation(\n                    this.patientData.id, guardianID, form.relations.other.relationship_type_id\n                )\n                if(this.redirectURL) this.$router.push({name: this.redirectURL})\n                else if (this.$route.query.edit_guardian) this.fieldComponent = 'select_guardian'\n                else await nextTask(this.patientData.id, this.$router, this.$route)\n            }   \n        }\n    },\n    isEditMode() {\n        return this.fieldAction === 'edit'\n    },\n    isSearchMode() {\n        return ['Search', 'Registration'].includes(this.fieldAction)\n    },\n    isRegistrationMode() {\n        return this.fieldAction === 'Registration'\n    },\n    canEdit(groups: Array<string|number>, defaultCondition=true, mandatoryCondition=true) {\n        if (this.isEditMode()) {\n            return groups.includes(this.activeField) && mandatoryCondition\n        }\n        return defaultCondition\n    },\n    isSameAsPatient(guardian: any) {\n        let birthdate = ''\n        let name = ''\n        let gender = ''\n\n        if(this.isRegistrationMode()) {\n            birthdate = HisDate.toStandardHisDisplayFormat(guardian.birth_date.date)\n            name = guardian.given_name.person && guardian.family_name.person\n            gender = guardian.gender.person\n        } else {\n            birthdate = this.guardianData.birth_date\n            name = this.guardianData.name\n            gender = this.guardianData.gender  \n        }\n\n        return (name.toLowerCase() === this.patientData.name.toLowerCase()) \n            && (birthdate === this.patientData.birth_date)\n            && (gender === this.patientData.gender)\n    },\n    guardianSelection(): Field {\n        return {\n            id: 'select_guardian',\n            helpText: 'Select guardian to edit/view',\n            type: FieldType.TT_SELECT,\n            condition: () => this.isEditMode(),\n            validation: (v: Option) => Validation.required(v),\n            options: async () => {\n                const relationship = await RelationshipService.getRelationships(this.patientData.id)\n                if (!isEmpty(relationship)) {\n                    return relationship.map((r: any) => {\n                        const guardian = PersonField.mapPersonData(r.relation)\n                        return {\n                            label: `${guardian.name} (${r.type.b_is_to_a})`, \n                            value: r.relation.person_id, \n                            other: {\n                                relations: r, \n                                details: guardian \n                            }\n                        }\n                    })\n                } else {\n                    await delayPromise(450)\n                    const action = await infoActionSheet(\n                        'Patient has no guardians', '',\n                        'Select option to proceed',\n                        [\n                            {\n                                name: 'Cancel',\n                                slot: 'start',\n                                color: 'danger'\n                            },\n                            {\n                                name: 'Register new',\n                                slot: 'start',\n                                color: 'success'\n                            }\n                        ]\n                    )\n                    if (action === 'Register new') {\n                        this.guardianData = {}\n                        this.fieldAction = 'Registration'\n                        this.fieldComponent = 'scan'\n                    } else {\n                        this.$router.back()\n                    }\n                }\n                return []\n            },\n            config: {\n                footerBtns: [\n                    {\n                        name: 'New Guardian',\n                        slot: 'end',\n                        color: 'primary',\n                        onClick: () => {\n                            this.guardianData = {}\n                            this.fieldAction = 'Registration'\n                            this.fieldComponent = 'scan'\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    getDefaultVal(fieldID: string | number) {\n        try {\n            return this.guardianData[fieldID]\n        } catch (e) {\n            return ''\n        }\n    },\n    guardianIndex(): Field {\n        return {\n            id: 'guardian_index',\n            helpText: 'Guardian details',\n            type: FieldType.TT_TABLE_VIEWER,\n            condition: (f: any) => f.select_guardian.value, \n            options: (f: any) => {\n                if (this.guardianData && this.guardianData.id != f.select_guardian.value) {\n                    this.guardianData = {\n                        ...f.select_guardian.other.details,\n                        relation: f.select_guardian.other.relations\n                    }\n                }\n                const editButton = (attribute: string) => ({\n                    name: 'Edit',\n                    type: 'button',\n                    action: () => {\n                        this.activeField = attribute\n                        this.fieldComponent = this.activeField\n                    }\n                })\n                const rows = [\n                    ['Given Name', this.guardianData.given_name, editButton('given_name')],\n                    ['Family Name', this.guardianData.family_name, editButton('family_name')],\n                    ['Gender', this.guardianData.gender, editButton('gender')],\n                    ['Birthdate', HisDate.toStandardHisDisplayFormat(this.guardianData.birth_date), editButton('year_birth_date')],\n                    ['Cell Phone Number', this.guardianData.cell_phone_number, editButton('cell_phone_number')],\n                    ['Home District', this.guardianData.home_district, editButton('home_region')],\n                    ['Home TA', this.guardianData.home_traditional_authority, editButton('home_region')],\n                    ['Home Village', this.guardianData.home_village,  editButton('home_region')],\n                    ['Current district', this.guardianData.current_district, editButton('current_region')],\n                    ['Current T/A', this.guardianData.current_traditional_authority, editButton('current_region')],\n                    ['Landmark', this.guardianData.landmark, editButton('default_landmarks')],\n                    ['Relation', this.guardianData.relation.type.b_is_to_a, editButton('relations')]\n                ]\n                return [{\n                    label: '', \n                    value: '',\n                    other: {\n                        rows\n                    }\n                }]\n            },\n            config : {\n                overrideDefaultFooterBtns: {\n                    nextBtn: {\n                        name: 'Finish',\n                        slot: 'end',\n                        color: 'success',\n                        onClick: () => this.fieldComponent = 'select_guardian'\n                    }\n                },\n                footerBtns: [\n                    {\n                        name: 'Void Relation',\n                        slot: 'start',\n                        color: 'danger',\n                        onClick: async () => {\n                            popVoidReason(async (reason: string) => {\n                                await RelationsService.voidRelation(\n                                    this.patientData.id, \n                                    this.guardianData.relation.relationship_id,\n                                    reason\n                                )\n                                this.fieldComponent = 'select_guardian'\n                            })\n                        }\n                    }\n                ],\n                hiddenFooterBtns: ['Clear', 'Back']\n            }\n        }\n    },\n    givenNameField(): Field {\n        const name: Field = PersonField.getGivenNameField()\n        name.helpText = 'Guardian First name'\n        name.defaultValue = () => this.getDefaultVal(name.id)\n        name.condition = () => this.canEdit([name.id], this.isSearchMode())\n        return name\n    },\n    familyNameField(): Field {\n        const name: Field = PersonField.getFamilyNameField()\n        name.helpText = 'Guardian Last name'\n        name.defaultValue = () => this.getDefaultVal(name.id)\n        name.condition = () => this.canEdit([name.id], this.isSearchMode())\n        return name\n    },\n    genderField(): Field {\n        const gender: Field = PersonField.getGenderField()\n        gender.defaultValue = () => this.getDefaultVal(gender.id)\n        gender.condition = () => this.canEdit([gender.id], this.isSearchMode())\n        return gender\n    },\n    dobFields(): Array<Field> {\n        const dob =PersonField.getDobConfig()\n        dob.defaultValue = () => this.getDefaultVal('birth_date')\n        dob.condition = () => this.canEdit([\n            'year_birth_date', \n            'month_birth_date', \n            'day_birth_date'\n            ], \n            this.isRegistrationMode()\n        ) \n        return generateDateFields(dob)\n    },\n    homeRegionField(): Field {\n        const home: Field = PersonField.getHomeRegionField()\n        home.condition = () => this.canEdit(this.homeAddressAttributes, this.isRegistrationMode())\n        return home\n    },\n    homeDistrictField(): Field {\n        const district: Field = PersonField.getHomeDistrictField()\n        district.condition = () => this.canEdit(this.homeAddressAttributes, this.isRegistrationMode())\n        return district\n    },\n    homeTAField(): Field {\n        const ta: Field =  PersonField.getHomeTaField()\n        ta.condition = (form: any) => this.canEdit(\n            this.homeAddressAttributes, \n            this.isRegistrationMode() && !form.home_region.label.match(/foreign/i),\n            !form.home_region.label.match(/foreign/i)\n        )\n        return ta\n    },\n    homeVillageField(): Field {\n        const village: Field = PersonField.getHomeVillageField()\n        village.condition = (form: any) => this.canEdit(\n            this.homeAddressAttributes, \n            this.isRegistrationMode() && !form.home_region.label.match(/foreign/i),\n            !form.home_region.label.match(/foreign/i)\n        )\n        return village\n    },\n    currentRegionField(): Field {\n        const region: Field = PersonField.getCurrentRegionField()\n        region.condition = () => this.canEdit(this.currentAddressAttributes, this.isRegistrationMode())\n        return region\n    },\n    currentDistrictField(): Field {\n        const currentDistrict: Field = PersonField.getCurrentDistrictField()\n        currentDistrict.condition = () => this.canEdit(this.currentAddressAttributes, this.isRegistrationMode())\n        return currentDistrict\n    },\n    currentTAField(): Field {\n        const currentTA: Field = PersonField.getCurrentTAfield()\n        currentTA.condition = (form: any) => this.canEdit(\n            this.currentAddressAttributes, \n            this.isRegistrationMode() && !form.current_region.label.match(/foreign/i),\n            !form.current_region.label.match(/foreign/i)\n        )\n        return currentTA\n    },\n    currentVillage(): Field {\n        const currentVillage: Field = PersonField.getCurrentVillageField()\n        currentVillage.condition = (form: any) => this.canEdit(\n            this.currentAddressAttributes, \n            this.isRegistrationMode() && !form.current_region.label.match(/foreign/i),\n            !form.current_region.label.match(/foreign/i)\n        )\n        return currentVillage\n    },\n    cellPhoneField(): Field {\n        const cellPhone: Field = PersonField.getCellNumberField()\n        cellPhone.condition = () => this.canEdit([cellPhone.id], this.isRegistrationMode())\n        return cellPhone \n    },\n    landmarkFields(): Field[] {\n        const landmarks: Field[] = PersonField.getLandmarkFields()\n        const id = landmarks[0].proxyID || landmarks[0].id\n        landmarks[0].defaultValue =  () => this.getDefaultVal(id)\n        landmarks[0].condition = () => this.canEdit([id], this.isRegistrationMode())\n        return landmarks\n    },\n    relationsField(): Field {\n        return {\n            id: 'relations',\n            helpText: 'Select relationship type',\n            type: FieldType.TT_RELATION_SELECTION,\n            defaultValue: () => this.getDefaultVal('relations'),\n            validation: (val: Option) => Validation.required(val),\n            condition: () => this.canEdit(['relations']),\n            onload: (context: any) => {\n                context.patient = this.patientData\n                if (this.isRegistrationMode()) {\n                    const person = PersonField.resolvePerson(context.cdata)\n                    context.guardian = {\n                        'name': `${person.given_name} ${person.family_name}`,\n                        'birth_date': HisDate.toStandardHisDisplayFormat(person.birthdate),\n                        'home_address': `${person.home_district} ${person.home_traditional_authority}`\n                    }\n                } else {\n                    context.guardian = this.guardianData\n                }\n            },\n            options: async() => {\n                const relationships = await RelationsService.getRelations()\n                return relationships.map((r: any) => ({\n                    label: r.b_is_to_a, \n                    value: r.description, \n                    other: r\n                }))\n            },\n            config: {\n                hiddenFooterBtns: [\n                  'Clear'\n                ]\n            }\n        }\n    },\n    scanGuardian(): Field {\n        return {\n            id: 'scan',\n            helpText: 'Scan or Register Guardian',\n            type: FieldType.TT_BARCODE,\n            requireNext: false,\n            condition: () => !this.isEditMode(),\n            onValue: async (id: string) => {\n                const searchResults = await Patientservice.findByNpid(id)\n                if (!isEmpty(searchResults)) {\n                    this.guardianData = PersonFieldHelper.mapPersonData(searchResults[0].person)\n                    this.fieldComponent = 'relations'\n                    this.fieldAction = 'Scan'\n                }\n                return false\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next',\n                    'Back'\n                ],\n                footerBtns : [\n                    {\n                        name: 'Find or Register Guardian',\n                        color: 'success',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldAction = 'Search'\n                            this.fieldComponent = 'given_name'\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    searchResultField(): Field {\n        return {\n            id: 'results',\n            helpText: 'Search results',\n            type: FieldType.TT_PERSON_RESULT_VIEW,\n            dynamicHelpText: (f: any) => {\n                return `Search results for \n                \"${f.given_name.value} ${f.family_name.value} | ${f.gender.label}\"\n                `\n            },\n            appearInSummary: () => false,\n            condition: () => this.isSearchMode(),\n            validation: (val: Option) => Validation.required(val),\n            options: async (form: any) => {\n                const patients = await Patientservice.search({\n                    'given_name': form.given_name.value, \n                    'family_name': form.family_name.value, \n                    'gender': form.gender.value, \n                });\n                return patients.map((item: any) => PersonField.getPersonAttributeOptions(item))\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next',\n                    'Back'\n                ],\n                footerBtns: [\n                    {\n                        name: 'Edit Search',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldAction = 'Search'\n                            this.fieldComponent = 'given_name'\n                        }\n                    },\n                    {\n                        name: 'New Guardian',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldAction = 'Registration'\n                            this.fieldComponent = 'year_birth_date'\n                        }\n                    },\n                    {\n                        name: 'Continue Guardian',\n                        color: 'success',\n                        slot: 'end',\n                        state: {\n                            disabled: {\n                                default: () => true,\n                                onValue(_: any,form: any) {\n                                    return isEmpty(form.results)\n                                }\n                            }\n                        },\n                        onClick: (form: any) => {\n                            this.guardianData = PersonFieldHelper.mapPersonData(\n                                form.results.other.person.person\n                            )\n                            this.fieldComponent = 'relations'\n                            this.fieldAction = 'Search'\n                        }\n                    }\n                ]\n            }\n        }\n    }\n  }\n})\n","import { render } from \"./GuardianRegistration.vue?vue&type=template&id=0334418a&ts=true\"\nimport script from \"./GuardianRegistration.vue?vue&type=script&lang=ts\"\nexport * from \"./GuardianRegistration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/anthony/Documents/source/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Service } from \"./service\"\n\nexport interface NewAttribute {\n    person_id: number;\n    person_attribute_type_id: number;\n    value: number | string;\n}\n\nexport class PersonAttributeService extends Service { \n    constructor() {\n        super()\n    }\n\n    static create(attributes: Array<NewAttribute>) { \n        return super.postJson('/person_attributes', attributes) \n    }\n}\n","import { Service } from \"./service\"\nimport { ProgramService } from \"@/services/program_service\";\nimport { Person } from \"@/interfaces/person\"\nimport { PersonService } from \"@/services/person_service\"\nimport { PersonAttributeService } from '@/services/person_attributes_service'\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\n\nexport class PatientRegistrationService extends Service {\n    personId: number\n    constructor() {\n        super()\n        this.personId = 0\n    }\n\n    getPersonID() {\n        return this.personId\n    }\n\n    setPersonID(personID: number) {\n        this.personId = personID\n    }\n\n    async registerPatient(person: any, personAttributes: any) {\n        await this.createPerson(person)\n        await this.createPersonAttributes(personAttributes)\n        const patient = await this.createPatient()\n        await this.printPatient()\n        return patient\n    }\n\n    async registerGuardian(person: any) {\n        return this.createPerson(person)\n    }\n\n    updatePerson(person: any) {\n       return new PersonService(person).update(this.personId)\n    }\n\n    async createPerson(person: any) {\n        const data: Person = await new PersonService(person).create()\n        this.personId = data.person_id\n        return data\n    }\n\n    createPatient() {\n        return ProgramService.createPatient(this.personId)\n    }\n\n    async createPersonAttributes(attributes: Array<any>) {\n        for(const index in attributes) {\n            await PersonAttributeService.create({\n                ...attributes[index],\n                'person_id': this.personId\n            })\n        }\n    }\n\n    printPatient() {\n        return new PatientPrintoutService(this.personId).printNidLbl()\n    }\n}\n","import { Service } from \"./service\";\n\nexport class RelationsService extends Service {\n    constructor() {\n        super()\n    }\n\n    static voidRelation(patientID: number, relationID: number, reason: string) {\n\t\treturn Service.void(`people/${patientID}/relationships/${relationID}`, { reason })\n\t}\n\n    static async amendRelation(patientID: number, guardianID: number, curRelationID: number, newRelationTypeID: number) {\n        await RelationsService.voidRelation(patientID, curRelationID,\n            'Updating guardian relationship'\n        )\n        return RelationsService.createRelation(\n            patientID, guardianID, newRelationTypeID\n        )\n    }\n\n    static getRelations() {\n        return super.getJson('types/relationships')\n    }\n\n    static createRelation(patientA: number, patientB: number, relationType: number) {\n        return super.postJson(`people/${patientA}/relationships`, {\n            'relationship_type_id': relationType,\n            'relation_id': patientB\n        })\n    }\n}\n","import { optionsActionSheet } from '@/utils/ActionSheets'\n\ntype OnVoidHandler = (reason: string) => Promise<void> | void\n\nexport default async function popVoidReason(callback: OnVoidHandler, size = 'action-sheet-modal') {\n    const modal = await optionsActionSheet(\n        'Are you sure you want to void record?',\n        'Please specify reason for voiding this record',\n        [\n          'Mistake/ Wrong Entry',\n          'Duplicate',\n          'System Error' \n        ],\n        [\n            { name: 'Cancel', slot:'start'},\n            { name: 'Void', color: 'danger', slot:'end', role: 'action'}\n        ],\n        '',\n        size\n    )\n    if (modal.selection && modal.action === 'Void') {\n        await callback(modal.selection)\n    }\n}\n"],"sourceRoot":""}