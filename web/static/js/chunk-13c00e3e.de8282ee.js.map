{"version":3,"sources":["webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/utils/ReportDateSelectionPrompt.ts","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts","webpack:///./src/apps/ART/services/reports/viral_load_report.ts","webpack:///./src/apps/ART/views/reports/clinic/ClinicVlCollection.vue?12a2","webpack:///./src/apps/ART/views/reports/clinic/ClinicVlCollection.vue","webpack:///./src/apps/ART/views/reports/clinic/ClinicVlCollection.vue?438c"],"names":["SYMBOLS_CONFIG","SYMBOLS","NUMBERS_ONLY","NUMBER_PAD_LO","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","MONTHLY_DAYS_LO","A_TO_Z","ALPHABETICAL_LO","QWERTY","QWERTY_LO","KEY_BTN_NAV","btn","keyboard","DatePeriodInputType","HtsReportPreference","ReportPreferences","reactive","datePeriodInputType","localStorage","getItem","PERIOD_INPUT_TYPE","MULTI_FIELD_DATE","DateSelection","params","MultiStepPopupForm","generateDateFields","id","helpText","required","minDate","maxDate","Service","getSessionDate","condition","estimation","allowUnknown","computeValue","date","_","c","start_date","proxyID","type","FieldType","TT_FULL_DATE","validation","v","Date","value","toDate","computedValue","SINGLE_DATE_INPUT_FIELD","defaultValue","f","label","TT_DATE_PICKER","CALENDAR_FIELD","StandardValidations","config","infoItems","end_date","persistInfoItems","async","console","log","modalController","dismiss","period","onFinish","e","toastDanger","EstimationFieldType","getYearField","name","showUnknown","primaryFunctions","push","appearInSummary","TT_TEXT","customKeyboard","getMonthField","TT_SELECT","options","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","parseInt","getDefaultDate","form","field","datePart","year","month","day","split","d","HisDate","toStandardHisDisplayFormat","validateMinMax","computed","min","max","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","includes","buildHelpTextDate","part","parts","default","reduce","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","data","unload","toString","match","isNaN","minYear","getYear","summaryMapValue","summaryLabel","ref","val","beforeNext","keyboardActions","valueEstimateCondition","estimateType","conditions","estimationFieldType","every","Boolean","ageEstimateRegex","dayjs","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","MONTH_ESTIMATE_FIELD","ViralLoadReportService","ArtReportService","constructor","super","getVlCollection","this","getReport","programID","getVLCoverage","getMaternalStatus","patientIds","Url","parameterizeObjToString","startDate","endDate","postJson","getViralLoad","render","_ctx","_cache","$props","$setup","$data","$options","_component_ion_loading","_resolveComponent","_component_v2Datatable","_component_ion_page","_openBlock","_createBlock","_withCtx","_createVNode","isLoading","message","title","subtitle","columns","columnData","reportData","rowsPerPage","onConfigure","configure","onRefresh","generate","defineComponent","components","IonPage","IonLoading","v2Datatable","setup","router","useRouter","report","exportable","birthdate","order_date","tdClick","path","patient_id","toastWarning","sDate","eDate","periodstr","onMounted","length","__exports__"],"mappings":"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","file":"js/chunk-13c00e3e.de8282ee.js","sourcesContent":["/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Service } from \"@/services/service\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport { toDate } from \"@/utils/Strs\"\nimport { MultiStepPopupForm } from \"@/utils/PopupKeyboard\"\nimport { toastDanger } from \"@/utils/Alerts\"\nimport { modalController } from \"@ionic/vue\"\nimport { reactive } from \"vue\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\n\nexport enum DatePeriodInputType {\n    MULTI_FIELD_DATE = 'Multipage date fields',\n    CALENDAR_FIELD = 'Calendar',\n    SINGLE_DATE_INPUT_FIELD = 'Single page date'\n}\n\nexport enum HtsReportPreference {\n    PERIOD_INPUT_TYPE = 'hts_report_date_period_type'\n}\n\nexport const ReportPreferences = reactive({\n    datePeriodInputType: localStorage.getItem(HtsReportPreference.PERIOD_INPUT_TYPE) || DatePeriodInputType.MULTI_FIELD_DATE\n} as any)\n\nexport function DateSelectionPreference() {\n    MultiStepPopupForm([\n        {\n            id: 'date_field_type',\n            helpText: 'Date input preference',\n            type: FieldType.TT_SELECT,\n            defaultValue: () => ReportPreferences.datePeriodInputType,\n            options: () => {\n                return [\n                    { label: 'Calendar', value: DatePeriodInputType.CALENDAR_FIELD },\n                    { label: 'Single page date', value: DatePeriodInputType.SINGLE_DATE_INPUT_FIELD},\n                    { label: 'Multipage date fields', value: DatePeriodInputType.MULTI_FIELD_DATE },\n                ]\n            }\n        }\n    ],\n    (f: any) => {\n        ReportPreferences.datePeriodInputType = f.date_field_type.value\n        localStorage.setItem(HtsReportPreference.PERIOD_INPUT_TYPE, ReportPreferences.datePeriodInputType)\n        modalController.dismiss()\n    })\n}\n\nexport function DateSelection(params: any) {\n    MultiStepPopupForm([\n        ...generateDateFields({\n            id: 'start_date',\n            helpText: 'Start',\n            required: true,\n            minDate: () => params?.minDate || '',\n            maxDate: () => params?.maxDate || Service.getSessionDate(),\n            condition: () => (ReportPreferences.datePeriodInputType === DatePeriodInputType.MULTI_FIELD_DATE) as boolean,\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => date \n        }),\n        ...generateDateFields({\n            id: 'end_date',\n            helpText: 'End',\n            required: true,\n            minDate: (_: any, c: any) => c.start_date,\n            maxDate: () => params?.maxDate || Service.getSessionDate(),\n            condition: () => (ReportPreferences.datePeriodInputType === DatePeriodInputType.MULTI_FIELD_DATE) as boolean,\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => date\n        }),\n        {\n            id: 'alt_start_date',\n            proxyID: 'start_date',\n            helpText: 'Start Date',\n            type: FieldType.TT_FULL_DATE,\n            validation: (v: Option) => {\n                if (!v) return ['Date is required']\n\n                const maxDate = params.maxDate || Service.getSessionDate()\n                if (params.minDate && new Date(v.value) < new Date(params.minDate)) {\n                    return [`${toDate(`${v.value}`)} is less than minimum date of ${toDate(params.minDate)}`]\n                }\n                if (maxDate && new Date(v.value) > new Date(maxDate)) {\n                    return [`${toDate(`${v.value}`)} is greater than max date of ${toDate(maxDate)}`]\n                }\n                return null\n            },\n            computedValue: (v: Option) => v.value,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.SINGLE_DATE_INPUT_FIELD\n        },\n        {\n            id: 'alt_end_date',\n            proxyID: 'end_date',\n            helpText: 'End Date',\n            type: FieldType.TT_FULL_DATE,\n            defaultValue: (f: any) => f.start_date.value,\n            validation: (v: Option, f: any) => {\n                if (!v) return ['Date is required']\n\n                const maxDate = params.maxDate || Service.getSessionDate()\n                if (f.start_date.value && new Date(v.value) < new Date(f.start_date.value)) {\n                    return [`${toDate(`${v.value}`)} is less than minimum date of ${toDate(f.start_date.value)}`]\n                }\n                if (maxDate && new Date(v.value) > new Date(maxDate)) {\n                    return [`${toDate(`${v.value}`)} is greater than max date of ${toDate(maxDate)}`]\n                }\n                return null\n            },\n            computedValue: (v: Option) => v.label,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.SINGLE_DATE_INPUT_FIELD\n        },\n        {\n            id: 'calendar_start_date',\n            proxyID: 'start_date',\n            helpText: 'Start Date',\n            type: FieldType.TT_DATE_PICKER,\n            computedValue: (v: Option) => v,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.CALENDAR_FIELD,\n            validation: (v: Option) => StandardValidations.required(v),\n            config: {\n                minDate: () => params.minDate || null,\n                maxDate: () => params.maxDate || Service.getSessionDate(),\n                infoItems: (date: string, f: any) => {\n                    return [\n                        { label: 'Start Date', value: toDate(date) || '-' },\n                        { label: 'End Date', value: toDate(f.end_date) || '-'}\n                    ]\n                },\n                persistInfoItems: false\n            }\n        },\n        {\n            id: 'calendar_end_date',\n            proxyID: 'end_date',\n            helpText: 'End Date',\n            type: FieldType.TT_DATE_PICKER,\n            validation: (v: Option) => StandardValidations.required(v),\n            defaultValue: (f: any) => f.start_date.value,\n            computedValue: (v: Option) => v,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.CALENDAR_FIELD,\n            config: {\n                minDate: (f: any) => f.start_date.value,\n                maxDate: () => params.maxDate || Service.getSessionDate(),\n                infoItems: (date: string, f: any) => {\n                    return [\n                        { label: 'Start Date', value: toDate(f.start_date) || '-' },\n                        { label: 'End Date', value: toDate(date)}\n                    ]\n                },\n                persistInfoItems: false\n            }\n        }\n    ], \n    async (f: any, c: any) => {\n        console.log(c)\n        modalController.dismiss()\n        try {\n            const period = `${toDate(c.start_date)} to ${toDate(c.end_date)}`\n            params.onFinish(c.start_date, c.end_date, period)\n        } catch (e) {\n            toastDanger(\"An error has occurred\")\n        }\n    })\n}","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","import Url from \"@/utils/Url\";\nimport { ArtReportService } from \"./art_report_service\";\n\nexport class ViralLoadReportService extends ArtReportService {\n    constructor() {\n        super()\n    }\n\n\n    getVlCollection() {\n        return this.getReport(`programs/${this.programID}/reports/vl_collection`)\n    }\n    \n    getVLCoverage(params = {} as Record<string, any>) {\n        return this.getReport(`programs/${this.programID}/reports/viral_load_coverage`, {\n            'rebuild_outcomes': true,\n            ...params\n        })\n    }\n\n    getMaternalStatus(patientIds: number[]) {\n        const params = Url.parameterizeObjToString({\n            'start_date': this.startDate,\n            'end_date': this.endDate,\n            'date': this.date,\n            'program_id': this.programID,\n            'report_definition': 'pepfar'\n        })\n        return ArtReportService.postJson(`vl_maternal_status?${params}`, {\n            'patient_ids': patientIds\n        })\n    }\n\n    getViralLoad(params = {} as Record<string, any>) {\n        return this.getReport(`programs/${this.programID}/reports/vl_disaggregated`, params)\n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_loading = _resolveComponent(\"ion-loading\")!\n  const _component_v2Datatable = _resolveComponent(\"v2Datatable\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_ion_loading, {\n        \"is-open\": _ctx.isLoading,\n        message: \"Please wait...\"\n      }, null, 8, [\"is-open\"]),\n      _createVNode(_component_v2Datatable, {\n        title: \"VL Collection\",\n        subtitle: _ctx.period,\n        columns: _ctx.columns,\n        columnData: _ctx.reportData,\n        rowsPerPage: 20,\n        onConfigure: _ctx.configure,\n        onRefresh: () => _ctx.generate()\n      }, null, 8, [\"subtitle\", \"columns\", \"columnData\", \"onConfigure\", \"onRefresh\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { IonPage, IonLoading } from \"@ionic/vue\"\nimport { defineComponent, onMounted, ref } from 'vue'\nimport  v2Datatable from \"@/components/DataViews/tables/v2PocDatatable/TableView.vue\"\nimport { ViralLoadReportService } from \"@/apps/ART/services/reports/viral_load_report\";\nimport { v2ColumnDataInterface, v2ColumnInterface } from '@/components/DataViews/tables/v2PocDatatable/types';\nimport { useRouter } from 'vue-router';\nimport { DateSelection } from '@/utils/ReportDateSelectionPrompt';\nimport { toastDanger, toastWarning } from '@/utils/Alerts';\nimport { toDate } from \"@/utils/Strs\";\n\nexport default defineComponent({\n    components: { \n        IonPage,\n        IonLoading,\n        v2Datatable\n    },\n    setup() {\n        const router = useRouter()\n        const reportData = ref([])\n        const period = ref('')\n        const isLoading = ref(false)\n        const report = new ViralLoadReportService()\n        const columns: Array<v2ColumnInterface[]> = [\n            [\n                {\n                    label: \"ARV#\",\n                    ref: 'identifier',\n                },\n                {\n                    label: \"First name\",\n                    ref: 'given_name',\n                    exportable: false\n                },\n                {\n                    label: \"Last name\",\n                    ref: 'family_name',\n                    exportable: false\n                },\n                {\n                    label: \"Gender\",\n                    ref: 'gender'\n                },\n                {\n                    label: \"DOB\",\n                    ref: 'birthdate',\n                    value: (data) => toDate(data.birthdate)\n                },\n                {\n                    label: \"Date of VL Order\",\n                    ref: 'order_date',\n                    value: (data) => toDate(data.order_date)\n                },\n                {\n                    label: 'Action',\n                    ref: 'patient_id',\n                    exportable: false,\n                    tdClick: ({data}: v2ColumnDataInterface) => router.push({ path: `/patient/dashboard/${data.patient_id}`}) ,\n                    value: () => 'View client'\n                }\n            ]\n        ]\n        \n        /**\n         * Generates report by start date and end date\n         */\n         const generate = async () => {\n            if (!(report.startDate && report.endDate))  {\n                return toastWarning('Start date and end date required!')\n            }\n            isLoading.value = true\n            reportData.value = []\n            try {\n                reportData.value = await report.getVlCollection()\n            } catch (e) {\n                toastDanger(\"Unable to generate report!\")\n            }\n            isLoading.value = false\n        }\n\n        /**\n         * Loads a dialogue to allow users to configure start and end date\n         */\n         const configure = () => DateSelection({\n            onFinish: (sDate: string, eDate: string, periodstr: string) => {\n                period.value = `Period (${periodstr})`\n                report.startDate = sDate\n                report.endDate = eDate\n                generate()\n            }\n        })\n\n        /**\n         * Initialization code when the report is empty!\n        */\n        onMounted(() => !reportData.value.length && configure())\n\n        return {\n            reportData,\n            isLoading,\n            configure,\n            generate,\n            columns,\n            period\n        }\n    }\n})\n","import { render } from \"./ClinicVlCollection.vue?vue&type=template&id=4ea6d614&ts=true\"\nimport script from \"./ClinicVlCollection.vue?vue&type=script&lang=ts\"\nexport * from \"./ClinicVlCollection.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/projects/malawi-emr/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}