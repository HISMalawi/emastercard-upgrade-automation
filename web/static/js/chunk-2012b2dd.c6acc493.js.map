{"version":3,"sources":["webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/utils/HisFormHelpers/PersonFieldHelper.ts","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts","webpack:///./src/services/person_service.ts","webpack:///./src/components/Forms/BaseFormElements.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts","webpack:///./src/components/FormElements lazy ^\\.\\/.*\\.vue$ namespace object"],"names":["DEFAULT_KEYPAD","PRESCRIPTION_KEYPAD","FLOAT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","NUMBER_ARROW_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","fields","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","defineComponent","name","components","TouchScreenForm","emits","data","props","type","Function","Boolean","default","String","Object","required","methods","formData","computedData","this","$emit","i","__exports__","mapToOption","listOptions","map","item","label","value","resolvePerson","computedForm","attr","values","isPlainObject","person","getGivenNameField","id","helpText","FieldType","TT_TEXT","computedValue","val","validation","Validation","isName","options","async","form","given_name","names","PersonService","searchGivenName","getFamilyNameField","family_name","searchFamilyName","getGenderField","TT_SELECT","getDobConfig","summaryLabel","minDate","HisDate","estimateDateFromAge","maxDate","getSessionDate","estimation","allowUnknown","allowUnknownMonthDay","estimationFieldType","EstimationFieldType","AGE_ESTIMATE_FIELD","computeValue","date","isEstimate","birthdate","getHomeRegionField","group","requireNext","getRegions","getHomeDistrictField","dynamicHelpText","f","home_region","match","getDistricts","addCustomLocationBtnForTAorVillage","BtnName","formParentAddressRef","slot","color","onClick","c","field","filter","length","toastWarning","isEmpty","filtered","ok","alertConfirmation","address","LocationService","createAddress","toUpperCase","getHomeTaField","config","showKeyboard","isFilterDataViaApi","footerBtns","defaultOutput","defaultComputedOutput","getTraditionalAuthorities","home_district","getHomeVillageField","getVillages","home_traditional_authority","getCurrentRegionField","getCurrentDistrictField","current_region","getCurrentTAfield","current_district","getCurrentVillageField","current_traditional_authority","getCellNumberField","number","split","isMWPhoneNumber","customKeyboard","getLandmarkFields","proxyID","appearInSummary","default_landmarks","TT_NOTE","condition","v","getFacilityLocationField","_","getFacilities","getPersonNameFromPersonObj","personObj","getAttrFromPersonObj","Array","isArray","person_attributes","reduce","getAddressFromPersonObj","addresses","addressMap","mapPersonData","givenName","familyName","homeDistrict","homeVillage","homeTA","person_id","gender","birthdate_estimated","getPersonAttributeOptions","patient","Patientservice","prop","getPatientInfoString","getID","getNationalID","other","patientID","npid","show","Service","getProgramName","getYearField","showUnknown","primaryFunctions","push","getMonthField","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","parseInt","getDefaultDate","datePart","defaultValue","year","month","day","d","toStandardHisDisplayFormat","validateMinMax","computed","min","Date","max","generateDateFields","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","datePartCondition","includes","buildHelpTextDate","part","parts","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","unload","toString","StandardValidations","isNaN","minYear","getYear","summaryMapValue","ref","beforeNext","keyboardActions","valueEstimateCondition","estimateType","conditions","every","ageEstimateRegex","dayjs","subtract","format","STANDARD_DATE_FORMAT","MONTH_ESTIMATE_FIELD","constructor","super","_defineProperty","create","postJson","update","putJson","getProgramID","getJson","personId","clients","person_ids","COMPONENT_REFS","TT_ASYNC_MULTI_SELECT","TT_LINKAGE_CODE","TT_MULTI_SELECT_GRID","TT_AGE_INPUT","TT_BARCODE","TT_CARD_SELECTOR","TT_MULTIPLE_SELECT","TT_ART_REGIMEN_SELECTION","TT_NEXT_VISIT_INTERVAL_SELECTION","TT_TABLE_VIEWER","TT_DOSAGE_INPUT","TT_YES_NO","TT_MULTIPLE_YES_NO","TT_WEIGHT_CHART","TT_VITALS_ENTRY","TT_APPOINTMENTS_ENTRY","TT_COMPLAINTS_PICKER","TT_CLINIC_HOLIDAY_PICKER","TT_SUMMARY","TT_ART_STAGING_SUMMARY","TT_ADHERENCE_INPUT","TT_LAB_ORDERS","TT_PERSON_RESULT_VIEW","TT_PROGRAM_SELECTION","TT_DATE_PICKER","TT_RELATION_SELECTION","TT_FILING_NUMBER_VIEW","TT_PERSON_MATCH_VIEW","TT_FULL_DATE","TT_BATCH_ENTRY","TT_BATCH_VERIFICATION","TT_BATCH_MOVEMENT","TT_IP_ADDRESS","TT_TEXT_BANNER","TT_DISPENSATION_INPUT","TT_DATA_TABLE","TT_GROUP_SELECTOR","TT_ANC_PREGNANCY_INPUT_CONFIG","TT_ANC_PREGNANCY_DETAILS_INPUT","TT_ANC_LMP_DATE_INPUT","TT_DRUG_TRANSFER_IN","TT_GRID_SELECTOR","TT_ANC_DRUGSET_INPUT","TT_RADIOLOGY_PICKER","TT_PRESCRIPTION_INPUT","TT_INFINITE_SCROLL_MULTIPLE_SELECT","TT_DRUG_DISPENSER","facilities","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","regions","region","region_id","regionID","districts","district","district_id","districtID","TAs","TA","traditional_authority_id","traditionalAuthorityID","villages","village","village_id","getVillagesByName","page","getLandmarks","landmarks","landmark","code","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","ids","all","slice","keys","module","exports"],"mappings":"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CAC/B,OACA,sBAED,wBAAyB,CACxB,OACA,sBAED,sBAAuB,CACtB,OACA,iBACA,iBACA,sBAED,yBAA0B,CACzB,OACA,iBACA,iBACA,sBAED,6BAA8B,CAC7B,OACA,iBACA,iBACA,sBAED,wBAAyB,CACxB,OACA,sBAED,+BAAgC,CAC/B,OACA,iBACA,sBAED,4BAA6B,CAC5B,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,sBAAuB,CACtB,OACA,iBACA,sBAED,uBAAwB,CACvB,OACA,iBACA,sBAED,wBAAyB,CACxB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,wCAAyC,CACxC,OACA,sBAED,qBAAsB,CACrB,OACA,iBACA,sBAED,uBAAwB,CACvB,OACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,0BAA2B,CAC1B,OACA,iBACA,sBAED,6BAA8B,CAC7B,OACA,sBAED,gBAAiB,CAChB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,6BAA8B,CAC7B,OACA,iBACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,kBAAmB,CAClB,OACA,sBAED,mBAAoB,CACnB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,sBAAuB,CACtB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,wBAAyB,CACxB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,oBAAqB,CACpB,OACA,sBAED,oBAAqB,CACpB,OACA,uBAGF,SAASwT,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAE3T,EAAKyT,GAC9B,OAAOG,QAAQC,UAAUC,MAAK,WAC7B,IAAIC,EAAI,IAAIC,MAAM,uBAAyBP,EAAM,KAEjD,MADAM,EAAER,KAAO,mBACHQ,KAIR,IAAIE,EAAMjU,EAAIyT,GAAM9S,EAAKsT,EAAI,GAC7B,OAAOL,QAAQM,IAAID,EAAIE,MAAM,GAAGnU,IAAI0T,EAAoBK,IAAID,MAAK,WAChE,OAAOJ,EAAoB/S,MAG7B6S,EAAoBY,KAAO,WAC1B,OAAO/U,OAAO+U,KAAKpU,IAEpBwT,EAAoB7S,GAAK,OACzB0T,EAAOC,QAAUd","file":"js/chunk-2012b2dd.c6acc493.js","sourcesContent":["export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const PRESCRIPTION_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del', '0', '.'],\n    ['Unknown', '', ''],\n]\nexport const FLOAT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const NUMBER_ARROW_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['←',  '0', '→']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/anthony/Documents/source/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import {\n    getFacilities,\n    getRegions,\n    getDistricts,\n    getTraditionalAuthorities,\n    getVillages\n} from '@/utils/HisFormHelpers/LocationFieldOptions'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport {PersonService} from \"@/services/person_service\"\nimport { EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport HisDate from \"@/utils/Date\"\nimport { DateFieldInterface } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport { alertConfirmation, toastWarning } from '../Alerts'\nimport { LocationService } from '@/services/location_service'\nimport { Service } from '@/services/service'\n\nfunction mapToOption(listOptions: Array<string>): Array<Option> {\n    return listOptions.map((item: any) => ({ \n        label: item, value: item \n    })) \n}\nexport default {\n    resolvePerson(computedForm: any) {\n        let data: any = {}\n        for(const attr in computedForm) {\n            const values = computedForm[attr]\n            if (isPlainObject(values) && 'person' in values) {\n                if (isPlainObject(values.person)) {\n                    data = {...data, ...values.person}\n                } else {\n                    data[attr] = values['person']\n                }\n            }\n        }\n        return data   \n    },\n    getGivenNameField(): Field {\n        return {\n            id: 'given_name',\n            helpText: 'First name',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.given_name) {\n                    const names = await PersonService.searchGivenName(form.given_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getFamilyNameField(): Field {\n        return {\n            id: 'family_name',\n            helpText: \"Last name\",\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.isName(val),\n            options: async (form: any) => {\n                if (form.family_name) {\n                    const names = await PersonService.searchFamilyName(form.family_name.value)\n                    return mapToOption(names)\n                } \n                return []\n            }\n        }\n    },\n    getGenderField(): Field {\n        return  {\n            id: 'gender',\n            helpText: 'Gender',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            validation: (val: any) => Validation.required(val),\n            options: () => ([\n                {\n                    label: 'Female',\n                    value: 'F'\n                },\n                { \n                    label: 'Male',\n                    value: 'M'\n                }\n            ])\n        }\n    },\n    getDobConfig(): DateFieldInterface {\n        return  {\n            id: 'birth_date',\n            summaryLabel: 'Date of Birth',\n            helpText: 'Birth',\n            required: true,\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => PersonService.getSessionDate(),\n            estimation: {\n                allowUnknown: true,\n                allowUnknownMonthDay: true,\n                estimationFieldType: EstimationFieldType.AGE_ESTIMATE_FIELD\n            },\n            computeValue: (date: string, isEstimate: boolean) => {\n                return {\n                    date,\n                    isEstimate,\n                    person: {\n                        birthdate: date,\n                        'birthdate_estimated': isEstimate\n                    }\n                }\n            }\n        }\n    },\n    getHomeRegionField(): Field {\n        return {\n            id: 'home_region',\n            helpText: 'Region of origin',\n            type: FieldType.TT_SELECT,\n            group: 'person',\n            requireNext: false,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getHomeDistrictField() {\n        return  {\n            id: 'home_district',\n            helpText: 'Home District',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            dynamicHelpText: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return 'Home Country'\n                }\n                return 'Home District'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            options: (form: any) => getDistricts(form.home_region.value)\n        }\n    },\n    addCustomLocationBtnForTAorVillage(BtnName: string, formParentAddressRef: string) {\n        return {\n            name: `Add ${BtnName}`,\n            slot: \"end\",\n            color: \"success\",\n            onClick: async (f: any, c: any, field: any) => {\n                 if (typeof field.filter != 'string' || field.filter.length < 3) {\n                    return toastWarning(`Please enter a valid ${BtnName}`)\n                 }\n                 if (!isEmpty(field.filtered)) {\n                    return toastWarning(`Can't add existing ${BtnName}`)\n                 } \n                 const ok = await alertConfirmation(`Do you want to add ${BtnName} ${field.filter}?`)\n\n                 if (!ok) return\n\n                 const address = await LocationService.createAddress(BtnName, field.filter, f[formParentAddressRef].value)\n                 if (address) {\n                    // Hack to force the list to reload the list with new data\n                    field.filter = field.filter.toUpperCase() \n                 } else {\n                    return toastWarning(`Unable to add ${BtnName}`)\n                 }\n            }\n         }\n    },\n    getHomeTaField() {\n        return  {\n            id: 'home_traditional_authority',\n            helpText: 'Home TA',\n            type: FieldType.TT_SELECT,\n            requireNext: false,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'home_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.home_district.value, filter)\n        }\n    },\n    getHomeVillageField() {\n        return {\n            id: 'home_village',\n            helpText: 'Home Village',\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'home_traditional_authority')\n                ]\n            },\n            requireNext: false,\n            defaultOutput: () => ({ label: 'N/A', value: 'N/A' }),\n            defaultComputedOutput: (f: any) => {\n                if (f.home_region && f.home_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.home_traditional_authority.value, filter)\n        }\n    },\n    getCurrentRegionField() {\n        return {\n            id: 'current_region',\n            helpText: 'Current Region',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: () => getRegions()\n        }\n    },\n    getCurrentDistrictField() {\n        return {\n            id: 'current_district',\n            helpText: 'District',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            dynamicHelpText: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return 'Current Country'\n                }\n                return 'Current District'\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any) => getDistricts(form.current_region.value)\n        }\n    },\n    getCurrentTAfield() {\n        return    {\n            id: 'current_traditional_authority',\n            helpText: 'Current TA',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('TA', 'current_district')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getTraditionalAuthorities(form.current_district.value, filter)\n        }\n    },\n    getCurrentVillageField() {\n        return {\n            id: 'current_village',\n            helpText: 'Current Village',\n            requireNext: false,\n            type: FieldType.TT_SELECT,\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true,\n                footerBtns: [\n                    this.addCustomLocationBtnForTAorVillage('Village', 'current_traditional_authority')\n                ]\n            },\n            defaultOutput: () => ({label: 'N/A', value: 'N/A'}),\n            defaultComputedOutput: (f: any) => {\n                if (f.current_region && f.current_region.label.match(/foreign/i)) {\n                    return { person: 'Unknown'}\n                }\n                return null\n            },\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (form: any, filter: string) => getVillages(form.current_traditional_authority.value, filter)\n        }\n    },\n    getCellNumberField() {\n        return   {\n            id: 'cell_phone_number',\n            helpText: 'Cell phone number',\n            group: 'person',\n            type: FieldType.TT_TEXT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => {\n                if (val) {\n                    if (val.value.match(/Unknown|n\\/a/i)) {\n                        return null\n                    }\n                    for(const number of `${val.value}`.split('/')) {\n                        if (Validation.isMWPhoneNumber({label: number, value: number})) {\n                            return [`\"${number}\" is not a valid phone number`]\n                        }\n                    }\n                    return null\n                }\n                return ['Phone number cannot be empty']\n            },\n            config: {\n                customKeyboard: [\n                    [\n                        ['1', '2', '3'],\n                        ['4', '5', '6'],\n                        ['7', '8', '9'],\n                        ['',  '0', '']\n                    ],\n                    [ \n                        [ '+265', '/'],\n                        [ 'Unknown', 'N/A' ],\n                        [ 'Delete' ]\n                    ]\n                ]\n            }\n        }\n    },\n    getLandmarkFields(): Field[] {\n        return [\n            {\n                id: 'default_landmarks',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_SELECT,\n                appearInSummary: (f: any) => f.default_landmarks.value != 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (val: any) => Validation.required(val),\n                options: () => mapToOption([\n                    'Catholic Church',\n                    'CCAP',\n                    'Seventh Day',\n                    'Mosque',\n                    'Primary School',\n                    'Borehole',\n                    'Secondary School',\n                    'College',\n                    'Market',\n                    'Football Ground',\n                    'Other'\n                ])\n            },\n            {\n                id: 'other_landmark',\n                proxyID: 'landmark',\n                helpText: 'Closest Landmark or Plot Number',\n                type: FieldType.TT_NOTE,\n                condition: (f: any) => f.default_landmarks.value === 'Other',\n                computedValue: (val: Option) => ({person: val.value}),\n                validation: (v: Option) => Validation.required(v)\n            }\n        ]\n    },\n    getFacilityLocationField() {\n        return  {\n            id: 'location',\n            helpText: 'Please select facility name',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.label}),\n            validation: (val: any) => Validation.required(val),\n            options: (_: any, filter='') => getFacilities(filter),\n            config: {\n                showKeyboard: true,\n                isFilterDataViaApi: true\n            }\n        }\n    },\n    getPersonNameFromPersonObj(personObj: any, type: 'given_name' | 'family_name') {\n        if (personObj.names.length) {\n            return personObj.names[0][type]\n        }\n        return ''\n    },\n    getAttrFromPersonObj(personObj: any, type: 'Landmark Or Plot Number' | 'Cell Phone Number') {\n        if (Array.isArray(personObj.person_attributes) && personObj.person_attributes.length) {\n            return personObj.person_attributes.reduce((v: string, c: any) => {\n                if (c.type.name === type) {\n                    return c.value\n                }\n                return v\n            }, '')\n        }\n        return ''\n    },\n    getAddressFromPersonObj(personObj: any, \n        type: 'home_region' | \n        'home_district' | \n        'home_region' | \n        'home_village' | \n        'home_traditional_authority' | \n        'current_region' |\n        'current_traditional_authority' | \n        'current_district') {\n        if (Array.isArray(personObj.addresses) && personObj.addresses.length) {\n            const address: any = personObj.addresses[0]\n            const addressMap: Record<string, string> = {\n                'home_district': 'address2', \n                'home_village': 'neighborhood_cell',\n                'home_traditional_authority': 'county_district', \n                'current_village': 'city_village',\n                'current_traditional_authority' : 'township_division',\n                'current_district': 'state_province'\n            }\n            return address[addressMap[type]]\n        }\n        return ''\n    },\n    mapPersonData(personObj: any) {\n        const givenName = this.getPersonNameFromPersonObj(personObj, 'given_name')\n        const familyName = this.getPersonNameFromPersonObj(personObj, 'family_name')\n        const homeDistrict = this.getAddressFromPersonObj(personObj, 'home_district')\n        const homeVillage = this.getAddressFromPersonObj(personObj, 'home_village')\n        const homeTA = this.getAddressFromPersonObj(personObj, 'home_traditional_authority')\n        return {\n            'id': personObj.person_id,\n            'name': `${givenName} ${familyName}`,\n            'given_name': givenName,\n            'family_name': familyName,\n            'gender': personObj.gender,\n            'birth_date': personObj.birthdate,\n            'birthdate_estimated': personObj.birthdate_estimated,\n            'home_district': homeDistrict,\n            'home_village': homeVillage,\n            'home_traditional_authority': homeTA,\n            'home_address': `${homeDistrict} ${homeVillage}`,\n            'current_district': this.getAddressFromPersonObj(personObj, 'current_district'),\n            'current_traditional_authority': this.getAddressFromPersonObj(personObj, 'current_traditional_authority'),\n            'cell_phone_number': this.getAttrFromPersonObj(personObj, 'Cell Phone Number'),\n            'landmark': this.getAttrFromPersonObj(personObj, 'Landmark Or Plot Number')\n        }\n    },\n    getPersonAttributeOptions(person: any) {\n        const patient = new Patientservice(person);\n        const prop = (patient: any, prop: string) => prop in patient ? patient[prop]() : '-'\n        return {\n            label: patient.getPatientInfoString(),\n            value: patient.getID() || patient.getNationalID(),\n            other: {\n                patientID: patient.getID(),\n                npid: patient.getNationalID(),\n                person,\n                options: [\n                    {\n                        label: \"National ID\",\n                        value: prop(patient, 'getNationalID')\n                    },\n                    {\n                        label: 'ARV Number',\n                        value: prop(patient, 'getArvNumber'),\n                        other: {\n                            show: () => Service.getProgramName() === \"ART\" \n                        }\n                    },\n                    {\n                        label: \"Name\",\n                        value: prop(patient, 'getFullName'),\n                    },\n                    {\n                        label: \"Gender\",\n                        value: prop(patient, 'getGender'),\n                    },\n                    {\n                        label: \"Birthdate\",\n                        value: prop(patient, 'getBirthdate'),\n                    },\n                    {\n                        label: \"Home District\",\n                        value: prop(patient, 'getHomeDistrict'),\n                    },\n                    {\n                        label: \"Home Village\",\n                        value: prop(patient, 'getHomeVillage'),\n                    },\n                    {\n                        label: \"Current District\",\n                        value: prop(patient, 'getCurrentDistrict'),\n                    },\n                    {\n                        label: \"Current T/A\",\n                        value: prop(patient, 'getCurrentTA'),\n                    },\n                    {\n                        label: 'Cellphone',\n                        value: prop(patient, 'getPhoneNumber')\n                    }\n                ]\n            }\n        }    \n    }\n}\n","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year as number < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year as number > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, , day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value as number > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","import { Person } from \"@/interfaces/person\"\nimport { Service } from \"./service\"\n\nexport interface NewPerson {\n    person_id?: number;\n    given_name: string;\n    family_name: string;\n    gender: string;\n    birthdate: string;\n    birthdate_estimated: boolean;\n    home_district: string;\n    home_traditional_authority: string;\n    home_village: string;\n    current_district: string;\n    current_traditional_authority: string;\n    current_village: string;\n    landmark: string;\n    cell_phone_number: string;\n    occupation: string;\n    facility_name: string;\n    patient_type?: string;\n    relationship?: string;\n}\n\nexport class PersonService extends Service{\n    person: Person | NewPerson\n    constructor(person: NewPerson | Person){\n        super()\n        this.person = person\n    }\n\n    create() { return Service.postJson('/people', this.person) }\n\n    update(id: number) { return Service.putJson(`people/${id}`, {\n        ...this.person, 'program_id': Service.getProgramID()\n    })}\n\n    static searchFamilyName(name: string) {\n        return super.getJson('/search/family_name', {'search_string': name})\n    }\n\n    static searchGivenName(name: string) {\n        return super.getJson('/search/given_name', {'search_string': name})\n    }\n\n    static async getPersonFullName(personId: string | number) {\n        const names = await super.getJson(`/people/${personId}/names`)\n        return names && names.length ? names[0].given_name + ' ' + names[0].family_name : ''\n    }\n\n    static getPersons(clients: number[]) {\n        return super.getJson('clients', { person_ids: clients.join(',') })\n    }\n}\n","/**\n * Map all formElements/components defined in \"@/components/FormElements\" \n * in the Enum below by their file name.\n * \n * Next step is to add FieldType entry in COMPONENT_REFS in the \n * Array below the FieldType Enum\n */\nexport enum FieldType {\n    TT_ASYNC_MULTI_SELECT = 'AsyncMultiSelect',\n    TT_LINKAGE_CODE = 'LinkageCodeInput',\n    TT_MULTI_SELECT_GRID= 'HisMultiSelectGrid',\n    TT_AGE_INPUT='HisAgeInput',\n    TT_GROUP_SELECTOR = 'HisGroupSelector',\n    TT_DATA_TABLE = 'HisDataTable',\n    TT_GRID_SELECTOR = 'HisGridSelector',\n    TT_NOTE = 'HisNote',\n    TT_BARCODE = 'HisBarcodeInput',\n    TT_MONTHLY_DAYS=\"HisMonthlyDays\",\n    TT_TEXT=\"HisTextInput\",\n    TT_NUMBER = \"HisNumberInput\",\n    TT_DATETIME=\"datetime\",\n    TT_SELECT=\"HisSelect\",\n    TT_MULTIPLE_SELECT=\"HisMultipleSelect\",\n    TT_ART_REGIMEN_SELECTION=\"HisArtRegimenSelection\",\n    TT_NEXT_VISIT_INTERVAL_SELECTION=\"HisNextVisitInterval\",\n    TT_TABLE_VIEWER=\"HisTableViewer\",\n    TT_DOSAGE_INPUT=\"HisDosageInput\",\n    TT_YES_NO=\"YesNoSelect\",\n    TT_MULTIPLE_YES_NO=\"MultiYesNoSelect\",\n    TT_SUMMARY=\"HisSummary\",\n    TT_WEIGHT_CHART = \"HisWeightChart\",\n    TT_VITALS_ENTRY=\"HisVitalsEntry\",\n    TT_ADHERENCE_INPUT = \"HisAdherenceInput\",\n    TT_ART_STAGING_SUMMARY = \"ArtStagingSummary\",\n    TT_LAB_ORDERS = \"HisLabOrders\",\n    TT_APPOINTMENTS_ENTRY = \"HisAppointments\",\n    TT_DISPENSATION_INPUT = 'DrugDispensationSelection',\n    TT_PROGRAM_SELECTION = 'ProgramSelection',\n    TT_DATE_PICKER = 'HisDatePicker',\n    TT_PERSON_RESULT_VIEW = 'PersonSearchView',\n    TT_RELATION_SELECTION = 'RelationsSelection',\n    TT_FILING_NUMBER_VIEW = 'FilingNumberView',\n    TT_CARD_SELECTOR = 'HisCardSelector',\n    TT_PERSON_MATCH_VIEW = 'PersonMatchView',\n    TT_FULL_DATE = 'HisDateInput',\n    TT_BATCH_ENTRY = 'HisBatchEntry',\n    TT_BATCH_VERIFICATION = 'HisBatchVerification',\n    TT_BATCH_MOVEMENT = 'HisBatchMovement',\n    TT_COMPLAINTS_PICKER = 'HisComplaintsPicker',\n    TT_RADIOLOGY_PICKER = 'HisRadiologyPicker',\n    TT_IP_ADDRESS = 'HisIPAddress',\n    TT_TEXT_BANNER = 'HisTextBanner',\n    TT_DRUG_DISPENSER = 'GeneralDrugDispenser',\n    TT_CLINIC_HOLIDAY_PICKER = 'HisClinicHolidayPicker',\n    TT_ANC_PREGNANCY_INPUT_CONFIG = 'AncPregnancyInfoConfig',\n    TT_ANC_PREGNANCY_DETAILS_INPUT = 'AncPregnancyDetailsInput',\n    TT_ANC_LMP_DATE_INPUT = 'AncLmpDateInput',\n    TT_ANC_DRUGSET_INPUT = 'AncDrugSetInput',\n    TT_DRUG_TRANSFER_IN = 'DrugTransferInput',\n    TT_PRESCRIPTION_INPUT = 'HisPrescriptionInput',\n    TT_INFINITE_SCROLL_MULTIPLE_SELECT=\"HisInfiniteScrollMultipleSelect\"\n}\n\n// Register FieldTypes here that will be registered at runtime\nexport const COMPONENT_REFS: FieldType[] = [\n    FieldType.TT_ASYNC_MULTI_SELECT,\n    FieldType.TT_LINKAGE_CODE,\n    FieldType.TT_MULTI_SELECT_GRID,\n    FieldType.TT_AGE_INPUT,\n    FieldType.TT_BARCODE,\n    FieldType.TT_NOTE,\n    FieldType.TT_SELECT,\n    FieldType.TT_CARD_SELECTOR,\n    FieldType.TT_MULTIPLE_SELECT,\n    FieldType.TT_TEXT,\n    FieldType.TT_NUMBER,\n    FieldType.TT_MONTHLY_DAYS,\n    FieldType.TT_ART_REGIMEN_SELECTION,\n    FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n    FieldType.TT_TABLE_VIEWER,\n    FieldType.TT_DOSAGE_INPUT,\n    FieldType.TT_YES_NO,\n    FieldType.TT_MULTIPLE_YES_NO,\n    FieldType.TT_WEIGHT_CHART,\n    FieldType.TT_VITALS_ENTRY,\n    FieldType.TT_APPOINTMENTS_ENTRY,\n    FieldType.TT_COMPLAINTS_PICKER,\n    FieldType.TT_CLINIC_HOLIDAY_PICKER,\n    FieldType.TT_SUMMARY,\n    FieldType.TT_ART_STAGING_SUMMARY,\n    FieldType.TT_ADHERENCE_INPUT,\n    FieldType.TT_LAB_ORDERS,\n    FieldType.TT_PERSON_RESULT_VIEW,\n    FieldType.TT_PROGRAM_SELECTION,\n    FieldType.TT_DATE_PICKER,\n    FieldType.TT_RELATION_SELECTION,\n    FieldType.TT_FILING_NUMBER_VIEW,\n    FieldType.TT_PERSON_MATCH_VIEW,\n    FieldType.TT_FULL_DATE,\n    FieldType.TT_BATCH_ENTRY,\n    FieldType.TT_BATCH_VERIFICATION,\n    FieldType.TT_BATCH_MOVEMENT,\n    FieldType.TT_IP_ADDRESS,\n    FieldType.TT_TEXT_BANNER,\n    FieldType.TT_DISPENSATION_INPUT,\n    FieldType.TT_DATA_TABLE,\n    FieldType.TT_GROUP_SELECTOR,\n    FieldType.TT_ANC_PREGNANCY_INPUT_CONFIG,\n    FieldType.TT_ANC_PREGNANCY_DETAILS_INPUT,\n    FieldType.TT_ANC_LMP_DATE_INPUT,\n    FieldType.TT_DRUG_TRANSFER_IN,\n    FieldType.TT_GRID_SELECTOR,\n    FieldType.TT_ANC_DRUGSET_INPUT,\n    FieldType.TT_RADIOLOGY_PICKER,\n    FieldType.TT_PRESCRIPTION_INPUT,\n    FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n    FieldType.TT_DRUG_DISPENSER\n]\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport async function getVillagesByName(name='a', page=1): Promise<Option[]> {\n    const villages = await LocationService.getVillagesByName(name, page)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport function getLandmarks(): Option[] {\n    const landmarks = [\n        'Catholic Church',\n        'CCAP',\n        'Seventh Day',\n        'Mosque',\n        'Primary School',\n        'Borehole',\n        'Secondary School',\n        'College',\n        'Market',\n        'Football Ground',\n        'Other'\n    ]\n\n    return landmarks.map(landmark =>({\n        label: landmark,\n        value: landmark,\n        other: {\n            code: landmark\n        }\n    }))\n}\n","var map = {\n\t\"./AncDrugSetInput.vue\": [\n\t\t\"c99f\",\n\t\t\"TouchFormElement0\"\n\t],\n\t\"./AncLmpDateInput.vue\": [\n\t\t\"101a\",\n\t\t\"TouchFormElement1\"\n\t],\n\t\"./AncPregnancyDetailsInput.vue\": [\n\t\t\"b043\",\n\t\t\"TouchFormElement2\"\n\t],\n\t\"./AncPregnancyInfoConfig.vue\": [\n\t\t\"262e\",\n\t\t\"TouchFormElement3\"\n\t],\n\t\"./ArtStagingSummary.vue\": [\n\t\t\"43db\",\n\t\t\"TouchFormElement4\"\n\t],\n\t\"./AsyncMultiSelect.vue\": [\n\t\t\"5de2\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement5\"\n\t],\n\t\"./BaseTextInput.vue\": [\n\t\t\"36ad\",\n\t\t\"TouchFormElement6\"\n\t],\n\t\"./DrugDispensationSelection.vue\": [\n\t\t\"05d5\",\n\t\t\"TouchFormElement7\"\n\t],\n\t\"./DrugTransferInput.vue\": [\n\t\t\"de42\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement8\"\n\t],\n\t\"./FieldMixin.vue\": [\n\t\t\"51c8\",\n\t\t\"TouchFormElement9\"\n\t],\n\t\"./FilingNumberView.vue\": [\n\t\t\"c650\",\n\t\t\"TouchFormElement10\"\n\t],\n\t\"./GeneralDrugDispenser.vue\": [\n\t\t\"7737\",\n\t\t\"TouchFormElement11\"\n\t],\n\t\"./HisAdherenceInput.vue\": [\n\t\t\"f2c3\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement12\"\n\t],\n\t\"./HisAgeInput.vue\": [\n\t\t\"c05f\",\n\t\t\"TouchFormElement13\"\n\t],\n\t\"./HisAppointments.vue\": [\n\t\t\"b2eb\",\n\t\t\"chunk-228c9c72\",\n\t\t\"TouchFormElement14\"\n\t],\n\t\"./HisArtRegimenSelection.vue\": [\n\t\t\"47b9\",\n\t\t\"TouchFormElement15\"\n\t],\n\t\"./HisBarcodeInput.vue\": [\n\t\t\"dd65\",\n\t\t\"TouchFormElement16\"\n\t],\n\t\"./HisBatchEntry.vue\": [\n\t\t\"f2ab\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement17\"\n\t],\n\t\"./HisBatchMovement.vue\": [\n\t\t\"5148\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement18\"\n\t],\n\t\"./HisBatchVerification.vue\": [\n\t\t\"7b0f\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement19\"\n\t],\n\t\"./HisCardSelector.vue\": [\n\t\t\"0734\",\n\t\t\"TouchFormElement20\"\n\t],\n\t\"./HisClinicHolidayPicker.vue\": [\n\t\t\"4030\",\n\t\t\"chunk-228c9c72\",\n\t\t\"TouchFormElement21\"\n\t],\n\t\"./HisComplaintsPicker.vue\": [\n\t\t\"82d1\",\n\t\t\"TouchFormElement22\"\n\t],\n\t\"./HisDataTable.vue\": [\n\t\t\"a6ba\",\n\t\t\"TouchFormElement23\"\n\t],\n\t\"./HisDateInput.vue\": [\n\t\t\"374c\",\n\t\t\"TouchFormElement24\"\n\t],\n\t\"./HisDatePicker.vue\": [\n\t\t\"9b30\",\n\t\t\"chunk-228c9c72\",\n\t\t\"TouchFormElement25\"\n\t],\n\t\"./HisDosageInput.vue\": [\n\t\t\"b34c\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement26\"\n\t],\n\t\"./HisGridSelector.vue\": [\n\t\t\"112a\",\n\t\t\"TouchFormElement27\"\n\t],\n\t\"./HisGroupSelector.vue\": [\n\t\t\"81cf\",\n\t\t\"TouchFormElement28\"\n\t],\n\t\"./HisIPAddress.vue\": [\n\t\t\"2a82\",\n\t\t\"TouchFormElement29\"\n\t],\n\t\"./HisInfiniteScrollMultipleSelect.vue\": [\n\t\t\"52a3\",\n\t\t\"TouchFormElement30\"\n\t],\n\t\"./HisLabOrders.vue\": [\n\t\t\"e614\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement31\"\n\t],\n\t\"./HisMonthlyDays.vue\": [\n\t\t\"69cf\",\n\t\t\"TouchFormElement32\"\n\t],\n\t\"./HisMultiSelectGrid.vue\": [\n\t\t\"0fa3\",\n\t\t\"TouchFormElement33\"\n\t],\n\t\"./HisMultipleSelect.vue\": [\n\t\t\"2fd5\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement34\"\n\t],\n\t\"./HisNextVisitInterval.vue\": [\n\t\t\"3126\",\n\t\t\"TouchFormElement35\"\n\t],\n\t\"./HisNote.vue\": [\n\t\t\"c927\",\n\t\t\"TouchFormElement36\"\n\t],\n\t\"./HisNumberInput.vue\": [\n\t\t\"5e75\",\n\t\t\"TouchFormElement37\"\n\t],\n\t\"./HisPrescriptionInput.vue\": [\n\t\t\"87e5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement38\"\n\t],\n\t\"./HisRadiologyPicker.vue\": [\n\t\t\"adc7\",\n\t\t\"TouchFormElement39\"\n\t],\n\t\"./HisSelect.vue\": [\n\t\t\"d11f\",\n\t\t\"TouchFormElement40\"\n\t],\n\t\"./HisSummary.vue\": [\n\t\t\"e0bd\",\n\t\t\"TouchFormElement41\"\n\t],\n\t\"./HisTableViewer.vue\": [\n\t\t\"8904\",\n\t\t\"TouchFormElement42\"\n\t],\n\t\"./HisTextBanner.vue\": [\n\t\t\"952c\",\n\t\t\"TouchFormElement43\"\n\t],\n\t\"./HisTextInput.vue\": [\n\t\t\"6ef9\",\n\t\t\"TouchFormElement44\"\n\t],\n\t\"./HisVitalsEntry.vue\": [\n\t\t\"e333\",\n\t\t\"TouchFormElement45\"\n\t],\n\t\"./HisWeightChart.vue\": [\n\t\t\"26a1\",\n\t\t\"TouchFormElement46\"\n\t],\n\t\"./LinkageCodeInput.vue\": [\n\t\t\"ac86\",\n\t\t\"TouchFormElement47\"\n\t],\n\t\"./MultiYesNoSelect.vue\": [\n\t\t\"5fd1\",\n\t\t\"TouchFormElement48\"\n\t],\n\t\"./PersonMatchView.vue\": [\n\t\t\"6591\",\n\t\t\"TouchFormElement49\"\n\t],\n\t\"./PersonSearchView.vue\": [\n\t\t\"28b2\",\n\t\t\"TouchFormElement50\"\n\t],\n\t\"./ProgramSelection.vue\": [\n\t\t\"e3b4\",\n\t\t\"TouchFormElement51\"\n\t],\n\t\"./RelationsSelection.vue\": [\n\t\t\"0e57\",\n\t\t\"TouchFormElement52\"\n\t],\n\t\"./SelectMixin.vue\": [\n\t\t\"82a9\",\n\t\t\"TouchFormElement53\"\n\t],\n\t\"./YesNoSelect.vue\": [\n\t\t\"71f2\",\n\t\t\"TouchFormElement54\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"f159\";\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}