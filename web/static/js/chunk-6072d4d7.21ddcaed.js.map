{"version":3,"sources":["webpack:///./src/apps/OPD/views/encounters/Prescription.vue?78ec","webpack:///./src/apps/OPD/views/encounters/Prescription.vue","webpack:///./src/apps/OPD/views/encounters/Prescription.vue?e7f2","webpack:///./src/services/drug_order_service.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/services/drug_service.ts","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/apps/OPD/services/drug_prescription_service.ts","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","cancelDestinationPath","cancelDestination","fields","activeField","onFinishAction","onSubmit","skipSummary","defineComponent","components","HisStandardForm","mixins","EncounterMixinVue","data","prescriptionService","showMalariaDrugs","hasMalaria","watch","ready","isReady","this","DrugPrescriptionService","patientID","providerID","getFields","immediate","deep","methods","formData","drugOrders","mapToOrders","encounter","createEncounter","toastWarning","drugOrder","createDrugOrder","toastSuccess","nextTask","calculateExpireDate","startDate","duration","date","Date","setDate","getDate","HisDate","toStandardHisFormat","drugs","map","drug","getSessionDate","frequency","DRUG_FREQUENCIES","find","f","label","other","drug_id","dosage","value","units","code","isOrderComplete","every","id","helpText","validation","Validation","required","type","FieldType","TT_SELECT","condition","unload","options","ANTI_MALARIA_DRUGS","name","TT_INFINITE_SCROLL_MULTIPLE_SELECT","async","_","filter","page","limit","loadDrugs","onload","config","showKeyboard","hiddenFooterBtns","footerBtns","color","size","visible","slot","onClick","alertConfirmation","TT_PRESCRIPTION_INPUT","malaria_drugs","beforeNext","isEmpty","TT_TABLE_VIEWER","columns","rows","__exports__","DrugOrderService","Service","constructor","super","orders","postJson","getProgramID","dispensations","order","getJson","pageSize","drugID","params","patientId","FlowState","dformat","d","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","patient","facts","handler","route","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","computed","patientDashboardUrl","runflowState","state","states","username","split","provider","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","e","console","error","toastDanger","ProgramService","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","p","person","names","latestName","given_name","family_name","toOption","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","mapOptions","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","DrugService","_resolveDynamicComponent","formType","onOnFinish","onFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","computedData","$emit","AppEncounterService","getDrugs","malariaTestResult","OrderService","getLatestMalariaTestResult","primaryDiagnosis","getAllValueCoded","includes","secondaryDiagnosis","create","encounterID","isCondition","ignored","undefined","prop","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-6072d4d7.21ddcaed.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onFinishAction: _ctx.onSubmit,\n    skipSummary: true\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"activeField\", \"onFinishAction\"]))\n}","\nimport { defineComponent} from 'vue'\nimport HisStandardForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { isEmpty } from 'lodash';\nimport { ANTI_MALARIA_DRUGS, DrugPrescriptionService, DRUG_FREQUENCIES } from '../../services/drug_prescription_service';\nimport HisDate from \"@/utils/Date\"\nimport { alertConfirmation, toastSuccess, toastWarning } from '@/utils/Alerts';\nimport { loadingController } from '@ionic/core';\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    activeField: '',\n    prescriptionService: {} as any,\n    showMalariaDrugs: false,\n    hasMalaria: false,\n  }),\n  watch: {\n    ready: {\n      async handler(isReady: boolean) {\n        if(isReady){\n          this.prescriptionService = new DrugPrescriptionService(this.patientID, this.providerID)  \n          this.hasMalaria = await this.prescriptionService.hasMalaria()\n          this.fields = this.getFields()\n        }\n      },\n      immediate: true,\n      deep: true\n    }\n  },\n  methods: {\n    async onSubmit(formData: any){   \n      const drugOrders = this.mapToOrders(formData['drugs_details'])\n      const encounter = await this.prescriptionService.createEncounter()\n      if (!encounter) return toastWarning('Unable to create treatment encounter')   \n      const drugOrder = await this.prescriptionService.createDrugOrder(drugOrders);\n      if(!drugOrder) return toastWarning('Unable to create drug orders!')\n      toastSuccess('Drug order has been created')\n      this.nextTask()       \n    },\n    calculateExpireDate(startDate: string | Date, duration: number ) {\n      const date = new Date(startDate)\n      date.setDate(date.getDate() + duration)\n      return HisDate.toStandardHisFormat(date)\n    },\n    mapToOrders(drugs: Option[]): any[] {\n      return drugs.map(drug => {\n        const startDate = DrugPrescriptionService.getSessionDate()\n        const frequency = DRUG_FREQUENCIES.find(f => f.label === drug.other.frequency)\n        return {\n          'drug_inventory_id': drug.other.drug_id,\n          'equivalent_daily_dose': drug.other.dosage * frequency!.value,\n          'start_date': startDate,\n          'auto_expire_date': this.calculateExpireDate(startDate, drug.other.duration), \n          'units': drug.other.units,\n          'instructions': `${drug.label}: ${drug.other.dosage} ${drug.other.units} ${frequency!.code} for ${drug.other.duration} days`,\n          'dose': drug.other.dosage,\n          'frequency': frequency!.code,\n        }\n      })\n    },\n    isOrderComplete(drugs: Option[]): boolean {\n      return drugs.every(drug => drug.other.frequency && drug.other.duration && drug.other.dosage)\n    },\n    getFields(): Array<Field>{\n      return [\n        {\n          id: 'malaria_drugs',\n          helpText: \"select Malaria Drugs\",\n          validation: (data: any) => Validation.required(data),\n          type: FieldType.TT_SELECT,\n          condition: () => this.activeField === 'malaria_drugs' && this.showMalariaDrugs,\n          unload: () => {\n            this.showMalariaDrugs = false\n            this.activeField = 'drugs_details'\n          },\n          options: () => ANTI_MALARIA_DRUGS.map(drug => ({\n            label: `${drug.name}, ${drug.frequency} time(s) a day, for ${drug.duration} days`,\n            value: drug.name,\n            other: drug\n          }))\n        },\n        {\n          id: 'drugs',\n          helpText: 'Select drugs',\n          type: FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n          validation: (data: any) => Validation.required(data),\n          options: async (_: any, filter = '', page=1, limit=10) => \n            await this.prescriptionService.loadDrugs(filter, page, limit),\n          onload: () => this.activeField = '',\n          config: {\n            showKeyboard: true,\n            hiddenFooterBtns: [\"Back\"],\n            footerBtns: [\n              {\n                name: 'Predefined Malaria Drugs',\n                color: 'primary',\n                size: 'large',\n                visible: false,\n                slot: 'end',\n                onClick: async () => {\n                  if(!this.hasMalaria && !(await alertConfirmation('Patient has no malaria. Do you still want to prescribe anti malaria drugs?'))) {\n                    return;\n                  }\n                  this.activeField = 'malaria_drugs'\n                  this.showMalariaDrugs = true\n                }\n              },\n            ]\n          }\n        },\n        {\n          id: 'drugs_details',\n          helpText: 'Complete prescribed drug details',\n          type: FieldType.TT_PRESCRIPTION_INPUT,\n          validation: (data: any) => Validation.required(data),\n          options: (f: any) => [...f.drugs, ...(f.malaria_drugs ? [f.malaria_drugs] : [])],\n          beforeNext: (data: Option[]) => {\n            if(isEmpty(data)) return false\n            if(this.isOrderComplete(data)) return true\n            toastWarning('Please complete all fields')\n            return false\n          }\n        },\n        {\n          id: 'summary',\n          helpText: 'Summary',\n          type: FieldType.TT_TABLE_VIEWER,\n          options: (f: any) => {\n            const drugs: Option[] = f['drugs_details']\n            const columns = [ 'Drug Name','Frequency','Dosage','Duration'];\n            const rows: any[] = drugs.map(drug => [\n              drug.other.name,\n              drug.other.frequency,\n              `${drug.other.dosage} ${drug.other.units}`,\n              `${drug.other.duration} days`\n            ])\n            return [\n              {\n                label: '',\n                value: '',\n                other: { columns, rows},\n              },\n            ];\n          },\n\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./Prescription.vue?vue&type=template&id=76a5a464&ts=true\"\nimport script from \"./Prescription.vue?vue&type=script&lang=ts\"\nexport * from \"./Prescription.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/mary/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { Service } from \"./service\";\n\nexport class DrugService extends Service {\n    constructor() {\n        super()\n    }\n\n    \n    static getDrugs(params={} as Record<string, string | number>) {\n        return super.getJson('/drugs', params)\n    }\n}","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/mary/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Option } from \"@/components/Forms/FieldInterface\";\nimport { ConceptName } from \"@/interfaces/conceptName\";\nimport { DrugInterface } from \"@/interfaces/Drug\";\nimport { AppEncounterService } from \"@/services/app_encounter_service\"\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { OrderService } from \"@/services/order_service\";\nimport { DrugService } from '../../../services/drug_service';\n\nexport const DRUG_FREQUENCIES: Array<{label: string; code: string; value: number; [x: string]: any}> = [\n  { label : \"ONCE A DAY (OD)\", code : \"OD\", value : 1 },\n  { label : \"TWICE A DAY (BD)\", code : \"BD\", value : 2 },\n  { label : \"THREE TIMES A DAY (TDS)\", code : \"TDS\", value : 3 },\n  { label : \"FOUR TIMES A DAY (QID)\", code : \"QID\", value : 4 },\n  { label : \"FIVE TIMES A DAY (5X/D)\", code : \"5X/D\", value : 5 },\n  { label : \"SIX TIMES A DAY (Q4HRS)\", code : \"Q4HRS\", value : 6 },\n  { label : \"IN THE MORNING (QAM)\", code : \"QAM\", value : 1 },\n  { label : \"ONCE A DAY AT NOON (QNOON)\", code : \"QNOON\", value : 1 },\n  { label : \"IN THE EVENING (QPM)\", code : \"QPM\", value : 1 },\n  { label : \"ONCE A DAY AT NIGHT (QHS)\", code : \"QHS\", value : 1 },\n  { label : \"EVERY OTHER DAY (QOD)\", code : \"QOD\", value : 0.5 },\n  { label : \"ONCE A WEEK (QWK)\", code : \"QWK\", value : 0.14 },\n  { label : \"ONCE A MONTH\", code : \"ONCE A MONTH\", value : 0.03 },\n  { label : \"TWICE A MONTH\", code : \"TWICE A MONTH\", value : 0.071 }\n]\n\nexport const ANTI_MALARIA_DRUGS = [\n  {\n    'drug_id': 236,\n    'duration': 3,\n    'tabs': 6,\n    'name': \"Lumefantrine + Arthemether 1 x 6\",\n    'dose_strength': 1.0,\n    'units': \"tabs\",\n    'frequency': 2\n  },\n  {\n    'drug_id': 237,\n    'duration': 3,\n    'tabs': 12,\n    'name': \"Lumefantrine + Arthemether 2 x 6\",\n    'dose_strength': 2.0,\n    'units': \"tabs\",\n    'frequency': 2\n  },\n  {\n    'drug_id': 238,\n    'duration': 3,\n    'tabs': 18,\n    'name': \"Lumefantrine + Arthemether 3 x 6\",\n    'dose_strength': 3.0,\n    'units': \"tabs\",\n    'frequency': 2\n  },\n  {\n    'drug_id': 239,\n    'duration': 3,\n    'tabs': 24,\n    'name': \"Lumefantrine + Arthemether 4 x 6\",\n    'dose_strength': 4.0,\n    'units': \"tabs\",\n    'frequency': 2\n  }\n];\n\nexport class DrugPrescriptionService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 25, providerID) \n  }\n\n  async loadDrugs(filter = '', page=1, limit=10): Promise<Option[]> {\n    const drugs: ConceptName[] = await DrugService.getDrugs({ \n      \"name\": filter, \n      \"page\": page,\n      \"page_size\": limit \n    })\n    return drugs.map(drug => ({\n      label: drug.name, value: drug.name, other: drug\n    }))\n  }\n\n  async hasMalaria() {\n    const malariaTestResult = await OrderService.getLatestMalariaTestResult(this.patientID)\n    if(malariaTestResult === \"No\") {\n      const primaryDiagnosis: any[] = await AppEncounterService.getAllValueCoded(this.patientID, 'Primary diagnosis')\n      if(primaryDiagnosis.includes('Malaria')) return true\n      const secondaryDiagnosis: any[] = await AppEncounterService.getAllValueCoded(this.patientID, 'Secondary diagnosis')\n      if(secondaryDiagnosis.includes('Malaria')) return true\n      return false\n    }\n    return malariaTestResult === \"Positive\"\n  }\n\n  createDrugOrder(drugOrders: Array<DrugInterface>){\n    return DrugOrderService.create({\n      'encounter_id': this.encounterID,\n      'drug_orders': drugOrders\n    })\n  }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}