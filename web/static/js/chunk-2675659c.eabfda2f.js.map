{"version":3,"sources":["webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/apps/AETC/views/encounters/HIVStatus.vue?4ec7","webpack:///./src/apps/AETC/services/hiv_status_service.ts","webpack:///./src/apps/AETC/views/encounters/HIVStatus.vue","webpack:///./src/apps/AETC/views/encounters/HIVStatus.vue?aa28","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/components/Forms/BaseFormElements.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts","webpack:///./src/components/FormElements lazy ^\\.\\/.*\\.vue$ namespace object"],"names":["DEFAULT_KEYPAD","PRESCRIPTION_KEYPAD","FLOAT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","NUMBER_ARROW_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","cancelDestinationPath","cancelDestination","fields","onFinishAction","onSubmit","HIVStatusService","AppEncounterService","constructor","patientID","providerID","super","defineComponent","components","HisStandardForm","mixins","EncounterMixinVue","data","hivService","watch","ready","isReady","this","patient","getID","getFields","immediate","deep","methods","formData","computedData","encounter","createEncounter","toastWarning","resolveObs","obs","saveObservationList","nextTask","buildDateObs","conceptName","date","isEstimate","match","buildValueText","buildValueDateEstimated","buildValueDate","id","helpText","type","FieldType","TT_SELECT","validation","value","Validation","required","computedValue","options","label","generateDateFields","minDate","getBirthdate","maxDate","getSessionDate","condition","hiv_status","summaryLabel","estimation","allowUnknown","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","computeValue","defaultValue","getLocationName","_","filter","getFacilities","config","showKeyboard","isFilterDataViaApi","__exports__","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","providers","facts","sessionDate","apiDate","encounterName","isBdeMode","birthDate","outcome","outcomeStartDate","handler","route","params","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","computed","patientDashboardUrl","runflowState","state","states","FlowState","SET_PROVIDER","selection","username","split","provider","find","person_id","CONTINUE","CHANGE_SESSION_DATE","$router","push","EXIT","CHANGE_PATIENT_OUTCOME","GO_TO_PATIENT_DASHBOARD","gotoPatientDashboard","findings","matchToGuidelines","ENCOUNTER_GUIDELINES","index","_finding$actions","_finding$actions3","finding","actions","alert","_finding$actions2","status","_finding$actions4","flowState","program","startDate","e","console","error","toastDanger","ProgramService","getCachedApiDate","isBDE","$route","name","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","isEmpty","person","names","_p$person2","latestName","given_name","family_name","toOption","other","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","values","mapOptions","option","yesNoUnknownOptions","tag","Object","d","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","conditions","_resolveDynamicComponent","formType","skipSummary","activeField","onOnFinish","onFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","$emit","dformat","HisDate","toStandardHisDisplayFormat","priority","async","action","infoActionSheet","slot","color","modal","optionsActionSheet","role","getYearField","showUnknown","primaryFunctions","appearInSummary","TT_TEXT","customKeyboard","getMonthField","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","getDefaultDate","form","field","datePart","year","month","day","validateMinMax","min","Date","max","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","f","includes","buildHelpTextDate","part","parts","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","proxyID","unload","v","c","StandardValidations","isNaN","minYear","getYear","summaryMapValue","ref","val","beforeNext","keyboardActions","valueEstimateCondition","estimateType","every","ageEstimateRegex","dayjs","Service","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","isCondition","ignored","prop","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","COMPONENT_REFS","TT_ASYNC_MULTI_SELECT","TT_LINKAGE_CODE","TT_MULTI_SELECT_GRID","TT_AGE_INPUT","TT_BARCODE","TT_NOTE","TT_CARD_SELECTOR","TT_MULTIPLE_SELECT","TT_ART_REGIMEN_SELECTION","TT_NEXT_VISIT_INTERVAL_SELECTION","TT_TABLE_VIEWER","TT_DOSAGE_INPUT","TT_YES_NO","TT_MULTIPLE_YES_NO","TT_WEIGHT_CHART","TT_VITALS_ENTRY","TT_APPOINTMENTS_ENTRY","TT_COMPLAINTS_PICKER","TT_CLINIC_HOLIDAY_PICKER","TT_SUMMARY","TT_ART_STAGING_SUMMARY","TT_ADHERENCE_INPUT","TT_LAB_ORDERS","TT_PERSON_RESULT_VIEW","TT_PROGRAM_SELECTION","TT_DATE_PICKER","TT_RELATION_SELECTION","TT_FILING_NUMBER_VIEW","TT_PERSON_MATCH_VIEW","TT_FULL_DATE","TT_BATCH_ENTRY","TT_BATCH_VERIFICATION","TT_BATCH_MOVEMENT","TT_IP_ADDRESS","TT_TEXT_BANNER","TT_DISPENSATION_INPUT","TT_DATA_TABLE","TT_GROUP_SELECTOR","TT_ANC_PREGNANCY_INPUT_CONFIG","TT_ANC_PREGNANCY_DETAILS_INPUT","TT_ANC_LMP_DATE_INPUT","TT_DRUG_TRANSFER_IN","TT_GRID_SELECTOR","TT_ANC_DRUGSET_INPUT","TT_RADIOLOGY_PICKER","TT_PRESCRIPTION_INPUT","TT_INFINITE_SCROLL_MULTIPLE_SELECT","TT_DRUG_DISPENSER","facilities","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id","getVillagesByName","page","getLandmarks","landmarks","landmark","code","webpackAsyncContext","req","__webpack_require__","o","resolve","Error","ids","slice","keys","module","exports"],"mappings":"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","file":"js/chunk-2675659c.eabfda2f.js","sourcesContent":["export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const PRESCRIPTION_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del', '0', '.'],\n    ['Unknown', '', ''],\n]\nexport const FLOAT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const NUMBER_ARROW_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['←',  '0', '→']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class HIVStatusService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 39, providerID) \n    }\n}\n","\nimport { defineComponent} from 'vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { getFacilities } from '@/utils/HisFormHelpers/LocationFieldOptions';\nimport { EstimationFieldType, generateDateFields } from '@/utils/HisFormHelpers/MultiFieldDateHelper';\nimport { toastWarning } from '@/utils/Alerts';\nimport { HIVStatusService } from '../../services/hiv_status_service';\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        hivService: {} as any\n    }),\n    watch: {\n        ready: {\n            async handler(isReady: boolean) {\n                if(isReady){\n                    this.hivService = new HIVStatusService(this.patient.getID(), this.providerID)\n                    this.fields = this.getFields()\n                }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async onSubmit(formData: any, computedData: any){\n            const encounter = await this.hivService.createEncounter()\n            if (!encounter) return toastWarning('Unable to create encounter') \n            const data = await this.resolveObs({...computedData})\n            const obs = await this.hivService.saveObservationList(data)\n            if (!obs) return toastWarning('Unable to save observations')\n            this.nextTask()        \n        },\n        buildDateObs(conceptName: string, date: string, isEstimate: boolean) {\n            let obs = {}\n            if (date.match(/unknown/i)) {\n                obs = this.hivService.buildValueText(conceptName, 'Unknown')\n            } else if (isEstimate) {\n                obs = this.hivService.buildValueDateEstimated(conceptName, date)\n            } else {\n                obs = this.hivService.buildValueDate(conceptName, date)\n            }\n            return obs\n        },\n        getFields(): Array<Field>{\n            return [\n                {\n                    id: 'hiv_status',\n                    helpText: 'HIV status',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({ value }: Option) => ({\n                        obs: this.hivService.buildValueText('HIV status', value)\n                    }),\n                    options: () => ([\n                        { label: 'Positive not ART', value: 'Positive not ART' },\n                        { label: 'Posititve on ART', value: 'Positive on ART' },\n                        { label: 'Previous negative', value: 'Previous negative' },\n                        { label: 'New positive', value: 'New positive' },\n                        { label: 'New negative', value: 'New negative' },\n                        { label: 'Never tested', value: 'Never tested' },\n                    ])\n                },\n                ...generateDateFields({\n                    id: 'hiv_test_date',\n                    helpText: 'HIV Test',\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => HIVStatusService.getSessionDate(),\n                    condition: (fields: any) => fields.hiv_status.value !== 'Never tested',\n                    summaryLabel: 'HIV test date',\n                    estimation: {\n                        allowUnknown: true,\n                        estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => this.buildDateObs('HIV test date', date, isEstimate)\n                    \n                }),\n                {\n                    id: 'test_location',\n                    helpText: 'HIV test location',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    defaultValue: () => HIVStatusService.getLocationName(),\n                    computedValue: ({ label }: Option) => ({obs: this.hivService.buildValueText('HIV test location', label)}),\n                    condition: (fields: any) => fields.hiv_status.value !== 'Never tested',\n                    options: (_: any, filter='') => getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./HIVStatus.vue?vue&type=template&id=3b4b3254&ts=true\"\nimport script from \"./HIVStatus.vue?vue&type=script&lang=ts\"\nexport * from \"./HIVStatus.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/projects/malawi-emr/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","\n/**\n * @deprecated moved to useEncounter composable\n * \n */\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/projects/malawi-emr/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year as number < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year as number > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, , day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value as number > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: (facts: FactsInterface) => any;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: ConditionsInteface;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\nexport type FactsInterface = Record<string, any>\nexport type ConditionResolver = (value: any, facts: FactsInterface) => boolean | RegExpMatchArray | null\nexport type ConditionsInteface = Record<string, ConditionResolver>\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: FactsInterface, conditions: ConditionsInteface): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: FactsInterface, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","/**\n * Map all formElements/components defined in \"@/components/FormElements\" \n * in the Enum below by their file name.\n * \n * Next step is to add FieldType entry in COMPONENT_REFS in the \n * Array below the FieldType Enum\n */\nexport enum FieldType {\n    TT_ASYNC_MULTI_SELECT = 'AsyncMultiSelect',\n    TT_LINKAGE_CODE = 'LinkageCodeInput',\n    TT_MULTI_SELECT_GRID= 'HisMultiSelectGrid',\n    TT_AGE_INPUT='HisAgeInput',\n    TT_GROUP_SELECTOR = 'HisGroupSelector',\n    TT_DATA_TABLE = 'HisDataTable',\n    TT_GRID_SELECTOR = 'HisGridSelector',\n    TT_NOTE = 'HisNote',\n    TT_BARCODE = 'HisBarcodeInput',\n    TT_MONTHLY_DAYS=\"HisMonthlyDays\",\n    TT_TEXT=\"HisTextInput\",\n    TT_NUMBER = \"HisNumberInput\",\n    TT_DATETIME=\"datetime\",\n    TT_SELECT=\"HisSelect\",\n    TT_MULTIPLE_SELECT=\"HisMultipleSelect\",\n    TT_ART_REGIMEN_SELECTION=\"HisArtRegimenSelection\",\n    TT_NEXT_VISIT_INTERVAL_SELECTION=\"HisNextVisitInterval\",\n    TT_TABLE_VIEWER=\"HisTableViewer\",\n    TT_DOSAGE_INPUT=\"HisDosageInput\",\n    TT_YES_NO=\"YesNoSelect\",\n    TT_MULTIPLE_YES_NO=\"MultiYesNoSelect\",\n    TT_SUMMARY=\"HisSummary\",\n    TT_WEIGHT_CHART = \"HisWeightChart\",\n    TT_VITALS_ENTRY=\"HisVitalsEntry\",\n    TT_ADHERENCE_INPUT = \"HisAdherenceInput\",\n    TT_ART_STAGING_SUMMARY = \"ArtStagingSummary\",\n    TT_LAB_ORDERS = \"HisLabOrders\",\n    TT_APPOINTMENTS_ENTRY = \"HisAppointments\",\n    TT_DISPENSATION_INPUT = 'DrugDispensationSelection',\n    TT_PROGRAM_SELECTION = 'ProgramSelection',\n    TT_DATE_PICKER = 'HisDatePicker',\n    TT_PERSON_RESULT_VIEW = 'PersonSearchView',\n    TT_RELATION_SELECTION = 'RelationsSelection',\n    TT_FILING_NUMBER_VIEW = 'FilingNumberView',\n    TT_CARD_SELECTOR = 'HisCardSelector',\n    TT_PERSON_MATCH_VIEW = 'PersonMatchView',\n    TT_FULL_DATE = 'HisDateInput',\n    TT_BATCH_ENTRY = 'HisBatchEntry',\n    TT_BATCH_VERIFICATION = 'HisBatchVerification',\n    TT_BATCH_MOVEMENT = 'HisBatchMovement',\n    TT_COMPLAINTS_PICKER = 'HisComplaintsPicker',\n    TT_RADIOLOGY_PICKER = 'HisRadiologyPicker',\n    TT_IP_ADDRESS = 'HisIPAddress',\n    TT_TEXT_BANNER = 'HisTextBanner',\n    TT_DRUG_DISPENSER = 'GeneralDrugDispenser',\n    TT_CLINIC_HOLIDAY_PICKER = 'HisClinicHolidayPicker',\n    TT_ANC_PREGNANCY_INPUT_CONFIG = 'AncPregnancyInfoConfig',\n    TT_ANC_PREGNANCY_DETAILS_INPUT = 'AncPregnancyDetailsInput',\n    TT_ANC_LMP_DATE_INPUT = 'AncLmpDateInput',\n    TT_ANC_DRUGSET_INPUT = 'AncDrugSetInput',\n    TT_DRUG_TRANSFER_IN = 'DrugTransferInput',\n    TT_PRESCRIPTION_INPUT = 'HisPrescriptionInput',\n    TT_INFINITE_SCROLL_MULTIPLE_SELECT=\"HisInfiniteScrollMultipleSelect\"\n}\n\n// Register FieldTypes here that will be registered at runtime\nexport const COMPONENT_REFS: FieldType[] = [\n    FieldType.TT_ASYNC_MULTI_SELECT,\n    FieldType.TT_LINKAGE_CODE,\n    FieldType.TT_MULTI_SELECT_GRID,\n    FieldType.TT_AGE_INPUT,\n    FieldType.TT_BARCODE,\n    FieldType.TT_NOTE,\n    FieldType.TT_SELECT,\n    FieldType.TT_CARD_SELECTOR,\n    FieldType.TT_MULTIPLE_SELECT,\n    FieldType.TT_TEXT,\n    FieldType.TT_NUMBER,\n    FieldType.TT_MONTHLY_DAYS,\n    FieldType.TT_ART_REGIMEN_SELECTION,\n    FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n    FieldType.TT_TABLE_VIEWER,\n    FieldType.TT_DOSAGE_INPUT,\n    FieldType.TT_YES_NO,\n    FieldType.TT_MULTIPLE_YES_NO,\n    FieldType.TT_WEIGHT_CHART,\n    FieldType.TT_VITALS_ENTRY,\n    FieldType.TT_APPOINTMENTS_ENTRY,\n    FieldType.TT_COMPLAINTS_PICKER,\n    FieldType.TT_CLINIC_HOLIDAY_PICKER,\n    FieldType.TT_SUMMARY,\n    FieldType.TT_ART_STAGING_SUMMARY,\n    FieldType.TT_ADHERENCE_INPUT,\n    FieldType.TT_LAB_ORDERS,\n    FieldType.TT_PERSON_RESULT_VIEW,\n    FieldType.TT_PROGRAM_SELECTION,\n    FieldType.TT_DATE_PICKER,\n    FieldType.TT_RELATION_SELECTION,\n    FieldType.TT_FILING_NUMBER_VIEW,\n    FieldType.TT_PERSON_MATCH_VIEW,\n    FieldType.TT_FULL_DATE,\n    FieldType.TT_BATCH_ENTRY,\n    FieldType.TT_BATCH_VERIFICATION,\n    FieldType.TT_BATCH_MOVEMENT,\n    FieldType.TT_IP_ADDRESS,\n    FieldType.TT_TEXT_BANNER,\n    FieldType.TT_DISPENSATION_INPUT,\n    FieldType.TT_DATA_TABLE,\n    FieldType.TT_GROUP_SELECTOR,\n    FieldType.TT_ANC_PREGNANCY_INPUT_CONFIG,\n    FieldType.TT_ANC_PREGNANCY_DETAILS_INPUT,\n    FieldType.TT_ANC_LMP_DATE_INPUT,\n    FieldType.TT_DRUG_TRANSFER_IN,\n    FieldType.TT_GRID_SELECTOR,\n    FieldType.TT_ANC_DRUGSET_INPUT,\n    FieldType.TT_RADIOLOGY_PICKER,\n    FieldType.TT_PRESCRIPTION_INPUT,\n    FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n    FieldType.TT_DRUG_DISPENSER\n]\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport async function getVillagesByName(name='a', page=1): Promise<Option[]> {\n    const villages = await LocationService.getVillagesByName(name, page)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport function getLandmarks(): Option[] {\n    const landmarks = [\n        'Catholic Church',\n        'CCAP',\n        'Seventh Day',\n        'Mosque',\n        'Primary School',\n        'Borehole',\n        'Secondary School',\n        'College',\n        'Market',\n        'Football Ground',\n        'Other'\n    ]\n\n    return landmarks.map(landmark =>({\n        label: landmark,\n        value: landmark,\n        other: {\n            code: landmark\n        }\n    }))\n}\n","var map = {\n\t\"./AncDrugSetInput.vue\": [\n\t\t\"c99f\",\n\t\t\"TouchFormElement0\"\n\t],\n\t\"./AncLmpDateInput.vue\": [\n\t\t\"101a\",\n\t\t\"TouchFormElement1\"\n\t],\n\t\"./AncPregnancyDetailsInput.vue\": [\n\t\t\"b043\",\n\t\t\"TouchFormElement2\"\n\t],\n\t\"./AncPregnancyInfoConfig.vue\": [\n\t\t\"262e\",\n\t\t\"TouchFormElement3\"\n\t],\n\t\"./ArtStagingSummary.vue\": [\n\t\t\"43db\",\n\t\t\"TouchFormElement4\"\n\t],\n\t\"./AsyncMultiSelect.vue\": [\n\t\t\"5de2\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement5\"\n\t],\n\t\"./BaseTextInput.vue\": [\n\t\t\"36ad\",\n\t\t\"TouchFormElement6\"\n\t],\n\t\"./DrugDispensationSelection.vue\": [\n\t\t\"05d5\",\n\t\t\"TouchFormElement7\"\n\t],\n\t\"./DrugTransferInput.vue\": [\n\t\t\"de42\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement8\"\n\t],\n\t\"./FieldMixin.vue\": [\n\t\t\"51c8\",\n\t\t\"TouchFormElement9\"\n\t],\n\t\"./FilingNumberView.vue\": [\n\t\t\"c650\",\n\t\t\"TouchFormElement10\"\n\t],\n\t\"./GeneralDrugDispenser.vue\": [\n\t\t\"7737\",\n\t\t\"TouchFormElement11\"\n\t],\n\t\"./HisAdherenceInput.vue\": [\n\t\t\"f2c3\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement12\"\n\t],\n\t\"./HisAgeInput.vue\": [\n\t\t\"c05f\",\n\t\t\"TouchFormElement13\"\n\t],\n\t\"./HisAppointments.vue\": [\n\t\t\"b2eb\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement14\"\n\t],\n\t\"./HisArtRegimenSelection.vue\": [\n\t\t\"47b9\",\n\t\t\"TouchFormElement15\"\n\t],\n\t\"./HisBarcodeInput.vue\": [\n\t\t\"dd65\",\n\t\t\"TouchFormElement16\"\n\t],\n\t\"./HisBatchEntry.vue\": [\n\t\t\"f2ab\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement17\"\n\t],\n\t\"./HisBatchMovement.vue\": [\n\t\t\"5148\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement18\"\n\t],\n\t\"./HisBatchVerification.vue\": [\n\t\t\"7b0f\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement19\"\n\t],\n\t\"./HisCardSelector.vue\": [\n\t\t\"0734\",\n\t\t\"TouchFormElement20\"\n\t],\n\t\"./HisClinicHolidayPicker.vue\": [\n\t\t\"4030\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement21\"\n\t],\n\t\"./HisComplaintsPicker.vue\": [\n\t\t\"82d1\",\n\t\t\"TouchFormElement22\"\n\t],\n\t\"./HisDataTable.vue\": [\n\t\t\"a6ba\",\n\t\t\"TouchFormElement23\"\n\t],\n\t\"./HisDateInput.vue\": [\n\t\t\"374c\",\n\t\t\"TouchFormElement24\"\n\t],\n\t\"./HisDatePicker.vue\": [\n\t\t\"9b30\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement25\"\n\t],\n\t\"./HisDosageInput.vue\": [\n\t\t\"b34c\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement26\"\n\t],\n\t\"./HisGridSelector.vue\": [\n\t\t\"112a\",\n\t\t\"TouchFormElement27\"\n\t],\n\t\"./HisGroupSelector.vue\": [\n\t\t\"81cf\",\n\t\t\"TouchFormElement28\"\n\t],\n\t\"./HisIPAddress.vue\": [\n\t\t\"2a82\",\n\t\t\"TouchFormElement29\"\n\t],\n\t\"./HisInfiniteScrollMultipleSelect.vue\": [\n\t\t\"52a3\",\n\t\t\"TouchFormElement30\"\n\t],\n\t\"./HisLabOrders.vue\": [\n\t\t\"e614\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement31\"\n\t],\n\t\"./HisMonthlyDays.vue\": [\n\t\t\"69cf\",\n\t\t\"TouchFormElement32\"\n\t],\n\t\"./HisMultiSelectGrid.vue\": [\n\t\t\"0fa3\",\n\t\t\"TouchFormElement33\"\n\t],\n\t\"./HisMultipleSelect.vue\": [\n\t\t\"2fd5\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement34\"\n\t],\n\t\"./HisNextVisitInterval.vue\": [\n\t\t\"3126\",\n\t\t\"TouchFormElement35\"\n\t],\n\t\"./HisNote.vue\": [\n\t\t\"c927\",\n\t\t\"TouchFormElement36\"\n\t],\n\t\"./HisNumberInput.vue\": [\n\t\t\"5e75\",\n\t\t\"TouchFormElement37\"\n\t],\n\t\"./HisPrescriptionInput.vue\": [\n\t\t\"87e5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement38\"\n\t],\n\t\"./HisRadiologyPicker.vue\": [\n\t\t\"adc7\",\n\t\t\"TouchFormElement39\"\n\t],\n\t\"./HisSelect.vue\": [\n\t\t\"d11f\",\n\t\t\"TouchFormElement40\"\n\t],\n\t\"./HisSummary.vue\": [\n\t\t\"e0bd\",\n\t\t\"TouchFormElement41\"\n\t],\n\t\"./HisTableViewer.vue\": [\n\t\t\"8904\",\n\t\t\"TouchFormElement42\"\n\t],\n\t\"./HisTextBanner.vue\": [\n\t\t\"952c\",\n\t\t\"TouchFormElement43\"\n\t],\n\t\"./HisTextInput.vue\": [\n\t\t\"6ef9\",\n\t\t\"TouchFormElement44\"\n\t],\n\t\"./HisVitalsEntry.vue\": [\n\t\t\"e333\",\n\t\t\"TouchFormElement45\"\n\t],\n\t\"./HisWeightChart.vue\": [\n\t\t\"26a1\",\n\t\t\"TouchFormElement46\"\n\t],\n\t\"./LinkageCodeInput.vue\": [\n\t\t\"ac86\",\n\t\t\"TouchFormElement47\"\n\t],\n\t\"./MultiYesNoSelect.vue\": [\n\t\t\"5fd1\",\n\t\t\"TouchFormElement48\"\n\t],\n\t\"./PersonMatchView.vue\": [\n\t\t\"6591\",\n\t\t\"TouchFormElement49\"\n\t],\n\t\"./PersonSearchView.vue\": [\n\t\t\"28b2\",\n\t\t\"TouchFormElement50\"\n\t],\n\t\"./ProgramSelection.vue\": [\n\t\t\"e3b4\",\n\t\t\"TouchFormElement51\"\n\t],\n\t\"./RelationsSelection.vue\": [\n\t\t\"0e57\",\n\t\t\"TouchFormElement52\"\n\t],\n\t\"./SelectMixin.vue\": [\n\t\t\"82a9\",\n\t\t\"TouchFormElement53\"\n\t],\n\t\"./YesNoSelect.vue\": [\n\t\t\"71f2\",\n\t\t\"TouchFormElement54\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"f159\";\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}