{"version":3,"sources":["webpack:///./src/apps/SPINE/services/social_history_services.ts","webpack:///./src/apps/SPINE/views/encounters/SocialHistory.vue","webpack:///./src/apps/SPINE/views/encounters/SocialHistory.vue?6ac6","webpack:///./src/utils/HisFormHelpers/commons.ts"],"names":["SocialHistoryService","AppEncounterService","constructor","patientID","providerID","super","_defineComponent","__name","setup","__props","socialService","fields","ref","goToNextTask","patientDashboardUrl","useEncounter","providerId","patient","value","getSocialActivitiesField","getMaritalStatusField","getReligionField","async","onSubmit","_","computedData","encounter","createEncounter","toastWarning","registrationData","resolveObs","registrationObs","saveObservationList","id","helpText","type","FieldType","TT_MULTIPLE_YES_NO","validation","data","Validation","validateSeries","required","anyEmpty","computedValue","options","obs","map","option","buildValueCoded","label","summaryMapValue","checked","mapToYesNoOptions","TT_SELECT","v","buildValueText","mapStrToOptions","_ctx","_cache","_openBlock","_createBlock","HisStandardForm","cancelDestinationPath","_unref","onFinishAction","__exports__","tag","values","Object","filter","d","reduce","accum","cur","Array","isArray","concat","push","Promise","all","mapObjToOptions","other","checkedOptions","hasUnknown","_checkedValue$value","checkedValue","find","yesNoUnknownOptions","yesNoOptions"],"mappings":"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","file":"js/chunk-01d89442.e0ecfb9a.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class SocialHistoryService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 84, providerID) \n    }\n}\n","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nimport { ref } from 'vue';\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { toastWarning } from '@/utils/Alerts';\nimport { SocialHistoryService } from '@/apps/SPINE/services/social_history_services';\nimport { mapToYesNoOptions, resolveObs, mapStrToOptions } from '@/utils/HisFormHelpers/commons';\nimport useEncounter from '@/composables/useEncounter';\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'SocialHistory',\n  setup(__props) {\n\nlet socialService: SocialHistoryService;\nconst fields = ref<Array<Field>>([]);\n\nconst { goToNextTask, patientDashboardUrl } = useEncounter((providerId, patient) => {\n  socialService = new SocialHistoryService(patient, providerId);\n  fields.value = [\n    getSocialActivitiesField(),\n    getMaritalStatusField(),\n    getReligionField()\n  ]\n});\n\nasync function onSubmit(_: any, computedData: any) {\n  const encounter = await socialService.createEncounter()\n  if (!encounter) return toastWarning('Unable to create social history encounter')\n\n  const registrationData = await resolveObs({ ...computedData })\n  const registrationObs = await socialService.saveObservationList(registrationData)\n  if (!registrationObs) return toastWarning('Unable to save observations')\n\n  goToNextTask()\n}\n\nfunction getSocialActivitiesField(): Field {\n  return {\n    id: \"social_acitivites\",\n    helpText: `Social Activities`,\n    type: FieldType.TT_MULTIPLE_YES_NO,\n    validation: (data: any) => Validation.validateSeries([\n      () => Validation.required(data),\n      () => Validation.anyEmpty(data)\n    ]),\n    computedValue: (options: Option[]) => ({\n      obs: options.map(option => socialService.buildValueCoded(\n        option.label,\n        option.value\n      ))\n    }),\n    summaryMapValue: (option: Option) => ({\n      label: option.label,\n      value: option.value\n    }),\n    options: (_: any, checked: Array<Option>) => mapToYesNoOptions([\n      \"Patient smokes\",\n      \"Patient drinks alcohol\"\n    ], checked),\n  }\n}\n\nfunction getMaritalStatusField(): Field {\n  return {\n    id: 'marital_status',\n    helpText: 'Marital Status',\n    type: FieldType.TT_SELECT,\n    validation: (value: any) => Validation.required(value),\n    computedValue: (v: Option) => ({\n      obs: socialService.buildValueText('Marital status', v.label)\n    }),\n    options: () => mapStrToOptions([\n      \"Single\",\n      \"Engaged\",\n      \"Married\",\n      \"Separated\",\n      \"Widowed\",\n      \"Other\",\n    ]),\n  }\n}\n\nfunction getReligionField(): Field {\n  return {\n    id: 'religion',\n    helpText: 'Religion',\n    type: FieldType.TT_SELECT,\n    validation: (value: any) => Validation.required(value),\n    computedValue: (v: Option) => ({\n      obs: socialService.buildValueText('Religion', v.label)\n    }),\n    options: () => mapStrToOptions([\n      'Catholic',\n      'CCAP',\n      'SDA',\n      'Angelican',\n      'Muslim',\n      'Pentecostalism',\n      'Jehovah witness',\n      'Other',\n    ])\n  }\n}\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createBlock(HisStandardForm, {\n    cancelDestinationPath: _unref(patientDashboardUrl),\n    fields: fields.value,\n    onFinishAction: onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\"]))\n}\n}\n\n})","import script from \"./SocialHistory.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./SocialHistory.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { Option } from \"@/components/Forms/FieldInterface\"\nimport { find } from \"lodash\"\n\nexport function resolveObs(obs: any, tag = '') {\n  const values: any = Object.values(obs)\n    .filter((d: any) => d && (d.tag === tag || tag === ''))\n    .reduce((accum: any, cur: any) => {\n      const data = cur.obs ? cur.obs : cur\n      if (Array.isArray(data)) {\n        accum = accum.concat(data)\n      } else if (typeof data === 'function') {\n        accum.push(data())\n      } else {\n        accum.push(data)\n      }\n      return accum\n    }, [])\n  return Promise.all(values)\n}\n\nexport function mapStrToOptions(options: Array<string>): Array<Option> {\n  return options.map(option => ({ label: option, value: option }));\n}\n\nexport function mapObjToOptions(options: Array<Record<string, any>>, label = \"name\", value = \"name\"): Array<Option> {\n  return options.map(option => ({ label: option[label], value: option[value], other: option }));\n}\n\nexport function mapToYesNoOptions(options: Array<string>, checkedOptions?: Array<Option>, hasUnknown = false) {\n  return options.map(label => {\n    const checkedValue = find(checkedOptions, { label });\n    return {\n      label,\n      value: checkedValue?.value ?? \"\",\n      other: {\n        values: hasUnknown ? yesNoUnknownOptions() : yesNoOptions()\n      }\n    }\n  });\n}\n\nexport function yesNoUnknownOptions() {\n  return mapStrToOptions([\"Yes\", \"No\", \"Unknown\"]);\n}\n\nexport function yesNoOptions() {\n  return mapStrToOptions([\"Yes\", \"No\"]);\n}\n\nexport function toYesNoOption(label: string, other: any={}): Option {\n  return {\n      label,\n      value: '',\n      other: {\n          ...other,\n          values: yesNoOptions()\n      }\n  } \n}"],"sourceRoot":""}