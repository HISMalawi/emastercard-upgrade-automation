{"version":3,"sources":["webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/apps/OPD/views/encounters/HIVStatus.vue?404a","webpack:///./src/apps/OPD/services/hiv_status_service.ts","webpack:///./src/apps/OPD/views/encounters/HIVStatus.vue","webpack:///./src/apps/OPD/views/encounters/HIVStatus.vue?79df","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/components/Forms/BaseFormElements.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts","webpack:///./src/components/FormElements lazy ^\\.\\/.*\\.vue$ namespace object"],"names":["DEFAULT_KEYPAD","PRESCRIPTION_KEYPAD","FLOAT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","async","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","value","flowState","SET_PROVIDER","isBdeMode","isBDE","defineComponent","components","HisStandardForm","data","patient","fields","patientID","providerID","facts","ready","watch","handler","route","params","patient_id","this","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","_finding$actions","_finding$actions3","finding","_finding$actions2","status","_finding$actions4","program","e","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","_p$person","isEmpty","person","names","_p$person2","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","_component_his_standard_form","_resolveComponent","onSubmit","HIVStatusService","AppEncounterService","constructor","super","mixins","EncounterMixinVue","hivService","isReady","getID","getFields","encounter","createEncounter","toastWarning","saveObservationList","buildDateObs","conceptName","date","isEstimate","match","buildValueText","buildValueDateEstimated","buildValueDate","id","helpText","FieldType","TT_SELECT","validation","Validation","computedValue","generateDateFields","minDate","maxDate","hiv_status","summaryLabel","estimation","allowUnknown","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","computeValue","getDate","defaultValue","getLocationName","_","getFacilities","config","showKeyboard","isFilterDataViaApi","getYearField","showUnknown","primaryFunctions","appearInSummary","TT_TEXT","customKeyboard","getMonthField","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","getDefaultDate","form","field","datePart","year","month","day","validateMinMax","min","Date","max","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","f","includes","buildHelpTextDate","part","parts","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","proxyID","unload","v","c","StandardValidations","isNaN","minYear","getYear","summaryMapValue","ref","val","beforeNext","keyboardActions","valueEstimateCondition","estimateType","every","ageEstimateRegex","dayjs","Service","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","isCondition","ignored","prop","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","COMPONENT_REFS","TT_MULTI_SELECT_GRID","TT_AGE_INPUT","TT_BARCODE","TT_NOTE","TT_CARD_SELECTOR","TT_MULTIPLE_SELECT","TT_ART_REGIMEN_SELECTION","TT_NEXT_VISIT_INTERVAL_SELECTION","TT_TABLE_VIEWER","TT_DOSAGE_INPUT","TT_YES_NO","TT_MULTIPLE_YES_NO","TT_WEIGHT_CHART","TT_VITALS_ENTRY","TT_APPOINTMENTS_ENTRY","TT_COMPLAINTS_PICKER","TT_CLINIC_HOLIDAY_PICKER","TT_SUMMARY","TT_ART_STAGING_SUMMARY","TT_ADHERENCE_INPUT","TT_LAB_ORDERS","TT_PERSON_RESULT_VIEW","TT_PROGRAM_SELECTION","TT_DATE_PICKER","TT_RELATION_SELECTION","TT_FILING_NUMBER_VIEW","TT_PERSON_MATCH_VIEW","TT_FULL_DATE","TT_BATCH_ENTRY","TT_BATCH_VERIFICATION","TT_BATCH_MOVEMENT","TT_IP_ADDRESS","TT_TEXT_BANNER","TT_DISPENSATION_INPUT","TT_DATA_TABLE","TT_GROUP_SELECTOR","TT_ANC_PREGNANCY_INPUT_CONFIG","TT_ANC_PREGNANCY_DETAILS_INPUT","TT_ANC_LMP_DATE_INPUT","TT_DRUG_TRANSFER_IN","TT_GRID_SELECTOR","TT_ANC_DRUGSET_INPUT","TT_RADIOLOGY_PICKER","TT_PRESCRIPTION_INPUT","TT_INFINITE_SCROLL_MULTIPLE_SELECT","TT_DRUG_DISPENSER","facilities","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id","getVillagesByName","page","getLandmarks","landmarks","landmark","code","webpackAsyncContext","req","__webpack_require__","o","resolve","Error","ids","slice","keys","module","exports"],"mappings":"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","file":"js/chunk-588b6b9f.52afbf0e.js","sourcesContent":["export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const PRESCRIPTION_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del', '0', '.'],\n    ['Unknown', '', ''],\n]\nexport const FLOAT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/projects/malawi-emr/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onSubmit\n  }, null, 8, [\"cancelDestinationPath\", \"fields\", \"onFinishAction\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class HIVStatusService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 39, providerID) \n    }\n}\n","\nimport { defineComponent} from 'vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport EncounterMixinVue from '@/views/EncounterMixin.vue';\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { getFacilities } from '@/utils/HisFormHelpers/LocationFieldOptions';\nimport { EstimationFieldType, generateDateFields } from '@/utils/HisFormHelpers/MultiFieldDateHelper';\nimport { toastWarning } from '@/utils/Alerts';\nimport { HIVStatusService } from '../../services/hiv_status_service';\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    mixins: [EncounterMixinVue],\n    data: () => ({\n        hivService: {} as any\n    }),\n    watch: {\n        ready: {\n            async handler(isReady: boolean) {\n                if(isReady){\n                    this.hivService = new HIVStatusService(this.patient.getID(), this.providerID)\n                    this.fields = this.getFields()\n                }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    methods: {\n        async onSubmit(formData: any, computedData: any){\n            const encounter = await this.hivService.createEncounter()\n            if (!encounter) return toastWarning('Unable to create encounter') \n            const data = await this.resolveObs({...computedData})\n            const obs = await this.hivService.saveObservationList(data)\n            if (!obs) return toastWarning('Unable to save observations')\n            this.nextTask()        \n        },\n        buildDateObs(conceptName: string, date: string, isEstimate: boolean) {\n            let obs = {}\n            if (date.match(/unknown/i)) {\n                obs = this.hivService.buildValueText(conceptName, 'Unknown')\n            } else if (isEstimate) {\n                obs = this.hivService.buildValueDateEstimated(conceptName, date)\n            } else {\n                obs = this.hivService.buildValueDate(conceptName, date)\n            }\n            return obs\n        },\n        getFields(): Array<Field>{\n            return [\n                {\n                    id: 'hiv_status',\n                    helpText: 'HIV status',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    computedValue: ({ value }: Option) => ({\n                        obs: this.hivService.buildValueText('HIV status', value)\n                    }),\n                    options: () => ([\n                        { label: 'Positive not ART', value: 'Positive not ART' },\n                        { label: 'Posititve on ART', value: 'Positive on ART' },\n                        { label: 'Previous negative', value: 'Previous negative' },\n                        { label: 'New positive', value: 'New positive' },\n                        { label: 'New negative', value: 'New negative' },\n                        { label: 'Never tested', value: 'Never tested' },\n                    ])\n                },\n                ...generateDateFields({\n                    id: 'hiv_test_date',\n                    helpText: 'HIV Test',\n                    required: true,\n                    minDate: () => this.patient.getBirthdate(),\n                    maxDate: () => HIVStatusService.getSessionDate(),\n                    condition: (fields: any) => fields.hiv_status.value !== 'Never tested',\n                    summaryLabel: 'HIV test date',\n                    estimation: {\n                        allowUnknown: true,\n                        estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                    },\n                    computeValue: (date: string, isEstimate: boolean) => this.buildDateObs('HIV test date', date, isEstimate)\n                    \n                }, this.hivService.getDate()),\n                {\n                    id: 'test_location',\n                    helpText: 'HIV test location',\n                    type: FieldType.TT_SELECT,\n                    validation: (value: any) => Validation.required(value),\n                    defaultValue: () => HIVStatusService.getLocationName(),\n                    computedValue: ({ label }: Option) => ({obs: this.hivService.buildValueText('HIV test location', label)}),\n                    condition: (fields: any) => fields.hiv_status.value !== 'Never tested',\n                    options: (_: any, filter='') => getFacilities(filter),\n                    config: {\n                        showKeyboard: true,\n                        isFilterDataViaApi: true\n                    }\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./HIVStatus.vue?vue&type=template&id=e5f40c22&ts=true\"\nimport script from \"./HIVStatus.vue?vue&type=script&lang=ts\"\nexport * from \"./HIVStatus.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/projects/malawi-emr/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","/**\n * Map all formElements/components defined in \"@/components/FormElements\" \n * in the Enum below by their file name.\n * \n * Next step is to add FieldType entry in COMPONENT_REFS in the \n * Array below the FieldType Enum\n */\nexport enum FieldType {\n    TT_MULTI_SELECT_GRID= 'HisMultiSelectGrid',\n    TT_AGE_INPUT='HisAgeInput',\n    TT_GROUP_SELECTOR = 'HisGroupSelector',\n    TT_DATA_TABLE = 'HisDataTable',\n    TT_GRID_SELECTOR = 'HisGridSelector',\n    TT_NOTE = 'HisNote',\n    TT_BARCODE = 'HisBarcodeInput',\n    TT_MONTHLY_DAYS=\"HisMonthlyDays\",\n    TT_TEXT=\"HisTextInput\",\n    TT_NUMBER = \"HisNumberInput\",\n    TT_DATETIME=\"datetime\",\n    TT_SELECT=\"HisSelect\",\n    TT_MULTIPLE_SELECT=\"HisMultipleSelect\",\n    TT_ART_REGIMEN_SELECTION=\"HisArtRegimenSelection\",\n    TT_NEXT_VISIT_INTERVAL_SELECTION=\"HisNextVisitInterval\",\n    TT_TABLE_VIEWER=\"HisTableViewer\",\n    TT_DOSAGE_INPUT=\"HisDosageInput\",\n    TT_YES_NO=\"YesNoSelect\",\n    TT_MULTIPLE_YES_NO=\"MultiYesNoSelect\",\n    TT_SUMMARY=\"HisSummary\",\n    TT_WEIGHT_CHART = \"HisWeightChart\",\n    TT_VITALS_ENTRY=\"HisVitalsEntry\",\n    TT_ADHERENCE_INPUT = \"HisAdherenceInput\",\n    TT_ART_STAGING_SUMMARY = \"ArtStagingSummary\",\n    TT_LAB_ORDERS = \"HisLabOrders\",\n    TT_APPOINTMENTS_ENTRY = \"HisAppointments\",\n    TT_DISPENSATION_INPUT = 'DrugDispensationSelection',\n    TT_PROGRAM_SELECTION = 'ProgramSelection',\n    TT_DATE_PICKER = 'HisDatePicker',\n    TT_PERSON_RESULT_VIEW = 'PersonSearchView',\n    TT_RELATION_SELECTION = 'RelationsSelection',\n    TT_FILING_NUMBER_VIEW = 'FilingNumberView',\n    TT_CARD_SELECTOR = 'HisCardSelector',\n    TT_PERSON_MATCH_VIEW = 'PersonMatchView',\n    TT_FULL_DATE = 'HisDateInput',\n    TT_BATCH_ENTRY = 'HisBatchEntry',\n    TT_BATCH_VERIFICATION = 'HisBatchVerification',\n    TT_BATCH_MOVEMENT = 'HisBatchMovement',\n    TT_COMPLAINTS_PICKER = 'HisComplaintsPicker',\n    TT_RADIOLOGY_PICKER = 'HisRadiologyPicker',\n    TT_IP_ADDRESS = 'HisIPAddress',\n    TT_TEXT_BANNER = 'HisTextBanner',\n    TT_DRUG_DISPENSER = 'GeneralDrugDispenser',\n    TT_CLINIC_HOLIDAY_PICKER = 'HisClinicHolidayPicker',\n    TT_ANC_PREGNANCY_INPUT_CONFIG = 'AncPregnancyInfoConfig',\n    TT_ANC_PREGNANCY_DETAILS_INPUT = 'AncPregnancyDetailsInput',\n    TT_ANC_LMP_DATE_INPUT = 'AncLmpDateInput',\n    TT_ANC_DRUGSET_INPUT = 'AncDrugSetInput',\n    TT_DRUG_TRANSFER_IN = 'DrugTransferInput',\n    TT_PRESCRIPTION_INPUT = 'HisPrescriptionInput',\n    TT_INFINITE_SCROLL_MULTIPLE_SELECT=\"HisInfiniteScrollMultipleSelect\"\n}\n\n// Register FieldTypes here that will be registered at runtime\nexport const COMPONENT_REFS: FieldType[] = [\n    FieldType.TT_MULTI_SELECT_GRID,\n    FieldType.TT_AGE_INPUT,\n    FieldType.TT_BARCODE,\n    FieldType.TT_NOTE,\n    FieldType.TT_SELECT,\n    FieldType.TT_CARD_SELECTOR,\n    FieldType.TT_MULTIPLE_SELECT,\n    FieldType.TT_TEXT,\n    FieldType.TT_NUMBER,\n    FieldType.TT_MONTHLY_DAYS,\n    FieldType.TT_ART_REGIMEN_SELECTION,\n    FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n    FieldType.TT_TABLE_VIEWER,\n    FieldType.TT_DOSAGE_INPUT,\n    FieldType.TT_YES_NO,\n    FieldType.TT_MULTIPLE_YES_NO,\n    FieldType.TT_WEIGHT_CHART,\n    FieldType.TT_VITALS_ENTRY,\n    FieldType.TT_APPOINTMENTS_ENTRY,\n    FieldType.TT_COMPLAINTS_PICKER,\n    FieldType.TT_CLINIC_HOLIDAY_PICKER,\n    FieldType.TT_SUMMARY,\n    FieldType.TT_ART_STAGING_SUMMARY,\n    FieldType.TT_ADHERENCE_INPUT,\n    FieldType.TT_LAB_ORDERS,\n    FieldType.TT_PERSON_RESULT_VIEW,\n    FieldType.TT_PROGRAM_SELECTION,\n    FieldType.TT_DATE_PICKER,\n    FieldType.TT_RELATION_SELECTION,\n    FieldType.TT_FILING_NUMBER_VIEW,\n    FieldType.TT_PERSON_MATCH_VIEW,\n    FieldType.TT_FULL_DATE,\n    FieldType.TT_BATCH_ENTRY,\n    FieldType.TT_BATCH_VERIFICATION,\n    FieldType.TT_BATCH_MOVEMENT,\n    FieldType.TT_IP_ADDRESS,\n    FieldType.TT_TEXT_BANNER,\n    FieldType.TT_DISPENSATION_INPUT,\n    FieldType.TT_DATA_TABLE,\n    FieldType.TT_GROUP_SELECTOR,\n    FieldType.TT_ANC_PREGNANCY_INPUT_CONFIG,\n    FieldType.TT_ANC_PREGNANCY_DETAILS_INPUT,\n    FieldType.TT_ANC_LMP_DATE_INPUT,\n    FieldType.TT_DRUG_TRANSFER_IN,\n    FieldType.TT_GRID_SELECTOR,\n    FieldType.TT_ANC_DRUGSET_INPUT,\n    FieldType.TT_RADIOLOGY_PICKER,\n    FieldType.TT_PRESCRIPTION_INPUT,\n    FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n    FieldType.TT_DRUG_DISPENSER\n]\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport async function getVillagesByName(name='a', page=1): Promise<Option[]> {\n    const villages = await LocationService.getVillagesByName(name, page)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport function getLandmarks(): Option[] {\n    const landmarks = [\n        'Catholic Church',\n        'CCAP',\n        'Seventh Day',\n        'Mosque',\n        'Primary School',\n        'Borehole',\n        'Secondary School',\n        'College',\n        'Market',\n        'Football Ground',\n        'Other'\n    ]\n\n    return landmarks.map(landmark =>({\n        label: landmark,\n        value: landmark,\n        other: {\n            code: landmark\n        }\n    }))\n}\n","var map = {\n\t\"./AncDrugSetInput.vue\": [\n\t\t\"c99f\",\n\t\t\"TouchFormElement0\"\n\t],\n\t\"./AncLmpDateInput.vue\": [\n\t\t\"101a\",\n\t\t\"TouchFormElement1\"\n\t],\n\t\"./AncPregnancyDetailsInput.vue\": [\n\t\t\"b043\",\n\t\t\"TouchFormElement2\"\n\t],\n\t\"./AncPregnancyInfoConfig.vue\": [\n\t\t\"262e\",\n\t\t\"TouchFormElement3\"\n\t],\n\t\"./ArtStagingSummary.vue\": [\n\t\t\"43db\",\n\t\t\"TouchFormElement4\"\n\t],\n\t\"./BaseTextInput.vue\": [\n\t\t\"36ad\",\n\t\t\"TouchFormElement5\"\n\t],\n\t\"./DrugDispensationSelection.vue\": [\n\t\t\"05d5\",\n\t\t\"TouchFormElement6\"\n\t],\n\t\"./DrugTransferInput.vue\": [\n\t\t\"de42\",\n\t\t\"TouchFormElement7\"\n\t],\n\t\"./FieldMixin.vue\": [\n\t\t\"51c8\",\n\t\t\"TouchFormElement8\"\n\t],\n\t\"./FilingNumberView.vue\": [\n\t\t\"c650\",\n\t\t\"TouchFormElement9\"\n\t],\n\t\"./GeneralDrugDispenser.vue\": [\n\t\t\"7737\",\n\t\t\"TouchFormElement10\"\n\t],\n\t\"./HisAdherenceInput.vue\": [\n\t\t\"f2c3\",\n\t\t\"TouchFormElement11\"\n\t],\n\t\"./HisAgeInput.vue\": [\n\t\t\"c05f\",\n\t\t\"TouchFormElement12\"\n\t],\n\t\"./HisAppointments.vue\": [\n\t\t\"b2eb\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement13\"\n\t],\n\t\"./HisArtRegimenSelection.vue\": [\n\t\t\"47b9\",\n\t\t\"TouchFormElement14\"\n\t],\n\t\"./HisBarcodeInput.vue\": [\n\t\t\"dd65\",\n\t\t\"TouchFormElement15\"\n\t],\n\t\"./HisBatchEntry.vue\": [\n\t\t\"f2ab\",\n\t\t\"chunk-182277b5\",\n\t\t\"TouchFormElement16\"\n\t],\n\t\"./HisBatchMovement.vue\": [\n\t\t\"5148\",\n\t\t\"chunk-182277b5\",\n\t\t\"TouchFormElement17\"\n\t],\n\t\"./HisBatchVerification.vue\": [\n\t\t\"7b0f\",\n\t\t\"chunk-182277b5\",\n\t\t\"TouchFormElement18\"\n\t],\n\t\"./HisCardSelector.vue\": [\n\t\t\"0734\",\n\t\t\"TouchFormElement19\"\n\t],\n\t\"./HisClinicHolidayPicker.vue\": [\n\t\t\"4030\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement20\"\n\t],\n\t\"./HisComplaintsPicker.vue\": [\n\t\t\"82d1\",\n\t\t\"TouchFormElement21\"\n\t],\n\t\"./HisDataTable.vue\": [\n\t\t\"a6ba\",\n\t\t\"TouchFormElement22\"\n\t],\n\t\"./HisDateInput.vue\": [\n\t\t\"374c\",\n\t\t\"TouchFormElement23\"\n\t],\n\t\"./HisDatePicker.vue\": [\n\t\t\"9b30\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement24\"\n\t],\n\t\"./HisDosageInput.vue\": [\n\t\t\"b34c\",\n\t\t\"TouchFormElement25\"\n\t],\n\t\"./HisGridSelector.vue\": [\n\t\t\"112a\",\n\t\t\"TouchFormElement26\"\n\t],\n\t\"./HisGroupSelector.vue\": [\n\t\t\"81cf\",\n\t\t\"TouchFormElement27\"\n\t],\n\t\"./HisIPAddress.vue\": [\n\t\t\"2a82\",\n\t\t\"TouchFormElement28\"\n\t],\n\t\"./HisInfiniteScrollMultipleSelect.vue\": [\n\t\t\"52a3\",\n\t\t\"TouchFormElement29\"\n\t],\n\t\"./HisLabOrders.vue\": [\n\t\t\"e614\",\n\t\t\"TouchFormElement30\"\n\t],\n\t\"./HisMonthlyDays.vue\": [\n\t\t\"69cf\",\n\t\t\"TouchFormElement31\"\n\t],\n\t\"./HisMultiSelectGrid.vue\": [\n\t\t\"0fa3\",\n\t\t\"TouchFormElement32\"\n\t],\n\t\"./HisMultipleSelect.vue\": [\n\t\t\"2fd5\",\n\t\t\"chunk-45847ec4\",\n\t\t\"TouchFormElement33\"\n\t],\n\t\"./HisNextVisitInterval.vue\": [\n\t\t\"3126\",\n\t\t\"TouchFormElement34\"\n\t],\n\t\"./HisNote.vue\": [\n\t\t\"c927\",\n\t\t\"TouchFormElement35\"\n\t],\n\t\"./HisNumberInput.vue\": [\n\t\t\"5e75\",\n\t\t\"TouchFormElement36\"\n\t],\n\t\"./HisPrescriptionInput.vue\": [\n\t\t\"87e5\",\n\t\t\"TouchFormElement37\"\n\t],\n\t\"./HisRadiologyPicker.vue\": [\n\t\t\"adc7\",\n\t\t\"chunk-418a3f72\",\n\t\t\"TouchFormElement38\"\n\t],\n\t\"./HisSelect.vue\": [\n\t\t\"d11f\",\n\t\t\"TouchFormElement39\"\n\t],\n\t\"./HisSummary.vue\": [\n\t\t\"e0bd\",\n\t\t\"TouchFormElement40\"\n\t],\n\t\"./HisTableViewer.vue\": [\n\t\t\"8904\",\n\t\t\"TouchFormElement41\"\n\t],\n\t\"./HisTextBanner.vue\": [\n\t\t\"952c\",\n\t\t\"TouchFormElement42\"\n\t],\n\t\"./HisTextInput.vue\": [\n\t\t\"6ef9\",\n\t\t\"TouchFormElement43\"\n\t],\n\t\"./HisVitalsEntry.vue\": [\n\t\t\"e333\",\n\t\t\"TouchFormElement44\"\n\t],\n\t\"./HisWeightChart.vue\": [\n\t\t\"26a1\",\n\t\t\"TouchFormElement45\"\n\t],\n\t\"./MultiYesNoSelect.vue\": [\n\t\t\"5fd1\",\n\t\t\"TouchFormElement46\"\n\t],\n\t\"./PersonMatchView.vue\": [\n\t\t\"6591\",\n\t\t\"TouchFormElement47\"\n\t],\n\t\"./PersonSearchView.vue\": [\n\t\t\"28b2\",\n\t\t\"TouchFormElement48\"\n\t],\n\t\"./ProgramSelection.vue\": [\n\t\t\"e3b4\",\n\t\t\"TouchFormElement49\"\n\t],\n\t\"./RelationsSelection.vue\": [\n\t\t\"0e57\",\n\t\t\"TouchFormElement50\"\n\t],\n\t\"./SelectMixin.vue\": [\n\t\t\"82a9\",\n\t\t\"TouchFormElement51\"\n\t],\n\t\"./YesNoSelect.vue\": [\n\t\t\"71f2\",\n\t\t\"TouchFormElement52\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"f159\";\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}