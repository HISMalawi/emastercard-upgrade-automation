{"version":3,"sources":["webpack:///./src/services/person_attributes_service.ts","webpack:///./src/services/patient_registration_service.ts","webpack:///./src/views/PatientRegistration.vue?1b1d","webpack:///./src/views/PatientRegistration.vue","webpack:///./src/views/PatientRegistration.vue?ad61"],"names":["PersonAttributeService","Service","constructor","super","attributes","postJson","PatientRegistrationService","this","personId","getPersonID","setPersonID","personID","person","personAttributes","createPerson","createPersonAttributes","patient","createPatient","printPatient","updatePerson","PersonService","update","data","create","person_id","ProgramService","index","PatientPrintoutService","printNidLbl","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","onOnIndex","$event","fieldComponent","skipSummary","activeField","fields","onFinishAction","onFinish","_","defineComponent","components","HisStandardForm","IonPage","app","App","getActiveApp","ddeInstance","ddeDocID","ddeIsReassign","currentAddressAttributes","homeAddressAttributes","hasIncompleteData","editPersonData","editPerson","personAttribute","isMilitarySite","presets","registrationSummary","form","ddeEnabled","watch","query","PatientDemographicsExchangeService","edit_person","dde_reassign","doc_id","setPatientID","person_attribute","initEditMode","getFields","immediate","deep","methods","push","personIndexField","givenNameField","familyNameField","genderField","searchResultField","concat","dobFields","homeRegionField","homeDistrictField","homeTAField","homeVillageField","currentRegionField","currentDistrictField","currentTAField","currentVillage","landmarkFields","cellPhoneField","patientTypeField","facilityLocationField","occupationField","relationshipField","possibleDuplicatesField","patientRegistrationSummary","isEditMode","Store","get","patientID","parseInt","ancestryDistrict","ancestryTA","ancestryVillage","currentDistrict","currentTA","getAddresses","getGivenName","getFamilyName","getGender","getBirthdate","getPhoneNumber","getClosestLandmark","getOccupation","computedData","PersonField","resolvePerson","nationalIDStatus","appendNationalIDData","resolvePersonAttributes","registration","Patientservice","registerPatient","set","updateMWNationalId","malawiNationalID","onRegisterPatient","exit","$router","$route","relationship","nextTask","Object","assign","given_name","family_name","gender","birthdate","attr","invalidate","back","editConditionCheck","includes","getDocID","getNationalID","match","assignNpid","printNationalID","delayPromise","e","toastDanger","getID","values","filter","d","isPlainObject","map","mapToOption","listOptions","item","label","value","name","getGivenNameField","condition","defaultValue","getFamilyNameField","IS_ANC_APP","applicationName","IS_CXCA","getGenderField","requireNext","defaultOutput","defaultComputedOutput","beforeNext","async","newGender","oldGender","action","infoActionSheet","slot","color","dobConfig","getDobConfig","sdate","getSessionDate","childBearingAgeInYrs","maxDate","dayjs","subtract","format","STANDARD_DATE_FORMAT","generateDateFields","region","getHomeRegionField","district","getHomeDistrictField","homeTA","getHomeTaField","home_region","homeVillage","getHomeVillageField","currentRegion","getCurrentRegionField","getCurrentDistrictField","getCurrentTAfield","current_region","getCurrentVillageField","cellPhone","getCellNumberField","cell_phone_number","facility","getFacilityLocationField","patient_type","landmarks","getLandmarkFields","id","helpText","type","FieldType","TT_SELECT","computedValue","val","validation","Validation","required","options","PatientTypeService","getPatientTypes","init","regimentField","TT_TEXT","occupation","rankField","dateJoinedMilitaryFields","minDate","HisDate","estimateDateFromAge","WorkflowService","estimation","allowUnknown","computeValue","date","OPD","Registration","TT_PERSON_RESULT_VIEW","dynamicHelpText","appearInSummary","payload","patients","searchDemographics","itemData","getPersonAttributeOptions","other","search","config","hiddenFooterBtns","footerBtns","onClick","state","disabled","onValue","isEmpty","results","createdPerson","duplicatePatients","TT_PERSON_MATCH_VIEW","c","checkPotentialDuplicates","length","toDate","toStandardHisDisplayFormat","score","patient_id","newPerson","foundPerson","docID","comparisons","home_district","home_traditional_authority","visible","f","possible_duplicates","importPatient","then","result","catch","TT_TABLE_VIEWER","editButton","attribute","columns","rows","home_village","current_district","current_village","current_traditional_authority","landmark","emptySets","indexes","class","forEach","r","i","isValueEmpty","rowColors","onload","reassignNpid","printNpid","toastWarning","confirmPatient","TT_SUMMARY","buildRegistrationSummary","keys","key","replace","m","toUpperCase","x","undefined","nationalIDData","__exports__"],"mappings":"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","file":"js/chunk-20db0db6.d2f268f4.js","sourcesContent":["import { Service } from \"./service\"\n\nexport interface NewAttribute {\n    person_id: number;\n    person_attribute_type_id: number;\n    value: number | string;\n}\n\nexport class PersonAttributeService extends Service { \n    constructor() {\n        super()\n    }\n\n    static create(attributes: Array<NewAttribute>) { \n        return super.postJson('/person_attributes', attributes) \n    }\n}\n","import { Service } from \"./service\"\nimport { ProgramService } from \"@/services/program_service\";\nimport { Person } from \"@/interfaces/person\"\nimport { PersonService } from \"@/services/person_service\"\nimport { PersonAttributeService } from '@/services/person_attributes_service'\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\n\nexport class PatientRegistrationService extends Service {\n    personId: number\n    constructor() {\n        super()\n        this.personId = 0\n    }\n\n    getPersonID() {\n        return this.personId\n    }\n\n    setPersonID(personID: number) {\n        this.personId = personID\n    }\n\n    async registerPatient(person: any, personAttributes: any) {\n        await this.createPerson(person)\n        await this.createPersonAttributes(personAttributes)\n        const patient = await this.createPatient()\n        await this.printPatient()\n        return patient\n    }\n\n    async registerGuardian(person: any) {\n        return this.createPerson(person)\n    }\n\n    updatePerson(person: any) {\n       return new PersonService(person).update(this.personId)\n    }\n\n    async createPerson(person: any) {\n        const data: Person = await new PersonService(person).create()\n        this.personId = data.person_id\n        return data\n    }\n\n    createPatient() {\n        return ProgramService.createPatient(this.personId)\n    }\n\n    async createPersonAttributes(attributes: Array<any>) {\n        for(const index in attributes) {\n            await PersonAttributeService.create({\n                ...attributes[index],\n                'person_id': this.personId\n            })\n        }\n    }\n\n    printPatient() {\n        return new PatientPrintoutService(this.personId).printNidLbl()\n    }\n}\n","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (_ctx.fieldComponent='')),\n        skipSummary: true,\n        activeField: _ctx.fieldComponent,\n        fields: _ctx.fields,\n        onFinishAction: _ctx.onFinish\n      }, null, 8, [\"activeField\", \"fields\", \"onFinishAction\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport { WorkflowService } from \"@/services/workflow_service\"\nimport { isPlainObject, isEmpty } from \"lodash\"\nimport PersonField from \"@/utils/HisFormHelpers/PersonFieldHelper\"\nimport { PatientRegistrationService } from \"@/services/patient_registration_service\"\nimport App from \"@/apps/app_lib\"\nimport { AppInterface } from \"@/apps/interfaces/AppInterface\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { isValueEmpty } from \"@/utils/Strs\"\nimport { PatientDemographicsExchangeService } from \"@/services/patient_demographics_exchange_service\"\nimport { toastDanger, toastWarning } from \"@/utils/Alerts\"\nimport { PatientTypeService } from \"@/apps/ART/services/patient_type_service\";\nimport { IonPage } from \"@ionic/vue\"\nimport { infoActionSheet } from \"@/utils/ActionSheets\"\nimport GLOBAL_PROP from \"@/apps/GLOBAL_APP/global_prop\";\nimport dayjs from \"dayjs\";\nimport { delayPromise } from \"@/utils/Timers\";\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n  components: { HisStandardForm, IonPage },\n  data: () => ({\n    app: App.getActiveApp() as AppInterface,\n    ddeInstance: {} as any,\n    ddeDocID: '' as string,\n    ddeIsReassign: false as boolean,\n    skipSummary: false as boolean,\n    currentAddressAttributes: [\n        'current_region',\n        'current_district',\n        'current_village',\n        'current_traditional_authority'\n    ] as string[],\n    homeAddressAttributes: [\n        'home_region',\n        'home_district',\n        'home_traditional_authority',\n        'home_village'\n    ] as string[],\n    hasIncompleteData: false as boolean,\n    patient: {} as any,\n    editPersonData: {} as any,\n    editPerson: -1 as number,\n    personAttribute: '' as string,\n    activeField: '' as string,\n    fieldComponent: '' as string,\n    fields: [] as Array<Field>,\n    isMilitarySite: false,\n    presets: {} as any,\n    registrationSummary: {} as any,\n    form: {} as Record<string, Option> | Record<string, null>,\n    ddeEnabled: false as boolean,\n  }),\n  watch: {\n    '$route': {\n        async handler({query}: any) {\n           this.ddeInstance = new PatientDemographicsExchangeService()\n           if (query.edit_person) {\n                this.ddeIsReassign = query.dde_reassign\n                this.ddeDocID = query.doc_id\n                this.ddeInstance.setPatientID(query.edit_person)\n                if(query.person_attribute) this.personAttribute = query.person_attribute\n                await this.initEditMode(query.edit_person)\n            } else {\n                this.presets = query\n            }\n            this.fields = this.getFields()\n        },\n        immediate: true,\n        deep: true\n    }\n  },\n  methods: {\n    getFields(): Array<Field> {\n        let fields: Array<Field> = []\n        fields.push(this.personIndexField())\n        fields.push(this.givenNameField())\n        fields.push(this.familyNameField())\n        fields.push(this.genderField())\n        fields.push(this.searchResultField())\n        fields = fields.concat(this.dobFields())\n        fields.push(this.homeRegionField())\n        fields.push(this.homeDistrictField())\n        fields.push(this.homeTAField())\n        fields.push(this.homeVillageField())\n        fields.push(this.currentRegionField())\n        fields.push(this.currentDistrictField())\n        fields.push(this.currentTAField())\n        fields.push(this.currentVillage())\n        fields = fields.concat(this.landmarkFields())\n        fields.push(this.cellPhoneField())\n        fields.push(this.patientTypeField())\n        fields.push(this.facilityLocationField())\n        fields.push(this.occupationField())\n        // fields.push(this.regimentField())\n        // fields = fields.concat(this.dateJoinedMilitaryFields())\n        // fields.push(this.rankField())\n        fields.push(this.relationshipField())\n        fields.push(this.possibleDuplicatesField())\n        fields.push(this.patientRegistrationSummary())\n        return fields\n    },\n    isEditMode() {\n        return this.editPerson >= 1\n    },\n    async initEditMode(personId: number) {\n        this.editPerson = personId\n        this.patient = await Store.get('ACTIVE_PATIENT', { patientID: parseInt(`${this.editPerson}`)})\n        const {\n            ancestryDistrict,\n            ancestryTA,\n            ancestryVillage,\n            currentDistrict,\n            currentVillage,\n            currentTA\n        } = this.patient.getAddresses()\n        this.editPersonData = {\n            'given_name': this.patient.getGivenName(),\n            'family_name': this.patient.getFamilyName(),\n            'gender': this.patient.getGender(),\n            'birthdate': this.patient.getBirthdate(),\n            'home_district': ancestryDistrict,\n            'home_traditional_authority': ancestryTA,\n            'home_village': ancestryVillage,\n            'current_district': currentDistrict,\n            'current_village': currentVillage,\n            'current_traditional_authority': currentTA,\n            'cell_phone_number': this.patient.getPhoneNumber(),\n            'landmark': this.patient.getClosestLandmark(),\n            'occupation': this.patient.getOccupation()\n        }\n        this.presets = this.editPersonData\n        this.skipSummary = true\n        if(this.personAttribute) {\n            this.activeField = this.personAttribute\n            this.fieldComponent = this.activeField\n        }\n    },\n    async onFinish(form: Record<string, Option> | Record<string, null>, computedData: any) {\n        if (!this.isEditMode()) {\n            return this.create(form, computedData)\n        } else {\n            return this.update(computedData)\n        }\n    },\n    async create(_: any, computedData: any) {\n        let person: any = PersonField.resolvePerson(computedData)\n        person = this.presets.nationalIDStatus == \"true\" ? this.appendNationalIDData(person) : person\n        const attributes: Array<any> = this.resolvePersonAttributes(computedData)\n        const registration: any = new PatientRegistrationService()\n        const patient = new Patientservice((await registration.registerPatient(person, attributes)))\n        const patientID = registration.getPersonID()\n\n        Store.set('ACTIVE_PATIENT', patient) // update patient store\n \n        if(this.presets.nationalIDStatus == \"true\"){ \n            this.patient = patient\n            await this.patient.updateMWNationalId(this.presets.malawiNationalID)\n        }\n\n        if (this.app.onRegisterPatient) {\n            const exit = await this.app.onRegisterPatient(\n                patientID, person, attributes, this.$router, this.$route\n            )\n            if (exit) return\n        }\n        if (person.relationship === 'Yes') {\n            return this.$router.push(`/guardian/registration/${patientID}`)\n        }\n        await nextTask(patientID, this.$router)\n    },\n    appendNationalIDData(person: any){\n       return Object.assign(person,{\n            'given_name': this.presets.given_name,\n            'family_name': this.presets.family_name,\n            'gender': this.presets.gender,\n            'birthdate': this.presets.birthdate,\n            'birthdate_estimated': false\n        })\n    },\n    async update(computedData: any) {\n        const person: any = PersonField.resolvePerson(computedData)\n        const update = new PatientRegistrationService()\n\n        update.setPersonID(this.editPerson)\n        await update.updatePerson(person)\n        for(const attr in person) {\n            if (attr in this.editPersonData) {\n                this.editPersonData[attr] = person[attr]\n            }\n        }\n        Store.invalidate('ACTIVE_PATIENT')\n        if(!this.personAttribute) return this.fieldComponent = 'edit_user'\n        this.$router.back()\n    },\n    editConditionCheck(attributes=[] as Array<string>): boolean {\n        if (this.isEditMode() && !attributes.includes(this.activeField)) {\n            return false\n        }\n        return true\n    },\n    async confirmPatient() {\n        // Attempt to assign or reassign a patient's NPID if they dont have a valid one\n        if (this.ddeEnabled && (!this.patient.getDocID() \n            || (this.patient.getDocID() && this.patient.getNationalID().match(/unknown/i)))) {\n                try {\n                    await this.patient.assignNpid()\n                    await this.patient.printNationalID()\n                    await delayPromise(300)\n               } catch (e) {\n                    toastDanger(`Failed to assign new NPID: ${e}`)\n                }\n        }\n        this.$router.push(`/patients/confirm?person_id=${this.patient.getID()}`)\n    },\n    resolvePersonAttributes(form: Record<string, Option> | Record<string, null>) {\n        return Object.values(form)\n                    .filter((d: any) => isPlainObject(d) && 'personAttributes' in d)\n                    .map(({personAttributes}: any) => personAttributes)\n    },\n    mapToOption(listOptions: Array<string>): Array<Option> {\n        return listOptions.map((item: any) => ({ label: item, value: item }))\n    },\n    givenNameField(): Field {\n        const name: Field = PersonField.getGivenNameField()\n        name.condition = () => this.editConditionCheck(['given_name']) && this.presets.nationalIDStatus != \"true\"\n        name.defaultValue = () => this.presets.given_name\n        return name\n    },\n    familyNameField(): Field {\n        const name: Field = PersonField.getFamilyNameField()\n        name.condition = () => this.editConditionCheck(['family_name']) && this.presets.nationalIDStatus != \"true\"\n        name.defaultValue = () => this.presets.family_name\n        return name\n    },\n    genderField(): Field {\n        const IS_ANC_APP = this.app.applicationName === 'ANC'\n        const IS_CXCA = this.app.applicationName === 'CxCa'\n        const gender: Field = PersonField.getGenderField()\n        gender.requireNext = this.isEditMode()\n        gender.defaultValue = () => this.presets.gender\n        gender.condition = () => {\n            if (!this.isEditMode() && (IS_ANC_APP || IS_CXCA)) {\n                return false\n            }\n            return this.editConditionCheck(['gender']) && this.presets.nationalIDStatus != \"true\"\n        }\n        if ((IS_ANC_APP || IS_CXCA) && !this.isEditMode()) {\n            gender.defaultOutput = () => ({ label: 'Female', value: 'F' })\n            gender.defaultComputedOutput = () => ({ person: 'F' })\n        } \n\n        gender.beforeNext = async (data: Option) => {\n            /**\n             * Provide warning when changing gender in edit mode\n            */\n            const newGender = data.value\n            const oldGender = this.presets.gender\n            if (this.isEditMode() && newGender != oldGender) {\n                const action = await infoActionSheet(\n                    'Warning',\n                    `Changing gender from ${oldGender} to ${newGender}`,\n                    \"This change will cause data inconsistency and will affect alot of Reports.\",\n                    [\n                        {\n                            name: 'Cancel', slot: 'start'\n                        },\n                        {\n                            name: 'Change gender', slot: 'end', color: 'danger'\n                        }\n                    ]\n                )\n                return action === 'Change gender'\n            }\n            return true\n        }\n        return gender\n    },\n    dobFields(): Array<Field> {\n        const dobConfig = PersonField.getDobConfig()\n        dobConfig.defaultValue = () => this.presets.birthdate\n        dobConfig.condition = () => this.editConditionCheck([\n            'year_birth_date', 'month_birth_date', 'day_birth_date'\n        ])\n        // ANC validation to ensure that we are not registering\n        // Non child bearing youngsters\n        if (this.app.applicationName === 'ANC') {\n            const sdate = Patientservice.getSessionDate()\n            const childBearingAgeInYrs = 12\n            dobConfig.maxDate = () => dayjs(sdate)\n                .subtract(childBearingAgeInYrs, 'years')\n                .format(STANDARD_DATE_FORMAT)\n        }\n        return generateDateFields(dobConfig)\n    },\n    homeRegionField(): Field {\n        const region: Field = PersonField.getHomeRegionField()\n        region.condition = () => this.editConditionCheck(this.homeAddressAttributes)\n        return region\n    },\n    homeDistrictField(): Field {\n        const district: Field = PersonField.getHomeDistrictField()\n        district.condition = () => this.editConditionCheck(this.homeAddressAttributes)\n        return district\n    },\n    homeTAField(): Field {\n        const homeTA: Field = PersonField.getHomeTaField()\n        homeTA.condition = (form: any) => this.editConditionCheck(this.homeAddressAttributes)\n            && !form.home_region.label.match(/foreign/i)\n        return homeTA\n    },\n    homeVillageField(): Field {\n        const homeVillage: Field = PersonField.getHomeVillageField()\n        homeVillage.condition = (form: any) => this.editConditionCheck(this.homeAddressAttributes)\n            && !form.home_region.label.match(/foreign/i)\n        return homeVillage\n    },\n    currentRegionField(): Field {\n        const currentRegion: Field = PersonField.getCurrentRegionField()\n        currentRegion.condition = () => this.editConditionCheck(this.currentAddressAttributes)\n        return currentRegion\n    },\n    currentDistrictField(): Field {\n        const currentDistrict: Field = PersonField.getCurrentDistrictField()\n        currentDistrict.condition = () => this.editConditionCheck(this.currentAddressAttributes)\n        return currentDistrict\n    },\n    currentTAField(): Field {\n        const currentTA: Field = PersonField.getCurrentTAfield()\n        currentTA.condition = (form: any) => this.editConditionCheck(this.currentAddressAttributes)\n            && !form.current_region.label.match(/foreign/i)\n        return currentTA\n    },\n    currentVillage(): Field {\n        const currentVillage: Field = PersonField.getCurrentVillageField()\n        currentVillage.condition = (form: any) => this.editConditionCheck(this.currentAddressAttributes)\n            && !form.current_region.label.match(/foreign/i)\n        return currentVillage\n    },\n    cellPhoneField(): Field {\n        const cellPhone: Field = PersonField.getCellNumberField()\n        cellPhone.condition = () => this.editConditionCheck(['cell_phone_number'])\n        cellPhone.defaultValue = () => this.presets.cell_phone_number\n        return cellPhone\n    },\n    facilityLocationField(): Field {\n       const facility: Field = PersonField.getFacilityLocationField()\n       facility.condition = (form: any) => [\n           'Drug Refill',\n           'External consultation'\n       ].includes(form.patient_type.value)\n       return facility\n    },\n    landmarkFields(): Field[] {\n        const landmarks: Field[] = PersonField.getLandmarkFields()\n        landmarks[0].condition = () => this.editConditionCheck(['default_landmarks'])\n        return landmarks\n    },\n    patientTypeField(): Field {\n        return {\n            id: 'patient_type',\n            helpText: 'Type of patient',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            condition: () => this.editConditionCheck(['patient_type'])\n                && this.app.applicationName === 'ART',\n            validation: (val: any) => Validation.required(val),\n            options: () => PatientTypeService.getPatientTypes()\n        }\n    },\n    occupationField(): Field {\n        return {\n            id: 'occupation',\n            helpText: 'Occupation',\n            type: FieldType.TT_SELECT,\n            init: async () => {\n               this.isMilitarySite = await Store.get('IS_MILITARY_SITE')\n               return true\n            },\n            computedValue: (val: Option) => ({person: val.value}),\n            condition: () => this.editConditionCheck(['occupation']) && this.isMilitarySite,\n            validation: (val: any) => Validation.required(val),\n            options: () => this.mapToOption([\n                'Military',\n                'Civilian'\n            ])\n        }\n    },\n    regimentField(): Field {\n        return {\n            id: 'person_regiment_id',\n            helpText: 'Regiment ID',\n            type: FieldType.TT_TEXT,\n            computedValue: ({value}: Option) => ({\n                personAttributes: {\n                    'person_attribute_type_id': 35,\n                    'value': value\n                }\n            }),\n            condition: (form: any) => this.editConditionCheck(['person_regiment_id', 'occupation']) && form.occupation && form.occupation.value.match(/Military/i),\n            validation: (val: any) => Validation.required(val)\n        }\n    },\n    rankField(): Field {\n        return {\n            id: 'rank',\n            helpText: 'Rank',\n            type: FieldType.TT_SELECT,\n            validation: (val: any) => Validation.required(val),\n            computedValue: ({value}: Option) => ({\n                personAttributes: {\n                    'person_attribute_type_id': 36,\n                    'value': value\n                }\n            }),\n            condition: (form: any) => this.editConditionCheck(['rank', 'occupation']) && form.occupation && form.occupation.value.match(/Military/i),\n            options: () => this.mapToOption([\n                'First Lieutenant',\n                'Captain',\n                'Major',\n                'Lieutenant Colonel',\n                'Colonel',\n                'Brigadier General',\n                'Lieutenant General',\n                'General',\n                'Private',\n                'Corporal',\n                'Lance Corporal',\n                'Seargent',\n                'Staff Seargent',\n                'Warrant Officer class 1',\n                'Warrant Officer class 2'\n            ])\n        }\n    },\n    dateJoinedMilitaryFields(): Array<Field> {\n        return generateDateFields({\n            id: 'person_date_joined_military',\n            helpText: 'Joined Military',\n            required: true,\n            condition: (form: any) =>  this.editConditionCheck([\n                'year_person_date_joined_military',\n                'month_person_date_joined_military',\n                'day_person_date_joined_military',\n                'occupation'\n            ]) && form.occupation && form.occupation.value.match(/Military/i),\n            minDate: () => HisDate.estimateDateFromAge(100),\n            maxDate: () => WorkflowService.getSessionDate(),\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => ({\n                date,\n                personAttributes : {\n                    'person_attribute_type_id': 37, 'value': date\n                }\n            })\n        })\n    },\n    relationshipField(): Field {\n        const IS_CXCA = this.app.applicationName === 'CxCa'\n        const OPD = this.app.applicationName === 'OPD'\n        const Registration = this.app.applicationName === 'Registration'\n        return {\n            id: 'relationship',\n            helpText: 'Register guardian?',\n            type: FieldType.TT_SELECT,\n            computedValue: (val: Option) => ({person: val.value}),\n            condition: () => this.editConditionCheck(['relationship']) && !IS_CXCA && !OPD && !Registration,\n            validation: (val: any) => Validation.required(val),\n            options: () => this.mapToOption(['Yes', 'No'])\n        }\n    },\n    searchResultField(): Field {\n        return {\n            id: 'results',\n            helpText: 'Search results',\n            type: FieldType.TT_PERSON_RESULT_VIEW,\n            init: async () => {\n                if (!this.isEditMode()) { \n                    this.ddeEnabled = await Store.get('IS_DDE_ENABLED')\n                }\n                return true\n            },\n            dynamicHelpText: (form: any) => {\n                return this.presets.nationalIDStatus == \"true\" ?\n                 `Search results for \"${this.presets.given_name} ${this.presets.family_name} | ${this.presets.gender}\"` : \n                 `Search results for \"${form.given_name.value} ${form.family_name.value} | ${form.gender.label}\"`;\n            },\n            appearInSummary: () => false,\n            condition: () => !this.isEditMode(),\n            validation: (val: Option) => Validation.required(val),\n            options: async (form: any) => {\n                let payload;\n                if(this.presets.nationalIDStatus == \"true\"){\n                    this.presets.gender = this.presets.gender == \"Male\" ? \"M\" : \"F\"\n                    payload  = {\n                        'given_name': this.presets.given_name,\n                        'family_name': this.presets.family_name,\n                        'gender': this.presets.gender\n                    } \n                }\n                else{\n                    payload = {\n                        'given_name': form.given_name.value,\n                        'family_name': form.family_name.value,\n                        'gender': form.gender.value\n                    }\n                }\n                // DDE enabled search\n                if (this.ddeEnabled) {\n                    const patients = await this.ddeInstance.searchDemographics(payload)\n                    return patients.map((item: any) => {\n                        const itemData = PersonField.getPersonAttributeOptions(item)\n                        itemData.other.options.push({\n                            label: 'Patient Type',\n                            value: item.patient_type\n                        })\n                        itemData.other.options.push({\n                            label: 'Doc ID',\n                            value: item.doc_id\n                        })\n                        return itemData\n                    })\n                }\n                // Regular search\n                const patients = await Patientservice.search(payload);\n                return patients.map((item: any) => PersonField.getPersonAttributeOptions(item))\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next',\n                    'Back'\n                ],\n                footerBtns: [\n                    {\n                        name: 'Edit Search',\n                        slot: 'end',\n                        onClick: () => {\n                            this.fieldComponent = 'given_name'\n                        }\n                    },\n                    {\n                        name: 'New Patient',\n                        slot: 'end',\n                        onClick: () => {\n                            this.presets.nationalIDStatus != \"true\"?\n                            this.fieldComponent = 'year_birth_date':\n                            this.fieldComponent = 'home_region'\n                        }\n                    },\n                    {\n                        name: 'Continue',\n                        color: 'success',\n                        slot: 'end',\n                        state: {\n                            disabled: {\n                                default: () => true,\n                                onValue(_: any,form: any) {\n                                    return isEmpty(form.results)\n                                }\n                            }\n                        },\n                        onClick: (form: any) => {\n                            if (form.results.other.patientID) {\n                                return this.$router.push(`/patients/confirm?person_id=${form.results.value}`)\n                            }\n                            return this.$router.push(`/patients/confirm?patient_barcode=${form.results.value}`)\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    possibleDuplicatesField(): Field {\n        let createdPerson: any = {}\n        let duplicatePatients: any = {}\n        return {\n            id: 'possible_duplicates',\n            helpText: 'Possible Duplicate(s)',\n            type: FieldType.TT_PERSON_MATCH_VIEW,\n            condition: async (_: any, c: any) => {\n                if (this.ddeEnabled && this.editPerson <= 0) {\n                    createdPerson = PersonField.resolvePerson(c)\n                    duplicatePatients = await this.ddeInstance\n                        .checkPotentialDuplicates(createdPerson)\n                    return duplicatePatients.length >= 1\n                }\n                return false\n            },\n            options: async () => {\n                const toDate = (date: string) => HisDate.toStandardHisDisplayFormat(date)\n                return duplicatePatients.map(({ score, person }: any) => {\n                    const name = `${person.given_name} ${person.family_name}`\n                    return {\n                        label: name,\n                        value: person.patient_id,\n                        other: {\n                            score: `${score * 100}%`,\n                            newPerson: createdPerson,\n                            foundPerson: person,\n                            docID: person.id,\n                            comparisons: [\n                                [\n                                    'Name',\n                                    `${createdPerson.given_name} ${createdPerson.family_name}`,\n                                    `${person.given_name} ${person.family_name}`\n                                ],\n                                [\n                                    'Gender',\n                                    createdPerson.gender,\n                                    person.gender\n                                ],\n                                [\n                                    'Birthdate',\n                                    toDate(createdPerson.birthdate),\n                                    toDate(person.birthdate)\n                                ],\n                                [\n                                    'Home District',\n                                    createdPerson.home_district,\n                                    person.home_district\n                                ],\n                                [\n                                    'Home TA',\n                                    createdPerson.home_traditional_authority,\n                                    person.home_traditional_authority\n                                ]\n                            ]\n                        }\n                    }\n                })\n            },\n            config: {\n                hiddenFooterBtns: [\n                    'Clear',\n                    'Next'\n                ],\n                footerBtns: [\n                    {\n                        name: 'Not Duplicate',\n                        slot: 'start',\n                        state: {\n                            visible: {\n                                default: () => false,\n                                onValue: (_: any, f: any) => !isEmpty(f.possible_duplicates)\n                            }\n                        },\n                        onClick: () => {\n                            this.fieldComponent = '_NEXT_FIELD_'\n                        }\n                    },\n                    {\n                        name: 'Select',\n                        slot: 'end',\n                        color: 'success',\n                        state: {\n                            visible: {\n                                default: () => false,\n                                onValue: (_: any, f: any) => !isEmpty(f.possible_duplicates)\n                            }\n                        },\n                        onClick: (form: any) => {\n                            this.ddeInstance.importPatient(form.possible_duplicates.other.docID)\n                                .then((result: any) => {\n                                    this.$router.push(`/patients/confirm?person_id=${result.patient_id}`)\n                                }).catch(() => {\n                                    this.$router.push(`/patients/confirm?person_id=${form.possible_duplicates.value}`)\n                                })\n                        }\n                    }\n                ]\n            }\n        }\n    },\n    personIndexField(): Field {\n        return {\n            id: 'edit_user',\n            helpText: 'Edit Demographics',\n            type: FieldType.TT_TABLE_VIEWER,\n            init: async () => {\n                if (this.isEditMode()) {\n                    this.ddeEnabled = await Store.get('IS_DDE_ENABLED')\n                    this.isMilitarySite = await Store.get('IS_MILITARY_SITE')\n                }\n                return true\n            },\n            condition: () => this.isEditMode(),\n            options: async () => {\n                const editButton = (attribute: string) => ({\n                    name: 'Edit',\n                    type: 'button',\n                    action: () => {\n                        this.activeField = attribute\n                        this.fieldComponent = this.activeField\n                    }\n                })\n                const columns = ['Attributes', 'Values', 'Edit']\n                const rows = [\n                    ['Given Name', this.editPersonData.given_name, editButton('given_name')],\n                    ['Family Name', this.editPersonData.family_name, editButton('family_name')],\n                    ['Gender', this.editPersonData.gender,  editButton('gender')],\n                    ['Birthdate', HisDate.toStandardHisDisplayFormat(this.editPersonData.birthdate),  editButton('year_birth_date')],\n                    ['Cell Phone Number', this.editPersonData.cell_phone_number, editButton('cell_phone_number')],\n                    ['Home District', this.editPersonData.home_district, editButton('home_region')],\n                    ['Home TA', this.editPersonData.home_traditional_authority,  editButton('home_region')],\n                    ['Home Village', this.editPersonData.home_village,  editButton('home_region')],\n                    ['Current district',this.editPersonData.current_district, editButton('current_region')],\n                    ['Current Village',this.editPersonData.current_village, editButton('current_region')],\n                    ['Current T/A', this.editPersonData.current_traditional_authority, editButton('current_region')],\n                    ['Landmark', this.editPersonData.landmark, editButton('default_landmarks')]\n                ]\n                if (this.isMilitarySite) {\n                    rows.push(['Occupation', this.editPersonData.occupation, editButton('occupation')])\n                }\n                // Tag rows with empty values\n                const emptySets: any = {indexes: [], class: 'his-empty-set-color'}\n                rows.forEach((r: any, i: number) => {\n                    if (isValueEmpty(r[1])) \n                        emptySets.indexes.push(i)\n                })\n                this.hasIncompleteData = emptySets.indexes.length >= 1\n                return [{\n                    label: '', \n                    value: '',\n                    other: {\n                        rows,\n                        columns,\n                        rowColors: [emptySets]\n                    }\n                }]\n            },\n            config: {\n                footerBtns: [\n                    /**\n                     * Custom button that Appears when DDE wants to\n                     * Reassign a patient with incomplete data\n                    */\n                    {\n                        name: 'Reassign',\n                        slot: 'end',\n                        color: 'success',\n                        state: {\n                            visible: {\n                                default: () => false,\n                                onload: () => (\n                                    this.ddeEnabled\n                                    && this.ddeIsReassign\n                                    && !this.hasIncompleteData\n                                )\n                            }\n                        },\n                        onClick: async () => {\n                            try {\n                                await this.ddeInstance.reassignNpid(this.ddeDocID, this.editPerson)\n                                await this.ddeInstance.printNpid()\n                                this.$router.push(`/patients/confirm?person_id=${this.editPerson}`)\n                            } catch(e) {\n                                toastWarning(`${e}`)\n                            }\n                        }\n                    },\n                    /**\n                     * Custom button that redirects to patient confirmation page\n                     */\n                    {\n                        name: 'Confirm',\n                        slot: 'end',\n                        color: 'warning',\n                        state: {\n                            visible: {\n                                onload: () => !this.ddeIsReassign && !this.hasIncompleteData\n                            }\n                        },\n                        onClick: async () => this.confirmPatient()\n                    }\n                ],\n                hiddenFooterBtns: ['Clear', 'Next']\n            }\n        }\n    },\n    patientRegistrationSummary(): Field \n    {\n        return{\n          id: \"registration_summary\",\n          helpText: \"Summary\",\n          type: FieldType.TT_SUMMARY,\n          condition: () => !this.skipSummary,\n          options: (f: any, c: any) => {  \n                return this.buildRegistrationSummary(c)\n          },\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          }\n        }\n    },\n    buildRegistrationSummary(data: any){\n        data = Object.keys(data).map(function(key, index) {\n            if(data[key] != null){\n                return {\n                'label': key.replace(/_/g,' ').replace(/(^\\w|\\s\\w)/g, m => m.toUpperCase()),\n                'value': key == \"birth_date\" ? data[key]['date'] : data[key]['person']\n                } \n            }\n        });\n        data = data.filter((x: any)=>{\n            return x != undefined\n        })\n\n       const nationalIDData = [\n            {\n                'label': \"Given Name\",\n                'value': this.presets.given_name\n            },\n            {\n                'label': \"Family Name\",\n                'value': this.presets.family_name\n            },\n            {\n                'label': \"Gender\",\n                'value': this.presets.gender\n            },\n            {\n                'label': \"Birthdate\",\n                'value': this.presets.birthdate\n            },\n            {\n                'label': \"Malawi National ID\",\n                'value': this.presets.malawiNationalID\n            } \n        ]\n        if(this.presets.nationalIDStatus == \"true\")\n            data = nationalIDData.concat(data)\n\n        return data\n    }\n  }\n})\n","import { render } from \"./PatientRegistration.vue?vue&type=template&id=24f0242f&ts=true\"\nimport script from \"./PatientRegistration.vue?vue&type=script&lang=ts\"\nexport * from \"./PatientRegistration.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}