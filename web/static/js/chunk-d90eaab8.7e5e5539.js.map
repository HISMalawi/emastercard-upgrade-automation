{"version":3,"sources":["webpack:///./src/apps/CxCa/views/encounters/CxCaTreatment.vue?2541","webpack:///./src/apps/CxCa/services/CxCaTreatmentService.ts","webpack:///./src/apps/CxCa/views/encounters/CxCaTreatment.vue","webpack:///./src/apps/CxCa/views/encounters/CxCaTreatment.vue?4c2f","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/components/Forms/BaseFormElements.ts","webpack:///./src/components/FormElements lazy ^\\.\\/.*\\.vue$ namespace object"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","TreatmentService","AppEncounterService","constructor","patientID","providerID","super","screeningResult","this","getFirstValueCoded","treatmentType","referralReason","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","reception","summaryData","isReferralSiteEnabled","skipToTreatment","watch","patient","getSummary","CXCA_GLOBAL_PROP","setReason","getFields","deep","methods","updateTreatmentOptions","condition","options","disabledOptionLabels","map","option","disabled","includes","label","isNotSameDayTreatment","_this$summaryData","reason","showSampleCollected","reasons","formData","computed","encounter","createEncounter","cxcaData","resolveObs","saveObservationList","toastWarning","programID","ProgramService","getProgramID","workflows","getProgramWorkflows","flows","forEach","w","states","f","conceptID","program_workflow_state_id","conceptName","concept","concept_names","name","stateValue","patient_outcome","value","concepid","ConceptService","getConceptID","state","getLocationName","date","getSessionDate","console","log","saveState","createState","nextTask","id","helpText","type","FieldType","TT_DATA_TABLE","config","rows","Object","keys","k","table","td","dataTableConfig","showIndex","TT_SELECT","validation","val","Validation","required","computedValue","obs","buildValueCoded","yesNoOptions","returning_client_referral_question","TT_TEXT","buildValueText","possible_reasons_why","are_figo_staging_results_available","mapOptions","dynamicHelpText","type_of_sample_collected","are_histological_results_after_lletz_available","treatmentOptions","treatment_provided","none_treatment_reasons","__exports__","providers","facts","sessionDate","apiDate","encounterName","isBdeMode","birthDate","outcome","outcomeStartDate","ready","handler","route","params","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","patientDashboardUrl","runflowState","FlowState","SET_PROVIDER","selection","username","split","provider","find","person_id","CONTINUE","CHANGE_SESSION_DATE","$router","push","EXIT","CHANGE_PATIENT_OUTCOME","GO_TO_PATIENT_DASHBOARD","gotoPatientDashboard","findings","matchToGuidelines","ENCOUNTER_GUIDELINES","index","_finding$actions","_finding$actions3","finding","actions","alert","_finding$actions2","status","_finding$actions4","flowState","program","startDate","e","error","toastDanger","getCachedApiDate","isBDE","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","p","_p$person","isEmpty","person","names","_p$person2","latestName","given_name","family_name","toOption","other","mapStrToOptions","items","i","path","toYesNoOption","values","yesNoUnknownOptions","tag","filter","d","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","conditions","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","computedData","$emit","dformat","HisDate","toStandardHisDisplayFormat","priority","async","action","infoActionSheet","slot","color","modal","optionsActionSheet","role","isCondition","ignored","undefined","prop","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","COMPONENT_REFS","TT_ASYNC_MULTI_SELECT","TT_LINKAGE_CODE","TT_MULTI_SELECT_GRID","TT_AGE_INPUT","TT_BARCODE","TT_NOTE","TT_CARD_SELECTOR","TT_MULTIPLE_SELECT","TT_NUMBER","TT_MONTHLY_DAYS","TT_ART_REGIMEN_SELECTION","TT_NEXT_VISIT_INTERVAL_SELECTION","TT_TABLE_VIEWER","TT_DOSAGE_INPUT","TT_YES_NO","TT_MULTIPLE_YES_NO","TT_WEIGHT_CHART","TT_VITALS_ENTRY","TT_APPOINTMENTS_ENTRY","TT_COMPLAINTS_PICKER","TT_CLINIC_HOLIDAY_PICKER","TT_SUMMARY","TT_ART_STAGING_SUMMARY","TT_ADHERENCE_INPUT","TT_LAB_ORDERS","TT_PERSON_RESULT_VIEW","TT_PROGRAM_SELECTION","TT_DATE_PICKER","TT_RELATION_SELECTION","TT_FILING_NUMBER_VIEW","TT_PERSON_MATCH_VIEW","TT_FULL_DATE","TT_BATCH_ENTRY","TT_BATCH_VERIFICATION","TT_BATCH_MOVEMENT","TT_IP_ADDRESS","TT_TEXT_BANNER","TT_DISPENSATION_INPUT","TT_GROUP_SELECTOR","TT_ANC_PREGNANCY_INPUT_CONFIG","TT_ANC_PREGNANCY_DETAILS_INPUT","TT_ANC_LMP_DATE_INPUT","TT_DRUG_TRANSFER_IN","TT_GRID_SELECTOR","TT_ANC_DRUGSET_INPUT","TT_RADIOLOGY_PICKER","TT_PRESCRIPTION_INPUT","TT_INFINITE_SCROLL_MULTIPLE_SELECT","TT_DRUG_DISPENSER","webpackAsyncContext","req","__webpack_require__","o","resolve","Error","code","ids","slice","module","exports"],"mappings":"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O,oB,qBCpHd,IAAI7R,EAAM,CACT,wBAAyB,CACxB,OACA,qBAED,wBAAyB,CACxB,OACA,qBAED,iCAAkC,CACjC,OACA,qBAED,+BAAgC,CAC/B,OACA,qBAED,0BAA2B,CAC1B,OACA,qBAED,yBAA0B,CACzB,OACA,iBACA,qBAED,sBAAuB,CACtB,OACA,qBAED,kCAAmC,CAClC,OACA,qBAED,0BAA2B,CAC1B,OACA,iBACA,qBAED,mBAAoB,CACnB,OACA,qBAED,yBAA0B,CACzB,OACA,sBAED,6BAA8B,CAC7B,OACA,sBAED,0BAA2B,CAC1B,OACA,iBACA,sBAED,oBAAqB,CACpB,OACA,sBAED,wBAAyB,CACxB,OACA,iBACA,sBAED,+BAAgC,CAC/B,OACA,sBAED,wBAAyB,CACxB,OACA,sBAED,sBAAuB,CACtB,OACA,iBACA,iBACA,sBAED,yBAA0B,CACzB,OACA,iBACA,iBACA,sBAED,6BAA8B,CAC7B,OACA,iBACA,iBACA,sBAED,wBAAyB,CACxB,OACA,sBAED,+BAAgC,CAC/B,OACA,iBACA,sBAED,4BAA6B,CAC5B,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,sBAAuB,CACtB,OACA,iBACA,sBAED,uBAAwB,CACvB,OACA,iBACA,sBAED,wBAAyB,CACxB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,wCAAyC,CACxC,OACA,sBAED,qBAAsB,CACrB,OACA,iBACA,sBAED,uBAAwB,CACvB,OACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,0BAA2B,CAC1B,OACA,iBACA,sBAED,6BAA8B,CAC7B,OACA,sBAED,gBAAiB,CAChB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,6BAA8B,CAC7B,OACA,iBACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,kBAAmB,CAClB,OACA,sBAED,mBAAoB,CACnB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,sBAAuB,CACtB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,wBAAyB,CACxB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,oBAAqB,CACpB,OACA,sBAED,oBAAqB,CACpB,OACA,uBAGF,SAAS8R,EAAoBC,GAC5B,IAAIC,EAAoBC,EAAEjS,EAAK+R,GAC9B,OAAO1G,QAAQ6G,UAAU5L,MAAK,WAC7B,IAAIsC,EAAI,IAAIuJ,MAAM,uBAAyBJ,EAAM,KAEjD,MADAnJ,EAAEwJ,KAAO,mBACHxJ,KAIR,IAAIyJ,EAAMrS,EAAI+R,GAAM9O,EAAKoP,EAAI,GAC7B,OAAOhH,QAAQC,IAAI+G,EAAIC,MAAM,GAAGtS,IAAIgS,EAAoBpJ,IAAItC,MAAK,WAChE,OAAO0L,EAAoB/O,MAG7B6O,EAAoBrO,KAAO,WAC1B,OAAOD,OAAOC,KAAKzD,IAEpB8R,EAAoB7O,GAAK,OACzBsP,EAAOC,QAAUV","file":"js/chunk-d90eaab8.7e5e5539.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: false,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class TreatmentService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 182, providerID) //TODO: Use encounter type reference name'\n    }\n    async getSummary() {\n        const screeningResult = await this.getFirstValueCoded('Screening results');\n        const treatmentType = await this.getFirstValueCoded('Directly observed treatment option');\n        const referralReason = await this.getFirstValueCoded('Referral reason');\n        return {\n          'Screening Result': screeningResult,\n          'Treatment Type': treatmentType,\n          'Referral Reason': referralReason ? referralReason : \"N/A\"  \n        }\n    }\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { TreatmentService } from \"@/apps/CxCa/services/CxCaTreatmentService\";\nimport { toastWarning } from \"@/utils/Alerts\";\nimport { ProgramService } from \"@/services/program_service\";\nimport { ProgramWorkflow } from \"@/interfaces/program_workflow\";\nimport table from \"@/components/DataViews/tables/ReportDataTable\";\nimport { ConceptService } from \"@/services/concept_service\";\nimport CXCA_GLOBAL_PROP from \"@/apps/CxCa/cxca_global_props\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    reception: {} as any,\n    summaryData: {} as any,\n    referralReason: \"\",\n    isReferralSiteEnabled: false,\n    skipToTreatment: false,\n  }),\n  watch: {\n    patient: {\n      async handler() {\n        this.reception = new TreatmentService(this.patientID, this.providerID);\n        this.summaryData = await this.reception.getSummary();\n        this.isReferralSiteEnabled = (await CXCA_GLOBAL_PROP.isReferralSiteEnabled())\n        await this.setReason();\n        this.fields = this.getFields();\n      },\n      deep: true,\n    },\n  },\n  methods: {\n    // Update treatment options basing on same day treatment\n    updateTreatmentOptions(condition: boolean, options: any[]): any[] {\n      const disabledOptionLabels = [\n        'Hysterectomy',\n        'Chemotherapy',\n        'Palliative Care',\n        'Treatment with antibiotic',\n        'Anti-parasitic medication',\n        'Conisation'\n      ];\n\n      return options.map((option) => ({\n        ...option,\n        disabled: condition && disabledOptionLabels.includes(option.label),\n      }));\n    },\n    isNotSameDayTreatment(){\n      return this.summaryData?.['Treatment Type'] !== \"Same day treatment\";\n    },\n    async setReason() {\n      const reason = await this.reception.getFirstValueCoded('Referral reason');\n      this.referralReason = reason ? reason : \"N/A\"\n    },\n    showSampleCollected() {\n      const reasons = ['Large Lesion (>75%)','Suspect cancer', 'Further Investigation and Management'];\n      return reasons.includes(this.referralReason);\n    },\n    async onFinish(formData: any, computed: any) {\n      const encounter = await this.reception.createEncounter();\n      //Using the approach I got from the Diagnosis.vue file\n      const cxcaData = await this.resolveObs({...computed})\n      //save the data\n      await this.reception.saveObservationList(cxcaData)\n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      const programID = ProgramService.getProgramID();\n      const workflows: ProgramWorkflow[] =\n        await ProgramService.getProgramWorkflows(ProgramService.getProgramID());\n      const flows = {} as any;\n      workflows.forEach((w) => {\n        w.states.forEach((f) => {\n          const conceptID = f.program_workflow_state_id;\n          const conceptName = f.concept.concept_names[0].name;\n          flows[conceptName] = conceptID;\n        });\n      });\n      \n      const stateValue = formData.patient_outcome ? formData.patient_outcome.value : 'Continue follow-up';\n      //getting the concept ID for flow[stateValue] to prevent the bad request bug that occurs when the stateValue is undefined\n      const concepid = await ConceptService.getConceptID(stateValue);\n      //assigning the concept ID to flow[stateValue] to prevent the undefined bug\n      flows[stateValue] = concepid;\n\n      const state = {\n        'location_id': ProgramService.getLocationName(),\n        state: flows[stateValue],\n        date: ProgramService.getSessionDate(),\n      };\n      console.log(\"STATE \", state)\n      const saveState = await ProgramService.createState(\n        this.patientID,\n        programID,\n        state\n      );\n\n      if (!saveState) return toastWarning(\"Unable to update state\");\n      this.nextTask();\n    },\n\n    getFields(): any {\n      return [\n        {\n          id: \"screening_summary\",\n          helpText: \"Screening Summary\",\n          type: FieldType.TT_DATA_TABLE,\n          config: {\n            rows: () => {\n              return Object.keys(this.summaryData).map((k: string) => {\n                return [table.td(k), table.td(this.summaryData[k])];\n              });\n            },\n            dataTableConfig: {\n              showIndex: false\n            },\n          },\n        },\n        //New referral work flow implemented here\n        {\n          id: \"type_of_referral\",\n          helpText: \"Type of referral visit\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: () => this.isNotSameDayTreatment() && !this.isReferralSiteEnabled,\n          options: () => {\n            return [\n              { label: 'Initial/1st visit to referral facility', value: 'Initial visit' },\n              { label: 'Follow-up visit', value: 'Follow-up' }\n            ]},\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Referral reason', value.value)\n          })\n        },\n        /*the following fields are only visible if the location isn't a referral site\n         *they will be tagged with a minor description of `non-referral site field`*/\n        //non-referral site field\n        {\n            id: 'returning_client_referral_question',\n            helpText: 'Did the returning patient visit the referral facility ?',\n            type: FieldType.TT_SELECT,\n            validation: (val: any) => Validation.required(val),\n            condition: () => this.isNotSameDayTreatment() && this.isReferralSiteEnabled,\n            options: () => this.yesNoOptions(),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Are Histological results after LLETZ available', value.label)\n          })\n        },\n        //non-referral site field\n        //after completing this field skip to Treatment Field\n        {\n          id: \"possible_reasons_why\",\n          helpText: \"Possible reasons why client didn't visit\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (f: any) => {\n            this.skipToTreatment = f.returning_client_referral_question.value === 'No' //assign true to skip to treatment\n            return f.returning_client_referral_question.value === 'No' && this.isNotSameDayTreatment() && this.isReferralSiteEnabled\n          },\n          options: () => {\n            return [\n              { label: 'Provider unavailable', value: 'Provider NOT available' },\n              { label: 'Transport lacking', value: 'Transport problems' },\n              { label: 'Other', value: 'Other (Specify)' }\n            ]},\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Reason for no result', value.value)\n          })\n        },\n        {\n            id: 'other_reason',\n            helpText: 'Other reason',\n            type: FieldType.TT_TEXT,\n            validation: (val: any) => Validation.required(val),\n            computedValue: (value: any) => ({\n              obs: this.reception.buildValueText('Other reason for not seeking services', value.label)\n            }),\n            condition: (f: any) => f.possible_reasons_why.value === 'Other (Specify)'\n        },\n        {\n          id: \"cervix_screening_assessment\",\n          helpText: \"Cervix Screening Assessment\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: () => this.isNotSameDayTreatment() && !this.skipToTreatment,\n          options: () =>{\n            return [\n                  { label: 'STI Infection', value: 'STI Infection' },\n                  { label: 'VIA Negative', value: 'VIA Negative' },\n                  { label: 'VIA Positive', value: 'VIA Positive' },\n                  { label: 'PAP Smear Normal', value: 'PAP Smear Normal' },\n                  { label: 'PAP Smear Abnormal', value: 'PAP Smear Abnormal' },\n                  { label: 'No Visible Lesion (After Speculum)', value: 'No visible Lesion' },\n                  { label: 'Suspected Cancer', value: 'Suspected Cancer' }\n              ]},\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Cervix screening assessment', value.value)\n          })\n        },\n        {\n            id: 'are_figo_staging_results_available',\n            helpText: 'Are FIGO staging results available?',\n            type: FieldType.TT_SELECT,\n            validation: (val: any) => Validation.required(val),\n            condition: () => this.isNotSameDayTreatment() && !this.skipToTreatment,\n            options: () => this.yesNoOptions(),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Are FIGO staging results available', value.value) //Please build this observation using the buildValueCoded method\n          })\n        },\n        {\n          id: \"figo_staging_results\",\n          helpText: \"FIGO staging results\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (f: any) => f.are_figo_staging_results_available.value === 'Yes' && this.isNotSameDayTreatment() && !this.skipToTreatment,\n          options: () =>\n            this.mapOptions([\n              'Cervical stage 1',\n              'Cervical stage 2',\n              'Cervical stage 3',\n              'Cervical stage 4',\n            ]),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('FIGO staging of cervical cancer', value.label)\n          })\n        },\n        {\n          id: \"type_of_sample_collected\",\n          helpText: \"Type of sample collected\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: () => this.isNotSameDayTreatment() && !this.skipToTreatment,\n          options: () =>\n            this.mapOptions([\n              'Punch Biopsy',\n              'LLETZ/LEEP Sample',\n              'Cone Biopsy Sample',\n            ]),\n          computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Sample', value.label)\n          })\n        },\n        {\n            id: 'are_histological_results_after_lletz_available',\n            helpText: ``,\n            dynamicHelpText: (f: any) => {\n              return `Are Histology results after ${f.type_of_sample_collected.value} available`\n            },\n            type: FieldType.TT_SELECT,\n            validation: (val: any) => Validation.required(val),\n            condition: () => this.isNotSameDayTreatment() && !this.skipToTreatment,\n            options: () => this.yesNoOptions(),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Are Histological results after LLETZ available', value.label)\n          })\n        },\n        {\n          id: \"histology_results_after_lletz\",\n          helpText: \"Histology Results After LLETZ\",\n          dynamicHelpText: (f: any) => {\n              return `Histology Results After ${f.type_of_sample_collected.value}`\n            },\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (f: any) => f.are_histological_results_after_lletz_available.value === 'Yes' && this.isNotSameDayTreatment() && !this.skipToTreatment,\n          options: () =>\n            this.mapOptions([\n              'Normal',\n              'Chronic Cervicitis',\n              'Schistosomiasis',\n              'Tuberculosis(TB)',\n              'CIN 1',\n              'CIN 2',\n              'CIN 3',\n              'Carcinoma in Situ',\n              'Invasive cancer of cervix',\n              'Benign warts',\n            ]),\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Sample', value.label)\n          })\n        },\n        //Complication fields will not be visible if the site isn't a referral site\n        {\n          id: \"complications_during_lletz_leep_biopsy\",\n          helpText: \"Complications During LLETZ/LEEP Biopsy\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: () => this.isNotSameDayTreatment() && !this.skipToTreatment && !this.isReferralSiteEnabled,\n          options: () => {\n            return [\n                { label: 'None (N/A)', value: 'None' },\n                { label: 'Excessive Bleeding or pain', value: 'Excessive Bleeding or pain' }\n              ]},\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Complications During LLETZ/LEEP Biopsy', value.value)\n          })\n        },\n        {\n          id: \"complications_after_lletz_leep_biopsy\",\n          helpText: \"Complications After LLETZ/LEEP Biopsy\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: () => this.isNotSameDayTreatment() && !this.skipToTreatment && !this.isReferralSiteEnabled,\n          options: () => {\n            return [\n                  { label: 'None (N/A)', value: 'None' },\n                  { label: 'Excessive Bleeding or pain', value: 'Excessive Bleeding or pain' }\n              ]},\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Complications After LLETZ/LEEP Biopsy', value.value)\n          })\n        },\n        {\n          id: \"recommended_care_after_lletz_histology\",\n          helpText: \"Recommended Care After LLETZ Histology\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: () => this.isNotSameDayTreatment() && !this.skipToTreatment,\n          options: () => {\n            return [\n                { label: 'Hysterectomy', value: 'Hysterectomy' },\n                { label: 'Chemotherapy', value: 'Chemotherapy' },\n                { label: 'Palliative Care', value: 'Palliative Care' },\n                { label: 'LLETZ/LEEP', value: 'LLETZ/LEEP' },\n                { label: 'Treatment with antibiotic', value: 'Antibiotics' },\n                { label: 'Anti-parasitic medication', value: 'Antiparasitic' },\n                { label: 'Conisation', value: 'Conisation' },\n                { label: 'Other', value: 'Other (Specify)' }\n              ]},\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Treatment', value.value)\n          })\n        },\n        {\n          id: \"treatment_provided\",\n          helpText: \"Treatment Provided\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: () => !this.skipToTreatment,\n          options: () => {\n            const treatmentOptions = [\n              { label: 'Hysterectomy', value: 'Hysterectomy' },\n              { label: 'Chemotherapy', value: 'Chemotherapy' },\n              { label: 'Thermocoagulation', value: 'Thermocoagulation' },\n              { label: 'Cryotherapy', value: 'Cryotherapy' },\n              { label: 'Palliative Care', value: 'Palliative Care' },\n              { label: 'LLETZ/LEEP', value: 'LLETZ/LEEP' },\n              { label: 'Treatment with antibiotic', value: 'Antibiotics' },\n              { label: 'Anti-parasitic medication', value: 'Antiparasitic' },\n              { label: 'Conisation', value: 'Conisation' },\n              { label: 'Other', value: 'Other (Specify)' }\n            ]\n            // Disable other treatment options for same day treatment\n            return this.updateTreatmentOptions(!this.isNotSameDayTreatment(), treatmentOptions);\n            \n            },\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Treatment', value.value)\n          })\n        },\n        // New treatment field for same day treatment\n\n        {\n          id: \"none_treatment_reasons\",\n          helpText: \"Reasons why treatment was refused\",\n          type: FieldType.TT_SELECT,\n          validation: (val: any) => Validation.required(val),\n          condition: (f: any) => f.treatment_provided.value === 'Other (Specify)',\n          options: () => {\n            return [\n                  { label: 'Patient refused treatment', value: 'Patient refused' },\n                  { label: 'Provider not available', value: 'Provider NOT available' },\n                  { label: 'other', value: 'Other (Specify)' }\n              ]},\n            computedValue: (value: any) => ({\n            obs: this.reception.buildValueCoded('Other reason for not seeking services', value.value)\n          })\n        },\n        {\n            id: 'other_reason',\n            helpText: 'Other reason',\n            type: FieldType.TT_TEXT,\n            validation: (val: any) => Validation.required(val),\n            computedValue: (value: any) => ({\n              obs: this.reception.buildValueCoded('Other reason for not seeking services', value.value)\n            }),\n            condition: (f: any) => f.none_treatment_reasons.value === 'Other (Specify)'\n        },\n        {\n          id: \"patient_denial_outcome\",\n          helpText: \"Patient outcome\",\n          type: FieldType.TT_SELECT,\n          condition: (f: any) => this.isNotSameDayTreatment() && f.returning_client_referral_question.value === 'No',\n          validation: (val: any) => Validation.required(val),\n          options: () =>\n            this.mapOptions([\n              'Death',\n              'On going follow-up',\n              'Denied consultation',\n            ]),\n        },\n        {\n          id: \"patient_outcome\",\n          helpText: \"Patient outcome\",\n          type: FieldType.TT_SELECT,\n          condition: (f: any) => this.isNotSameDayTreatment() && f.returning_client_referral_question.value === 'Yes',\n          validation: (val: any) => Validation.required(val),\n          options: () =>\n            this.mapOptions([\n              'On-going Palliative Care',\n              'No Dysplasia/Cancer',\n              'Death',\n              'On going follow-up',\n              'Denied consultation',\n            ]),\n        },\n      ];\n    },\n  },\n});\n","import { render } from \"./CxCaTreatment.vue?vue&type=template&id=3b51405c&ts=true\"\nimport script from \"./CxCaTreatment.vue?vue&type=script&lang=ts\"\nexport * from \"./CxCaTreatment.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/projects/malawi-emr/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","\n/**\n * @deprecated moved to useEncounter composable\n * \n */\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/projects/malawi-emr/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: (facts: FactsInterface) => any;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: ConditionsInteface;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\nexport type FactsInterface = Record<string, any>\nexport type ConditionResolver = (value: any, facts: FactsInterface) => boolean | RegExpMatchArray | null\nexport type ConditionsInteface = Record<string, ConditionResolver>\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: FactsInterface, conditions: ConditionsInteface): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: FactsInterface, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","/**\n * Map all formElements/components defined in \"@/components/FormElements\" \n * in the Enum below by their file name.\n * \n * Next step is to add FieldType entry in COMPONENT_REFS in the \n * Array below the FieldType Enum\n */\nexport enum FieldType {\n    TT_ASYNC_MULTI_SELECT = 'AsyncMultiSelect',\n    TT_LINKAGE_CODE = 'LinkageCodeInput',\n    TT_MULTI_SELECT_GRID= 'HisMultiSelectGrid',\n    TT_AGE_INPUT='HisAgeInput',\n    TT_GROUP_SELECTOR = 'HisGroupSelector',\n    TT_DATA_TABLE = 'HisDataTable',\n    TT_GRID_SELECTOR = 'HisGridSelector',\n    TT_NOTE = 'HisNote',\n    TT_BARCODE = 'HisBarcodeInput',\n    TT_MONTHLY_DAYS=\"HisMonthlyDays\",\n    TT_TEXT=\"HisTextInput\",\n    TT_NUMBER = \"HisNumberInput\",\n    TT_DATETIME=\"datetime\",\n    TT_SELECT=\"HisSelect\",\n    TT_MULTIPLE_SELECT=\"HisMultipleSelect\",\n    TT_ART_REGIMEN_SELECTION=\"HisArtRegimenSelection\",\n    TT_NEXT_VISIT_INTERVAL_SELECTION=\"HisNextVisitInterval\",\n    TT_TABLE_VIEWER=\"HisTableViewer\",\n    TT_DOSAGE_INPUT=\"HisDosageInput\",\n    TT_YES_NO=\"YesNoSelect\",\n    TT_MULTIPLE_YES_NO=\"MultiYesNoSelect\",\n    TT_SUMMARY=\"HisSummary\",\n    TT_WEIGHT_CHART = \"HisWeightChart\",\n    TT_VITALS_ENTRY=\"HisVitalsEntry\",\n    TT_ADHERENCE_INPUT = \"HisAdherenceInput\",\n    TT_ART_STAGING_SUMMARY = \"ArtStagingSummary\",\n    TT_LAB_ORDERS = \"HisLabOrders\",\n    TT_APPOINTMENTS_ENTRY = \"HisAppointments\",\n    TT_DISPENSATION_INPUT = 'DrugDispensationSelection',\n    TT_PROGRAM_SELECTION = 'ProgramSelection',\n    TT_DATE_PICKER = 'HisDatePicker',\n    TT_PERSON_RESULT_VIEW = 'PersonSearchView',\n    TT_RELATION_SELECTION = 'RelationsSelection',\n    TT_FILING_NUMBER_VIEW = 'FilingNumberView',\n    TT_CARD_SELECTOR = 'HisCardSelector',\n    TT_PERSON_MATCH_VIEW = 'PersonMatchView',\n    TT_FULL_DATE = 'HisDateInput',\n    TT_BATCH_ENTRY = 'HisBatchEntry',\n    TT_BATCH_VERIFICATION = 'HisBatchVerification',\n    TT_BATCH_MOVEMENT = 'HisBatchMovement',\n    TT_COMPLAINTS_PICKER = 'HisComplaintsPicker',\n    TT_RADIOLOGY_PICKER = 'HisRadiologyPicker',\n    TT_IP_ADDRESS = 'HisIPAddress',\n    TT_TEXT_BANNER = 'HisTextBanner',\n    TT_DRUG_DISPENSER = 'GeneralDrugDispenser',\n    TT_CLINIC_HOLIDAY_PICKER = 'HisClinicHolidayPicker',\n    TT_ANC_PREGNANCY_INPUT_CONFIG = 'AncPregnancyInfoConfig',\n    TT_ANC_PREGNANCY_DETAILS_INPUT = 'AncPregnancyDetailsInput',\n    TT_ANC_LMP_DATE_INPUT = 'AncLmpDateInput',\n    TT_ANC_DRUGSET_INPUT = 'AncDrugSetInput',\n    TT_DRUG_TRANSFER_IN = 'DrugTransferInput',\n    TT_PRESCRIPTION_INPUT = 'HisPrescriptionInput',\n    TT_INFINITE_SCROLL_MULTIPLE_SELECT=\"HisInfiniteScrollMultipleSelect\"\n}\n\n// Register FieldTypes here that will be registered at runtime\nexport const COMPONENT_REFS: FieldType[] = [\n    FieldType.TT_ASYNC_MULTI_SELECT,\n    FieldType.TT_LINKAGE_CODE,\n    FieldType.TT_MULTI_SELECT_GRID,\n    FieldType.TT_AGE_INPUT,\n    FieldType.TT_BARCODE,\n    FieldType.TT_NOTE,\n    FieldType.TT_SELECT,\n    FieldType.TT_CARD_SELECTOR,\n    FieldType.TT_MULTIPLE_SELECT,\n    FieldType.TT_TEXT,\n    FieldType.TT_NUMBER,\n    FieldType.TT_MONTHLY_DAYS,\n    FieldType.TT_ART_REGIMEN_SELECTION,\n    FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n    FieldType.TT_TABLE_VIEWER,\n    FieldType.TT_DOSAGE_INPUT,\n    FieldType.TT_YES_NO,\n    FieldType.TT_MULTIPLE_YES_NO,\n    FieldType.TT_WEIGHT_CHART,\n    FieldType.TT_VITALS_ENTRY,\n    FieldType.TT_APPOINTMENTS_ENTRY,\n    FieldType.TT_COMPLAINTS_PICKER,\n    FieldType.TT_CLINIC_HOLIDAY_PICKER,\n    FieldType.TT_SUMMARY,\n    FieldType.TT_ART_STAGING_SUMMARY,\n    FieldType.TT_ADHERENCE_INPUT,\n    FieldType.TT_LAB_ORDERS,\n    FieldType.TT_PERSON_RESULT_VIEW,\n    FieldType.TT_PROGRAM_SELECTION,\n    FieldType.TT_DATE_PICKER,\n    FieldType.TT_RELATION_SELECTION,\n    FieldType.TT_FILING_NUMBER_VIEW,\n    FieldType.TT_PERSON_MATCH_VIEW,\n    FieldType.TT_FULL_DATE,\n    FieldType.TT_BATCH_ENTRY,\n    FieldType.TT_BATCH_VERIFICATION,\n    FieldType.TT_BATCH_MOVEMENT,\n    FieldType.TT_IP_ADDRESS,\n    FieldType.TT_TEXT_BANNER,\n    FieldType.TT_DISPENSATION_INPUT,\n    FieldType.TT_DATA_TABLE,\n    FieldType.TT_GROUP_SELECTOR,\n    FieldType.TT_ANC_PREGNANCY_INPUT_CONFIG,\n    FieldType.TT_ANC_PREGNANCY_DETAILS_INPUT,\n    FieldType.TT_ANC_LMP_DATE_INPUT,\n    FieldType.TT_DRUG_TRANSFER_IN,\n    FieldType.TT_GRID_SELECTOR,\n    FieldType.TT_ANC_DRUGSET_INPUT,\n    FieldType.TT_RADIOLOGY_PICKER,\n    FieldType.TT_PRESCRIPTION_INPUT,\n    FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n    FieldType.TT_DRUG_DISPENSER\n]\n","var map = {\n\t\"./AncDrugSetInput.vue\": [\n\t\t\"c99f\",\n\t\t\"TouchFormElement0\"\n\t],\n\t\"./AncLmpDateInput.vue\": [\n\t\t\"101a\",\n\t\t\"TouchFormElement1\"\n\t],\n\t\"./AncPregnancyDetailsInput.vue\": [\n\t\t\"b043\",\n\t\t\"TouchFormElement2\"\n\t],\n\t\"./AncPregnancyInfoConfig.vue\": [\n\t\t\"262e\",\n\t\t\"TouchFormElement3\"\n\t],\n\t\"./ArtStagingSummary.vue\": [\n\t\t\"43db\",\n\t\t\"TouchFormElement4\"\n\t],\n\t\"./AsyncMultiSelect.vue\": [\n\t\t\"5de2\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement5\"\n\t],\n\t\"./BaseTextInput.vue\": [\n\t\t\"36ad\",\n\t\t\"TouchFormElement6\"\n\t],\n\t\"./DrugDispensationSelection.vue\": [\n\t\t\"05d5\",\n\t\t\"TouchFormElement7\"\n\t],\n\t\"./DrugTransferInput.vue\": [\n\t\t\"de42\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement8\"\n\t],\n\t\"./FieldMixin.vue\": [\n\t\t\"51c8\",\n\t\t\"TouchFormElement9\"\n\t],\n\t\"./FilingNumberView.vue\": [\n\t\t\"c650\",\n\t\t\"TouchFormElement10\"\n\t],\n\t\"./GeneralDrugDispenser.vue\": [\n\t\t\"7737\",\n\t\t\"TouchFormElement11\"\n\t],\n\t\"./HisAdherenceInput.vue\": [\n\t\t\"f2c3\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement12\"\n\t],\n\t\"./HisAgeInput.vue\": [\n\t\t\"c05f\",\n\t\t\"TouchFormElement13\"\n\t],\n\t\"./HisAppointments.vue\": [\n\t\t\"b2eb\",\n\t\t\"chunk-d64a144c\",\n\t\t\"TouchFormElement14\"\n\t],\n\t\"./HisArtRegimenSelection.vue\": [\n\t\t\"47b9\",\n\t\t\"TouchFormElement15\"\n\t],\n\t\"./HisBarcodeInput.vue\": [\n\t\t\"dd65\",\n\t\t\"TouchFormElement16\"\n\t],\n\t\"./HisBatchEntry.vue\": [\n\t\t\"f2ab\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement17\"\n\t],\n\t\"./HisBatchMovement.vue\": [\n\t\t\"5148\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement18\"\n\t],\n\t\"./HisBatchVerification.vue\": [\n\t\t\"7b0f\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement19\"\n\t],\n\t\"./HisCardSelector.vue\": [\n\t\t\"0734\",\n\t\t\"TouchFormElement20\"\n\t],\n\t\"./HisClinicHolidayPicker.vue\": [\n\t\t\"4030\",\n\t\t\"chunk-d64a144c\",\n\t\t\"TouchFormElement21\"\n\t],\n\t\"./HisComplaintsPicker.vue\": [\n\t\t\"82d1\",\n\t\t\"TouchFormElement22\"\n\t],\n\t\"./HisDataTable.vue\": [\n\t\t\"a6ba\",\n\t\t\"TouchFormElement23\"\n\t],\n\t\"./HisDateInput.vue\": [\n\t\t\"374c\",\n\t\t\"TouchFormElement24\"\n\t],\n\t\"./HisDatePicker.vue\": [\n\t\t\"9b30\",\n\t\t\"chunk-d64a144c\",\n\t\t\"TouchFormElement25\"\n\t],\n\t\"./HisDosageInput.vue\": [\n\t\t\"b34c\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement26\"\n\t],\n\t\"./HisGridSelector.vue\": [\n\t\t\"112a\",\n\t\t\"TouchFormElement27\"\n\t],\n\t\"./HisGroupSelector.vue\": [\n\t\t\"81cf\",\n\t\t\"TouchFormElement28\"\n\t],\n\t\"./HisIPAddress.vue\": [\n\t\t\"2a82\",\n\t\t\"TouchFormElement29\"\n\t],\n\t\"./HisInfiniteScrollMultipleSelect.vue\": [\n\t\t\"52a3\",\n\t\t\"TouchFormElement30\"\n\t],\n\t\"./HisLabOrders.vue\": [\n\t\t\"e614\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement31\"\n\t],\n\t\"./HisMonthlyDays.vue\": [\n\t\t\"69cf\",\n\t\t\"TouchFormElement32\"\n\t],\n\t\"./HisMultiSelectGrid.vue\": [\n\t\t\"0fa3\",\n\t\t\"TouchFormElement33\"\n\t],\n\t\"./HisMultipleSelect.vue\": [\n\t\t\"2fd5\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement34\"\n\t],\n\t\"./HisNextVisitInterval.vue\": [\n\t\t\"3126\",\n\t\t\"TouchFormElement35\"\n\t],\n\t\"./HisNote.vue\": [\n\t\t\"c927\",\n\t\t\"TouchFormElement36\"\n\t],\n\t\"./HisNumberInput.vue\": [\n\t\t\"5e75\",\n\t\t\"TouchFormElement37\"\n\t],\n\t\"./HisPrescriptionInput.vue\": [\n\t\t\"87e5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement38\"\n\t],\n\t\"./HisRadiologyPicker.vue\": [\n\t\t\"adc7\",\n\t\t\"TouchFormElement39\"\n\t],\n\t\"./HisSelect.vue\": [\n\t\t\"d11f\",\n\t\t\"TouchFormElement40\"\n\t],\n\t\"./HisSummary.vue\": [\n\t\t\"e0bd\",\n\t\t\"TouchFormElement41\"\n\t],\n\t\"./HisTableViewer.vue\": [\n\t\t\"8904\",\n\t\t\"TouchFormElement42\"\n\t],\n\t\"./HisTextBanner.vue\": [\n\t\t\"952c\",\n\t\t\"TouchFormElement43\"\n\t],\n\t\"./HisTextInput.vue\": [\n\t\t\"6ef9\",\n\t\t\"TouchFormElement44\"\n\t],\n\t\"./HisVitalsEntry.vue\": [\n\t\t\"e333\",\n\t\t\"TouchFormElement45\"\n\t],\n\t\"./HisWeightChart.vue\": [\n\t\t\"26a1\",\n\t\t\"TouchFormElement46\"\n\t],\n\t\"./LinkageCodeInput.vue\": [\n\t\t\"ac86\",\n\t\t\"TouchFormElement47\"\n\t],\n\t\"./MultiYesNoSelect.vue\": [\n\t\t\"5fd1\",\n\t\t\"TouchFormElement48\"\n\t],\n\t\"./PersonMatchView.vue\": [\n\t\t\"6591\",\n\t\t\"TouchFormElement49\"\n\t],\n\t\"./PersonSearchView.vue\": [\n\t\t\"28b2\",\n\t\t\"TouchFormElement50\"\n\t],\n\t\"./ProgramSelection.vue\": [\n\t\t\"e3b4\",\n\t\t\"TouchFormElement51\"\n\t],\n\t\"./RelationsSelection.vue\": [\n\t\t\"0e57\",\n\t\t\"TouchFormElement52\"\n\t],\n\t\"./SelectMixin.vue\": [\n\t\t\"82a9\",\n\t\t\"TouchFormElement53\"\n\t],\n\t\"./YesNoSelect.vue\": [\n\t\t\"71f2\",\n\t\t\"TouchFormElement54\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"f159\";\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}