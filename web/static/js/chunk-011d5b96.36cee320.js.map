{"version":3,"sources":["webpack:///./src/views/ProgramManagement.vue?4f82","webpack:///./src/views/ProgramManagement.vue","webpack:///./src/views/ProgramManagement.vue?1500","webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/utils/ActionSheetHelpers/VoidReason.ts","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts","webpack:///./src/components/Forms/BaseFormElements.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts","webpack:///./src/components/FormElements lazy ^\\.\\/.*\\.vue$ namespace object"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","key","hisFormKey","activeField","fieldComponent","skipSummary","fields","onOnIndex","$event","onOnFinish","onFinish","defineComponent","components","HisStandardForm","data","patient","patientProgram","activeProgram","programSelectionFieldContext","watch","field","this","params","patient_id","PatientProgramService","getProgramSelectionField","getProgramEnrollmentField","getProgramOutcomeDateFields","getProgramStateField","getTransferOutFacilityFields","getTransferoutReasonFields","getStateOutcomeDateFields","deep","immediate","methods","f","onEnrollProgram","onProgramState","Store","invalidate","programs","getPrograms","map","p","label","program","name","value","program_id","other","programStates","patient_states","s","startDate","HisDate","toStandardHisDisplayFormat","start_date","endDate","end_date","actions","getStateActions","hasPrograms","listData","ProgramService","getAllPrograms","disabled","find","workflows","getProgramWorkflows","getProgramId","isEmpty","states","program_workflow_state_id","color","action","async","pg","sIndex","onVoidState","patient_state_id","push","printTransferout","onUpdateState","toastWarning","updateState","transfer_out_state","transferOutEncounter","reason_for_transferrout","toastSuccess","e","toastDanger","programId","enrollProgram","state","stateIndex","popVoidReason","setStateId","voidState","reason","splice","patientProgramId","getPatientProgramId","voidProgram","fieldContext","programIndex","findIndex","setPatientProgramId","setProgramId","console","error","generateDateFields","id","helpText","condition","program_state","required","minDate","getProgramDate","maxDate","getSessionDate","estimation","allowUnknown","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","computeValue","date","setStateDate","type","FieldType","TT_SELECT","validation","val","Validation","options","_","filter","getFacilities","config","showKeyboard","isFilterDataViaApi","proxyID","v","opt","TT_TEXT","transferout_reasons","programWorkflows","unload","allPrograms","estimateDateFromAge","setProgramDate","btnVisibilityCondition","form","program_selection","TT_PROGRAM_SELECTION","onload","context","onValue","patient_program_id","toStandardHisFormat","date_enrolled","patientPrograms","hiddenFooterBtns","footerBtns","slot","visible","default","onClick","onVoidProgram","__exports__","DEFAULT_KEYPAD","PRESCRIPTION_KEYPAD","FLOAT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","callback","size","modal","optionsActionSheet","role","selection","_resolveDynamicComponent","formType","cancelDestinationPath","onFinishAction","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","Object","formData","computedData","$emit","i","getYearField","showUnknown","primaryFunctions","appearInSummary","customKeyboard","getMonthField","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","parseInt","getDefaultDate","datePart","defaultValue","year","month","day","split","d","validateMinMax","computed","min","Date","max","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","includes","buildHelpTextDate","part","parts","reduce","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","toString","c","StandardValidations","match","isNaN","minYear","getYear","summaryMapValue","summaryLabel","ref","computedValue","beforeNext","keyboardActions","valueEstimateCondition","estimateType","conditions","every","ageEstimateRegex","dayjs","Service","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","COMPONENT_REFS","TT_MULTI_SELECT_GRID","TT_AGE_INPUT","TT_BARCODE","TT_NOTE","TT_CARD_SELECTOR","TT_MULTIPLE_SELECT","TT_ART_REGIMEN_SELECTION","TT_NEXT_VISIT_INTERVAL_SELECTION","TT_TABLE_VIEWER","TT_DOSAGE_INPUT","TT_YES_NO","TT_MULTIPLE_YES_NO","TT_WEIGHT_CHART","TT_VITALS_ENTRY","TT_APPOINTMENTS_ENTRY","TT_COMPLAINTS_PICKER","TT_CLINIC_HOLIDAY_PICKER","TT_SUMMARY","TT_ART_STAGING_SUMMARY","TT_ADHERENCE_INPUT","TT_LAB_ORDERS","TT_PERSON_RESULT_VIEW","TT_DATE_PICKER","TT_RELATION_SELECTION","TT_FILING_NUMBER_VIEW","TT_PERSON_MATCH_VIEW","TT_FULL_DATE","TT_BATCH_ENTRY","TT_BATCH_VERIFICATION","TT_BATCH_MOVEMENT","TT_IP_ADDRESS","TT_TEXT_BANNER","TT_DISPENSATION_INPUT","TT_DATA_TABLE","TT_GROUP_SELECTOR","TT_ANC_PREGNANCY_INPUT_CONFIG","TT_ANC_PREGNANCY_DETAILS_INPUT","TT_ANC_LMP_DATE_INPUT","TT_DRUG_TRANSFER_IN","TT_GRID_SELECTOR","TT_ANC_DRUGSET_INPUT","TT_RADIOLOGY_PICKER","TT_PRESCRIPTION_INPUT","TT_INFINITE_SCROLL_MULTIPLE_SELECT","TT_DRUG_DISPENSER","facilities","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id","getVillagesByName","page","getLandmarks","landmarks","landmark","code","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","Error","ids","all","slice","keys","module","exports"],"mappings":"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","file":"js/chunk-011d5b96.36cee320.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    key: _ctx.hisFormKey,\n    activeField: _ctx.fieldComponent,\n    skipSummary: true,\n    fields: _ctx.fields,\n    onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (_ctx.fieldComponent='')),\n    onOnFinish: _ctx.onFinish\n  }, null, 8, [\"activeField\", \"fields\", \"onOnFinish\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { toastWarning, toastSuccess, toastDanger } from \"@/utils/Alerts\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { EstimationFieldType, generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { ProgramService } from \"@/services/program_service\"\nimport { PatientProgramService } from \"@/services/patient_program_service\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { find, findIndex, isEmpty } from 'lodash'\nimport HisDate from \"@/utils/Date\"\nimport popVoidReason from \"@/utils/ActionSheetHelpers/VoidReason\"\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\"\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        hisFormKey: 0 as number,\n        patient: {} as any,\n        patientProgram: {} as any,\n        fields: [] as Array<Field>,\n        fieldComponent: '' as string,\n        activeField: '' as string,\n        activeProgram: {} as any,\n        programSelectionFieldContext: {} as any\n    }),\n    watch: {\n        fieldComponent(field: string){\n            if (field) {\n                this.activeField = field\n            }\n        },\n        activeField(field: string) {\n            if (field === 'program_selection') {\n                // Recent hisFormKey to re-render everything\n                this.hisFormKey += 1\n            }\n        },\n        '$route': {\n            async handler({params}: any) {\n                if (params && params.patient_id) {\n                    this.patient = params.patient_id\n                    this.patientProgram = new PatientProgramService(this.patient)\n                    this.fields = [\n                        this.getProgramSelectionField(),\n                        this.getProgramEnrollmentField(),\n                        ...this.getProgramOutcomeDateFields(),\n                        this.getProgramStateField(),\n                        this.getTransferOutFacilityFields(),\n                        ...this.getTransferoutReasonFields(),\n                        ...this.getStateOutcomeDateFields()\n                    ]\n                }\n            },\n            deep: true,\n            immediate: true\n        }\n    },\n    methods: {\n        async onFinish(f: any) {\n            switch(this.activeField) {\n                case 'program_enrollment':\n                    await this.onEnrollProgram()\n                    break;\n                case 'program_state':\n                    await this.onProgramState(f)\n                    break;\n            }\n            Store.invalidate('PATIENT_PROGRAM')\n        },\n        async patientPrograms() {\n            const programs = await this.patientProgram.getPrograms()\n            return programs.map((p: any) => ({\n                label: p.program.name,\n                value: p.program.program_id,\n                other: {\n                    ...p,\n                    programStates: p.patient_states.map((s: any) =>{\n                        return {\n                            name: s.name,\n                            startDate: HisDate.toStandardHisDisplayFormat(s.start_date),\n                            endDate: s.end_date ? HisDate.toStandardHisDisplayFormat(s.end_date): 'N/A',\n                            actions: this.getStateActions(s)\n                        }\n                    }) \n                }\n            }))\n        },\n        async allPrograms() {\n            const hasPrograms = this.programSelectionFieldContext.listData\n            const programs = await ProgramService.getAllPrograms()\n            // Build programs while excluding already existing ones\n            return programs.map((p: any) => ({\n                label: p.name,\n                value: p.program_id,\n                disabled: find(hasPrograms, { value: p.program_id }),\n                other: { ...p }\n            }))\n        },\n        async programWorkflows() {\n            const workflows = await ProgramService.getProgramWorkflows(this.patientProgram.getProgramId())\n            if (!isEmpty(workflows)) {\n                return workflows[0].states.map((s: any) => ({\n                    label: s.name, \n                    value: s.program_workflow_state_id,\n                    other: { ...s }\n                }))\n            }\n        },\n        getStateActions(s: any) {\n            const actions = [\n                {\n                    name: 'Void',\n                    color: 'danger',\n                    action: async (pg: any, sIndex: number) => {\n                        await this.onVoidState(s.patient_state_id, pg, sIndex)\n                    } \n                }\n            ]\n            if (s.name === 'Patient transferred out') {\n                actions.push({\n                    name: 'Print',\n                    color: 'primary',\n                    action: async () => await this.patientProgram.printTransferout(s.start_date)\n                })\n            }\n            return actions\n        },\n        onUpdateState() {\n            if (this.patientProgram.getProgramId() === -1) {\n                return toastWarning('Please select a program')\n            }\n            this.fieldComponent = 'program_state'\n        },\n        async onProgramState(f: any) {\n            try {\n                await this.patientProgram.updateState()\n                this.fieldComponent = 'program_selection'\n                if (f.transfer_out_state) {\n                    await this.patientProgram.transferOutEncounter(\n                        f.transfer_out_state.other, \n                        f.reason_for_transferrout.value\n                    )\n                } \n                toastSuccess('State has been updated')\n            } catch(e) {\n                toastDanger(`${e}`)\n            }\n        },\n        async onEnrollProgram() {\n            const programId = this.patientProgram.getProgramId()\n            if (programId === -1) {\n                return toastWarning('Please select a program')\n            }\n            try {\n                this.activeProgram = await this.patientProgram.enrollProgram()\n                this.fieldComponent = 'program_state'\n                toastSuccess('Patient has been enrolled!')\n            }catch(e) {\n                this.activeProgram = {}\n                toastDanger(`${e}`)\n            }\n        },\n        async onVoidState(state: any, activeProgram: any, stateIndex: number) {\n            await popVoidReason(async (reason: string) => {\n                try {\n                    this.patientProgram.setStateId(state)\n                    await this.patientProgram.voidState(reason)\n                    this.patientProgram.setStateId(-1)\n                    activeProgram.other.programStates.splice(stateIndex, 1)\n                    toastSuccess('State has been voided')\n                }catch(e) {\n                  toastDanger(`${e}`)\n                }\n            })\n        },\n        async onVoidProgram() {\n            const patientProgramId = this.patientProgram.getPatientProgramId()\n            if (patientProgramId === -1) {\n                return toastWarning('Please select a program')\n            }\n            await popVoidReason(async (reason: string) => {\n                try {\n                    await this.patientProgram.voidProgram(reason)\n                    const fieldContext = this.programSelectionFieldContext\n                    const programIndex = findIndex(fieldContext.listData, { value: this.patientProgram.getProgramId() })\n                    fieldContext.listData.splice(programIndex, 1)\n                    fieldContext.activeProgram = {}\n                    this.patientProgram.setPatientProgramId(-1)\n                    this.patientProgram.setProgramId(-1)\n                    toastSuccess('Program removed')\n                } catch(e) {\n                    console.error(e)\n                    toastDanger(`${e}`)\n                }\n            })\n        },\n        getStateOutcomeDateFields(): Array<Field> {\n            return generateDateFields({\n                id: 'state_outcome_date',\n                helpText: 'State',\n                condition: (f: any) => f.program_state,\n                required: true,\n                minDate: () => this.patientProgram.getProgramDate(),\n                maxDate: () => ProgramService.getSessionDate(),\n                estimation: {\n                    allowUnknown: true,\n                    estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                },\n                computeValue: (date: string) => this.patientProgram.setStateDate(date)\n            }, this.patientProgram.getProgramDate() || ProgramService.getSessionDate())\n        },\n        getTransferOutFacilityFields(): Field {\n            return {\n                id: \"transfer_out_state\",\n                helpText: 'Please Select facility name',\n                type: FieldType.TT_SELECT,\n                validation: (val: Option) => Validation.required(val),\n                condition: (f: any) => f.program_state.label === 'Patient transferred out',\n                options: (_: any, filter='') => getFacilities(filter),\n                config: {\n                    showKeyboard: true,\n                    isFilterDataViaApi: true\n                }\n            }\n        },\n        getTransferoutReasonFields(): Field[] {\n            return [\n                {\n                    id: \"transferout_reasons\",\n                    proxyID: 'reason_for_transferrout',\n                    helpText: \"Reason for Transferring out\",\n                    type: FieldType.TT_SELECT,\n                    validation: (v: Option) => Validation.required(v),\n                    condition: (f: any) => f.program_state.label === \"Patient transferred out\",\n                    options: () => {\n                        const opt: any = (val: string) => ({label: val, value: val})\n                        return [\n                            opt('Workplace transfer/lost job-related reasons'),\n                            opt('Relocation to another place/home village'),\n                            opt('Transport due to long distance'),\n                            opt('School'),\n                            opt('Business'),\n                            opt('Marriage'),\n                            opt('Unknown'),\n                            opt('Clinic not helping'),\n                            opt('Other')\n                        ]\n                    }\n                },\n                {\n                    id: 'transferout_other',\n                    proxyID: 'reason_for_transferrout',\n                    helpText: 'Other Reason for Transferring out',\n                    type: FieldType.TT_TEXT,\n                    condition: (f: any) => f.transferout_reasons.value === 'Other',\n                    validation: (v: Option) => Validation.required(v)\n                }\n            ]\n        },\n        getProgramStateField(): Field {\n            return {\n                id: \"program_state\",\n                helpText: \"State\",\n                type: FieldType.TT_SELECT,\n                validation: (val: Option) => Validation.required(val),\n                options: () => this.programWorkflows(),\n                condition: () => this.activeField === 'program_state',\n                unload: (val: Option) => this.patientProgram.setStateId(val.value)\n            }\n        },\n        getProgramEnrollmentField(): Field {\n            return {\n                id: \"program_enrollment\",\n                helpText: \"Please select a programme\",\n                type: FieldType.TT_SELECT,\n                condition: () => this.activeField === 'program_enrollment',\n                unload: (val: Option) => this.patientProgram.setProgramId(val.value),\n                options: () => this.allPrograms(),\n                validation: (val: any) => Validation.required(val),\n                config: {\n                    showKeyboard: true\n                }\n            }\n        },\n        getProgramOutcomeDateFields(): Array<Field> {\n            return generateDateFields({\n                id: 'program_outcome_date',\n                helpText: 'Outcome',\n                required: true,\n                minDate: () => HisDate.estimateDateFromAge(100),\n                maxDate: () => ProgramService.getSessionDate(),\n                condition: () => this.activeField === 'program_enrollment',\n                estimation: {\n                    allowUnknown: true,\n                    estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                },\n                computeValue: (date: string) => this.patientProgram.setProgramDate(date)\n            }, ProgramService.getSessionDate())\n        },\n        getProgramSelectionField(): Field {\n            const btnVisibilityCondition = (form: any) => {\n                return !isEmpty(form.program_selection)\n            }\n            return {\n                id: 'program_selection',\n                helpText: 'Programs',\n                type: FieldType.TT_PROGRAM_SELECTION,\n                onload: (context: any) => {\n                    this.activeField = 'program_selection'\n                    this.programSelectionFieldContext = context\n                },\n                onValue: (val: Option) => {\n                    if (val) {\n                        this.activeProgram = val.other\n                        this.patientProgram.setProgramId(val.value)\n                        this.patientProgram.setPatientProgramId(val.other.patient_program_id)\n                        this.patientProgram.setProgramDate(\n                            HisDate.toStandardHisFormat(val.other.date_enrolled)\n                        )\n                    }\n                    return true\n                },\n                validation: (val: any) => Validation.required(val),\n                options: () => this.patientPrograms(),\n                config: {\n                    onVoidState: this.onVoidState,\n                    hiddenFooterBtns: [\n                        'Back',\n                        'Next',\n                        'Clear'\n                    ],\n                    footerBtns: [\n                        {\n                            name: 'Void Program',\n                            slot: 'end',\n                            color: 'danger',\n                            state: {\n                                visible: {\n                                    default: (_: any, form: any) => btnVisibilityCondition(form),\n                                    onValue: (_: any, form: any) => btnVisibilityCondition(form)\n                                }\n                            },\n                            onClick:  async () => {\n                                await this.onVoidProgram()\n                            }\n                        },\n                        {\n                            name: 'Update state',\n                            slot: 'end',\n                            state: {\n                                visible: {\n                                    default: (_: any, form: any) => btnVisibilityCondition(form),\n                                    onValue: (_: any, form: any) => btnVisibilityCondition(form)\n                                }\n                            },\n                            onClick: async () => {\n                                await this.onUpdateState()\n                            }\n                        },\n                        {\n                            name: 'Enroll',\n                            color: 'success',\n                            slot: 'end',\n                            onClick: () => {\n                                this.fieldComponent = 'program_enrollment'\n                            }\n                        }\n                    ] \n                }\n            }\n        }\n    }\n})\n","import { render } from \"./ProgramManagement.vue?vue&type=template&id=25da94ee&ts=true\"\nimport script from \"./ProgramManagement.vue?vue&type=script&lang=ts\"\nexport * from \"./ProgramManagement.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const PRESCRIPTION_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del', '0', '.'],\n    ['Unknown', '', ''],\n]\nexport const FLOAT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { optionsActionSheet } from '@/utils/ActionSheets'\n\nexport default async function popVoidReason(callback: Function, size = 'action-sheet-modal') {\n    const modal = await optionsActionSheet(\n        'Are you sure you want to void record?',\n        'Please specify reason for voiding this record',\n        [\n          'Mistake/ Wrong Entry',\n          'Duplicate',\n          'System Error' \n        ],\n        [\n            { name: 'Cancel', slot:'start'},\n            { name: 'Void', color: 'danger', slot:'end', role: 'action'}\n        ],\n        '',\n        size\n    )\n    if (modal.selection && modal.action === 'Void') {\n        await callback(modal.selection)\n    }\n}\n","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","/**\n * Map all formElements/components defined in \"@/components/FormElements\" \n * in the Enum below by their file name.\n * \n * Next step is to add FieldType entry in COMPONENT_REFS in the \n * Array below the FieldType Enum\n */\nexport enum FieldType {\n    TT_MULTI_SELECT_GRID= 'HisMultiSelectGrid',\n    TT_AGE_INPUT='HisAgeInput',\n    TT_GROUP_SELECTOR = 'HisGroupSelector',\n    TT_DATA_TABLE = 'HisDataTable',\n    TT_GRID_SELECTOR = 'HisGridSelector',\n    TT_NOTE = 'HisNote',\n    TT_BARCODE = 'HisBarcodeInput',\n    TT_MONTHLY_DAYS=\"HisMonthlyDays\",\n    TT_TEXT=\"HisTextInput\",\n    TT_NUMBER = \"HisNumberInput\",\n    TT_DATETIME=\"datetime\",\n    TT_SELECT=\"HisSelect\",\n    TT_MULTIPLE_SELECT=\"HisMultipleSelect\",\n    TT_ART_REGIMEN_SELECTION=\"HisArtRegimenSelection\",\n    TT_NEXT_VISIT_INTERVAL_SELECTION=\"HisNextVisitInterval\",\n    TT_TABLE_VIEWER=\"HisTableViewer\",\n    TT_DOSAGE_INPUT=\"HisDosageInput\",\n    TT_YES_NO=\"YesNoSelect\",\n    TT_MULTIPLE_YES_NO=\"MultiYesNoSelect\",\n    TT_SUMMARY=\"HisSummary\",\n    TT_WEIGHT_CHART = \"HisWeightChart\",\n    TT_VITALS_ENTRY=\"HisVitalsEntry\",\n    TT_ADHERENCE_INPUT = \"HisAdherenceInput\",\n    TT_ART_STAGING_SUMMARY = \"ArtStagingSummary\",\n    TT_LAB_ORDERS = \"HisLabOrders\",\n    TT_APPOINTMENTS_ENTRY = \"HisAppointments\",\n    TT_DISPENSATION_INPUT = 'DrugDispensationSelection',\n    TT_PROGRAM_SELECTION = 'ProgramSelection',\n    TT_DATE_PICKER = 'HisDatePicker',\n    TT_PERSON_RESULT_VIEW = 'PersonSearchView',\n    TT_RELATION_SELECTION = 'RelationsSelection',\n    TT_FILING_NUMBER_VIEW = 'FilingNumberView',\n    TT_CARD_SELECTOR = 'HisCardSelector',\n    TT_PERSON_MATCH_VIEW = 'PersonMatchView',\n    TT_FULL_DATE = 'HisDateInput',\n    TT_BATCH_ENTRY = 'HisBatchEntry',\n    TT_BATCH_VERIFICATION = 'HisBatchVerification',\n    TT_BATCH_MOVEMENT = 'HisBatchMovement',\n    TT_COMPLAINTS_PICKER = 'HisComplaintsPicker',\n    TT_RADIOLOGY_PICKER = 'HisRadiologyPicker',\n    TT_IP_ADDRESS = 'HisIPAddress',\n    TT_TEXT_BANNER = 'HisTextBanner',\n    TT_DRUG_DISPENSER = 'GeneralDrugDispenser',\n    TT_CLINIC_HOLIDAY_PICKER = 'HisClinicHolidayPicker',\n    TT_ANC_PREGNANCY_INPUT_CONFIG = 'AncPregnancyInfoConfig',\n    TT_ANC_PREGNANCY_DETAILS_INPUT = 'AncPregnancyDetailsInput',\n    TT_ANC_LMP_DATE_INPUT = 'AncLmpDateInput',\n    TT_ANC_DRUGSET_INPUT = 'AncDrugSetInput',\n    TT_DRUG_TRANSFER_IN = 'DrugTransferInput',\n    TT_PRESCRIPTION_INPUT = 'HisPrescriptionInput',\n    TT_INFINITE_SCROLL_MULTIPLE_SELECT=\"HisInfiniteScrollMultipleSelect\"\n}\n\n// Register FieldTypes here that will be registered at runtime\nexport const COMPONENT_REFS: FieldType[] = [\n    FieldType.TT_MULTI_SELECT_GRID,\n    FieldType.TT_AGE_INPUT,\n    FieldType.TT_BARCODE,\n    FieldType.TT_NOTE,\n    FieldType.TT_SELECT,\n    FieldType.TT_CARD_SELECTOR,\n    FieldType.TT_MULTIPLE_SELECT,\n    FieldType.TT_TEXT,\n    FieldType.TT_NUMBER,\n    FieldType.TT_MONTHLY_DAYS,\n    FieldType.TT_ART_REGIMEN_SELECTION,\n    FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n    FieldType.TT_TABLE_VIEWER,\n    FieldType.TT_DOSAGE_INPUT,\n    FieldType.TT_YES_NO,\n    FieldType.TT_MULTIPLE_YES_NO,\n    FieldType.TT_WEIGHT_CHART,\n    FieldType.TT_VITALS_ENTRY,\n    FieldType.TT_APPOINTMENTS_ENTRY,\n    FieldType.TT_COMPLAINTS_PICKER,\n    FieldType.TT_CLINIC_HOLIDAY_PICKER,\n    FieldType.TT_SUMMARY,\n    FieldType.TT_ART_STAGING_SUMMARY,\n    FieldType.TT_ADHERENCE_INPUT,\n    FieldType.TT_LAB_ORDERS,\n    FieldType.TT_PERSON_RESULT_VIEW,\n    FieldType.TT_PROGRAM_SELECTION,\n    FieldType.TT_DATE_PICKER,\n    FieldType.TT_RELATION_SELECTION,\n    FieldType.TT_FILING_NUMBER_VIEW,\n    FieldType.TT_PERSON_MATCH_VIEW,\n    FieldType.TT_FULL_DATE,\n    FieldType.TT_BATCH_ENTRY,\n    FieldType.TT_BATCH_VERIFICATION,\n    FieldType.TT_BATCH_MOVEMENT,\n    FieldType.TT_IP_ADDRESS,\n    FieldType.TT_TEXT_BANNER,\n    FieldType.TT_DISPENSATION_INPUT,\n    FieldType.TT_DATA_TABLE,\n    FieldType.TT_GROUP_SELECTOR,\n    FieldType.TT_ANC_PREGNANCY_INPUT_CONFIG,\n    FieldType.TT_ANC_PREGNANCY_DETAILS_INPUT,\n    FieldType.TT_ANC_LMP_DATE_INPUT,\n    FieldType.TT_DRUG_TRANSFER_IN,\n    FieldType.TT_GRID_SELECTOR,\n    FieldType.TT_ANC_DRUGSET_INPUT,\n    FieldType.TT_RADIOLOGY_PICKER,\n    FieldType.TT_PRESCRIPTION_INPUT,\n    FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n    FieldType.TT_DRUG_DISPENSER\n]\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport async function getVillagesByName(name='a', page=1): Promise<Option[]> {\n    const villages = await LocationService.getVillagesByName(name, page)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport function getLandmarks(): Option[] {\n    const landmarks = [\n        'Catholic Church',\n        'CCAP',\n        'Seventh Day',\n        'Mosque',\n        'Primary School',\n        'Borehole',\n        'Secondary School',\n        'College',\n        'Market',\n        'Football Ground',\n        'Other'\n    ]\n\n    return landmarks.map(landmark =>({\n        label: landmark,\n        value: landmark,\n        other: {\n            code: landmark\n        }\n    }))\n}\n","var map = {\n\t\"./AncDrugSetInput.vue\": [\n\t\t\"c99f\",\n\t\t\"TouchFormElement0\"\n\t],\n\t\"./AncLmpDateInput.vue\": [\n\t\t\"101a\",\n\t\t\"TouchFormElement1\"\n\t],\n\t\"./AncPregnancyDetailsInput.vue\": [\n\t\t\"b043\",\n\t\t\"TouchFormElement2\"\n\t],\n\t\"./AncPregnancyInfoConfig.vue\": [\n\t\t\"262e\",\n\t\t\"TouchFormElement3\"\n\t],\n\t\"./ArtStagingSummary.vue\": [\n\t\t\"43db\",\n\t\t\"TouchFormElement4\"\n\t],\n\t\"./BaseTextInput.vue\": [\n\t\t\"36ad\",\n\t\t\"TouchFormElement5\"\n\t],\n\t\"./DrugDispensationSelection.vue\": [\n\t\t\"05d5\",\n\t\t\"TouchFormElement6\"\n\t],\n\t\"./DrugTransferInput.vue\": [\n\t\t\"de42\",\n\t\t\"TouchFormElement7\"\n\t],\n\t\"./FieldMixin.vue\": [\n\t\t\"51c8\",\n\t\t\"TouchFormElement8\"\n\t],\n\t\"./FilingNumberView.vue\": [\n\t\t\"c650\",\n\t\t\"TouchFormElement9\"\n\t],\n\t\"./GeneralDrugDispenser.vue\": [\n\t\t\"7737\",\n\t\t\"TouchFormElement10\"\n\t],\n\t\"./HisAdherenceInput.vue\": [\n\t\t\"f2c3\",\n\t\t\"TouchFormElement11\"\n\t],\n\t\"./HisAgeInput.vue\": [\n\t\t\"c05f\",\n\t\t\"TouchFormElement12\"\n\t],\n\t\"./HisAppointments.vue\": [\n\t\t\"b2eb\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement13\"\n\t],\n\t\"./HisArtRegimenSelection.vue\": [\n\t\t\"47b9\",\n\t\t\"TouchFormElement14\"\n\t],\n\t\"./HisBarcodeInput.vue\": [\n\t\t\"dd65\",\n\t\t\"TouchFormElement15\"\n\t],\n\t\"./HisBatchEntry.vue\": [\n\t\t\"f2ab\",\n\t\t\"chunk-fb7a1668\",\n\t\t\"TouchFormElement16\"\n\t],\n\t\"./HisBatchMovement.vue\": [\n\t\t\"5148\",\n\t\t\"chunk-fb7a1668\",\n\t\t\"TouchFormElement17\"\n\t],\n\t\"./HisBatchVerification.vue\": [\n\t\t\"7b0f\",\n\t\t\"chunk-fb7a1668\",\n\t\t\"TouchFormElement18\"\n\t],\n\t\"./HisCardSelector.vue\": [\n\t\t\"0734\",\n\t\t\"TouchFormElement19\"\n\t],\n\t\"./HisClinicHolidayPicker.vue\": [\n\t\t\"4030\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement20\"\n\t],\n\t\"./HisComplaintsPicker.vue\": [\n\t\t\"82d1\",\n\t\t\"TouchFormElement21\"\n\t],\n\t\"./HisDataTable.vue\": [\n\t\t\"a6ba\",\n\t\t\"TouchFormElement22\"\n\t],\n\t\"./HisDateInput.vue\": [\n\t\t\"374c\",\n\t\t\"TouchFormElement23\"\n\t],\n\t\"./HisDatePicker.vue\": [\n\t\t\"9b30\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement24\"\n\t],\n\t\"./HisDosageInput.vue\": [\n\t\t\"b34c\",\n\t\t\"TouchFormElement25\"\n\t],\n\t\"./HisGridSelector.vue\": [\n\t\t\"112a\",\n\t\t\"TouchFormElement26\"\n\t],\n\t\"./HisGroupSelector.vue\": [\n\t\t\"81cf\",\n\t\t\"TouchFormElement27\"\n\t],\n\t\"./HisIPAddress.vue\": [\n\t\t\"2a82\",\n\t\t\"TouchFormElement28\"\n\t],\n\t\"./HisInfiniteScrollMultipleSelect.vue\": [\n\t\t\"52a3\",\n\t\t\"TouchFormElement29\"\n\t],\n\t\"./HisLabOrders.vue\": [\n\t\t\"e614\",\n\t\t\"TouchFormElement30\"\n\t],\n\t\"./HisMonthlyDays.vue\": [\n\t\t\"69cf\",\n\t\t\"TouchFormElement31\"\n\t],\n\t\"./HisMultiSelectGrid.vue\": [\n\t\t\"0fa3\",\n\t\t\"TouchFormElement32\"\n\t],\n\t\"./HisMultipleSelect.vue\": [\n\t\t\"2fd5\",\n\t\t\"chunk-8a3b8db0\",\n\t\t\"TouchFormElement33\"\n\t],\n\t\"./HisNextVisitInterval.vue\": [\n\t\t\"3126\",\n\t\t\"TouchFormElement34\"\n\t],\n\t\"./HisNote.vue\": [\n\t\t\"c927\",\n\t\t\"TouchFormElement35\"\n\t],\n\t\"./HisNumberInput.vue\": [\n\t\t\"5e75\",\n\t\t\"TouchFormElement36\"\n\t],\n\t\"./HisPrescriptionInput.vue\": [\n\t\t\"87e5\",\n\t\t\"TouchFormElement37\"\n\t],\n\t\"./HisRadiologyPicker.vue\": [\n\t\t\"adc7\",\n\t\t\"chunk-3c642140\",\n\t\t\"TouchFormElement38\"\n\t],\n\t\"./HisSelect.vue\": [\n\t\t\"d11f\",\n\t\t\"TouchFormElement39\"\n\t],\n\t\"./HisSummary.vue\": [\n\t\t\"e0bd\",\n\t\t\"TouchFormElement40\"\n\t],\n\t\"./HisTableViewer.vue\": [\n\t\t\"8904\",\n\t\t\"TouchFormElement41\"\n\t],\n\t\"./HisTextBanner.vue\": [\n\t\t\"952c\",\n\t\t\"TouchFormElement42\"\n\t],\n\t\"./HisTextInput.vue\": [\n\t\t\"6ef9\",\n\t\t\"TouchFormElement43\"\n\t],\n\t\"./HisVitalsEntry.vue\": [\n\t\t\"e333\",\n\t\t\"TouchFormElement44\"\n\t],\n\t\"./HisWeightChart.vue\": [\n\t\t\"26a1\",\n\t\t\"TouchFormElement45\"\n\t],\n\t\"./MultiYesNoSelect.vue\": [\n\t\t\"5fd1\",\n\t\t\"TouchFormElement46\"\n\t],\n\t\"./PersonMatchView.vue\": [\n\t\t\"6591\",\n\t\t\"TouchFormElement47\"\n\t],\n\t\"./PersonSearchView.vue\": [\n\t\t\"28b2\",\n\t\t\"TouchFormElement48\"\n\t],\n\t\"./ProgramSelection.vue\": [\n\t\t\"e3b4\",\n\t\t\"TouchFormElement49\"\n\t],\n\t\"./RelationsSelection.vue\": [\n\t\t\"0e57\",\n\t\t\"TouchFormElement50\"\n\t],\n\t\"./SelectMixin.vue\": [\n\t\t\"82a9\",\n\t\t\"TouchFormElement51\"\n\t],\n\t\"./YesNoSelect.vue\": [\n\t\t\"71f2\",\n\t\t\"TouchFormElement52\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"f159\";\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}