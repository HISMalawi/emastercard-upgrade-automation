{"version":3,"sources":["webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/apps/ART/services/consultation_service.ts","webpack:///./src/apps/ART/services/stock_service.ts","webpack:///./src/apps/ART/services/dispensation_service.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/apps/ART/views/encounters/Consultation.vue?c9c8","webpack:///./src/components/DataViews/VLReminderModal.vue?d648","webpack:///./src/components/DataViews/VLReminderModal.vue","webpack:///./src/components/DataViews/VLReminderModal.vue?a476","webpack:///./src/apps/ART/services/lab_service.ts","webpack:///./src/components/DataViews/SideEffectsModal.vue?7b39","webpack:///./src/components/DataViews/SideEffectsModal.vue","webpack:///./src/components/DataViews/SideEffectsModal.vue?d179","webpack:///./src/apps/ART/views/encounters/Consultation.vue","webpack:///./src/apps/ART/views/encounters/Consultation.vue?2e64","webpack:///./src/services/regimen_service.ts","webpack:///./src/services/drug_order_service.ts","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts","webpack:///./src/components/DataViews/VLReminderModal.vue?d9fa","webpack:///./src/apps/ART/services/prescription_service.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts","webpack:///./src/components/DataViews/SideEffectsModal.vue?2579"],"names":["DEFAULT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","ConsultationService","AppEncounterService","constructor","patientID","providerID","super","getFamilyPlanningMethods","getJson","this","obs","ObservationService","getFirstObs","value_text","match","obsInValidPeriod","getDrugSideEffects","getProgramID","date","getClient","getFirstValueCoded","req","id","isEmpty","lastScreened","duration","dayjs","diff","secondCheck","getFirstValueText","isTL","value_coded","tlObs","fpObs","drugs","uniqueDrugs","forEach","drug","drug_inventory_id","familyPlanningMethods","label","values","familyPlanningLogic","selected","map","data","value","isChecked","disabled","StockService","Service","drugId","stock","length","reduce","accum","pharm","current_quantity","DRUG_PACK_SIZES","DispensationService","drugHistory","currentDrugOrder","useDrugManagement","setIsDrugManagementEnabled","isEnabled","ART_PROP","drugManagementEnabled","getDrugHistory","getCurrentOrder","buildDispensations","orderId","tabs","totalPacks","dispensations","i","push","quantity","saveDispensations","postJson","void","res","DrugOrderService","getDrugOrderHistory","e","console","warn","getDrugOrders","async","d","fetchAvailableDrugStock","drug_id","Promise","all","getDrugPackSizes","calcCompletePack","units","drugOrderBarcodes","barcodes","sort","a","b","parseInt","completePack","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onFinishAction","onFinish","skipSummary","cancelDestinationPath","cancelDestination","_component_ion_title","_component_ion_toolbar","_component_ion_header","_component_ion_content","_component_ion_button","_component_ion_footer","_createElementBlock","_Fragment","_createVNode","default","_withCtx","_createTextVNode","_","style","overflowY","background","_createElementVNode","_toDisplayString","artStartDate","monthsOnART","lastOrder","currentRegimen","regimenStartDate","slot","color","size","onClick","$event","closeModal","defineComponent","name","props","VLData","type","Object","required","HisDate","toStandardHisDisplayFormat","earliest_start_date","period_on_art","last_order_date","current_regimen","date_started","methods","val","modalController","dismiss","content","components","IonHeader","IonToolbar","IonTitle","IonContent","IonFooter","IonButton","__exports__","ARTLabService","milestone","concept","getConceptID","coded","_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_1","_hoisted_2","class","_hoisted_3","_hoisted_4","_hoisted_5","_component_ion_label","_component_ion_item","_component_ion_list","_component_ion_col","_component_ion_radio","_component_ion_radio_group","_component_ion_row","_component_ion_grid","height","_renderList","sides","index","key","selectSideEffect","detail","_normalizeStyle","activeIndex","modelValue","_createCommentVNode","postSideEffects","allSelected","sideEffects","Array","computed","filter","side","mounted","extendedLabsEnabled","appActivities","specimens","reasons","IonLabel","IonList","IonItem","IonRadioGroup","IonRow","mixins","AdherenceMixinVue","HisStandardForm","currentWeight","weightTrail","customRegimens","labOrders","weightLossPercentageNum","lostTenPercentBodyWeight","CxCaEnabled","CxCaStartAge","CxCaMaxAge","DueForCxCa","currentlyPregnant","patientHitMenopause","hasPregnancyObsToday","autoSelect3HP","labOrderFieldContext","consultation","prescription","dispensation","completed3HP","hasTbHistoryObs","allergicToSulphur","TBSuspected","presentedTBSymptoms","askAdherence","lastDrugsReceived","sideEffectsHistory","onPermanentFPMethods","reasonForDecliningTPTObs","malawiSideEffectReasonObs","otherSideEffectReasonObs","wasTransferredIn","dateStartedArt","clientHadAHysterectomy","isNoneClientPatient","tptStatus","customDrugs","watch","ready","handler","PrescriptionService","getFields","immediate","f","computedData","encounter","createEncounter","toastWarning","computedObs","resolveObs","secondaryObs","savedObs","saveObservationList","drugObs","saveAdherence","toastSuccess","refer_to_clinician","gotoPatientDashboard","nextTask","formData","drugFilters","tptHistory","routine_tb_therapy","RegimenService","getCustomIngridients","includes","other","receivedArvs","transferLetterObs","toStandardHisFormat","obs_datetime","getDate","dateStarted","getFirstValueDatetime","action","infoActionSheet","vals","ProgramService","getPatientVLInfo","eligibile","modal","create","component","VLReminderModal","backdropDismiss","cssClass","componentProps","present","onDidDismiss","launchOrderSelection","waitForVL","orderService","observations","buildDefferedOrder","canScreenCxCa","age","patient","getAge","isFemale","pregnancyEligible","isChildBearing","showCurrentContraceptionMethods","isPregnant","isANCclient","showNewContraceptionMethods","isOnTubalLigation","pregnant_breastfeeding","inArray","p","current_fp_methods","listData","infoAlert","noneIndex","findIndex","currentIndex","disablePrescriptions","buildMedicationOrders","options","o","buildValueCoded","priscribed","medications","declinedFPM","fp_methods","riskOfUnplannedPregnancy","reason_for_no_fpm","showOtherSideEffects","side_effects","hasTBSymptoms","tb_side_effects","attr","sideEffectReasons","getSideEffectsReasons","undefined","drugInducedConcept","ConceptService","getCachedConceptID","isOtherReason","reason","r","allYes","s","SideEffectsModalVue","getFPMethods","exclusionList","preChecked","filtered","method","getOptions","preValues","preValue","find","yesNoOptions","getContraindications","contraIndications","getConceptsByCategory","getOtherContraindications","lastElement","pop","getTBSymptoms","getReasonsForNoCxcaOptions","c","runAppendOptionParams","prechecked","checkedOptions","appendOptionParams","appendedOptions","option","didCompleted3HP","patientOnTpt","test","tpt","tptAutoSelectionMode","curOption","is3HPorTPT","ipt3HPConflict","checkedDrugs","item","noTpTPresent","every","Boolean","optionsActionSheet","role","buildValueText","selection","medicationOrderOptions","completedTpt","everTakenTpt","disableOption","text","description","show","toOption","tb_treatment","completed","OrderService","formatLabs","Store","get","getSuspendedProgram","proxyID","helpText","FieldType","TT_MULTIPLE_SELECT","init","isGuardian","PatientTypeService","isDrugRefillPatient","Number","getRecentWeight","getTptTreatmentStatus","validation","Validation","computedValue","v","tag","onValueUpdate","list","on3HPValueUpdate","cd","l","condition","exitsForm","generateDateFields","getTransferInStatus","getDateStartedArt","minDate","maxDate","computeValue","setDate","buildValueDate","estimation","allowUnknown","getARVs","config","showKeyboard","TT_NEXT_VISIT_INTERVAL_SELECTION","nextAppointment","intervals","setNextVisitInterval","calculateDateFromInterval","TT_DRUG_TRANSFER_IN","validateSeries","pillsBrought","some","drugID","buildObs","drug_interval","child","date_last_received_arvs","previous_arvs_received","drugName","prevValue","qty","rmndr","TT_LAB_ORDERS","getVlLabData","unload","checkVLReminder","noGivenResults","result_given","alertConfirmation","enc","result","resultIds","encounterID","encounter_id","saveObs","resultID","onload","fieldContext","printOrder","orderID","PatientPrintoutService","printLabOrderLbl","hiddenFooterBtns","footerBtns","visible","getTLObs","TT_MULTIPLE_YES_NO","anyEmpty","concat","TT_WEIGHT_CHART","getWeightHistory","getWeightLossPercentageFromTrail","bmi","getBMI","x","y","weight","TT_TEXT_BANNER","mapStrToOptions","disableFPMethods","checked","TT_SELECT","offer_contraceptives","cervicalCancerScreeningEnabled","start","end","cervicalCancerScreeningAgeBounds","clientDueForCxCa","clientHasHadAHysterectomy","offer_cxca","getBirthdate","getSessionDate","reason_for_no_cxca","isEstimate","buildValueDateEstimated","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","TT_DATA_TABLE","columns","table","thTxt","rows","keys","k","tdDate","td","drug_induced","cur","getPreviousDrugs","beforeNext","buildSideEffectObs","onValue","checkIfWeightLossIsControlled","onConditionFalse","TT_NOTE","other_side_effects","on_tb_treatment","defaultValue","hasTreatmentHistoryObs","TT_ADHERENCE_INPUT","getTptDrugs","date_started_tpt","titles","getFacilities","isFilterDataViaApi","yesNoUnknownOptions","getAdherenceFields","UserService","isNurse","currentOptions","onClickComponentEvents","refreshOptions","btnEvent","btnOutput","patientId","onTbTreatment","orders","order","pageSize","params","getYearField","showUnknown","primaryFunctions","appearInSummary","TT_TEXT","customKeyboard","getMonthField","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","getDefaultDate","form","field","datePart","year","month","day","split","validateMinMax","min","Date","max","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","buildHelpTextDate","part","parts","partValues","dpart","wl","join","updateHelpTextOnValue","toString","StandardValidations","isNaN","minYear","getYear","summaryMapValue","summaryLabel","ref","keyboardActions","valueEstimateCondition","estimateType","conditions","ageEstimateRegex","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","AdverseEffectsCategories","nextVisitInterval","fastTrack","regimenExtras","fastTrackMedications","hangingPills","medicationOrders","treatmentState","contraindications","tptPrescriptionCount","lastSideEffectDate","getHangingPills","getMedicationOrders","getCachedConceptName","getTptPrescriptionCount","getLastSideEffectDate","getSideEffects","getRegimenExtras","getPatientRegimens","getRegimens","getFastTrackMedications","getTreatmentState","isFastTrack","medicationOrdersAvailable","shouldPrescribeArvs","arvs","shouldPrescribeExtras","extras","extrasAvailable","concept_id","getRegimenStarterpack","regimenCode","patientWeight","regimen","contraindication","getObs","drugInduced","value_drug","count","yes","meds","pills","getAll","value_numeric","drug_order","getLastDrugsReceived","withDosages","dosage","getDrugDosages","am","noon","pm","frequency","findAndGroupDrugSideEffects","allSideEffects","calculatePillsPerDay","parseFloat","estimatePackSize","pillsPerDay","packSize","packs","roundedPacks","Math","round","calculateDosage","morningTabs","eveningTabs","dose","calculateEquivalentDosage","dateObj","getDrugPackSize","pack_size","getInstructions","toOrderObj","drugOrders","response","saveValueTextObs","reasonForSwitch","facilities","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id","getVillagesByName","page","getLandmarks","landmarks","landmark","code"],"mappings":"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","file":"js/chunk-d1bb4374.cfd74938.js","sourcesContent":["export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","import { DrugInterface } from \"@/interfaces/Drug\";\nimport { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { ObservationService } from \"@/services/observation_service\";\nimport dayjs from \"dayjs\";\nimport { isEmpty } from \"lodash\";\nimport { DrugOrderService } from \"@/services/drug_order_service\"\n\nexport class ConsultationService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 53, providerID);\n  }\n  getFamilyPlanningMethods() {\n    return [\n      \"ORAL CONTRACEPTIVE PILLS\",\n      \"DEPO-PROVERA\",\n      \"INTRAUTERINE CONTRACEPTION\",\n      \"CONTRACEPTIVE IMPLANT\",\n      \"MALE CONDOMS\",\n      \"FEMALE CONDOMS\",\n      \"TUBAL LIGATION\",\n      \"NONE\",\n    ];\n  }\n\n  async getTptTreatmentStatus() {\n    return AppEncounterService.getJson(`/patients/${this.patientID}/tpt_status`)\n  }\n\n  async patientHitMenopause() {\n    const obs = await ObservationService.getFirstObs(\n      this.patientID, 'Why does the woman not use birth control', \n    )\n    return obs && typeof obs?.value_text === 'string'\n      ? (obs.value_text.match(/menopause/i) ? true : false)\n      && AppEncounterService.obsInValidPeriod(obs)\n      : false\n  }\n\n  async hasTreatmentHistoryObs() {\n    const obs = await ObservationService.getFirstObs(this.patientID, 'Previous TB treatment history')\n    return obs && AppEncounterService.obsInValidPeriod(obs)\n  }\n\n  getDrugSideEffects() {\n    return AppEncounterService.getJson(`programs/${AppEncounterService.getProgramID()}/patients/${this.patientID}/medication_side_effects`, { \n      date: this.date \n    })\n  }\n\n  getClient() {\n    return AppEncounterService.getFirstValueCoded(this.patientID, 'Patient present');\n  }\n\n  async clientDueForCxCa() {\n    const req: any = await AppEncounterService.getJson(`last_cxca_screening_details`, {\n      id: this.patientID, date: this.date\n    })\n    if (!isEmpty(req)) {\n      const lastScreened = req['date_screened']\n      const duration = dayjs(this.date).diff(lastScreened, 'years')\n      return duration >= 1\n    }\n    return true\n  }\nasync clientHasHadAHysterectomy() {\n    const req: any = await AppEncounterService.getFirstValueCoded(this.patientID, 'Reason for NOT offering CxCa'); \n    if(req === \"Hysterectomy\") {\n      return true\n    }\n    const secondCheck: any = await AppEncounterService.getFirstValueText(this.patientID, 'Treatment'); \n    if(secondCheck === \"Hysterectomy\") {\n      return true\n    }\n    return false\n  }\n  async getTLObs() {\n    const isTL = ((obs: any) => obs && obs.value_coded === 'Tubal ligation' && AppEncounterService.obsInValidPeriod(obs))\n    const tlObs = await AppEncounterService.getFirstObs(this.patientID, 'Family planning')\n    if (isTL(tlObs)) {\n      return isTL(tlObs)\n    } else  {\n      const fpObs = await AppEncounterService.getFirstObs(this.patientID, 'Method of family planning')\n      return isTL(fpObs)\n    }\n  }\n  async getPreviousDrugs() {\n\n    const drugs = await AppEncounterService.getJson(\n      `patients/${this.patientID}/drugs_received`\n    )\n\n    if (!drugs) return\n\n    const uniqueDrugs = {} as any\n    drugs.forEach((drug: DrugInterface) => {\n      uniqueDrugs[drug.drug_inventory_id] = drug;\n    })\n    return uniqueDrugs;\n  }\n  familyPlanningMethods(label: string, values: any[]) {\n    const familyPlanningLogic: any = {\n      \"ORAL CONTRACEPTIVE PILLS\": {\n        \"DEPO-PROVERA\": 'N', \"INTRAUTERINE CONTRACEPTION\": 'N', 'CONTRACEPTIVE IMPLANT': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"DEPO-PROVERA\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"INTRAUTERINE CONTRACEPTION\": 'N', 'CONTRACEPTIVE IMPLANT': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"INTRAUTERINE CONTRACEPTION\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'CONTRACEPTIVE IMPLANT': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"CONTRACEPTIVE IMPLANT\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"MALE CONDOMS\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'Y', \"DEPO-PROVERA\": 'Y', 'INTRAUTERINE CONTRACEPTION': 'Y',\n        'CONTRACEPTIVE IMPLANT': 'Y', 'FEMALE CONDOMS': 'Y', 'RYTHM METHOD': 'Y', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'Y'\n      },\n      \"FEMALE CONDOMS\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'Y', \"DEPO-PROVERA\": 'Y', 'INTRAUTERINE CONTRACEPTION': 'Y',\n        'CONTRACEPTIVE IMPLANT': 'Y', 'MALE CONDOMS': 'Y', 'RYTHM METHOD': 'Y', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'Y'\n      },\n      \"RYTHM METHOD\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'Y', 'CONTRACEPTIVE IMPLANT': 'N', 'TUBAL LIGATION': 'N',\n        'VASECTOMY': 'N'\n      },\n      \"TUBAL LIGATION\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'N', 'FEMALE CONDOMS': 'N', 'CONTRACEPTIVE IMPLANT': 'N', 'RYTHM METHOD': 'N',\n        'VASECTOMY': 'N',\n      },\n      \"VASECTOMY\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'Y', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'Y', 'FEMALE CONDOMS': 'N', 'CONTRACEPTIVE IMPLANT': 'Y', 'RYTHM METHOD': 'N',\n        'TUBAL LIGATION': 'N'\n      },\n      \"NONE\": {\n        \"ORAL CONTRACEPTIVE PILLS\": 'N', \"DEPO-PROVERA\": 'N', 'INTRAUTERINE CONTRACEPTION': 'N',\n        'MALE CONDOMS': 'N', 'FEMALE CONDOMS': 'N', 'CONTRACEPTIVE IMPLANT': 'N', 'RYTHM METHOD': 'N',\n        'TUBAL LIGATION': 'N'\n      }\n    }\n    const selected = familyPlanningLogic[label];\n    return values.map(data => {\n      if (selected[data.label] === \"N\") {\n        return {\n          label: data.label,\n          value: data.value,\n          isChecked: false,\n          disabled: true,\n        }\n      }\n      else {\n        return {\n          label: data.label,\n          value: data.value,\n          isChecked: data.isChecked,\n          disabled: false,\n        }\n      }\n\n    })\n  }\n\n}","import { Service } from \"@/services/service\";\n\nexport class StockService extends Service {\n    constructor() {\n        super()\n    }\n\n    static async fetchAvailableDrugStock(drugId: number) {\n        const stock = await this.getJson('pharmacy/items', { 'drug_id': drugId })\n        if (stock && stock.length > 0) {\n            return stock.reduce((accum: number, pharm: any) => accum + pharm.current_quantity, 0);\n        }\n    }\n}\n","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { StockService } from \"./stock_service\";\nimport ART_PROP from '@/apps/ART/art_global_props';\n// ripped from old ART system\nexport const DRUG_PACK_SIZES: Record<string, any> = {\n    '11': [ 30 ],\n    '21': [ 25 ],\n    '22': [ 60 ],\n    '24': [ 30, 60, 90, 100 ],\n    '30': [ 90 ],\n    '39': [ 60 ],\n    '73': [ 120 ],\n    '74': [ 60 ],\n    '76': [ 1000 ],\n    '297': [ 30, 60, 90 ],\n    '576': [ 30, 60, 90 ],\n    '613': [ 60 ],\n    '731': [ 60 ],\n    '732': [ 60 ],\n    '733': [ 60 ],\n    '734': [ 30 ],\n    '735': [ 30 ],\n    '736': [ 60 ],\n    '738': [ 60 ],\n    '931': [ 12, 30, 60 ],\n    '932': [ 30 ],\n    '954': [ 60 ],\n    '963': [ 30, 60, 90 ],\n    '968': [ 60 ],\n    '969': [ 30 ],\n    '971': [ 30,60,90 ],\n    '976': [ 60 ],\n    '977': [ 30 ],\n    '982': [ 30 ],\n    '983': [ 30, 90 ],\n    '1039': [ 30,60,90 ],\n    '1043': [ 60 ],\n    '1044': [ 30],\n    '1056': [ 24 ],\n    '1216': [3, 6, 12]\n}\n\nexport class DispensationService extends AppEncounterService {\n    drugHistory: Array<any>;\n    currentDrugOrder: Array<any>;\n    useDrugManagement: boolean; \n    constructor(patientID: number, providerID: number) {\n        super(patientID, 54, providerID)\n        this.drugHistory = []\n        this.currentDrugOrder = []\n        this.useDrugManagement = false\n    }\n\n    setIsDrugManagementEnabled(isEnabled: boolean) {\n        this.useDrugManagement = isEnabled\n    }\n\n    async loadDrugManagementEnabled() {\n        this.useDrugManagement = await ART_PROP.drugManagementEnabled()\n    }\n\n    getDrugHistory() {\n        return this.drugHistory\n    }\n\n    getCurrentOrder() {\n        return this.currentDrugOrder\n    }\n\n    buildDispensations(orderId: number, tabs: number, totalPacks: number) {\n        const dispensations = []\n        for(let i=0; i < totalPacks; i++) {\n            dispensations.push({\n                'drug_order_id': orderId,\n                date: this.date,\n                quantity: (tabs / totalPacks)\n            })\n        }\n        return dispensations\n    }\n\n    saveDispensations(dispensations: Array<any>) {\n        return AppEncounterService.postJson('/dispensations', { \n            dispensations, \n            'program_id': AppEncounterService.getProgramID()\n        })\n    }\n\n    async voidOrder(orderId: number) {\n        return AppEncounterService.void(`/dispensations/${orderId}`, {})\n    }\n\n    async loadDrugHistory() {\n        try {\n            const res = await DrugOrderService.getDrugOrderHistory(this.patientID)\n            if (res) this.drugHistory = res\n        } catch (e) {\n            console.warn(e)\n        }\n    }\n\n    async loadCurrentDrugOrder() {\n        const res = await DrugOrderService.getDrugOrders(this.patientID)\n        if (res) {\n            if (this.useDrugManagement) {\n                const drugs = res.map(async (d: any) => {\n                    d['available_stock'] = await StockService.fetchAvailableDrugStock(d.drug.drug_id)\n                    return d\n                })\n                this.currentDrugOrder = await Promise.all(drugs)\n                return\n            }\n            this.currentDrugOrder = res\n        }\n    }\n\n    getDrugPackSizes(drugId: number) {\n        if (drugId in DRUG_PACK_SIZES) {\n            return DRUG_PACK_SIZES[drugId]\n        }\n        return [30, 60, 90]\n    }\n\n    // Ripped from old ART system for backwards compatibility purposes\n    calcCompletePack(drug: any, units: number) {\n        //sorting in an ascending order by tabs\n        const drugOrderBarcodes = drug.barcodes.sort((a: any, b: any) => a.tabs - b.tabs); \n        if (drugOrderBarcodes.length == 0 || units == 0.0) return units;\n        for (const i in drugOrderBarcodes) {\n            const { tabs } = drugOrderBarcodes[i]\n            if (parseInt(tabs) >= units) return tabs;\n        }\n        const completePack = parseInt(drugOrderBarcodes[drugOrderBarcodes.length - 1].tabs)\n        return completePack\n    }\n}\n","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onFinishAction: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"]))\n}","import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_title = _resolveComponent(\"ion-title\")!\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")!\n  const _component_ion_header = _resolveComponent(\"ion-header\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_ion_button = _resolveComponent(\"ion-button\")!\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createVNode(_component_ion_header, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_title, null, {\n              default: _withCtx(() => [\n                _createTextVNode(\"VL milestone has been reached\")\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_content, { style: { overflowY: 'hidden', background: 'grey' } }, {\n      default: _withCtx(() => [\n        _createElementVNode(\"p\", null, \"ART start date : \" + _toDisplayString(_ctx.artStartDate), 1),\n        _createElementVNode(\"p\", null, \"Months on ART: \" + _toDisplayString(_ctx.monthsOnART), 1),\n        _createElementVNode(\"p\", null, \"Last VL order date \" + _toDisplayString(_ctx.lastOrder), 1),\n        _createElementVNode(\"p\", null, \"Current regimen / start date: \" + _toDisplayString(_ctx.currentRegimen) + \" - \" + _toDisplayString(_ctx.regimenStartDate), 1)\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_footer, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_button, {\n              slot: \"end\",\n              color: \"success\",\n              size: \"large\",\n              onClick: _cache[0] || (_cache[0] = ($event: any) => (_ctx.closeModal('order')))\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Order VL\")\n              ]),\n              _: 1\n            }),\n            _createVNode(_component_ion_button, {\n              slot: \"end\",\n              size: \"large\",\n              onClick: _cache[1] || (_cache[1] = ($event: any) => (_ctx.closeModal('wait')))\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Wait till next milestone\")\n              ]),\n              _: 1\n            }),\n            _createVNode(_component_ion_button, {\n              slot: \"start\",\n              color: \"danger\",\n              size: \"large\",\n              onClick: _cache[2] || (_cache[2] = ($event: any) => (_ctx.closeModal('later')))\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Remind me later \")\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    })\n  ], 64))\n}","\nimport {\n  IonContent,\n  IonButton,\n  IonHeader,\n  IonTitle,\n  IonToolbar,\n  modalController,\n  IonFooter\n} from \"@ionic/vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport HisDate from \"@/utils/Date\";\n\nexport default defineComponent({\n  name: \"Modal\",\n  props: {\n    VLData: {\n      type: Object as any,\n      required: true\n    },\n    \n  },\n  async created() {\n    this.artStartDate = HisDate.toStandardHisDisplayFormat(this.VLData.earliest_start_date);\n    this.monthsOnART = this.VLData.period_on_art;\n    this.lastOrder = this.VLData.last_order_date ? HisDate.toStandardHisDisplayFormat(this.VLData.last_order_date) : 'N/A';\n    this.currentRegimen = this.VLData.current_regimen.name ? this.VLData.current_regimen.name : 'Other';\n    this.regimenStartDate = HisDate.toStandardHisDisplayFormat(this.VLData.current_regimen.date_started);\n  },\n  methods: {\n   async closeModal(val: string) {\n    await modalController.dismiss(val);\n   } \n  },\n  data() {\n    return {\n      content: \"Content\",\n      artStartDate: \"\",\n      monthsOnART: \"\",\n      lastOrder: \"\",\n      currentRegimen: \"\",\n      regimenStartDate: \"\" \n    };\n  },\n  components: {\n    IonHeader,\n    IonToolbar,\n    IonTitle,\n    IonContent,\n    IonFooter,\n    IonButton,\n  },\n});\n","import { render } from \"./VLReminderModal.vue?vue&type=template&id=10a26cd2&scoped=true&ts=true\"\nimport script from \"./VLReminderModal.vue?vue&type=script&lang=ts\"\nexport * from \"./VLReminderModal.vue?vue&type=script&lang=ts\"\n\nimport \"./VLReminderModal.vue?vue&type=style&index=0&id=10a26cd2&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/mary/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-10a26cd2\"]])\n\nexport default __exports__","import { AppEncounterService } from \"@/services/app_encounter_service\";\nexport class ARTLabService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 13, providerID);\n  }\n  async buildDefferedOrder(milestone: any) {\n    const concept = await AppEncounterService.getConceptID(\"HIV viral load\");\n    const coded = await AppEncounterService.getConceptID(\"Delayed milestones\");\n\n    return [\n      {\n        'concept_id': concept,\n        'value_text': \"Wait till next milestone\",\n        'value_coded': coded,\n        'value_numeric': milestone,\n      }]\n  }\n}","import { createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, normalizeStyle as _normalizeStyle, createBlock as _createBlock, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-546674a2\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = { style: {} }\nconst _hoisted_2 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"div\", { class: \"side-title\" }, \" Select reason \", -1))\nconst _hoisted_3 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Current Medication\", -1))\nconst _hoisted_4 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, \"Previous Medication\", -1))\nconst _hoisted_5 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"p\", null, null, -1))\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_title = _resolveComponent(\"ion-title\")!\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")!\n  const _component_ion_header = _resolveComponent(\"ion-header\")!\n  const _component_ion_label = _resolveComponent(\"ion-label\")!\n  const _component_ion_item = _resolveComponent(\"ion-item\")!\n  const _component_ion_list = _resolveComponent(\"ion-list\")!\n  const _component_ion_col = _resolveComponent(\"ion-col\")!\n  const _component_ion_radio = _resolveComponent(\"ion-radio\")!\n  const _component_ion_radio_group = _resolveComponent(\"ion-radio-group\")!\n  const _component_ion_row = _resolveComponent(\"ion-row\")!\n  const _component_ion_grid = _resolveComponent(\"ion-grid\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_ion_button = _resolveComponent(\"ion-button\")!\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _createVNode(_component_ion_header, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_title, null, {\n              default: _withCtx(() => [\n                _createTextVNode(\"Side effects suspected causes\")\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_content, { style: { overflowY: 'hidden', background: 'grey' } }, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_grid, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_row, null, {\n              default: _withCtx(() => [\n                _createVNode(_component_ion_col, { size: \"4\" }, {\n                  default: _withCtx(() => [\n                    _createVNode(_component_ion_list, { style: {overflowY: 'auto', height:'78vh'} }, {\n                      default: _withCtx(() => [\n                        (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.sides, (data, index) => {\n                          return (_openBlock(), _createBlock(_component_ion_item, {\n                            key: data,\n                            onClick: ($event: any) => (_ctx.selectSideEffect(index)),\n                            detail: true,\n                            style: _normalizeStyle(_ctx.activeIndex === index ? 'color: green': 'color: black')\n                          }, {\n                            default: _withCtx(() => [\n                              _createVNode(_component_ion_label, null, {\n                                default: _withCtx(() => [\n                                  _createTextVNode(_toDisplayString(data.label), 1)\n                                ]),\n                                _: 2\n                              }, 1024)\n                            ]),\n                            _: 2\n                          }, 1032, [\"onClick\", \"style\"]))\n                        }), 128))\n                      ]),\n                      _: 1\n                    })\n                  ]),\n                  _: 1\n                }),\n                _createVNode(_component_ion_col, { style: {overflowY: 'auto', height:'78vh'} }, {\n                  default: _withCtx(() => [\n                    _createElementVNode(\"div\", _hoisted_1, [\n                      _createVNode(_component_ion_list, null, {\n                        default: _withCtx(() => [\n                          (_ctx.activeIndex !== null)\n                            ? (_openBlock(), _createBlock(_component_ion_radio_group, {\n                                key: 0,\n                                modelValue: _ctx.sides[_ctx.activeIndex]['reason'],\n                                \"onUpdate:modelValue\": _cache[0] || (_cache[0] = ($event: any) => ((_ctx.sides[_ctx.activeIndex]['reason']) = $event))\n                              }, {\n                                default: _withCtx(() => [\n                                  _hoisted_2,\n                                  _hoisted_3,\n                                  (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(_ctx.drugs, (drug, i) => {\n                                    return (_openBlock(), _createBlock(_component_ion_item, { key: i }, {\n                                      default: _withCtx(() => [\n                                        _createVNode(_component_ion_label, null, {\n                                          default: _withCtx(() => [\n                                            _createTextVNode(_toDisplayString(drug.drug.name), 1)\n                                          ]),\n                                          _: 2\n                                        }, 1024),\n                                        _createVNode(_component_ion_radio, {\n                                          slot: \"start\",\n                                          value: drug.drug_inventory_id\n                                        }, null, 8, [\"value\"])\n                                      ]),\n                                      _: 2\n                                    }, 1024))\n                                  }), 128)),\n                                  _hoisted_4,\n                                  _createVNode(_component_ion_item, null, {\n                                    default: _withCtx(() => [\n                                      _createVNode(_component_ion_label, null, {\n                                        default: _withCtx(() => [\n                                          _createTextVNode(\"Other, not drug related\")\n                                        ]),\n                                        _: 1\n                                      }),\n                                      _createVNode(_component_ion_radio, {\n                                        slot: \"start\",\n                                        value: \"other\"\n                                      })\n                                    ]),\n                                    _: 1\n                                  }),\n                                  _createVNode(_component_ion_item, null, {\n                                    default: _withCtx(() => [\n                                      _createVNode(_component_ion_label, null, {\n                                        default: _withCtx(() => [\n                                          _createTextVNode(\"Drug side effect\")\n                                        ]),\n                                        _: 1\n                                      }),\n                                      _createVNode(_component_ion_radio, {\n                                        slot: \"start\",\n                                        value: \"drug\"\n                                      })\n                                    ]),\n                                    _: 1\n                                  })\n                                ]),\n                                _: 1\n                              }, 8, [\"modelValue\"]))\n                            : _createCommentVNode(\"\", true)\n                        ]),\n                        _: 1\n                      })\n                    ]),\n                    _hoisted_5\n                  ]),\n                  _: 1\n                })\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    }),\n    _createVNode(_component_ion_footer, null, {\n      default: _withCtx(() => [\n        _createVNode(_component_ion_toolbar, null, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_button, {\n              onClick: _ctx.closeModal,\n              slot: \"end\",\n              color: \"danger\"\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Close \")\n              ]),\n              _: 1\n            }, 8, [\"onClick\"]),\n            _createVNode(_component_ion_button, {\n              onClick: _ctx.postSideEffects,\n              slot: \"end\",\n              disabled: !_ctx.allSelected\n            }, {\n              default: _withCtx(() => [\n                _createTextVNode(\" Save \")\n              ]),\n              _: 1\n            }, 8, [\"onClick\", \"disabled\"])\n          ]),\n          _: 1\n        })\n      ]),\n      _: 1\n    })\n  ], 64))\n}","\nimport {\n  IonContent,\n  IonButton,\n  IonHeader,\n  IonTitle,\n  IonToolbar,\n  IonLabel,\n  modalController,\n  IonList,\n  IonItem,\n  IonRadioGroup,\n  IonRow,\n} from \"@ionic/vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { ActivityInterface } from \"@/apps/interfaces/AppInterface\"\n\nexport default defineComponent({\n  name: \"Modal\",\n  props: {\n    sideEffects: {\n      type: Object as PropType<ActivityInterface[]>,\n      required: true\n    },\n    drugs: {\n      type: Array as any, \n      default: []\n    },\n  },\n  methods: {\n    closeModal() {\n      modalController.dismiss()\n    },\n    async postSideEffects() {\n      await modalController.dismiss(this.sides);\n    },\n    selectSideEffect(index: number) {\n      this.activeIndex = index;\n    },\n    \n  },\n  computed: {\n    allSelected(): any {\n      return this.sides.filter((side: any) => side['reason']).length === this.sides.length\n    }\n  },\n  mounted() {\n    this.sides = this.sideEffects;\n  },\n  data() {\n    return {\n      content: \"Content\",\n      extendedLabsEnabled: false as boolean,\n      appActivities: [] as Array<ActivityInterface>,\n      sides: [] as any,\n      specimens: [],\n      reasons: ['Routine', 'Targeted', 'Confirmatory', 'Stat', 'Repeat / Missing'],\n      activeIndex: null as any\n    };\n  },\n  components: {\n    IonButton,\n    IonContent,\n    IonHeader,\n    IonTitle,\n    IonToolbar,\n    IonLabel,\n    IonList,\n    IonItem,\n    IonRadioGroup,\n    IonRow,\n  },\n});\n","import { render } from \"./SideEffectsModal.vue?vue&type=template&id=546674a2&scoped=true&ts=true\"\nimport script from \"./SideEffectsModal.vue?vue&type=script&lang=ts\"\nexport * from \"./SideEffectsModal.vue?vue&type=script&lang=ts\"\n\nimport \"./SideEffectsModal.vue?vue&type=style&index=0&id=546674a2&scoped=true&lang=css\"\n\nimport exportComponent from \"/home/mary/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render],['__scopeId',\"data-v-546674a2\"]])\n\nexport default __exports__","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport { FooterBtnEvent, Option } from \"@/components/Forms/FieldInterface\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from \"@/components/Forms/validations/StandardValidations\";\nimport { alertConfirmation, infoAlert, toastSuccess, toastWarning } from \"@/utils/Alerts\";\nimport HisDate from \"@/utils/Date\";\nimport { findIndex, isEmpty, find } from \"lodash\";\nimport { ConsultationService } from \"@/apps/ART/services/consultation_service\";\nimport { UserService } from \"@/services/user_service\";\nimport { OrderService } from \"@/services/order_service\";\nimport { ConceptService } from \"@/services/concept_service\";\nimport AdherenceMixinVue from \"./AdherenceMixin.vue\";\nimport { modalController } from \"@ionic/vue\";\nimport VLReminderModal from \"@/components/DataViews/VLReminderModal.vue\";\nimport { ProgramService } from \"@/services/program_service\";\nimport { ARTLabService } from \"../../services/lab_service\";\nimport { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport SideEffectsModalVue from \"@/components/DataViews/SideEffectsModal.vue\";\nimport ART_PROP from \"@/apps/ART/art_global_props\";\nimport { generateDateFields, EstimationFieldType } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport { PatientTypeService } from \"../../services/patient_type_service\";\nimport { PrescriptionService } from \"../../services/prescription_service\";\nimport { DispensationService } from \"../../services/dispensation_service\";\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\nimport { AppEncounterService } from \"@/services/app_encounter_service\";\nimport Store from \"@/composables/ApiStore\"\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\";\nimport { RegimenService } from \"@/services/regimen_service\";\n\nexport default defineComponent({\n  mixins: [AdherenceMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    fields: [] as any,\n    currentWeight: -1 as any,\n    weightTrail: [] as any,\n    customRegimens: [] as any,\n    labOrders: [] as any,\n    weightLossPercentageNum: 0 as number,\n    lostTenPercentBodyWeight: false as boolean,\n    CxCaEnabled: false as boolean,\n    CxCaStartAge: -1 as number,\n    CxCaMaxAge: -1 as number,\n    DueForCxCa: false as boolean,\n    currentlyPregnant: false as boolean,\n    patientHitMenopause: false as boolean,\n    hasPregnancyObsToday: false as boolean,\n    autoSelect3HP: false as boolean,\n    labOrderFieldContext: {} as any,\n    consultation: {} as any,\n    prescription: {} as any,\n    dispensation: {} as any,\n    completed3HP: false as boolean,\n    hasTbHistoryObs: false,\n    allergicToSulphur: false as boolean | null,\n    TBSuspected: false,\n    presentedTBSymptoms: false,\n    askAdherence: false as boolean,\n    lastDrugsReceived: [] as any,\n    sideEffectsHistory: {} as any,\n    onPermanentFPMethods: false,\n    reasonForDecliningTPTObs: {} as any,\n    malawiSideEffectReasonObs: [] as any,\n    otherSideEffectReasonObs: [] as any,\n    wasTransferredIn: false as boolean,\n    dateStartedArt: '' as string,\n    clientHadAHysterectomy: false as any,\n    isNoneClientPatient: false as boolean,\n    tptStatus: {} as Record<string, any>,\n    customDrugs: [] as any\n  }),\n  watch: {\n    ready: {\n      handler(value: boolean) {\n        if (value) {\n          this.consultation = new ConsultationService(this.patientID, this.providerID)\n          this.prescription = new PrescriptionService(this.patientID, this.providerID)\n          this.dispensation = new DispensationService(this.patientID, this.providerID)\n          this.fields = this.getFields();\n        }\n      },\n      immediate: true\n    },\n  },\n  methods: {\n    async onFinish(f: any, computedData: any) {\n      const encounter = await this.consultation.createEncounter();  \n\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n\n      const computedObs = await this.resolveObs(computedData, 'consultation')\n\n      const secondaryObs = (await Promise.all([\n        ...this.malawiSideEffectReasonObs,\n        ...this.otherSideEffectReasonObs,\n        this.reasonForDecliningTPTObs\n      ])).filter((d) => !isEmpty(d))\n\n      const savedObs = await this.consultation.saveObservationList([\n        ...computedObs, ...secondaryObs\n      ])\n\n      if (!isEmpty(this.drugObs) && !this.isNoneClientPatient) await this.saveAdherence();\n\n      if (!savedObs) return toastWarning(\"Unable to save patient observations\");\n\n      toastSuccess(\"Observations and encounter created!\");\n\n      if (f.refer_to_clinician && f.refer_to_clinician.value ==='Yes') {\n        this.gotoPatientDashboard()\n        return\n      }\n      this.nextTask();\n    },\n    async getTptDrugs(formData: any){\n      const drugFilters: string[] = []\n      const tptHistory = formData.routine_tb_therapy.value\n      if (isEmpty(this.customDrugs)) {\n        this.customDrugs = await RegimenService.getCustomIngridients()\n      }\n      if(tptHistory.match(/ipt/i)) {\n        drugFilters.push(\"INH or H (Isoniazid 300mg tablet)\")\n      } else if(tptHistory.includes(\"3HP (RFP + INH)\")){\n        drugFilters.push('INH or H (Isoniazid 300mg tablet)')\n        drugFilters.push('Rifapentine (150mg)')\n      } else if(tptHistory.includes(\"INH 300 / RFP 300 (3HP)\")){\n        drugFilters.push(\"INH 300 / RFP 300 (3HP)\")\n      }\n      return !isEmpty(drugFilters) \n        ? this.customDrugs.filter((drug: any) => drugFilters.includes(drug.name))\n          .map((drug: any) => ({\n            label: drug.name,\n            value: '',\n            other: drug\n          }))\n        : []\n    },\n    async getTransferInStatus() {\n      const receivedArvs = await ConsultationService.getFirstValueCoded(\n        this.patientID, 'Ever received ART'\n      )\n      const transferLetterObs = await ConsultationService.getFirstObs(\n        this.patientID, 'Has transfer letter'\n      )\n      const date = transferLetterObs ? HisDate.toStandardHisFormat(transferLetterObs.obs_datetime) : ''\n      return receivedArvs \n        && receivedArvs.match(/yes/i) \n        && transferLetterObs \n        && `${transferLetterObs.value_coded}`.match(/yes/i)\n        && date === this.consultation.getDate()\n    },\n    async getDateStartedArt() {\n      const dateStarted = await ConsultationService.getFirstValueDatetime(this.patientID, 'Date ART started')\n      return dateStarted ? HisDate.toStandardHisFormat(dateStarted) : ''\n    },\n    async checkIfWeightLossIsControlled(val: any) {\n      if (this.lostTenPercentBodyWeight\n        && `${val.label}`.match(/malnutrition/i)\n        && `${val.value}`.match(/no/i)) {\n        const action = await infoActionSheet(\n          'Recommendation',\n          `Patient's weight has dropped by ${this.weightLossPercentageNum}% , is this controlled weight loss??`,\n          'Please verify',\n          [\n            { name: 'Confirm weight loss', slot: 'start', color: 'success'},\n            { name: 'Confirm controlled', slot: 'end', color: 'primary'}\n          ]\n        )\n        val.value = action === 'Confirm weight loss' ? 'Yes' : 'No'\n      }\n    },\n    async checkVLReminder() {\n      const vals = await ProgramService.getPatientVLInfo(this.patientID);\n      if (vals.eligibile === true) {\n        const modal = await modalController.create({\n          component: VLReminderModal,\n          backdropDismiss: false,\n          cssClass: \"large-modal\",\n          componentProps: { VLData: vals },\n        });\n        modal.present();\n        const { data } = await modal.onDidDismiss();\n        switch (data) {\n          case \"order\":\n            await this.labOrderFieldContext.launchOrderSelection();\n            break;\n          case \"wait\":\n            await this.waitForVL();\n            break;\n          case \"later\":\n            break;\n          default:\n            break;\n        }\n      }\n    },\n    async waitForVL(milestone: any = null) {\n      const orderService = new ARTLabService(this.patientID, this.providerID);\n      const encounter = await orderService.createEncounter();\n      const observations = await orderService.buildDefferedOrder(milestone);\n      if (!encounter) return toastWarning(\"Unable to create encounter\");\n      await orderService.saveObservationList(observations);\n    },\n    canScreenCxCa() {\n      const age = this.patient.getAge()\n      return this.patient.isFemale()\n        && this.DueForCxCa\n        && this.CxCaEnabled \n        && age >= this.CxCaStartAge \n        && age <= this.CxCaMaxAge\n        && !this.clientHadAHysterectomy\n    },\n    pregnancyEligible() {\n      return this.patient.isChildBearing() && !this.onPermanentFPMethods\n    },\n    showCurrentContraceptionMethods(formData: any) {\n      return (this.pregnancyEligible()\n        && !this.patientHitMenopause \n        && !this.isPregnant(formData))\n        && !this.isANCclient()\n    },\n    showNewContraceptionMethods(formData: any) {\n      return (\n        this.pregnancyEligible() &&\n        !this.patientHitMenopause &&\n        !this.isPregnant(formData) &&\n        !this.isOnTubalLigation(formData)\n        && !this.isANCclient()\n      )\n    },\n    isPregnant(formData: any) {\n      if (formData.pregnant_breastfeeding) {\n        return this.inArray(formData.pregnant_breastfeeding, \n          p => p.label === 'Pregnant' && p.value === 'Yes'\n        )\n      }\n      return this.currentlyPregnant\n    },\n    isOnTubalLigation(formData: any) {\n      return this.inArray(formData.current_fp_methods, d => d.value === \"TUBAL LIGATION\")\n    },\n    async disableFPMethods(listData: Array<Option>, value: Option) {\n      if (value.isChecked && value.label === \"NONE\") {\n        return listData.map((i) => {\n          if (i.label != \"NONE\") {\n            i.isChecked = false;\n            i.disabled = false;\n          }\n          return i;\n        });\n      } else if (value.label != \"NONE\" && value.isChecked) {\n        if (value.label.match(/condom/gi)) infoAlert(\"Combine with other modern methods of family planning\") \n        const noneIndex = findIndex(listData, { label: \"NONE\" });\n        listData[noneIndex].isChecked = false;\n        const vals = this.consultation.familyPlanningMethods(\n          value.label,\n          listData\n        );\n        const currentIndex = findIndex(vals, { label: value.label });\n        vals[currentIndex].isChecked = true;\n        return vals;\n      } else {\n        return listData.map((i) => {\n          i.disabled = false;\n          return i;\n        });\n      }\n    },\n    disablePrescriptions(listData: Array<Option>, value: Option) {\n      if (value.isChecked && value.label === \"NONE OF THE ABOVE\") {\n        return listData.map((i) => {\n          if (i.label != \"NONE OF THE ABOVE\") i.isChecked = false;\n          return i;\n        });\n      } else if (value.label != \"NONE OF THE ABOVE\" && value.isChecked) {\n        const noneIndex = findIndex(listData, { label: \"NONE OF THE ABOVE\" });\n        listData[noneIndex].isChecked = false;\n      }\n      return listData;\n    },\n    buildMedicationOrders(options: Option[]) {\n      if (this.inArray(options, o => o.label === \"NONE OF THE ABOVE\")) {\n        return this.consultation.buildValueCoded('Prescribe drugs', 'No')\n      }\n      const priscribed = this.consultation.buildValueCoded('Prescribe drugs', 'Yes')\n      const medications = options.map( o => this.consultation.buildValueCoded(\n        'Medication orders', o.label\n      ))\n      return [priscribed, ...medications]\n    },\n    declinedFPM(formData: any) {\n      return this.inArray(formData.fp_methods, d => d.value === \"NONE\")\n        && this.inArray(formData.current_fp_methods, d => d.value === \"NONE\")\n    },\n    riskOfUnplannedPregnancy(formData: any) {\n      return formData.reason_for_no_fpm.value === \"At risk of unplanned pregnancy\"\n    },\n    showOtherSideEffects(formData: any) {\n      return this.inArray(formData.side_effects, d => d.label === \"Other\" && d.value === \"Yes\")\n    },\n    hasTBSymptoms(formData: any) {\n      this.presentedTBSymptoms = this.inArray(formData.tb_side_effects, d => d.value === \"Yes\")\n      return this.presentedTBSymptoms\n    },\n    async buildSideEffectObs(data: Option[], attr: 'malawiSideEffectReasonObs' | 'otherSideEffectReasonObs'): Promise<boolean> {\n      const sideEffectReasons  = await this.getSideEffectsReasons(data)\n\n      this[attr] = [] //Clear this incase side effects no longer exist\n  \n      if (sideEffectReasons === undefined) return false\n\n      if (sideEffectReasons != -1) {\n        const drugInducedConcept = ConceptService.getCachedConceptID('Drug induced', true)\n        const isOtherReason = (reason: string) => `${reason}`.match(/other|drug/i) ? true : false\n        this[attr] = sideEffectReasons.map((r: any) => ({\n          'concept_id': drugInducedConcept,\n          'value_coded': ConceptService.getCachedConceptID(r.label, true),\n          'value_text': isOtherReason(r.reason) ? 'Past medication history' : null,\n          'value_drug': !isOtherReason(r.reason) ? r.reason : null //Reason is drug ID number if caused by specific drug\n        }))\n      }\n      return true\n    },\n    async getSideEffectsReasons(sideEffects: Option[]) {\n      const allYes = sideEffects.filter(s => !(`${s.label}`.match(/other/i)) && s.value==='Yes')\n      if (allYes.length > 0) {\n        const modal = await modalController.create({\n          component: SideEffectsModalVue,\n          backdropDismiss: false,\n          cssClass: \"large-modal\",\n          componentProps: { sideEffects: allYes, drugs: this.lastDrugsReceived },\n        });\n        modal.present();\n        const { data } = await modal.onDidDismiss();\n        return data;\n      }\n      return -1\n    },\n    getFPMethods(exclusionList: string[] = [], preChecked: Array<Option>) {\n      const methods = this.consultation.getFamilyPlanningMethods();\n      const filtered = methods.filter(\n        (data: string) => !exclusionList.includes(data)\n      )\n      return filtered.map((method: any) => ({\n        label: method,\n        value: method,\n        isChecked: preChecked.map((i) => i.label).includes(method),\n      }))\n    },\n    getOptions(options: string[], preValues: Array<Option>) {\n      return options.map((data: any) => {\n        const preValue = find(preValues, { label: data });\n        return {\n          label: data,\n          value: preValue ? preValue.value : \"\",\n          other: {\n            values: this.yesNoOptions(),\n          },\n        };\n      });\n    },\n    getContraindications(preValues: Array<Option>) {\n      const contraIndications = ConceptService.getConceptsByCategory(\n        \"contraindication\", true\n      ).map((data) => data.name);\n      return this.getOptions([...contraIndications, \"Other\"], preValues);\n    },\n    getOtherContraindications(preValues: Array<Option>) {\n      const contraIndications = ConceptService.getConceptsByCategory(\n        \"side_effect\", true\n      ).map((data) => data.name);\n      /**\n       * HACK ALERT!!!\n       * Dont want to show Other (Specify) as a last element\n       */\n      const lastElement = contraIndications.pop()\n      return this.getOptions([...contraIndications, \"Other (Specify)\", `${lastElement}`], preValues)\n    },\n    getTBSymptoms(preValues: Array<Option>) {\n      const contraIndications = ConceptService.getConceptsByCategory(\n        \"tb_symptom\", true\n      ).map((data) => data.name)\n      return this.getOptions([...contraIndications], preValues);\n    },\n    getReasonsForNoCxcaOptions() {\n      return ConceptService.getConceptsByCategory(\"reason_for_no_cxca\")\n        .map((c: any) => ({\n          label: c.name,\n          value: c.name,\n          other: {\n            c\n          }\n        }))\n    },\n    runAppendOptionParams(options: Option[], prechecked: Option[]) {\n      const checkedOptions = prechecked.filter(o => o.isChecked).map(o => o.label)\n      return options.map(o => {\n        if (typeof o?.other?.appendOptionParams === 'function') {\n          const appendedOptions = o?.other?.appendOptionParams()\n          if (typeof appendedOptions === 'object')  {\n            const option: Option = {\n              label: o.label,\n              value: o.value,\n              other: o.other\n            }\n            if (appendedOptions.isChecked) {\n              option.isChecked = appendedOptions.isChecked\n              delete appendedOptions.isChecked\n            } else {\n              option.isChecked = checkedOptions.includes(o.label)\n            }\n            return { ...option, ...appendedOptions}\n          }\n        }\n        return o\n      })\n    },\n    /**\n     * Checks formdata and previous observation state if a patient completed 3HP\n     */\n    didCompleted3HP(formData: any) {\n      return !this.completed3HP \n        ? formData.routine_tb_therapy \n        && formData.routine_tb_therapy.value.match(/complete/i) ? true : false\n        : true\n    },\n    patientOnTpt(formData: any) {\n      if (formData.routine_tb_therapy != null) {\n        return /Currently/i.test(formData.routine_tb_therapy.value)\n      }\n      return this.tptStatus.tpt !== null && !this.completed3HP\n    },\n    /**\n     * Checks if 3HP can be auto selected based on FormData and \n     * if  it is enabled in global preferences\n     */\n    tptAutoSelectionMode(formData: any) {\n      return this.autoSelect3HP && !this.didCompleted3HP(formData)\n    },\n    /**\n     * Provides validations for TPT selections and value updates\n     */\n    async on3HPValueUpdate(listData: Option[], curOption: Option, formData: any) {\n      const is3HPorTPT = (i: Option) => i.label.match(/IPT|3HP/i) ? true : false\n\n      //Checks if IPT and 3HP are both selected and returns a boolean\n      const ipt3HPConflict: boolean = (() => {\n        const checkedDrugs = listData.reduce(\n        (checkedDrugs: string[], item: Option) => {\n          if (is3HPorTPT(item) \n            && !(item.label in checkedDrugs) \n            && item.isChecked) {\n            checkedDrugs.push(item.label)\n          }\n          return checkedDrugs\n        }, [])\n        return checkedDrugs.includes('IPT') \n          && (checkedDrugs.includes('3HP (RFP + INH)') \n          || checkedDrugs.includes('INH 300 / RFP 300 (3HP)'))\n      })()\n\n      // check if no tpt is present\n      const noTpTPresent = is3HPorTPT(curOption) \n        && listData.filter(i => is3HPorTPT(i)).map(i => !i.isChecked)\n          .every(Boolean)\n  \n      if (noTpTPresent && this.patientOnTpt(formData)) {\n        const modal = await optionsActionSheet(\n          'Reasons for declining TPT', \n          '',\n          [\n            'Patient declined',\n            'Side-effects (previous or current)',\n            'Stock-out',\n            'Starting TB treatment',\n            'Other'\n          ],\n          [\n            { name : 'Done', slot: 'start', role: 'action'}\n          ]\n        )\n        this.reasonForDecliningTPTObs = this.consultation.buildValueText(\n          'Other reason for not seeking services', modal.selection\n        )\n      } else {\n        this.reasonForDecliningTPTObs = {}\n      }\n\n      if (ipt3HPConflict) {\n        const action = await infoActionSheet(\n          \"IPT / 3HP conflict\",\n          \"IPT and 3HP can NOT be prescribed together\",\n          \"Please pick either one\",\n          [\n            { name: \"Prescribe 3HP\", slot: \"start\", color: \"primary\" },\n            { name: \"Prescribe IPT\", slot: \"end\", color: \"primary\" },\n          ]\n        )\n        return listData.map(i => {\n          if (is3HPorTPT(i)) {\n            i.isChecked =\n              action === 'Prescribe IPT' && i.label === 'IPT' || \n              action ==='Prescribe 3HP' && i.label === 'INH 300 / RFP 300 (3HP)'\n          }\n          return i\n        })\n      }\n      return listData.map(i => {\n        // By default, toggle between variants of 3HP. All of them cant be selected at once\n        if (curOption.label === '3HP (RFP + INH)' \n          && i.label === 'INH 300 / RFP 300 (3HP)'\n          && curOption.isChecked) {\n          i.isChecked = false\n        } else if (curOption.label === 'INH 300 / RFP 300 (3HP)' \n          && i.label === '3HP (RFP + INH)'\n          && curOption.isChecked ) {\n            i.isChecked = false\n        }\n        return i\n      })\n    },\n    medicationOrderOptions(formData: any, prechecked=[] as Option[]): Option[] {\n      const completedTpt = this.didCompleted3HP(formData)\n      const everTakenTpt = this.tptStatus.tpt !== null\n      const autoSelect3HP = this.tptAutoSelectionMode(formData)\n\n      const disableOption = (text: string) => ({\n        disabled: true,\n        isChecked: false,\n        description: {\n          color: \"danger\",\n          show: \"always\",\n          text\n        }\n      })\n\n      return this.runAppendOptionParams([\n        this.toOption('ARVs', {\n          appendOptionParams: () => ({ \n            isChecked: autoSelect3HP && !this.TBSuspected\n          })\n        }),\n        this.toOption('CPT', {\n          appendOptionParams: () => {\n            if (autoSelect3HP && !this.TBSuspected \n              && !this.allergicToSulphur) {\n              return { isChecked : true }\n            }\n            return this.allergicToSulphur \n              ? disableOption('Allergic to CPT')\n              : { disabled: false }\n          }\n        }),\n        this.toOption('3HP (RFP + INH)', {\n          appendOptionParams: () => {\n            if (completedTpt) return disableOption(`Completed TPT treatment`)\n            if (this.tptStatus.tb_treatment) return disableOption(`Completed/on TB treatment`)\n            if (this.TBSuspected) return disableOption('TB Suspect')\n            if (this.currentWeight < 20) return disableOption('Weight below regulation')\n            if (everTakenTpt && this.tptStatus.tpt !== '3HP (RFP + INH)' && !this.tptStatus.completed) {\n              return disableOption(`On ${this.tptStatus.tpt} treatment`)\n            }\n            if (this.tptStatus.tpt === '3HP (RFP + INH)' && !this.tptStatus.completed) return { isChecked: true }\n          }\n        }),\n        this.toOption('INH 300 / RFP 300 (3HP)', {\n          appendOptionParams: () => { \n            if (completedTpt) return disableOption(`Completed TPT treatment`)\n            if (this.tptStatus.tb_treatment) return disableOption(`Completed/on TB treatment`)\n            if (this.TBSuspected) return disableOption('TB Suspect')\n            if (this.currentWeight < 30) return disableOption('Weight below regulation') \n            if (everTakenTpt && this.tptStatus.tpt !== 'INH 300 / RFP 300 (3HP)' && !this.tptStatus.completed) {\n              return disableOption(`On ${this.tptStatus.tpt} treatment`)\n            }\n            if (this.tptStatus.tpt === 'INH 300 / RFP 300 (3HP)' && !this.tptStatus.completed) return { isChecked: true }\n            return { isChecked: autoSelect3HP }\n          }\n        }),\n        this.toOption('IPT', {\n          appendOptionParams: () => {\n            if (completedTpt) return disableOption(`Completed TPT treatment`)\n            if (this.tptStatus.tb_treatment) return disableOption(`Completed/on TB treatment`)\n            if (this.TBSuspected) return disableOption('TB Suspect')\n            if (everTakenTpt && this.tptStatus.tpt !== 'IPT' && !this.tptStatus.completed) {\n              return disableOption(`On ${this.tptStatus.tpt} treatment`)\n            }\n            if (this.tptStatus.tpt === 'IPT' && !this.tptStatus.completed) return { isChecked: true }\n          }\n        }),\n        this.toOption('NONE OF THE ABOVE')\n      ], prechecked)\n    },\n    async getVlLabData() {\n      return OrderService.formatLabs((await Store.get('GET_LAB_ORDERS_WITH_GIVEN_RESULT_STATUS', { patientID: this.patientID })));\n    },\n    isANCclient() {\n      return ProgramService.getSuspendedProgram() === 'ANC'\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"other_patient_prescription\",\n          proxyID: \"prescription\",\n          helpText: \"Medication to prescribe during this visit\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          init: async () => {\n            const isGuardian = (await this.consultation.getClient()) === \"No\";\n            if (isGuardian) {\n              this.isNoneClientPatient = true\n            } else {\n              this.isNoneClientPatient = (await PatientTypeService.isDrugRefillPatient(this.patientID))\n                ? true : false\n            }\n            if (this.isNoneClientPatient) {\n              this.currentWeight = Number((await this.patient.getRecentWeight()))\n              this.autoSelect3HP = await Store.get('ART_AUTO_3HP_SELECTION')\n              this.tptStatus = await this.consultation.getTptTreatmentStatus()\n              this.completed3HP = this.tptStatus.tpt !== null && this.tptStatus.completed\n            }\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          computedValue: (v: Option[]) => ({ \n            tag: 'consultation',\n            obs: this.buildMedicationOrders(v)\n          }),\n          onValueUpdate: (listData: Array<Option>, value: Option, f: any) => {          \n            const list = this.disablePrescriptions(listData, value);\n            return this.on3HPValueUpdate(list, value, f)\n          },\n          options: (formData: any, c: Array<Option>, cd: any, l: any) => {\n            return !isEmpty(l) ? l : this.medicationOrderOptions(formData)\n          },\n          condition: () => this.isNoneClientPatient,\n          exitsForm: () => true\n        },\n        /**\n        * DRUG TRANSFER IN INITIATION \n        */\n        ...generateDateFields({\n          id: 'date_last_received_arvs',\n          helpText: 'Last ARV Dispensation',\n          required: true,\n          init: async () => {\n            this.wasTransferredIn = (await this.getTransferInStatus()) || false\n            this.dateStartedArt = await this.getDateStartedArt()\n            return true\n          },\n          condition: () => this.wasTransferredIn,\n          minDate: () => this.dateStartedArt,\n          maxDate: () => this.consultation.getDate(),\n          computeValue: (date: string) => {\n            this.prescription.setDate(date)\n            return {\n              tag: 'consultation',\n              date,\n              obs: this.consultation.buildValueDate(\n                'Date drug received from previous facility', date\n              )\n            }\n          },\n          estimation: {\n            allowUnknown: false\n          }\n        }, this.consultation.getDate()),\n        {\n          id: 'previous_arvs_received',\n          helpText: 'Last ARV drugs dispensed',\n          type: FieldType.TT_MULTIPLE_SELECT,\n          computedValue: (v: Option[]) => v.map(d => d.other),\n          validation: (v: Option[]) => Validation.required(v),\n          options: async () => {\n            if (!isEmpty(this.customRegimens)) return this.customRegimens\n            const p = new PrescriptionService(this.patientID, this.providerID)\n            this.customRegimens = (await p.getARVs())\n              .map((drug: any ) => ({\n                label: drug.name,\n                value: drug.drug_id,\n                other: { ...drug }\n              })) as Option[]\n            return this.customRegimens\n          },\n          config: {\n            showKeyboard: true\n          },\n          condition: () => this.wasTransferredIn\n        },\n        {\n          id: 'drug_interval',\n          helpText: 'Duration period for last received ARVs',\n          type: FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n          condition: () => this.wasTransferredIn,\n          validation: (val: Option) => Validation.required(val),\n          computedValue: (d: Option) => d.other.nextAppointment,\n          options: () => {\n            const intervals = [\n              { label: '2 weeks', value: 14 },\n              { label: '1 month', value: 28 },\n              { label: '2 months', value: 56 },\n              { label: '3 months', value: 84 },\n              { label: '4 months', value: 112 },\n              { label: '5 months', value: 140 },\n              { label: '6 months', value: 168 },\n              { label: '7 months', value: 196 },\n              { label: '8 months', value: 224 },\n              { label: '9 months', value: 252 },\n              { label: '10 months', value: 280 },\n              { label: '11 months', value: 308 },                        \n              { label: '12 months', value: 336 }\n            ]\n            return intervals.map(({label, value}: Option) => {\n              this.prescription.setNextVisitInterval(value)\n              const nextAppointment = this.prescription.calculateDateFromInterval()\n              return {\n                label,\n                value,\n                other: {\n                  label: 'Medication run-out date:',\n                  value: HisDate.toStandardHisDisplayFormat(nextAppointment),\n                  nextAppointment,\n                  other: {\n                    label: \"\",\n                    value: []\n                  }\n                }\n              }\n            })\n          }\n        },\n        {\n          id: 'arv_quantities',\n          helpText: 'Amount of drugs dispensed (From last ART Facility)',\n          type: FieldType.TT_DRUG_TRANSFER_IN,\n          validation: (v: Option[]) => this.validateSeries([\n            () => Validation.required(v),\n            () => v.map((i: Option) => i.value === '' || i?.other?.pillsBrought === '')\n              .some(Boolean) ? ['Some Drugs are missing values'] : null\n          ]),\n          computedValue: (v: Option[], f: any, c: any) => {\n            return {\n              tag: 'consultation',\n              obs:  v.map(async (d: any) => {\n                const drugID: number = d?.other?.drug?.drug_id || 0\n                return { \n                  ...(await this.consultation.buildObs(\n                    'Drug received from previous facility', {\n                      'value_drug': drugID,\n                      'value_datetime': c?.drug_interval || null,\n                      'value_numeric': d?.value || 0\n                      }\n                  )),\n                  child: (await this.consultation.buildObs(\n                    'Number of tablets brought to clinic', {\n                      'value_drug': drugID,\n                      'value_numeric': d?.other?.pillsBrought || -1,\n                      'value_datetime': c?.date_last_received_arvs?.date || null\n                   }\n                ))}\n              })\n            }\n          },\n          options: (_: any, c: any, listData: Option) => {\n            return c.previous_arvs_received\n              .map((d: any) => {\n                const drugName = d['alternative_drug_name'] || d['drug_name'] || d['name']\n                const prevValue = find(listData, { label: drugName })\n                let qty = ''\n                let rmndr = ''\n                if (prevValue) {\n                  qty = prevValue?.value\n                  rmndr = prevValue?.other?.pillsBrought\n                }\n                return {\n                  label: drugName,\n                  value: qty,\n                  other: {\n                    drug: d,\n                    pillsBrought: rmndr\n                  }\n                }\n              })\n          },\n          condition: () => this.wasTransferredIn\n        },\n        /**\n        * END OF DRUG TRANSFER IN\n        */\n        {\n          id: \"patient_lab_orders\",\n          helpText: \"Lab orders\",\n          type: FieldType.TT_LAB_ORDERS,\n          init: async () => {\n            this.labOrders = await this.getVlLabData()\n            return true\n          },\n          unload: async () => {\n            await this.checkVLReminder()\n            // Check if released results were given to the patient\n            const noGivenResults = this.labOrders.filter((r: any) => r.result_given === 'No')\n            if (noGivenResults.length && (await alertConfirmation('Result(s) Given to Client?'))) {\n              const enc = new AppEncounterService(this.patientID, -1, this.providerID)\n              // flatten array and save observations for results given\n              const obs = noGivenResults.reduce((all: any, result: any) => [\n                ...all, ...(result.resultIds.map(async (resultID: number) =>{\n                  enc.encounterID = result.encounter_id\n                  return enc.saveObs((await enc.buildObs(\"Result Given to Client\", {\n                      \"value_coded\": \"Yes\",\n                      \"obs_group_id\": resultID\n                    })))\n                })) \n              ], [])\n              await Promise.all(obs)\n            }\n            // refresh data\n            this.labOrders = await this.getVlLabData()\n          },\n          onload: (fieldContext: any) =>  this.labOrderFieldContext = fieldContext,\n          options: () => {\n            return [\n              {\n                label: \"Lab orders\",\n                value: \"order trail\",\n                other: {\n                  values: this.labOrders\n                }\n              }\n            ]\n          },\n          config: {\n            printOrder: (orderID: number) => {\n              return new PatientPrintoutService(this.patientID).printLabOrderLbl(orderID)\n            },\n            hiddenFooterBtns: [\"Clear\"],\n            footerBtns: [\n              {\n                name: \"Order\",\n                size: \"large\",\n                slot: \"end\",\n                color: \"primary\",\n                visible: true,\n                onClick: async () => {\n                  if (!isEmpty(this.labOrderFieldContext)) {\n                    await this.labOrderFieldContext.launchOrderSelection();\n                  }\n                }\n              }\n            ]\n          },\n        },\n        {\n          id: \"pregnant_breastfeeding\",\n          helpText: `Patient Pregnant or breastfeeding?`,\n          init: async () => {\n            if (this.patient.isFemale()) {\n              if (this.patient.isChildBearing()) {\n                this.hasPregnancyObsToday = await this.patient.hasPregnancyObsToday()\n                this.currentlyPregnant = await this.patient.isPregnant()\n              }\n              this.onPermanentFPMethods = await this.consultation.getTLObs();\n            }\n            return true\n          },\n          condition: () => !this.hasPregnancyObsToday && this.pregnancyEligible(),\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data),\n            ]),\n          computedValue: (v: Option[]) => {\n            let obs = []\n            if (this.isANCclient()) obs.push(\n              this.consultation.buildValueCoded('Is patient pregnant', 'Yes')\n            )\n            obs = obs.concat(v.map(d => this.consultation.buildValueCoded(d.other.concept, d.value)))\n            return {\n              obs,\n              tag: 'consultation'\n            }\n          },\n          options: (formData: any) => {\n            const options = []\n            // Because ANC clients are always Pregnant!\n            if (!this.isANCclient()) options.push({\n              label: \"Pregnant\",\n              value: \"\",\n              other: {\n                values: this.yesNoOptions(),\n                concept: \"Is patient pregnant\",\n              }\n            })\n\n            options.push({\n              label: \"Breastfeeding\",\n              value: \"\",\n              other: {\n                values: this.yesNoOptions(),\n                concept: \"Is patient breast feeding\",\n              }\n            })\n\n            return formData.pregnant_breastfeeding || options\n          }\n        },\n        {\n          id: \"patient_weight_chart\",\n          helpText: \"Patient weight chart\",\n          type: FieldType.TT_WEIGHT_CHART,\n          init: async () => {\n            this.weightTrail = await this.patient.getWeightHistory()\n            this.weightLossPercentageNum = this.patient.getWeightLossPercentageFromTrail(this.weightTrail)\n            this.lostTenPercentBodyWeight = this.weightLossPercentageNum >= 10\n            return true\n          },\n          options: async () => {\n            const bmi = await this.patient.getBMI();\n            const values = this.weightTrail;\n            return [\n              {\n                label: \"Weight for patient\",\n                value: \"Weight trail\",\n                other: {\n                  bmi,\n                  values: values.map((d: any) => ({\n                    x: HisDate.toStandardHisDisplayFormat(d.date),\n                    y: d.weight,\n                  })),\n                  age: this.patient.getAge(),\n                },\n              },\n            ];\n          },\n          config: {\n            hiddenFooterBtns: [\"Clear\"],\n          },\n        },\n        {\n          id: \"has_fp_methods\",\n          helpText: \"\",\n          type: FieldType.TT_TEXT_BANNER,\n          condition: () => this.onPermanentFPMethods,\n          options: () => this.mapStrToOptions([\n            \"Patient is on Tubal ligation method\"\n          ])\n        },\n        {\n          id: \"current_fp_methods\",\n          helpText: \"What method are you currently on?\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          init: async () => {\n            if (this.patient.isFemale()) {\n              this.patientHitMenopause = await this.consultation.patientHitMenopause()\n            }\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          onValueUpdate: (listData: Array<Option>, value: Option) => {\n            return this.disableFPMethods(listData, value);\n          },\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(d => this.consultation.buildValueCoded('Family planning method', d.value))\n          }),\n          condition: (formData: any) => this.showCurrentContraceptionMethods(formData),\n          options: (_: any, checked: Array<Option>) =>this.getFPMethods([], checked),\n        },\n        {\n          id: \"fp_methods\",\n          helpText: \"What method are you providing today?\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          condition: (formData: any) => this.showNewContraceptionMethods(formData),\n          validation: (data: any) => Validation.required(data),\n          onValueUpdate: (listData: Array<Option>, value: Option) => {\n            return this.disableFPMethods(listData, value);\n          },\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map((d: Option) => this.consultation.buildValueCoded('Family planning, action to take', d.value))\n          }),\n          options: (_: any, checked: Array<Option>) => this.getFPMethods([], checked)\n        },\n        {\n          id: \"reason_for_no_fpm\",\n          helpText: \"Main reason for not using family planning methods\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => this.declinedFPM(formData),\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueText(\"Why does the woman not use birth control\", v.value) \n          }),\n          options: () => this.mapStrToOptions([\n            \"Not Sexually active\",\n            \"Patient want to get pregnant\",\n            \"Not needed for medical reasons\",\n            \"At risk of unplanned pregnancy\",\n            \"Menopause\"\n          ])\n        },\n        {\n          id: \"specific_reason_for_no_fpm\",\n          helpText: \"Specific reason for not using family planning methods\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueText(\"Reason for not using contraceptives\", v.value)\n          }),\n          condition: (formData: any) => this.riskOfUnplannedPregnancy(formData),\n          options: () => this.mapStrToOptions([\n            \"Following wishes of spouse\",\n            \"Religious reasons\",\n            \"Afraid of side effects\",\n            \"Never though about it\",\n            \"Indifferent (does not mind getting pregnant)\"\n          ])\n        },\n        {\n          id: \"offer_contraceptives\",\n          helpText: \"Offer contraceptives\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => this.riskOfUnplannedPregnancy(formData),\n          computedValue: (v: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Family planning, action to take\", v.value)\n          }),\n          options: () => [\n            { label: \"Accepted\", value: \"Yes\" },\n            { label: \"Declined\", value: \"No\" },\n            { label: \"Discuss with spouse\", value: \"Discuss with spouse\" },\n          ]\n        },\n        {\n          id: \"offered_intervention\",\n          helpText: \"Offered intervention\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => formData.offer_contraceptives.value === \"Accepted\",\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(d => this.consultation.buildValueCoded(d.label, d.value))\n          }),\n          options: (_: any, checked: Array<Option>) => this.getFPMethods([\"NONE\"], checked),\n        },\n        {\n          id: \"offer_cxca\",\n          helpText: \"Refer client for CxCa screening\",\n          type: FieldType.TT_SELECT,\n          init: async () => {\n            if (this.patient.isFemale()) {\n              this.CxCaEnabled = await ART_PROP.cervicalCancerScreeningEnabled()\n              if (this.CxCaEnabled) {\n                const { start, end } = await ART_PROP.cervicalCancerScreeningAgeBounds()\n                this.CxCaMaxAge = end\n                this.CxCaStartAge = start\n                this.DueForCxCa = await this.consultation.clientDueForCxCa()\n                this.clientHadAHysterectomy =  await this.consultation.clientHasHadAHysterectomy();\n              }\n            }\n            return true\n          },\n          validation: (v: Option) => Validation.required(v),\n          condition: (f: any) => this.canScreenCxCa() && !this.isPregnant(f),\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded('Offer CxCa', v.value)\n          }),\n          options: () => this.yesNoOptions()\n        },\n        {\n          id: \"reason_for_no_cxca\",\n          helpText: \"Reason for NOT offering CxCa\",\n          type: FieldType.TT_SELECT,\n          validation: (v: Option) => Validation.required(v),\n          condition: (f: any) => f.offer_cxca.value === 'No',\n          computedValue: (v: Option) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Reason for NOT offering CxCa\", v.value)\n          }),\n          options: () => this.getReasonsForNoCxcaOptions(),\n        },\n        ...generateDateFields({\n          id: 'previous_cxca_test_date',\n          helpText: 'Previous CxCa test',\n          required: true,\n          minDate: () => this.patient.getBirthdate(),\n          maxDate: () => ConsultationService.getSessionDate(),\n          condition: (f: any) => f.reason_for_no_cxca.value === 'Not due for screening',\n          computeValue: (date: string, isEstimate: boolean) => {\n            if (isEstimate) {\n              return {\n                tag: 'consultation',\n                obs: this.consultation.buildValueDateEstimated('CxCa test date', date)\n              }\n            } else {\n              return {\n                tag: 'consultation',\n                obs: this.consultation.buildValueDate('CxCa test date', date) \n              }\n            }\n          },\n          estimation: {\n            allowUnknown: true,\n            estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n          }\n        }),\n        {\n          id: 'previous_side_effects',\n          helpText: 'Side effects / Contraindications history',\n          type: FieldType.TT_DATA_TABLE,\n          init: async () => {\n            this.sideEffectsHistory = await this.consultation.getDrugSideEffects()\n            return true\n          },\n          config: {\n            columns: () => [\n              [\n                table.thTxt('Date'),\n                table.thTxt('Condition'),\n                table.thTxt('Drug induced'),\n                table.thTxt('Drug')\n              ]\n            ],\n            rows: () => {\n              return Object.keys(this.sideEffectsHistory)\n              .map((k: string) =>\n                Object.values(this.sideEffectsHistory[k])\n                .filter((d: any) => !isEmpty(d.name))\n                .map((d: any) => [\n                  table.tdDate(k),\n                  table.td(d.name),\n                  table.td(d.drug_induced ? 'Yes' : 'No'),\n                  table.td(d.drug)\n              ]))\n              .reduce((accum, cur) => accum.concat(cur), [])\n            }\n          }\n        },\n        {\n          id: \"side_effects\",\n          helpText: \"Contraindications / Side effects (select either 'Yes' or 'No')\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          init: async () => {\n            this.lastDrugsReceived = await this.consultation.getPreviousDrugs();\n            return true\n          },\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data),\n            ]),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.map(async (d) => ({\n              ...(await this.consultation.buildValueCoded('Malawi ART side effects', d.label)),\n              child: (await this.consultation.buildValueCoded(d.label, d.value)) \n            }))\n          }),\n          beforeNext: (data: Option[]) => this.buildSideEffectObs(data, 'malawiSideEffectReasonObs'),\n          options: (_: any, checked: Array<Option>) => this.getContraindications(checked)\n        },\n        {\n          id: \"other_side_effects\",\n          helpText: \"Other Contraindications / Side effects (select either 'Yes' or 'No')\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          onValue: async (val: any) => {\n            await this.checkIfWeightLossIsControlled(val)\n            return true\n          },\n          condition: (formData: any) => this.showOtherSideEffects(formData),\n          onConditionFalse: () => this.otherSideEffectReasonObs = [],\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data),\n            ]),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation',\n            obs: v.filter(d => d.label != 'Other (Specify)')\n              .map(async (d) => ({\n              ...(await this.consultation.buildValueCoded('Other side effect', d.label)),\n              child: (await this.consultation.buildValueCoded(d.label, d.value))\n            }))\n          }),\n          beforeNext: (data: Option[]) => this.buildSideEffectObs(data, 'otherSideEffectReasonObs'),\n          options: (_: any, checked: Array<Option>) => this.getOtherContraindications(checked),\n        },\n        {\n          id: 'other_side_effect_specify',\n          helpText: \"Other Contraindications / Side effects (specify)\",\n          type: FieldType.TT_NOTE,\n          computedValue: async (v: Option) => ({\n            tag: 'consultation',\n            obs: {\n              ...(await this.consultation.buildValueCoded('Other side effect', 'Other (Specify)')),\n              child: (await this.consultation.buildValueText('Other (Specify)', v.value ))\n            }\n          }),\n          condition: (f: any) => this.inArray(\n            f.other_side_effects, d => d.label === \"Other (Specify)\" && d.value === 'Yes'\n          ),\n          validation: (v: Option) => Validation.required(v)\n        },\n        {\n          id: \"on_tb_treatment\",\n          helpText: \"On TB Treatment?\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          computedValue: (data: any) => {\n            this.TBSuspected = data.value === \"Yes\"\n            const obs = [\n              this.consultation.buildValueCoded(\"TB treatment\", data.value)\n            ]\n            if (this.TBSuspected) obs.push(this.consultation.buildValueCoded(\"TB Status\", \"Confirmed TB on treatment\"))\n            return ({ tag: 'consultation', obs })\n          },\n          options: () => this.yesNoOptions()\n        },\n        {\n          id: \"tb_side_effects\",\n          helpText: \"TB Associated symptoms\",\n          type: FieldType.TT_MULTIPLE_YES_NO,\n          onValue: async (val: any) => {\n            await this.checkIfWeightLossIsControlled(val)\n            return true\n          },\n          validation: (data: any) =>\n            this.validateSeries([\n              () => Validation.required(data),\n              () => Validation.anyEmpty(data)\n          ]), \n          condition: (formData: any) => formData.on_tb_treatment.value.match(/no/i),\n          options: (_: any, checked: Array<Option>) => this.getTBSymptoms(checked),\n          computedValue: (vals: Option[]) => {\n            this.presentedTBSymptoms = this.inArray(vals, d => d.value === \"Yes\")\n            return {\n              tag: 'consultation',\n              obs: vals.map(async (data: Option) => ({\n                ...(await this.consultation.buildValueCoded(\"Routine TB Screening\", data.label)),\n                child: (await this.consultation.buildValueCoded(data.label, data.value))\n              }))\n            } \n          }\n        },\n        {\n          id: \"tb_status\",\n          helpText: \"TB Status\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          condition: (formData: any) => this.hasTBSymptoms(formData),\n          onConditionFalse: () => this.TBSuspected = false,\n          defaultValue: () => 'TB Suspected',\n          computedValue: (data: any) => {\n            this.TBSuspected = data.value === \"TB Suspected\"\n            return {\n              tag: 'consultation',\n              obs: this.consultation.buildValueCoded(\"TB Status\", data.value)\n            }\n          },\n          beforeNext: async (data: Option) => {\n            if (data.value === \"TB Suspected\") {\n              const action = await infoActionSheet(\n                \"Lab Order\",\n                \"The patient is a TB suspect. Do you want to take lab orders?\",\n                \"\",\n                [\n                  { name: \"Order now\", slot: \"start\", color: \"success\" },\n                  { name: \"NOT now\", slot: \"end\", color: \"danger\" },\n                ]\n              )\n              if (action === 'Order now') this.labOrderFieldContext.launchOrderSelection([\n                'TB Microscopic Exam', \n                'GeneXpert', \n                'Culture & Sensitivity',\n                'TB Tests'\n              ])\n            }\n            return true\n          },\n          options: () => this.mapStrToOptions([\n            \"TB NOT suspected\",\n            \"TB Suspected\",\n            \"Confirmed TB Not on treatment\",\n          ])\n        },\n        {\n          id: \"routine_tb_therapy\",\n          helpText: \"TB preventive therapy (TPT) history\",\n          type: FieldType.TT_SELECT,\n          init: async () => {\n            this.hasTbHistoryObs = await this.consultation.hasTreatmentHistoryObs()\n            return true\n          },\n          validation: (data: any) => Validation.required(data),\n          condition: () => !this.hasTbHistoryObs,\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueText(\"Previous TB treatment history\", data.value)\n          }),\n          options: (f: any) => {\n            let options: string[] = []\n            if(/no/i.test(f.on_tb_treatment.value)) {\n              options = [\n                \"Currently on IPT\",\n                \"Currently on 3HP (RFP + INH)\",\n                \"Currently on INH 300 / RFP 300 (3HP)\"\n              ]\n            }\n            options = options.concat([\n              \"Complete course of 3HP in the past (3 months RFP+INH)\",\n              \"Complete course of IPT in the past (min. 6 months of INH)\",\n              \"Aborted course of 3HP (RFP + INH) in the past\",\n              \"Aborted course of INH 300 / RFP 300 (3HP) in the past\",\n              \"Aborted course of IPT in the past\",\n              \"Never taken IPT or 3HP\"\n            ])\n            return this.mapStrToOptions(options)\n          }\n        },\n        ...generateDateFields({\n          id: 'date_started_tpt',\n          helpText: 'Started TPT Treatment',\n          required: true,\n          minDate: () => this.patient.getBirthdate(),\n          maxDate: () => ConsultationService.getSessionDate(),\n          condition: (f: any) => f.routine_tb_therapy.value.match(/currently/i),\n          computeValue: (date: string) => date,\n          estimation: {\n            allowUnknown: true,\n            estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n          }\n        }),\n        {\n          id: \"tpt_drugs_received\",\n          helpText: \"TPT Drugs Received\",\n          required: true,\n          condition: (f: any) => f.routine_tb_therapy.value.match(/currently/i),\n          type: FieldType.TT_ADHERENCE_INPUT,\n          options: (f: any) => this.getTptDrugs(f),\n          computedValue: (drugs: Option[], f: any, c: any) => {\n            return {\n              tag: 'consultation',\n              obs:  drugs.map(async (drug: any) => this.consultation.buildObs(\n                'TPT Drugs Received', \n                {\n                  'value_drug': drug?.other?.drug_id || 0,\n                  'value_datetime': c?.date_started_tpt || null,\n                  'value_numeric': drug?.value || 0\n                }\n              ))\n            }\n          },\n          config: {\n            titles: {\n              label: 'Drug name',\n              value: 'Tablets received'\n            }\n          }\n        },\n        {\n          id: 'tpt_tranfer_from',\n          helpText: 'Facility client is transferring in from',\n          type: FieldType.TT_SELECT,\n          computedValue: ({label}: Option) => ({\n            tag:'consultation',\n            obs: this.consultation.buildValueText(\n              'Location TPT last received', label\n            )\n          }),\n          validation: (val: any) => Validation.required(val),\n          condition: (f: any) => f.routine_tb_therapy.value.match(/currently/i),\n          options: (_: any, filter='') => getFacilities(filter),\n          config: {\n            showKeyboard: true,\n            isFilterDataViaApi: true\n          }\n        },\n        {\n          id: \"allergic_to_sulphur\",\n          helpText: \"Allergic to Cotrimoxazole\",\n          type: FieldType.TT_SELECT,\n          validation: (data: any) => Validation.required(data),\n          computedValue: (data: any) => {\n            this.allergicToSulphur = data.value.match(/unknown/i) \n              ? null \n              : data.value.match(/yes/i) \n              ? true \n              : false  \n            return {\n              tag: 'consultation',\n              obs: () => {\n                return this.consultation.buildValueCoded(\"Allergic to sulphur\", \n                  this.allergicToSulphur === null \n                  ? data.value \n                  : this.allergicToSulphur \n                  ? 'Yes' \n                  : 'No')\n              }\n            }\n          },\n          options: () => this.yesNoUnknownOptions()\n        },\n        ...this.getAdherenceFields(true),\n        {\n          id: \"refer_to_clinician\",\n          helpText: \"Refer to clinician\",\n          type: FieldType.TT_SELECT,\n          condition: () => UserService.isNurse(),\n          validation: (data: any) => Validation.required(data),\n          computedValue: (data: any) => ({\n            tag: 'consultation',\n            obs: this.consultation.buildValueCoded(\"Refer to clinician\", data.value)\n          }),\n          options: () => this.yesNoOptions(),\n        },\n        {\n          id: \"medication_to_prescribe\",\n          proxyID: \"prescription\",\n          helpText: \"Medication to prescribe during this visit\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          init: async () => {\n            if (!this.isNoneClientPatient) {\n              this.currentWeight = Number((await this.patient.getRecentWeight()))\n              this.autoSelect3HP = await Store.get('ART_AUTO_3HP_SELECTION')\n              this.tptStatus = await this.consultation.getTptTreatmentStatus()\n              this.completed3HP = this.tptStatus.tpt !== null && this.tptStatus.completed\n            }\n            return true\n          },\n          condition: (f: any) => !f.refer_to_clinician || `${f.refer_to_clinician.value}`.match(/no/i),\n          validation: (data: Option) => Validation.required(data),\n          computedValue: (v: Option[]) => ({\n            tag: 'consultation', \n            obs: this.buildMedicationOrders(v)\n          }),\n          onValueUpdate: (listData: Array<Option>, value: Option, formData: any) => {\n            const list =  this.disablePrescriptions(listData, value)\n            return this.on3HPValueUpdate(list, value, formData)\n          },\n          options: (formData: any, c: Array<Option>, cd: any, currentOptions: any) => {\n            return this.medicationOrderOptions(formData, currentOptions)\n          },\n          config: {\n            footerBtns: [\n              {\n                name: \"Update allergic to CPT\",\n                onClickComponentEvents: {\n                  refreshOptions: (btnEvent: FooterBtnEvent, options: Option[], formData: any): Option[] => {\n                    this.allergicToSulphur = btnEvent.btnOutput === 'Allergic'\n                    return this.medicationOrderOptions(formData, options)\n                  }\n                },\n                onClick: () => {\n                  return infoActionSheet(\n                    \"Allergic to Cotrimoxazole update\",\n                    `Is the patient allergic to cotrimoxazole.`,\n                    \"\",\n                    [\n                      { name: \"Allergic\", slot: \"start\", color: \"success\" },\n                      { name: \"NOT Allergic\", slot: \"end\" },\n                    ]\n                  )\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./Consultation.vue?vue&type=template&id=78a0538f&ts=true\"\nimport script from \"./Consultation.vue?vue&type=script&lang=ts\"\nexport * from \"./Consultation.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/mary/HIS-Core/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Service } from \"./service\";\n\nexport class RegimenService extends Service {\n    constructor() {\n        super()\n    } \n\n    static getAllArvRegimens() {\n        return this.getJson(`programs/${this.getProgramID()}/all_arv_regimens`)\n    }\n\n    static getRegimens(patientId: number) {\n        return this.getJson(`programs/${this.getProgramID()}/regimens`, {'patient_id': patientId})\n    }\n\n    static getRegimensByWeight(weight: number, onTbTreatment = false) {\n        return this.getJson(`programs/${this.getProgramID()}/regimens`, {\n            weight,\n            'tb_dosage': onTbTreatment,\n        })\n    }\n\n    static getCustomIngridients() {\n        return this.getJson(`programs/${this.getProgramID()}/custom_regimen_ingredients`)\n    }\n\n    static getCurrentRegimen(patientId: number, date=this.getSessionDate()) {\n        return this.getJson(`programs/${this.getProgramID()}/${patientId}`, {date})   \n    }\n\n    static getRegimenExtras(name: string, weight: number) {\n        return this.getJson(`programs/${this.getProgramID()}/regimen_extras`, {name, weight})\n    }\n}","import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./VLReminderModal.vue?vue&type=style&index=0&id=10a26cd2&scoped=true&lang=css\"","import { DrugInterface } from \"@/interfaces/Drug\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\nimport { Observation } from \"@/interfaces/observation\";\nimport HisDate from \"@/utils/Date\"\nimport { RegimenService } from \"@/services/regimen_service\";\nimport { isEmpty } from \"lodash\"\nimport { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport enum AdverseEffectsCategories {\n    CONTRAINDICATION = \"contraindication\",\n    SIDE_EFFECT = \"side_effect\"\n}\n\nexport class PrescriptionService extends AppEncounterService {\n    nextVisitInterval: number;\n    fastTrack: boolean;\n    regimenExtras: Array<Record<string, any>>;\n    hangingPills: Array<Record<string, any>>;\n    fastTrackMedications: Array<Record<string, any>>;\n    medicationOrders: Array<number>;\n    treatmentState: string;\n    contraindications: Record<string, any>;\n    sideEffects: Record<string, any>;\n    tptPrescriptionCount: number;\n    lastSideEffectDate: string;\n\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 25, providerID) //TODO: Use encounter type reference name\n        this.nextVisitInterval = 0\n        this.fastTrack = false\n        this.regimenExtras = []\n        this.fastTrackMedications = []\n        this.hangingPills = []\n        this.medicationOrders = []\n        this.treatmentState = ''\n        this.contraindications = {}\n        this.sideEffects = {}\n        this.tptPrescriptionCount = 0\n        this.lastSideEffectDate = ''\n    }\n\n    setNextVisitInterval(nextVisitInterval: number) {\n        this.nextVisitInterval = nextVisitInterval\n    }\n\n    getHangingPills() {\n        return this.hangingPills\n    }\n\n    getMedicationOrders() {\n        return this.medicationOrders.map((i: number) => {\n            return AppEncounterService.getCachedConceptName(i)\n        })\n    }\n\n    getTptPrescriptionCount() {\n        return this.tptPrescriptionCount\n    }\n\n    getLastSideEffectDate() {\n        return this.lastSideEffectDate\n    }\n\n    getContraindications() { return this.contraindications }\n\n    getSideEffects() { return this.sideEffects }\n\n    getRegimenExtras() { return this.regimenExtras }\n\n    getPatientRegimens() { return RegimenService.getRegimens(this.patientID) }\n\n    getARVs() {\n        return RegimenService.getJson('arv_drugs')\n    }\n\n    getCustomIngridients() { return RegimenService.getCustomIngridients() }\n\n    getFastTrackMedications() { return this.fastTrackMedications }\n\n    getTreatmentState() { return this.treatmentState }\n\n    isFastTrack() { return this.fastTrack }\n\n    medicationOrdersAvailable() { return !isEmpty(this.medicationOrders) }\n\n    shouldPrescribeArvs() { \n        const arvs = AppEncounterService.getCachedConceptID(\"Antiretroviral drugs\")\n        return this.medicationOrders.includes(arvs)\n    }\n\n    shouldPrescribeExtras() {\n        const extras = AppEncounterService.getConceptsByCategory('art_extra_medication_order')\n        const extrasAvailable = extras.map((i: any) => this.medicationOrders.includes(i.concept_id))\n        return extrasAvailable.some(Boolean)\n    }\n\n    getRegimenStarterpack(regimenCode: number, patientWeight: number) {\n        const params = { weight: patientWeight, regimen: regimenCode }\n\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimen_starter_packs`,\n            params\n        )\n    }\n\n    async getLvpDrugsByType(type: string, regimen: number) {\n        return AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/regimens/${regimen}`,\n            {\n                'patient_id': this.patientID,\n                'lpv_drug_type': type\n            }\n        )\n    }\n\n    async loadContraindications() {\n        const contraindication = await AppEncounterService.getConceptID('Contraindications')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': contraindication, 'person_id': this.patientID \n        })\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.contraindications[date]) this.contraindications[date] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.contraindications[date].push(concept)\n        })\n    }\n\n    async loadDrugInduced() {\n        const drugInduced = await AppEncounterService.getConceptID('Drug induced')\n        const obs = await AppEncounterService.getObs({\n            'concept_id': drugInduced, 'person_id': this.patientID \n        })\n\n        if (!obs) return\n\n        obs.forEach((o: any) => {\n            const date = HisDate.toStandardHisFormat(o.obs_datetime)\n\n            if (!this.lastSideEffectDate) this.lastSideEffectDate = date\n\n            if (!o.value_drug || !o.value_coded) return\n\n            if (!this.sideEffects[date]) this.sideEffects[date] = {}\n\n            if (!this.sideEffects[date][o.value_drug]) this.sideEffects[date][o.value_drug] = []\n\n            const concept = AppEncounterService.getCachedConceptName(o.value_coded)\n\n            this.sideEffects[date][o.value_drug].push(concept)\n        })\n    }\n\n    async loadTptPrescriptionCount() {\n        const res = await AppEncounterService.getJson(\n            `tpt_prescription_count`, {\n                'patient_id': this.patientID,\n                'date': this.date\n            }\n        )\n\n        if (res) {\n            const count = res.count + 1\n            this.tptPrescriptionCount = count > 3 ? 3 : count\n        } \n    }\n\n    async loadFastTrackStatus() {\n        const isFastTrack = await AppEncounterService.getFirstValueCoded(this.patientID, 'Fast track')\n        const yes = await AppEncounterService.getConceptID('yes')\n\n        if (isFastTrack) this.fastTrack = isFastTrack === yes\n    }\n    \n    async loadRegimenExtras(date=this.date) {\n        const meds = await RegimenService.getJson(\n            `programs/${RegimenService.getProgramID()}/patients/${this.patientID}/dosages`,\n            {date}\n        )\n        if (meds) this.regimenExtras = Object.values(meds)\n    }\n\n    async loadMedicationOrders() {\n        const medicationOrders = await AppEncounterService.getConceptID(\"Medication orders\")\n        const orders = await AppEncounterService.getObs({\n            'concept_id': medicationOrders,\n            'date': this.date,\n            'person_id': this.patientID,\n            'page_size': 5\n        })\n        this.medicationOrders = orders.map((i: Observation) => i.value_coded)\n    }\n\n    async loadHangingPills() {\n        const pills = await AppEncounterService.getAll(this.patientID, 'Pills brought')\n        if (pills) {\n            this.hangingPills = pills.filter((o: any) => o.value_numeric >= 1 && o.order)\n                                    .map((o: any) => o.order.drug_order.drug_inventory_id)\n        }\n    }\n\n    async loadFastTrackMedications() {\n        const drugs = await DrugOrderService.getLastDrugsReceived(this.patientID)\n        const withDosages = drugs.map(async(data: any) => {\n            const { drug } = data\n            const dosage = await DrugOrderService.getDrugDosages(this.patientID, drug.drug_id)\n            return {\n                'drug_id': drug.drug_id,\n                'drug_name': drug.name,\n                'units': drug.units,\n                'am': dosage.am,\n                'noon': dosage.noon,\n                'pm': dosage.pm,\n                'frequency': data.frequency\n            }\n        })\n        this.fastTrackMedications = await Promise.all(withDosages)\n    }\n\n    async loadTreatmentState() {\n        const params = { date: this.date }\n\n        const req = await AppEncounterService.getJson(\n            `programs/${AppEncounterService.getProgramID()}/patients/${this.patientID}/status`,\n            params\n        )\n\n        if (req) this.treatmentState = req['status']\n    }\n\n    findAndGroupDrugSideEffects(drugs: Array<number>) {\n        const allSideEffects: any = {}\n\n        for (const date in this.sideEffects) {\n            const drugInduced = this.sideEffects[date]\n\n            for(const drug in drugInduced) {\n                if (!drugs.includes(parseInt(drug))) continue\n\n                if (!allSideEffects[date]) allSideEffects[date] = []\n\n                allSideEffects[date] = [\n                    ...allSideEffects[date], ...drugInduced[drug]\n                ]\n            }\n        }\n        return allSideEffects\n    }\n\n    calculatePillsPerDay(am: number, noon: number, pm: number) {\n        return parseFloat(am.toString()) + noon + pm\n    }\n\n    estimatePackSize(pillsPerDay: number, packSize=0) {\n        const packs = (pillsPerDay * this.nextVisitInterval) / packSize\n        \n        let roundedPacks = Math.round(packs)\n\n        if (roundedPacks <= 0) roundedPacks += 1\n\n        return roundedPacks\n    }\n\n    calculateDosage(morningTabs: number, eveningTabs: number): number {\n        let dose = 0\n        if (eveningTabs === 0) dose = morningTabs\n\n        if (morningTabs == 0) dose = eveningTabs\n\n        if (morningTabs > 0 && eveningTabs  > 0) {\n            dose = (morningTabs + eveningTabs) / 2\n        }\n        return dose\n    }\n    \n    calculateEquivalentDosage(morningTabs: number, eveningTabs: number): number {\n        return morningTabs + eveningTabs\n    }\n\n    calculateDateFromInterval() {\n        const dateObj = new Date(this.date)\n        dateObj.setDate(dateObj.getDate() + this.nextVisitInterval)\n        return HisDate.toStandardHisFormat(dateObj)\n    }\n\n    getDrugPackSize(drug: any) {\n        if (drug.pack_size) return drug.pack_size\n        try{\n            return drug.barcodes[0].tabs\n        }catch(e) {\n            return 30\n        }\n    }\n\n    getInstructions(drugName: string, morningTabs: number, eveningTabs: number, units: string): string {\n        return `${drugName} :- Morning: ${morningTabs} ${units}, Evening: ${eveningTabs} ${units}`\n    }\n\n    toOrderObj(id: number, name: string, units: string, am=0, pm=0, frequency=''): DrugInterface {\n        return {\n            'drug_inventory_id': id,\n            'equivalent_daily_dose': this.calculateEquivalentDosage(am, pm),\n            'start_date': this.date,\n            'auto_expire_date': this.calculateDateFromInterval(), \n            'units': units,\n            'instructions': this.getInstructions(name, am, pm, units),\n            'dose': this.calculateDosage(am, pm),\n            'frequency': frequency\n        }\n    }\n\n    async getReasonForRegimenSwitch() {\n        const reason = await AppEncounterService.getFirstValueText(this.patientID, 'Reason for ARV switch')\n        return reason ? reason : 'N/A'\n    }\n\n    async createDrugOrder(drugOrders: Array<DrugInterface>) {\n        return DrugOrderService.create({\n            'encounter_id': this.encounterID,\n            'drug_orders': drugOrders\n        })\n    }\n\n    async createHangingPillsObs(response: string) {\n        return this.saveValueTextObs('appointment type', response)\n    }\n\n    async createRegimenSwitchObs(reasonForSwitch: string): Promise<Observation> {\n        return this.saveValueTextObs('Reason for ARV switch', reasonForSwitch)\n    }\n}\n","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport async function getVillagesByName(name='a', page=1): Promise<Option[]> {\n    const villages = await LocationService.getVillagesByName(name, page)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport function getLandmarks(): Option[] {\n    const landmarks = [\n        'Catholic Church',\n        'CCAP',\n        'Seventh Day',\n        'Mosque',\n        'Primary School',\n        'Borehole',\n        'Secondary School',\n        'College',\n        'Market',\n        'Football Ground',\n        'Other'\n    ]\n\n    return landmarks.map(landmark =>({\n        label: landmark,\n        value: landmark,\n        other: {\n            code: landmark\n        }\n    }))\n}\n","export * from \"-!../../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../../node_modules/vue-loader-v16/dist/stylePostLoader.js!../../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../../node_modules/vue-loader-v16/dist/index.js??ref--0-1!./SideEffectsModal.vue?vue&type=style&index=0&id=546674a2&scoped=true&lang=css\""],"sourceRoot":""}