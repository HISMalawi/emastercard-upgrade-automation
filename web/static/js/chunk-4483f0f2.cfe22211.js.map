{"version":3,"sources":["webpack:///./src/components/DrillPatientIds.vue?9d55","webpack:///./src/components/DrillPatientIds.vue","webpack:///./src/components/DrillPatientIds.vue?c677","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/utils/ReportDateSelectionPrompt.ts","webpack:///./src/apps/CxCa/views/reports/pepfar/CXCA_TX_Report.vue?9fbf","webpack:///./src/apps/CxCa/views/reports/pepfar/CXCA_TX_Report.vue","webpack:///./src/apps/CxCa/views/reports/pepfar/CXCA_TX_Report.vue?2f65","webpack:///./src/apps/CxCa/services/reports/cxca_report_service.ts","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_v2Datatable","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","title","subtitle","columnData","reportData","columns","onFinish","rowsPerPage","ITEMS_PER_PAGE","_","defineComponent","props","type","String","patientIdentifiers","Object","Function","components","IonPage","v2Datatable","setup","ref","router","useRouter","label","exportable","tdClick","data","push","path","patient_id","value","watch","async","length","backlog","chunk","log","id","patient","Patientservice","findByID","getID","getNationalID","getGivenName","getFamilyName","toDate","getBirthdate","e","console","error","delayPromise","immediate","__exports__","SYMBOLS_CONFIG","SYMBOLS","NUMBERS_ONLY","NUMBER_PAD_LO","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","MONTHLY_DAYS_LO","A_TO_Z","ALPHABETICAL_LO","QWERTY","QWERTY_LO","KEY_BTN_NAV","btn","keyboard","DatePeriodInputType","HtsReportPreference","ReportPreferences","reactive","datePeriodInputType","localStorage","getItem","PERIOD_INPUT_TYPE","MULTI_FIELD_DATE","DateSelection","params","MultiStepPopupForm","generateDateFields","helpText","required","minDate","maxDate","Service","getSessionDate","condition","estimation","allowUnknown","computeValue","date","c","start_date","proxyID","FieldType","TT_FULL_DATE","validation","v","Date","computedValue","SINGLE_DATE_INPUT_FIELD","defaultValue","f","TT_DATE_PICKER","CALENDAR_FIELD","StandardValidations","config","infoItems","end_date","persistInfoItems","modalController","dismiss","period","toastDanger","_component_ion_loading","isLoading","message","onConfigure","configure","csvQuarter","onRefresh","generate","startDate","endDate","IonLoading","drilldown","create","component","DrillPatientIds","backdropDismiss","cssClass","componentProps","getTop","then","present","span","thRowspan","thColspan","secondaryLabel","first_time_screened","cryotherapy","column","age_group","thermocoagulation","leep","post_treatment_followup","rescreened_after_prev_visit","toastWarning","report","CxCaReportService","getClinicReport","slice","map","index","gender","sDate","eDate","periodstr","onMounted","constructor","super","this","programID","getProgramID","getPepfarReport","reportName","getReport","getMohReport","getDateIntervalPeriod","HisDate","toStandardHisDisplayFormat","setStartDate","setEndDate","getReportPeriod","url","getJson","buildRequest","payload","minDuration","quarters","year","getCurrentYear","i","name","start","end","EstimationFieldType","getYearField","showUnknown","primaryFunctions","appearInSummary","TT_TEXT","customKeyboard","getMonthField","TT_SELECT","options","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","parseInt","getDefaultDate","form","field","datePart","month","day","split","d","validateMinMax","computed","min","max","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","includes","buildHelpTextDate","part","parts","reduce","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","unload","toString","match","isNaN","minYear","getYear","summaryMapValue","summaryLabel","val","beforeNext","keyboardActions","valueEstimateCondition","estimateType","conditions","estimationFieldType","every","Boolean","ageEstimateRegex","dayjs","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","MONTH_ESTIMATE_FIELD"],"mappings":"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","file":"js/chunk-4483f0f2.cfe22211.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_v2Datatable = _resolveComponent(\"v2Datatable\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_v2Datatable, {\n        title: _ctx.title,\n        subtitle: _ctx.subtitle,\n        columnData: _ctx.reportData,\n        columns: _ctx.columns,\n        \"on-finish\": _ctx.onFinish,\n        rowsPerPage: _ctx.ITEMS_PER_PAGE\n      }, null, 8, [\"title\", \"subtitle\", \"columnData\", \"columns\", \"on-finish\", \"rowsPerPage\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent, ref, PropType, watch } from 'vue';\nimport { IonPage } from \"@ionic/vue\"\nimport  v2Datatable from \"@/components/DataViews/tables/v2PocDatatable/TableView.vue\"\nimport { v2ColumnDataInterface, v2ColumnInterface } from '@/components/DataViews/tables/v2PocDatatable/types';\nimport { useRouter } from \"vue-router\"\nimport { chunk } from 'lodash';\nimport { delayPromise } from '@/utils/Timers';\nimport { Patientservice } from '@/services/patient_service';\nimport { toDate } from '@/utils/Strs';\n\nconst ITEMS_PER_PAGE = 20\nexport default defineComponent({ \n    props: {\n        title: {\n            type: String,\n            default: 'Drilldown'\n        },\n        patientIdentifiers: {\n            type: Object as PropType<number[]>\n        },\n        onFinish: {\n            type: Function\n        }\n    },\n    components: {\n        IonPage,\n        v2Datatable\n    },\n    setup(props) {\n        const subtitle = ref('-')\n        const reportData = ref<any>([])\n        const router = useRouter()\n        const columns: Array<v2ColumnInterface[]> = [\n            [\n                {\n                    label: 'National ID',\n                    ref: 'national_id'\n                },\n                {\n                    label: 'First name',\n                    ref: 'given_name'\n                },\n                {\n                    label: 'Last name',\n                    ref: 'family_name'\n                },\n                {\n                    label: 'Birthdate',\n                    ref: 'birthdate'\n                },\n                {\n                    label: 'Action',\n                    ref: 'patient_id',\n                    exportable: false,\n                    tdClick: ({data}: v2ColumnDataInterface) => router.push({ path: `/patient/dashboard/${data.patient_id}`}) ,\n                    value: () => 'View client'\n                }\n            ]\n        ]\n        \n        watch(() => props.patientIdentifiers, async (data) => {\n            reportData.value = []\n            subtitle.value = `Total: 0`\n            if (!(data && data.length)) return\n            const backlog = chunk(data, ITEMS_PER_PAGE)\n            for(const log of backlog) {\n                for (const id of log) {\n                    try {\n                        const patient = new Patientservice((await Patientservice.findByID(id)))\n                        reportData.value.push({\n                            'patient_id': patient.getID(),\n                            'national_id': patient.getNationalID(),\n                            'given_name': patient.getGivenName(),\n                            'family_name': patient.getFamilyName(),\n                            'birthdate': toDate(patient.getBirthdate())\n                        })\n                    } catch (e) {\n                        console.error(e)\n                        reportData.value.push({})\n                    }\n                    subtitle.value = `Total: ${reportData.value.length} of ${(data||[]).length}`\n                }\n                await delayPromise(500)\n            }\n        }, { immediate: true })\n\n        return  {\n            columns,\n            subtitle,\n            reportData,\n            ITEMS_PER_PAGE\n        }\n    }\n})\n","import { render } from \"./DrillPatientIds.vue?vue&type=template&id=561e476c&ts=true\"\nimport script from \"./DrillPatientIds.vue?vue&type=script&lang=ts\"\nexport * from \"./DrillPatientIds.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Service } from \"@/services/service\"\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport { toDate } from \"@/utils/Strs\"\nimport { MultiStepPopupForm } from \"@/utils/PopupKeyboard\"\nimport { toastDanger } from \"@/utils/Alerts\"\nimport { modalController } from \"@ionic/vue\"\nimport { reactive } from \"vue\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\n\nexport enum DatePeriodInputType {\n    MULTI_FIELD_DATE = 'Multipage date fields',\n    CALENDAR_FIELD = 'Calendar',\n    SINGLE_DATE_INPUT_FIELD = 'Single page date'\n}\n\nexport enum HtsReportPreference {\n    PERIOD_INPUT_TYPE = 'hts_report_date_period_type'\n}\n\nexport const ReportPreferences = reactive({\n    datePeriodInputType: localStorage.getItem(HtsReportPreference.PERIOD_INPUT_TYPE) || DatePeriodInputType.MULTI_FIELD_DATE\n} as any)\n\nexport function DateSelectionPreference() {\n    MultiStepPopupForm([\n        {\n            id: 'date_field_type',\n            helpText: 'Date input preference',\n            type: FieldType.TT_SELECT,\n            defaultValue: () => ReportPreferences.datePeriodInputType,\n            options: () => {\n                return [\n                    { label: 'Calendar', value: DatePeriodInputType.CALENDAR_FIELD },\n                    { label: 'Single page date', value: DatePeriodInputType.SINGLE_DATE_INPUT_FIELD},\n                    { label: 'Multipage date fields', value: DatePeriodInputType.MULTI_FIELD_DATE },\n                ]\n            }\n        }\n    ],\n    (f: any) => {\n        ReportPreferences.datePeriodInputType = f.date_field_type.value\n        localStorage.setItem(HtsReportPreference.PERIOD_INPUT_TYPE, ReportPreferences.datePeriodInputType)\n        modalController.dismiss()\n    })\n}\n\nexport function DateSelection(params: any) {\n    MultiStepPopupForm([\n        ...generateDateFields({\n            id: 'start_date',\n            helpText: 'Start',\n            required: true,\n            minDate: () => params?.minDate || '',\n            maxDate: () => params?.maxDate || Service.getSessionDate(),\n            condition: () => (ReportPreferences.datePeriodInputType === DatePeriodInputType.MULTI_FIELD_DATE) as boolean,\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => date \n        }),\n        ...generateDateFields({\n            id: 'end_date',\n            helpText: 'End',\n            required: true,\n            minDate: (_: any, c: any) => c.start_date,\n            maxDate: () => params?.maxDate || Service.getSessionDate(),\n            condition: () => (ReportPreferences.datePeriodInputType === DatePeriodInputType.MULTI_FIELD_DATE) as boolean,\n            estimation: {\n                allowUnknown: false\n            },\n            computeValue: (date: string) => date\n        }),\n        {\n            id: 'alt_start_date',\n            proxyID: 'start_date',\n            helpText: 'Start Date',\n            type: FieldType.TT_FULL_DATE,\n            validation: (v: Option) => {\n                if (!v) return ['Date is required']\n\n                const maxDate = params.maxDate || Service.getSessionDate()\n                if (params.minDate && new Date(v.value) < new Date(params.minDate)) {\n                    return [`${toDate(`${v.value}`)} is less than minimum date of ${toDate(params.minDate)}`]\n                }\n                if (maxDate && new Date(v.value) > new Date(maxDate)) {\n                    return [`${toDate(`${v.value}`)} is greater than max date of ${toDate(maxDate)}`]\n                }\n                return null\n            },\n            computedValue: (v: Option) => v.value,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.SINGLE_DATE_INPUT_FIELD\n        },\n        {\n            id: 'alt_end_date',\n            proxyID: 'end_date',\n            helpText: 'End Date',\n            type: FieldType.TT_FULL_DATE,\n            defaultValue: (f: any) => f.start_date.value,\n            validation: (v: Option, f: any) => {\n                if (!v) return ['Date is required']\n\n                const maxDate = params.maxDate || Service.getSessionDate()\n                if (f.start_date.value && new Date(v.value) < new Date(f.start_date.value)) {\n                    return [`${toDate(`${v.value}`)} is less than minimum date of ${toDate(f.start_date.value)}`]\n                }\n                if (maxDate && new Date(v.value) > new Date(maxDate)) {\n                    return [`${toDate(`${v.value}`)} is greater than max date of ${toDate(maxDate)}`]\n                }\n                return null\n            },\n            computedValue: (v: Option) => v.label,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.SINGLE_DATE_INPUT_FIELD\n        },\n        {\n            id: 'calendar_start_date',\n            proxyID: 'start_date',\n            helpText: 'Start Date',\n            type: FieldType.TT_DATE_PICKER,\n            computedValue: (v: Option) => v,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.CALENDAR_FIELD,\n            validation: (v: Option) => StandardValidations.required(v),\n            config: {\n                minDate: () => params.minDate || null,\n                maxDate: () => params.maxDate || Service.getSessionDate(),\n                infoItems: (date: string, f: any) => {\n                    return [\n                        { label: 'Start Date', value: toDate(date) || '-' },\n                        { label: 'End Date', value: toDate(f.end_date) || '-'}\n                    ]\n                },\n                persistInfoItems: false\n            }\n        },\n        {\n            id: 'calendar_end_date',\n            proxyID: 'end_date',\n            helpText: 'End Date',\n            type: FieldType.TT_DATE_PICKER,\n            validation: (v: Option) => StandardValidations.required(v),\n            defaultValue: (f: any) => f.start_date.value,\n            computedValue: (v: Option) => v,\n            condition: () => ReportPreferences.datePeriodInputType === DatePeriodInputType.CALENDAR_FIELD,\n            config: {\n                minDate: (f: any) => f.start_date.value,\n                maxDate: () => params.maxDate || Service.getSessionDate(),\n                infoItems: (date: string, f: any) => {\n                    return [\n                        { label: 'Start Date', value: toDate(f.start_date) || '-' },\n                        { label: 'End Date', value: toDate(date)}\n                    ]\n                },\n                persistInfoItems: false\n            }\n        }\n    ], \n    async (f: any, c: any) => {\n        console.log(c)\n        modalController.dismiss()\n        try {\n            const period = `${toDate(c.start_date)} to ${toDate(c.end_date)}`\n            params.onFinish(c.start_date, c.end_date, period)\n        } catch (e) {\n            toastDanger(\"An error has occurred\")\n        }\n    })\n}","import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_ion_loading = _resolveComponent(\"ion-loading\")!\n  const _component_v2Datatable = _resolveComponent(\"v2Datatable\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_ion_loading, {\n        \"is-open\": _ctx.isLoading,\n        message: \"Please wait...\"\n      }, null, 8, [\"is-open\"]),\n      _createVNode(_component_v2Datatable, {\n        title: \"CXCA TX Report\",\n        subtitle: _ctx.period,\n        columns: _ctx.columns,\n        columnData: _ctx.reportData,\n        rowsPerPage: 25,\n        onConfigure: _ctx.configure,\n        csvQuarter: _ctx.csvQuarter,\n        onRefresh: () => _ctx.generate()\n      }, null, 8, [\"subtitle\", \"columns\", \"columnData\", \"onConfigure\", \"csvQuarter\", \"onRefresh\"])\n    ]),\n    _: 1\n  }))\n}","\nimport { defineComponent, ref, onMounted } from 'vue';\nimport { IonPage, IonLoading, modalController } from \"@ionic/vue\"\nimport  v2Datatable from \"@/components/DataViews/tables/v2PocDatatable/TableView.vue\"\nimport { v2ColumnDataInterface, v2ColumnInterface } from '@/components/DataViews/tables/v2PocDatatable/types';\nimport { CxCaReportService } from \"@/apps/CxCa/services/reports/cxca_report_service\"\nimport { DateSelection } from \"@/utils/ReportDateSelectionPrompt\"\nimport { toastDanger, toastWarning } from '@/utils/Alerts';\nimport DrillPatientIds from '../../../../../components/DrillPatientIds.vue';\nimport { toDate } from '@/utils/Strs';\n\nconst reportData = ref<any>([])\nconst startDate = ref('')\nconst endDate = ref('')\nconst period = ref('')\nconst isLoading = ref(false)\nconst csvQuarter = ref('')\nexport default defineComponent({ \n    components: { \n        IonPage,\n        IonLoading,\n        v2Datatable,\n    },\n    setup() {\n        const drilldown = async (title: string, patientIdentifiers: number[]) => {\n            (await modalController.create({\n                component: DrillPatientIds,\n                backdropDismiss: false,\n                cssClass: 'large-modal',\n                componentProps: {\n                    title,\n                    subtitle: period,\n                    patientIdentifiers,\n                    onFinish: () => modalController.getTop().then(v => v && modalController.dismiss())\n                }\n            })).present()\n        }\n        /**\n         * Table column definition and value mapping\n         */\n        const columns: Array<v2ColumnInterface[]> = [\n            [\n                {\n                    label: \"#\",\n                    ref: \"index\",\n                    span: {\n                        thRowspan: 2\n                    }\n                },\n                {\n                    label: \"Age group\",\n                    ref: \"age_group\",\n                    span: {\n                        thRowspan: 2,\n                    }\n                },\n                {\n                    label: \"Gender\",\n                    ref: \"gender\",\n                    exportable: false,\n                    span: {\n                        thRowspan: 2\n                    }\n                }, \n                {\n                    label: \"1st time screened\",\n                    ref: \"\",\n                    span: {\n                        thColspan: 3\n                    }\n                },\n                {\n                    label: \"Rescreened after previous negative\",\n                    ref: \"\",\n                    span: {\n                        thColspan: 3\n                    }\n                },\n                {\n                    label: \"Post-treatment follow-up\",\n                    ref: \"\",\n                    span: {\n                        thColspan: 3\n                    }\n                }\n            ],\n            [\n                {\n                    label: \"Cryotherapy\",\n                    ref: 'first_time_screened_cryotherapy',\n                    secondaryLabel: \"1st screened (cryotherapy)\",\n                    value: (data: any) => data.first_time_screened.cryotherapy.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.first_time_screened.cryotherapy\n                    )\n                },\n                {\n                    label: \"Thermocoagulation\",\n                    ref: 'first_time_screened_thermocoagulation',\n                    secondaryLabel:  \"1st time screened (Thermocoagulation)\",\n                    value: (data: any) => data.first_time_screened.thermocoagulation.length,\n                    tdClick: ({ column,data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.first_time_screened.thermocoagulation\n                    )\n                },\n                {\n                    label: \"LEEP\",\n                    ref: 'first_time_screened_leep',\n                    secondaryLabel: \"1st screened(leep)\",\n                    value: (data: any) => data.first_time_screened.leep.length,\n                    tdClick: ({ column, data }: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.first_time_screened.leep\n                    )\n                },\n                {\n                    label: \"Cryotherapy\",\n                    ref: 'post_treatment_followup_cryotherapy',\n                    secondaryLabel: \"Post-treatment followup(Cryotherapy)\",\n                    value: (data: any) => data.post_treatment_followup.cryotherapy.length,\n                    tdClick: ({column, data}: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.post_treatment_followup.cryotherapy\n                    )\n                },\n                {\n                    label: \"Thermocoagulation\",\n                    ref: \"post_treatment_followup_thermocoagulation\",\n                    secondaryLabel: \"Post-treatment followup (Thermocoagulation)\",\n                    value: (data: any) => data.post_treatment_followup.thermocoagulation.length,\n                    tdClick: ({column, data}: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.post_treatment_followup.thermocoagulation\n                    )\n                },\n                {\n                    label: \"LEEP\",\n                    ref: \"post_treatment_followup_leep\",\n                    secondaryLabel: \"Post-treatment followup (leep)\",\n                    value: (data: any) => data.post_treatment_followup.leep.length,\n                    tdClick: ({ column, data}: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.post_treatment_followup.leep\n                    )\n                },\n                {\n                    label: \"Cryotherapy\",\n                    ref: 'rescreened_after_prev_visit_cryotherapy',\n                    secondaryLabel: \"Rescreen after prev visit (Cryotherapy)\",\n                    value: (data: any) => data.rescreened_after_prev_visit.cryotherapy.length,\n                    tdClick: ({column, data}: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.rescreened_after_prev_visit.cryotherapy\n                    )\n                },\n                {\n                    label: \"Thermocoagulation\",\n                    ref: 'rescreened_after_prev_visit_thermocoagulation',\n                    secondaryLabel: \"Rescreen after prev visit (Thermocoagulation)\",\n                    value: (data: any) => data.rescreened_after_prev_visit.thermocoagulation.length,\n                    tdClick: ({column, data}: v2ColumnDataInterface) => drilldown(\n                        `${data.age_group} ${column.secondaryLabel}`, data.rescreened_after_prev_visit.thermocoagulation\n                    )\n                },\n                {\n                    label: \"LEEP\",\n                    ref: 'rescreened_after_prev_visit_leep',\n                    secondaryLabel: \"Rescreen after prev visit (leep)\",\n                    value: (data: any) => data.rescreened_after_prev_visit.leep.length,\n                    tdClick: ({column, data}: v2ColumnDataInterface) => drilldown(\n                       `${data.age_group} ${column.secondaryLabel}`, data.rescreened_after_prev_visit.leep\n                    )\n                }\n            ]\n        ]\n        \n        /**\n         * Generates report by start date and end date\n         */\n        const generate = async () => {\n            if (!(startDate.value && endDate.value))  {\n                return toastWarning('Start date and end date required!')\n            }\n            isLoading.value = true\n            reportData.value = []\n            const report = new CxCaReportService()\n            report.startDate = startDate.value\n            report.endDate = endDate.value\n            try {\n                reportData.value = (await report.getClinicReport('CXCA TX'))\n                    .slice(5)\n                    .map((data: any, index: any) => {\n                        data.index = index + 1\n                        data.gender = \"Female\"\n                        return data\n                    })\n            } catch (e) {\n                toastDanger(\"Unable to generate report!\")\n            }\n            isLoading.value = false\n        }\n\n        /**\n         * Loads a dialogue to allow users to configure start and end date\n         */\n        const configure = () => DateSelection({\n            onFinish: (sDate: string, eDate: string, periodstr: string) => {\n                startDate.value = sDate\n                endDate.value = eDate\n                period.value = `Period (${periodstr})`\n                csvQuarter.value = `${toDate(startDate.value)} to ${toDate(endDate.value)}`\n                generate()\n            }\n        })\n\n        /**\n         * Initialization code when the report is empty!\n         */\n        onMounted(() => !reportData.value.length && configure())\n\n        return  {\n            columns,\n            isLoading,\n            reportData,\n            period,\n            csvQuarter,\n            generate,\n            configure\n        }\n    }\n})\n","import { render } from \"./CXCA_TX_Report.vue?vue&type=template&id=ef03bb7a&ts=true\"\nimport script from \"./CXCA_TX_Report.vue?vue&type=script&lang=ts\"\nexport * from \"./CXCA_TX_Report.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { Service } from \"@/services/service\";\nimport HisDate from \"@/utils/Date\"\n\nexport interface QuarterInterface {\n    name: string;\n    start: string;\n    end: string;\n}\n\n\n\nexport const AGE_GROUPS = [\n    '15-19 years', '20-24 years',\n    '25-29 years', '30-34 years',\n    '35-39 years', '40-44 years',\n    '45-49 years', '50 plus years'\n]\n\n\nexport class CxCaReportService extends Service {\n    programID: number;\n    startDate: string;\n    endDate: string;\n    date: string;\n    constructor() {\n        super()\n        this.endDate = ''\n        this.startDate = ''\n        this.date = Service.getSessionDate()\n        this.programID = Service.getProgramID()\n    }\n\n    getPepfarReport(reportName: string) {\n        return this.getReport('pepfar_cxca', {'report_name': reportName})\n    }\n    getClinicReport(reportName: string) {\n        return this.getReport('screened_for_cxca', {'report_name': reportName})\n    }\n    getMohReport(reportName: string) {\n        return this.getReport('screened_for_cxca', {'report_name': reportName})\n    }\n    \n    getDateIntervalPeriod() {\n        return `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n    }\n\n    setStartDate(startDate: string) {\n        this.startDate = startDate\n    }  \n\n    setEndDate(endDate: string) {\n        this.endDate = endDate\n    }\n\n   \n\n    getReportPeriod() {\n        return this.startDate && this.endDate\n         ? `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n         : '-'\n    }\n\n    getReport(url: string, params={}) {\n        return Service.getJson(url, this.buildRequest(params))\n    }\n\n    buildRequest(config: Record<string, any> = {}) {\n        const payload: any = {'date': this.date, 'program_id': 24}\n        if (this.startDate && this.endDate) {\n            payload['start_date'] = this.startDate\n            payload['end_date'] = this.endDate\n        }\n        return { ...payload, ...config }\n    }\n\n    static getReportQuarters(minDuration= 4) {\n        const quarters: Array<QuarterInterface> = []\n        let year = HisDate.getCurrentYear()\n        for(let i=0; i < minDuration; ++i) {\n            quarters.push({ name: `Q4 ${year}`, start: `${year}-10-01`, end: `${year}-12-31` })\n            quarters.push({ name: `Q3 ${year}`, start: `${year}-07-01`, end: `${year}-09-30` })\n            quarters.push({ name: `Q2 ${year}`, start: `${year}-04-01`, end: `${year}-06-30` })\n            quarters.push({ name: `Q1 ${year}`, start: `${year}-01-01`, end: `${year}-03-31` })\n            --year\n        }\n        return quarters\n    }\n\n}","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])"],"sourceRoot":""}