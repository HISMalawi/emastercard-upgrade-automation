{"version":3,"sources":["webpack:///./src/services/drug_order_service.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?fc39","webpack:///./src/components/Forms/HisStandardForm.vue?8e31","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?5176","webpack:///./src/apps/AETC/views/encounters/Dispensing.vue?c25c","webpack:///./src/apps/AETC/services/dispensation_service.ts","webpack:///./src/apps/AETC/views/encounters/Dispensing.vue","webpack:///./src/apps/AETC/views/encounters/Dispensing.vue?2880","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/components/Forms/BaseFormElements.ts","webpack:///./src/components/FormElements lazy ^\\.\\/.*\\.vue$ namespace object"],"names":["DrugOrderService","Service","constructor","super","orders","this","postJson","getProgramID","dispensations","map","order","getSessionDate","patientID","getJson","pageSize","drugID","date","params","patientId","defineComponent","components","HisStandardForm","data","patient","fields","providerID","providers","facts","sessionDate","apiDate","encounterName","isBdeMode","birthDate","outcome","outcomeStartDate","ready","watch","handler","route","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","cancelDestination","patientDashboardUrl","methods","runflowState","state","states","FlowState","SET_PROVIDER","selection","username","split","provider","find","person_id","CONTINUE","CHANGE_SESSION_DATE","$router","push","EXIT","CHANGE_PATIENT_OUTCOME","GO_TO_PATIENT_DASHBOARD","gotoPatientDashboard","findings","matchToGuidelines","ENCOUNTER_GUIDELINES","index","_finding$actions","_finding$actions3","finding","actions","alert","_finding$actions2","status","_finding$actions4","flowState","value","program","startDate","e","console","error","toastDanger","ProgramService","getCachedApiDate","isBDE","getBirthdate","$route","name","toString","toUpperCase","sort","a","b","usernameA","usernameB","p","_p$person","isEmpty","person","names","_p$person2","latestName","given_name","family_name","toOption","label","other","mapStrToOptions","items","i","path","nextTask","yesNoOptions","toYesNoOption","values","mapOptions","options","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","d","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","conditions","condition","__exports__","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","type","Function","Boolean","default","String","required","formData","computedData","$emit","_component_his_standard_form","_resolveComponent","DispensationService","AppEncounterService","_defineProperty","drugHistory","currentDrugOrder","getDrugHistory","getCurrentOrder","buildDispensations","orderId","quantity","saveDispensations","void","res","getDrugOrderHistory","getDrugOrders","calcCompletePack","drug","units","drugOrderBarcodes","barcodes","tabs","smallestAvailableTab","completePack","mixins","EncounterMixinVue","dispensation","getID","loadCurrentDrugOrder","loadDrugHistory","getFields","item","order_id","buildMedicationHistory","dateA","Date","start_date","dateB","medication","HisDate","toStandardHisDisplayFormat","amount","buildOrderOptions","drug_id","calculateCompletePack","getPackSizesRows","drugId","availableStock","packs","getDrugPackSizes","packSize","parseFloat","amount_needed","isDoneDispensing","o","every","isOk","totalTabs","amountNeeded","percentageGiven","alertConfirmation","id","helpText","FieldType","TT_DRUG_DISPENSER","onValueUpdate","async","l","onValue","isBarcodeScanned","voided","voidOrder","isValidDispensation","dispensed","toastWarning","config","medicationHistory","toolbarInfo","getFullName","getGender","hiddenFooterBtns","dformat","priority","action","infoActionSheet","slot","color","modal","optionsActionSheet","role","isCondition","ignored","undefined","prop","includes","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info","COMPONENT_REFS","TT_ASYNC_MULTI_SELECT","TT_LINKAGE_CODE","TT_MULTI_SELECT_GRID","TT_AGE_INPUT","TT_BARCODE","TT_NOTE","TT_SELECT","TT_CARD_SELECTOR","TT_MULTIPLE_SELECT","TT_TEXT","TT_NUMBER","TT_MONTHLY_DAYS","TT_ART_REGIMEN_SELECTION","TT_NEXT_VISIT_INTERVAL_SELECTION","TT_TABLE_VIEWER","TT_DOSAGE_INPUT","TT_YES_NO","TT_MULTIPLE_YES_NO","TT_WEIGHT_CHART","TT_VITALS_ENTRY","TT_APPOINTMENTS_ENTRY","TT_COMPLAINTS_PICKER","TT_CLINIC_HOLIDAY_PICKER","TT_SUMMARY","TT_ART_STAGING_SUMMARY","TT_ADHERENCE_INPUT","TT_LAB_ORDERS","TT_PERSON_RESULT_VIEW","TT_PROGRAM_SELECTION","TT_DATE_PICKER","TT_RELATION_SELECTION","TT_FILING_NUMBER_VIEW","TT_PERSON_MATCH_VIEW","TT_FULL_DATE","TT_BATCH_ENTRY","TT_BATCH_VERIFICATION","TT_BATCH_MOVEMENT","TT_IP_ADDRESS","TT_TEXT_BANNER","TT_DISPENSATION_INPUT","TT_DATA_TABLE","TT_GROUP_SELECTOR","TT_ANC_PREGNANCY_INPUT_CONFIG","TT_ANC_PREGNANCY_DETAILS_INPUT","TT_ANC_LMP_DATE_INPUT","TT_DRUG_TRANSFER_IN","TT_GRID_SELECTOR","TT_ANC_DRUGSET_INPUT","TT_RADIOLOGY_PICKER","TT_PRESCRIPTION_INPUT","TT_INFINITE_SCROLL_MULTIPLE_SELECT","webpackAsyncContext","req","__webpack_require__","resolve","Error","code","ids","slice","keys","module","exports"],"mappings":"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AAU6E,eACV7E,EAAU8E,sBACV9E,EAAU+E,sBACV/E,EAAUgF,qBACVhF,EAAUiF,aACVjF,EAAUkF,eACVlF,EAAUmF,sBACVnF,EAAUoF,kBACVpF,EAAUqF,cACVrF,EAAUsF,eACVtF,EAAUuF,sBACVvF,EAAUwF,cACVxF,EAAUyF,kBACVzF,EAAU0F,8BACV1F,EAAU2F,+BACV3F,EAAU4F,sBACV5F,EAAU6F,oBACV7F,EAAU8F,iBACV9F,EAAU+F,qBACV/F,EAAUgG,oBACVhG,EAAUiG,sBACVjG,EAAUkG,mCACVlG,EAAUC,oB,qBCpHd,IAAI9O,EAAM,CACT,wBAAyB,CACxB,OACA,qBAED,wBAAyB,CACxB,OACA,qBAED,iCAAkC,CACjC,OACA,qBAED,+BAAgC,CAC/B,OACA,qBAED,0BAA2B,CAC1B,OACA,qBAED,yBAA0B,CACzB,OACA,iBACA,qBAED,sBAAuB,CACtB,OACA,qBAED,kCAAmC,CAClC,OACA,qBAED,0BAA2B,CAC1B,OACA,iBACA,qBAED,mBAAoB,CACnB,OACA,qBAED,yBAA0B,CACzB,OACA,sBAED,6BAA8B,CAC7B,OACA,sBAED,0BAA2B,CAC1B,OACA,iBACA,sBAED,oBAAqB,CACpB,OACA,sBAED,wBAAyB,CACxB,OACA,iBACA,sBAED,+BAAgC,CAC/B,OACA,sBAED,wBAAyB,CACxB,OACA,sBAED,sBAAuB,CACtB,OACA,iBACA,iBACA,sBAED,yBAA0B,CACzB,OACA,iBACA,iBACA,sBAED,6BAA8B,CAC7B,OACA,iBACA,iBACA,sBAED,wBAAyB,CACxB,OACA,sBAED,+BAAgC,CAC/B,OACA,iBACA,sBAED,4BAA6B,CAC5B,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,sBAAuB,CACtB,OACA,iBACA,sBAED,uBAAwB,CACvB,OACA,iBACA,sBAED,wBAAyB,CACxB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,wCAAyC,CACxC,OACA,sBAED,qBAAsB,CACrB,OACA,iBACA,sBAED,uBAAwB,CACvB,OACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,0BAA2B,CAC1B,OACA,iBACA,sBAED,6BAA8B,CAC7B,OACA,sBAED,gBAAiB,CAChB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,6BAA8B,CAC7B,OACA,iBACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,kBAAmB,CAClB,OACA,sBAED,mBAAoB,CACnB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,sBAAuB,CACtB,OACA,sBAED,qBAAsB,CACrB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,uBAAwB,CACvB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,wBAAyB,CACxB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,yBAA0B,CACzB,OACA,sBAED,2BAA4B,CAC3B,OACA,sBAED,oBAAqB,CACpB,OACA,sBAED,oBAAqB,CACpB,OACA,uBAGF,SAASgV,EAAoBC,GAC5B,IAAIC,EAAoB9G,EAAEpO,EAAKiV,GAC9B,OAAO7M,QAAQ+M,UAAUjT,MAAK,WAC7B,IAAI6C,EAAI,IAAIqQ,MAAM,uBAAyBH,EAAM,KAEjD,MADAlQ,EAAEsQ,KAAO,mBACHtQ,KAIR,IAAIuQ,EAAMtV,EAAIiV,GAAMtG,EAAK2G,EAAI,GAC7B,OAAOlN,QAAQC,IAAIiN,EAAIC,MAAM,GAAGvV,IAAIkV,EAAoBnQ,IAAI7C,MAAK,WAChE,OAAOgT,EAAoBvG,MAG7BqG,EAAoBQ,KAAO,WAC1B,OAAO7N,OAAO6N,KAAKxV,IAEpBgV,EAAoBrG,GAAK,OACzB8G,EAAOC,QAAUV","file":"js/chunk-48720368.b41971f9.js","sourcesContent":["import { DrugOrderInterface } from \"@/interfaces/DrugOrder\";\nimport { Service } from \"./service\";\n\nexport class DrugOrderService extends Service {\n    constructor() {\n        super()\n    }\n\n    static create(orders: DrugOrderInterface) {\n        return this.postJson('drug_orders', orders)\n    }\n\n    static updateDispensationOrders(orders: any) {\n        return this.postJson('dispensations', {\n            'program_id': this.getProgramID(),\n            dispensations: orders.map((order: any) => ({\n                'date': this.getSessionDate(),\n                'drug_order_id': order['order_id'],\n                'quantity': order['quantity']\n            }))\n        })\n    }\n\n    static getDrugOrderHistory(patientID: number) {\n        return this.getJson('drug_orders', { 'patient_id': patientID })\n    }\n\n    static getDrugOrders(patientID: number) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getAllDrugOrders(patientID: number, pageSize=1000) {\n        return this.getJson('drug_orders', {\n            'patient_id': patientID,\n            'program_id': Service.getProgramID(),\n            'page_size': pageSize\n        })\n    }\n\n    static getLastDrugsReceived(patientID: number) {\n        return this.getJson(`patients/${patientID}/last_drugs_received`, {\n            'date': this.getSessionDate(),\n            'program_id': this.getProgramID()\n        })\n    }\n\n    static getDrugDosages(patientID: number, drugID: number, date=this.getSessionDate()) {\n        const params = { 'drug_id': drugID, 'date': date }\n        return this.getJson(`programs/${this.getProgramID()}/patients/${patientID}/drug_doses`, params)\n    }\n\n    static getOrderByPatient(patientId: number, params: any) {\n        return this.getJson('/drug_orders', {\n            'patient_id': patientId,\n            'program_id': this.getProgramID(),\n            ...params\n        })\n    }\n\n}","\n/**\n * @deprecated moved to useEncounter composable\n * \n */\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/projects/malawi-emr/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination,\n    fields: _ctx.fields\n  }, null, 8, [\"cancelDestinationPath\", \"fields\"]))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\nimport { DrugOrderService } from \"@/services/drug_order_service\";\n\nexport class DispensationService extends AppEncounterService {\n  drugHistory: Array<any>;\n  currentDrugOrder: Array<any>;\n\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 54, providerID)\n    this.drugHistory = []\n    this.currentDrugOrder = []\n  }\n\n  getDrugHistory() {\n    return this.drugHistory\n  }\n\n  getCurrentOrder() {\n    return this.currentDrugOrder\n  }\n\n  buildDispensations(orderId: number, quantity: number) {\n    return [{\n      'drug_order_id': orderId,\n      date: this.date,\n      quantity: quantity\n    }]\n  }\n\n  saveDispensations(dispensations: Array<any>) {\n    return AppEncounterService.postJson('/dispensations', { \n      dispensations, \n      'program_id': AppEncounterService.getProgramID()\n    })\n  }\n\n  async voidOrder(orderId: number) {\n    return AppEncounterService.void(`/dispensations/${orderId}`, {})\n  }\n\n  async loadDrugHistory() {\n    const res = await DrugOrderService.getDrugOrderHistory(this.patientID)\n    if (res) {\n      this.drugHistory = res\n    }\n  }\n\n  async loadCurrentDrugOrder() {\n    const res = await DrugOrderService.getDrugOrders(this.patientID)\n    if (res) {\n      this.currentDrugOrder = await Promise.all(res)        \n    }\n  }\n\n  calcCompletePack(drug: any, units: number) {\n     //sorting in an ascending order by tabs\n    const drugOrderBarcodes = drug.barcodes.sort(function (a: any, b: any) {\n      return a.tabs - b.tabs;\n    });\n    if (drugOrderBarcodes.length == 0 || units == 0.0) {\n      return units;\n    }\n    for (let i = 0; i <= drugOrderBarcodes.length - 1; i++) {\n      if (parseInt(drugOrderBarcodes[i].tabs) >= units) {\n        return drugOrderBarcodes[i].tabs;\n      }\n    }\n    const smallestAvailableTab = parseInt(drugOrderBarcodes[0].tabs)\n    let completePack = parseInt(drugOrderBarcodes[drugOrderBarcodes.length - 1].tabs)\n    while (completePack < units) {\n      completePack += smallestAvailableTab\n    }\n    return completePack\n  }\n}\n","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { toastWarning, alertConfirmation } from \"@/utils/Alerts\"\nimport { DispensationService } from \"@/apps/AETC/services/dispensation_service\"\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport HisDate from \"@/utils/Date\"\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    dispensation: {} as any\n  }),\n  watch: {\n    patient: {\n      async handler(patient: any){\n        this.dispensation = new DispensationService(patient.getID(), this.providerID)\n        await this.dispensation.loadCurrentDrugOrder()\n        await this.dispensation.loadDrugHistory()\n        this.fields = this.getFields()\n      },\n      deep: true\n    }\n  },\n  methods: {\n    saveDispensations(item: Option) {\n      const dispensations = this.buildDispensations(item)\n      return this.dispensation.saveDispensations(dispensations)    \n    },\n    buildDispensations(item: Option) {\n      return this.dispensation.buildDispensations(\n        item.other.order_id, item.value\n      )\n    },\n    buildMedicationHistory() {\n      return this.dispensation.getDrugHistory()\n      .sort((a: any, b: any) => {\n        const dateA: any = new Date(a.order.start_date)\n        const dateB: any = new Date(b.order.start_date)\n        return dateB - dateA\n      })\n      .map((d: any) => ({\n        medication: d.drug.name,\n        date: HisDate.toStandardHisDisplayFormat(d.order.start_date),\n        amount: d.quantity\n      }))\n    },\n    buildOrderOptions() {\n      return this.dispensation.getCurrentOrder().map((d: any) => ({\n        label: d.drug.name,\n        value: d.quantity || 0,\n        other: {\n          'drug_id': d.drug.drug_id,\n          'order_id': d.order.order_id,\n          'amount_needed': this.calculateCompletePack(d),\n        }\n      }))\n    },\n    getPackSizesRows(drugId: number, availableStock: number) {\n      const packs = this.dispensation.getDrugPackSizes(drugId)\n      return packs.map((packSize: number) => {\n        const packs = availableStock > 0 ? (availableStock / packSize) : '-'\n        return [packSize, packs, 0, 0]\n      })\n    },\n    calculateCompletePack(order: any) {\n      const units = parseFloat(order.amount_needed) - (order.quantity || 0)\n      const completePack = this.dispensation.calcCompletePack(order, units)\n      return completePack < 0 ? 0 : completePack\n    },\n    isDoneDispensing(orders: Array<Option>) {\n      return orders.map(o => o.value != 0).every(Boolean)\n    },\n    async isValidDispensation(option: Option) {\n      let isOk = true\n      const totalTabs = parseInt(option.value.toString())\n      const amountNeeded = option.other['amount_needed']\n      const percentageGiven = (totalTabs / amountNeeded) * 100\n      if (percentageGiven > 110) {\n        isOk = await alertConfirmation('Are you sure you want to dispense over 110% of the prescribed pill count?')\n      }\n      if (percentageGiven < 100) {\n        isOk = await alertConfirmation('Are you sure you want to dispense less than 100% of the prescribe amount?')\n      }\n      return isOk\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: 'dispenses',\n          helpText: 'Dispensation',\n          type: FieldType.TT_DRUG_DISPENSER,\n          onValueUpdate: async(i: Option, l: Option[]) => {\n            if(i.value != -1 && this.isDoneDispensing(l)) {\n              return this.gotoPatientDashboard()\n            }\n            i.other['amount_needed'] = 0\n            await this.dispensation.loadCurrentDrugOrder()\n            return this.buildOrderOptions()\n          },\n          onValue: async (i: Option, isBarcodeScanned: boolean) => {\n            if (i.value  === -1) {\n              const voided = await this.dispensation.voidOrder(i.other.order_id)\n              return voided? true : false\n            }\n            if (!isBarcodeScanned) {\n              const isValidDispensation = await this.isValidDispensation(i)\n              if (!isValidDispensation) return false\n            }\n            const dispensed = await this.saveDispensations(i)\n            if (dispensed) return true\n            toastWarning('Unable to save dispensation')\n            return false\n          },\n          config: {\n            medicationHistory: this.buildMedicationHistory(),\n            toolbarInfo: [\n              { label: 'Name', value: this.patient.getFullName() },\n              { label: 'Gender', value: this.patient.getGender() },\n              { label: 'Date Of Birth', value: HisDate.toStandardHisDisplayFormat(\n                this.patient.getBirthdate()\n              )}\n            ],\n            hiddenFooterBtns: [ \n              'Clear',\n              'Finish'\n            ]\n          },\n          options: () => this.buildOrderOptions()\n        }\n      ]\n    }\n  }\n})\n","import { render } from \"./Dispensing.vue?vue&type=template&id=71160dd1&ts=true\"\nimport script from \"./Dispensing.vue?vue&type=script&lang=ts\"\nexport * from \"./Dispensing.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/projects/malawi-emr/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: (facts: FactsInterface) => any;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: ConditionsInteface;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\nexport type FactsInterface = Record<string, any>\nexport type ConditionResolver = (value: any, facts: FactsInterface) => boolean | RegExpMatchArray | null\nexport type ConditionsInteface = Record<string, ConditionResolver>\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: FactsInterface, conditions: ConditionsInteface): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: FactsInterface, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","/**\n * Map all formElements/components defined in \"@/components/FormElements\" \n * in the Enum below by their file name.\n * \n * Next step is to add FieldType entry in COMPONENT_REFS in the \n * Array below the FieldType Enum\n */\nexport enum FieldType {\n    TT_ASYNC_MULTI_SELECT = 'AsyncMultiSelect',\n    TT_LINKAGE_CODE = 'LinkageCodeInput',\n    TT_MULTI_SELECT_GRID= 'HisMultiSelectGrid',\n    TT_AGE_INPUT='HisAgeInput',\n    TT_GROUP_SELECTOR = 'HisGroupSelector',\n    TT_DATA_TABLE = 'HisDataTable',\n    TT_GRID_SELECTOR = 'HisGridSelector',\n    TT_NOTE = 'HisNote',\n    TT_BARCODE = 'HisBarcodeInput',\n    TT_MONTHLY_DAYS=\"HisMonthlyDays\",\n    TT_TEXT=\"HisTextInput\",\n    TT_NUMBER = \"HisNumberInput\",\n    TT_DATETIME=\"datetime\",\n    TT_SELECT=\"HisSelect\",\n    TT_MULTIPLE_SELECT=\"HisMultipleSelect\",\n    TT_ART_REGIMEN_SELECTION=\"HisArtRegimenSelection\",\n    TT_NEXT_VISIT_INTERVAL_SELECTION=\"HisNextVisitInterval\",\n    TT_TABLE_VIEWER=\"HisTableViewer\",\n    TT_DOSAGE_INPUT=\"HisDosageInput\",\n    TT_YES_NO=\"YesNoSelect\",\n    TT_MULTIPLE_YES_NO=\"MultiYesNoSelect\",\n    TT_SUMMARY=\"HisSummary\",\n    TT_WEIGHT_CHART = \"HisWeightChart\",\n    TT_VITALS_ENTRY=\"HisVitalsEntry\",\n    TT_ADHERENCE_INPUT = \"HisAdherenceInput\",\n    TT_ART_STAGING_SUMMARY = \"ArtStagingSummary\",\n    TT_LAB_ORDERS = \"HisLabOrders\",\n    TT_APPOINTMENTS_ENTRY = \"HisAppointments\",\n    TT_DISPENSATION_INPUT = 'DrugDispensationSelection',\n    TT_PROGRAM_SELECTION = 'ProgramSelection',\n    TT_DATE_PICKER = 'HisDatePicker',\n    TT_PERSON_RESULT_VIEW = 'PersonSearchView',\n    TT_RELATION_SELECTION = 'RelationsSelection',\n    TT_FILING_NUMBER_VIEW = 'FilingNumberView',\n    TT_CARD_SELECTOR = 'HisCardSelector',\n    TT_PERSON_MATCH_VIEW = 'PersonMatchView',\n    TT_FULL_DATE = 'HisDateInput',\n    TT_BATCH_ENTRY = 'HisBatchEntry',\n    TT_BATCH_VERIFICATION = 'HisBatchVerification',\n    TT_BATCH_MOVEMENT = 'HisBatchMovement',\n    TT_COMPLAINTS_PICKER = 'HisComplaintsPicker',\n    TT_RADIOLOGY_PICKER = 'HisRadiologyPicker',\n    TT_IP_ADDRESS = 'HisIPAddress',\n    TT_TEXT_BANNER = 'HisTextBanner',\n    TT_DRUG_DISPENSER = 'GeneralDrugDispenser',\n    TT_CLINIC_HOLIDAY_PICKER = 'HisClinicHolidayPicker',\n    TT_ANC_PREGNANCY_INPUT_CONFIG = 'AncPregnancyInfoConfig',\n    TT_ANC_PREGNANCY_DETAILS_INPUT = 'AncPregnancyDetailsInput',\n    TT_ANC_LMP_DATE_INPUT = 'AncLmpDateInput',\n    TT_ANC_DRUGSET_INPUT = 'AncDrugSetInput',\n    TT_DRUG_TRANSFER_IN = 'DrugTransferInput',\n    TT_PRESCRIPTION_INPUT = 'HisPrescriptionInput',\n    TT_INFINITE_SCROLL_MULTIPLE_SELECT=\"HisInfiniteScrollMultipleSelect\"\n}\n\n// Register FieldTypes here that will be registered at runtime\nexport const COMPONENT_REFS: FieldType[] = [\n    FieldType.TT_ASYNC_MULTI_SELECT,\n    FieldType.TT_LINKAGE_CODE,\n    FieldType.TT_MULTI_SELECT_GRID,\n    FieldType.TT_AGE_INPUT,\n    FieldType.TT_BARCODE,\n    FieldType.TT_NOTE,\n    FieldType.TT_SELECT,\n    FieldType.TT_CARD_SELECTOR,\n    FieldType.TT_MULTIPLE_SELECT,\n    FieldType.TT_TEXT,\n    FieldType.TT_NUMBER,\n    FieldType.TT_MONTHLY_DAYS,\n    FieldType.TT_ART_REGIMEN_SELECTION,\n    FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n    FieldType.TT_TABLE_VIEWER,\n    FieldType.TT_DOSAGE_INPUT,\n    FieldType.TT_YES_NO,\n    FieldType.TT_MULTIPLE_YES_NO,\n    FieldType.TT_WEIGHT_CHART,\n    FieldType.TT_VITALS_ENTRY,\n    FieldType.TT_APPOINTMENTS_ENTRY,\n    FieldType.TT_COMPLAINTS_PICKER,\n    FieldType.TT_CLINIC_HOLIDAY_PICKER,\n    FieldType.TT_SUMMARY,\n    FieldType.TT_ART_STAGING_SUMMARY,\n    FieldType.TT_ADHERENCE_INPUT,\n    FieldType.TT_LAB_ORDERS,\n    FieldType.TT_PERSON_RESULT_VIEW,\n    FieldType.TT_PROGRAM_SELECTION,\n    FieldType.TT_DATE_PICKER,\n    FieldType.TT_RELATION_SELECTION,\n    FieldType.TT_FILING_NUMBER_VIEW,\n    FieldType.TT_PERSON_MATCH_VIEW,\n    FieldType.TT_FULL_DATE,\n    FieldType.TT_BATCH_ENTRY,\n    FieldType.TT_BATCH_VERIFICATION,\n    FieldType.TT_BATCH_MOVEMENT,\n    FieldType.TT_IP_ADDRESS,\n    FieldType.TT_TEXT_BANNER,\n    FieldType.TT_DISPENSATION_INPUT,\n    FieldType.TT_DATA_TABLE,\n    FieldType.TT_GROUP_SELECTOR,\n    FieldType.TT_ANC_PREGNANCY_INPUT_CONFIG,\n    FieldType.TT_ANC_PREGNANCY_DETAILS_INPUT,\n    FieldType.TT_ANC_LMP_DATE_INPUT,\n    FieldType.TT_DRUG_TRANSFER_IN,\n    FieldType.TT_GRID_SELECTOR,\n    FieldType.TT_ANC_DRUGSET_INPUT,\n    FieldType.TT_RADIOLOGY_PICKER,\n    FieldType.TT_PRESCRIPTION_INPUT,\n    FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n    FieldType.TT_DRUG_DISPENSER\n]\n","var map = {\n\t\"./AncDrugSetInput.vue\": [\n\t\t\"c99f\",\n\t\t\"TouchFormElement0\"\n\t],\n\t\"./AncLmpDateInput.vue\": [\n\t\t\"101a\",\n\t\t\"TouchFormElement1\"\n\t],\n\t\"./AncPregnancyDetailsInput.vue\": [\n\t\t\"b043\",\n\t\t\"TouchFormElement2\"\n\t],\n\t\"./AncPregnancyInfoConfig.vue\": [\n\t\t\"262e\",\n\t\t\"TouchFormElement3\"\n\t],\n\t\"./ArtStagingSummary.vue\": [\n\t\t\"43db\",\n\t\t\"TouchFormElement4\"\n\t],\n\t\"./AsyncMultiSelect.vue\": [\n\t\t\"5de2\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement5\"\n\t],\n\t\"./BaseTextInput.vue\": [\n\t\t\"36ad\",\n\t\t\"TouchFormElement6\"\n\t],\n\t\"./DrugDispensationSelection.vue\": [\n\t\t\"05d5\",\n\t\t\"TouchFormElement7\"\n\t],\n\t\"./DrugTransferInput.vue\": [\n\t\t\"de42\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement8\"\n\t],\n\t\"./FieldMixin.vue\": [\n\t\t\"51c8\",\n\t\t\"TouchFormElement9\"\n\t],\n\t\"./FilingNumberView.vue\": [\n\t\t\"c650\",\n\t\t\"TouchFormElement10\"\n\t],\n\t\"./GeneralDrugDispenser.vue\": [\n\t\t\"7737\",\n\t\t\"TouchFormElement11\"\n\t],\n\t\"./HisAdherenceInput.vue\": [\n\t\t\"f2c3\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement12\"\n\t],\n\t\"./HisAgeInput.vue\": [\n\t\t\"c05f\",\n\t\t\"TouchFormElement13\"\n\t],\n\t\"./HisAppointments.vue\": [\n\t\t\"b2eb\",\n\t\t\"chunk-d64a144c\",\n\t\t\"TouchFormElement14\"\n\t],\n\t\"./HisArtRegimenSelection.vue\": [\n\t\t\"47b9\",\n\t\t\"TouchFormElement15\"\n\t],\n\t\"./HisBarcodeInput.vue\": [\n\t\t\"dd65\",\n\t\t\"TouchFormElement16\"\n\t],\n\t\"./HisBatchEntry.vue\": [\n\t\t\"f2ab\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement17\"\n\t],\n\t\"./HisBatchMovement.vue\": [\n\t\t\"5148\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement18\"\n\t],\n\t\"./HisBatchVerification.vue\": [\n\t\t\"7b0f\",\n\t\t\"chunk-182277b5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement19\"\n\t],\n\t\"./HisCardSelector.vue\": [\n\t\t\"0734\",\n\t\t\"TouchFormElement20\"\n\t],\n\t\"./HisClinicHolidayPicker.vue\": [\n\t\t\"4030\",\n\t\t\"chunk-d64a144c\",\n\t\t\"TouchFormElement21\"\n\t],\n\t\"./HisComplaintsPicker.vue\": [\n\t\t\"82d1\",\n\t\t\"TouchFormElement22\"\n\t],\n\t\"./HisDataTable.vue\": [\n\t\t\"a6ba\",\n\t\t\"TouchFormElement23\"\n\t],\n\t\"./HisDateInput.vue\": [\n\t\t\"374c\",\n\t\t\"TouchFormElement24\"\n\t],\n\t\"./HisDatePicker.vue\": [\n\t\t\"9b30\",\n\t\t\"chunk-d64a144c\",\n\t\t\"TouchFormElement25\"\n\t],\n\t\"./HisDosageInput.vue\": [\n\t\t\"b34c\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement26\"\n\t],\n\t\"./HisGridSelector.vue\": [\n\t\t\"112a\",\n\t\t\"TouchFormElement27\"\n\t],\n\t\"./HisGroupSelector.vue\": [\n\t\t\"81cf\",\n\t\t\"TouchFormElement28\"\n\t],\n\t\"./HisIPAddress.vue\": [\n\t\t\"2a82\",\n\t\t\"TouchFormElement29\"\n\t],\n\t\"./HisInfiniteScrollMultipleSelect.vue\": [\n\t\t\"52a3\",\n\t\t\"TouchFormElement30\"\n\t],\n\t\"./HisLabOrders.vue\": [\n\t\t\"e614\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement31\"\n\t],\n\t\"./HisMonthlyDays.vue\": [\n\t\t\"69cf\",\n\t\t\"TouchFormElement32\"\n\t],\n\t\"./HisMultiSelectGrid.vue\": [\n\t\t\"0fa3\",\n\t\t\"TouchFormElement33\"\n\t],\n\t\"./HisMultipleSelect.vue\": [\n\t\t\"2fd5\",\n\t\t\"chunk-03993608\",\n\t\t\"TouchFormElement34\"\n\t],\n\t\"./HisNextVisitInterval.vue\": [\n\t\t\"3126\",\n\t\t\"TouchFormElement35\"\n\t],\n\t\"./HisNote.vue\": [\n\t\t\"c927\",\n\t\t\"TouchFormElement36\"\n\t],\n\t\"./HisNumberInput.vue\": [\n\t\t\"5e75\",\n\t\t\"TouchFormElement37\"\n\t],\n\t\"./HisPrescriptionInput.vue\": [\n\t\t\"87e5\",\n\t\t\"chunk-337918c0\",\n\t\t\"TouchFormElement38\"\n\t],\n\t\"./HisRadiologyPicker.vue\": [\n\t\t\"adc7\",\n\t\t\"TouchFormElement39\"\n\t],\n\t\"./HisSelect.vue\": [\n\t\t\"d11f\",\n\t\t\"TouchFormElement40\"\n\t],\n\t\"./HisSummary.vue\": [\n\t\t\"e0bd\",\n\t\t\"TouchFormElement41\"\n\t],\n\t\"./HisTableViewer.vue\": [\n\t\t\"8904\",\n\t\t\"TouchFormElement42\"\n\t],\n\t\"./HisTextBanner.vue\": [\n\t\t\"952c\",\n\t\t\"TouchFormElement43\"\n\t],\n\t\"./HisTextInput.vue\": [\n\t\t\"6ef9\",\n\t\t\"TouchFormElement44\"\n\t],\n\t\"./HisVitalsEntry.vue\": [\n\t\t\"e333\",\n\t\t\"TouchFormElement45\"\n\t],\n\t\"./HisWeightChart.vue\": [\n\t\t\"26a1\",\n\t\t\"TouchFormElement46\"\n\t],\n\t\"./LinkageCodeInput.vue\": [\n\t\t\"ac86\",\n\t\t\"TouchFormElement47\"\n\t],\n\t\"./MultiYesNoSelect.vue\": [\n\t\t\"5fd1\",\n\t\t\"TouchFormElement48\"\n\t],\n\t\"./PersonMatchView.vue\": [\n\t\t\"6591\",\n\t\t\"TouchFormElement49\"\n\t],\n\t\"./PersonSearchView.vue\": [\n\t\t\"28b2\",\n\t\t\"TouchFormElement50\"\n\t],\n\t\"./ProgramSelection.vue\": [\n\t\t\"e3b4\",\n\t\t\"TouchFormElement51\"\n\t],\n\t\"./RelationsSelection.vue\": [\n\t\t\"0e57\",\n\t\t\"TouchFormElement52\"\n\t],\n\t\"./SelectMixin.vue\": [\n\t\t\"82a9\",\n\t\t\"TouchFormElement53\"\n\t],\n\t\"./YesNoSelect.vue\": [\n\t\t\"71f2\",\n\t\t\"TouchFormElement54\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"f159\";\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}