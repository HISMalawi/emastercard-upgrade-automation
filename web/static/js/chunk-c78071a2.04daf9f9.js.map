{"version":3,"sources":["webpack:///./src/views/ProgramManagement.vue?75de","webpack:///./src/views/ProgramManagement.vue","webpack:///./src/views/ProgramManagement.vue?1500","webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/utils/ActionSheetHelpers/VoidReason.ts","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","key","hisFormKey","activeField","fieldComponent","skipSummary","fields","onOnIndex","$event","onOnFinish","onFinish","defineComponent","components","HisStandardForm","data","patient","patientProgram","activeProgram","programSelectionFieldContext","watch","field","this","params","patient_id","PatientProgramService","getProgramSelectionField","getProgramEnrollmentField","getProgramOutcomeDateFields","getProgramStateField","getTransferOutFacilityFields","getStateOutcomeDateFields","deep","immediate","methods","f","onEnrollProgram","onProgramState","Store","invalidate","programs","getPrograms","map","p","label","program","name","value","program_id","other","programStates","patient_states","s","startDate","HisDate","toStandardHisDisplayFormat","start_date","endDate","end_date","actions","getStateActions","hasPrograms","listData","ProgramService","getAllPrograms","disabled","find","workflows","getProgramWorkflows","getProgramId","isEmpty","states","program_workflow_state_id","color","action","async","pg","sIndex","onVoidState","patient_state_id","push","printTransferout","onUpdateState","toastWarning","updateState","transfer_out_state","transferOutEncounter","toastSuccess","e","toastDanger","programId","enrollProgram","state","stateIndex","popVoidReason","setStateId","voidState","reason","splice","patientProgramId","getPatientProgramId","voidProgram","fieldContext","programIndex","findIndex","setPatientProgramId","setProgramId","console","error","generateDateFields","id","helpText","condition","program_state","required","minDate","getProgramDate","maxDate","getSessionDate","estimation","allowUnknown","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","computeValue","date","setStateDate","type","FieldType","TT_SELECT","validation","val","Validation","options","_","filter","getFacilities","config","showKeyboard","isFilterDataViaApi","programWorkflows","unload","allPrograms","estimateDateFromAge","setProgramDate","btnVisibilityCondition","form","program_selection","TT_PROGRAM_SELECTION","onload","context","onValue","patient_program_id","toStandardHisFormat","date_enrolled","patientPrograms","hiddenFooterBtns","footerBtns","slot","visible","default","onClick","onVoidProgram","__exports__","DEFAULT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","callback","size","modal","optionsActionSheet","role","selection","_resolveDynamicComponent","formType","cancelDestinationPath","onFinishAction","onIndex","TouchScreenForm","emits","props","Function","Boolean","String","Object","formData","computedData","$emit","i","getYearField","showUnknown","primaryFunctions","appearInSummary","TT_TEXT","customKeyboard","getMonthField","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","parseInt","getDefaultDate","datePart","defaultValue","year","month","day","split","d","validateMinMax","computed","min","Date","max","refDate","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","includes","buildHelpTextDate","part","parts","reduce","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","proxyID","v","toString","c","StandardValidations","match","isNaN","minYear","getYear","summaryMapValue","summaryLabel","ref","computedValue","beforeNext","keyboardActions","valueEstimateCondition","estimateType","conditions","every","ageEstimateRegex","dayjs","Service","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","facilities","LocationService","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","tag","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id","getVillagesByName","page","getLandmarks","landmarks","landmark","code"],"mappings":"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","file":"js/chunk-c78071a2.04daf9f9.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    key: _ctx.hisFormKey,\n    activeField: _ctx.fieldComponent,\n    skipSummary: true,\n    fields: _ctx.fields,\n    onOnIndex: _cache[0] || (_cache[0] = ($event: any) => (_ctx.fieldComponent='')),\n    onOnFinish: _ctx.onFinish\n  }, null, 8, [\"activeField\", \"fields\", \"onOnFinish\"]))\n}","\nimport { defineComponent } from 'vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { toastWarning, toastSuccess, toastDanger } from \"@/utils/Alerts\"\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { EstimationFieldType, generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { ProgramService } from \"@/services/program_service\"\nimport { PatientProgramService } from \"@/services/patient_program_service\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { find, findIndex, isEmpty } from 'lodash'\nimport HisDate from \"@/utils/Date\"\nimport popVoidReason from \"@/utils/ActionSheetHelpers/VoidReason\"\nimport { getFacilities } from \"@/utils/HisFormHelpers/LocationFieldOptions\"\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        hisFormKey: 0 as number,\n        patient: {} as any,\n        patientProgram: {} as any,\n        fields: [] as Array<Field>,\n        fieldComponent: '' as string,\n        activeField: '' as string,\n        activeProgram: {} as any,\n        programSelectionFieldContext: {} as any\n    }),\n    watch: {\n        fieldComponent(field: string){\n            if (field) {\n                this.activeField = field\n            }\n        },\n        activeField(field: string) {\n            if (field === 'program_selection') {\n                // Recent hisFormKey to re-render everything\n                this.hisFormKey += 1\n            }\n        },\n        '$route': {\n            async handler({params}: any) {\n                if (params && params.patient_id) {\n                    this.patient = params.patient_id\n                    this.patientProgram = new PatientProgramService(this.patient)\n                    this.fields = [\n                        this.getProgramSelectionField(),\n                        this.getProgramEnrollmentField(),\n                        ...this.getProgramOutcomeDateFields(),\n                        this.getProgramStateField(),\n                        this.getTransferOutFacilityFields(),\n                        ...this.getStateOutcomeDateFields()\n                    ]\n                }\n            },\n            deep: true,\n            immediate: true\n        }\n    },\n    methods: {\n        async onFinish(f: any) {\n            switch(this.activeField) {\n                case 'program_enrollment':\n                    await this.onEnrollProgram()\n                    break;\n                case 'program_state':\n                    await this.onProgramState(f)\n                    break;\n            }\n            Store.invalidate('PATIENT_PROGRAM')\n        },\n        async patientPrograms() {\n            const programs = await this.patientProgram.getPrograms()\n            return programs.map((p: any) => ({\n                label: p.program.name,\n                value: p.program.program_id,\n                other: {\n                    ...p,\n                    programStates: p.patient_states.map((s: any) =>{\n                        return {\n                            name: s.name,\n                            startDate: HisDate.toStandardHisDisplayFormat(s.start_date),\n                            endDate: s.end_date ? HisDate.toStandardHisDisplayFormat(s.end_date): 'N/A',\n                            actions: this.getStateActions(s)\n                        }\n                    }) \n                }\n            }))\n        },\n        async allPrograms() {\n            const hasPrograms = this.programSelectionFieldContext.listData\n            const programs = await ProgramService.getAllPrograms()\n            // Build programs while excluding already existing ones\n            return programs.map((p: any) => ({\n                label: p.name,\n                value: p.program_id,\n                disabled: find(hasPrograms, { value: p.program_id }),\n                other: { ...p }\n            }))\n        },\n        async programWorkflows() {\n            const workflows = await ProgramService.getProgramWorkflows(this.patientProgram.getProgramId())\n            if (!isEmpty(workflows)) {\n                return workflows[0].states.map((s: any) => ({\n                    label: s.name, \n                    value: s.program_workflow_state_id,\n                    other: { ...s }\n                }))\n            }\n        },\n        getStateActions(s: any) {\n            const actions = [\n                {\n                    name: 'Void',\n                    color: 'danger',\n                    action: async (pg: any, sIndex: number) => {\n                        await this.onVoidState(s.patient_state_id, pg, sIndex)\n                    } \n                }\n            ]\n            if (s.name === 'Patient transferred out') {\n                actions.push({\n                    name: 'Print',\n                    color: 'primary',\n                    action: async () => await this.patientProgram.printTransferout(s.start_date)\n                })\n            }\n            return actions\n        },\n        onUpdateState() {\n            if (this.patientProgram.getProgramId() === -1) {\n                return toastWarning('Please select a program')\n            }\n            this.fieldComponent = 'program_state'\n        },\n        async onProgramState(f: any) {\n            try {\n                await this.patientProgram.updateState()\n                this.fieldComponent = 'program_selection'\n                if (f.transfer_out_state) {\n                    await this.patientProgram.transferOutEncounter(f.transfer_out_state.other)\n                } \n                toastSuccess('State has been updated')\n            } catch(e) {\n                toastDanger(`${e}`)\n            }\n        },\n        async onEnrollProgram() {\n            const programId = this.patientProgram.getProgramId()\n            if (programId === -1) {\n                return toastWarning('Please select a program')\n            }\n            try {\n                this.activeProgram = await this.patientProgram.enrollProgram()\n                this.fieldComponent = 'program_state'\n                toastSuccess('Patient has been enrolled!')\n            }catch(e) {\n                this.activeProgram = {}\n                toastDanger(`${e}`)\n            }\n        },\n        async onVoidState(state: any, activeProgram: any, stateIndex: number) {\n            await popVoidReason(async (reason: string) => {\n                try {\n                    this.patientProgram.setStateId(state)\n                    await this.patientProgram.voidState(reason)\n                    this.patientProgram.setStateId(-1)\n                    activeProgram.other.programStates.splice(stateIndex, 1)\n                    toastSuccess('State has been voided')\n                }catch(e) {\n                  toastDanger(`${e}`)\n                }\n            })\n        },\n        async onVoidProgram() {\n            const patientProgramId = this.patientProgram.getPatientProgramId()\n            if (patientProgramId === -1) {\n                return toastWarning('Please select a program')\n            }\n            await popVoidReason(async (reason: string) => {\n                try {\n                    await this.patientProgram.voidProgram(reason)\n                    const fieldContext = this.programSelectionFieldContext\n                    const programIndex = findIndex(fieldContext.listData, { value: this.patientProgram.getProgramId() })\n                    fieldContext.listData.splice(programIndex, 1)\n                    fieldContext.activeProgram = {}\n                    this.patientProgram.setPatientProgramId(-1)\n                    this.patientProgram.setProgramId(-1)\n                    toastSuccess('Program removed')\n                } catch(e) {\n                    console.error(e)\n                    toastDanger(`${e}`)\n                }\n            })\n        },\n        getStateOutcomeDateFields(): Array<Field> {\n            return generateDateFields({\n                id: 'state_outcome_date',\n                helpText: 'State',\n                condition: (f: any) => f.program_state,\n                required: true,\n                minDate: () => this.patientProgram.getProgramDate(),\n                maxDate: () => ProgramService.getSessionDate(),\n                estimation: {\n                    allowUnknown: true,\n                    estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                },\n                computeValue: (date: string) => this.patientProgram.setStateDate(date)\n            }, this.patientProgram.getProgramDate() || ProgramService.getSessionDate())\n        },\n        getTransferOutFacilityFields(): Field {\n            return {\n                id: \"transfer_out_state\",\n                helpText: 'Please Select facility name',\n                type: FieldType.TT_SELECT,\n                validation: (val: Option) => Validation.required(val),\n                condition: (f: any) => f.program_state.label === 'Patient transferred out',\n                options: (_: any, filter='') => getFacilities(filter),\n                config: {\n                    showKeyboard: true,\n                    isFilterDataViaApi: true\n                }\n            }\n        },\n        getProgramStateField(): Field {\n            return {\n                id: \"program_state\",\n                helpText: \"State\",\n                type: FieldType.TT_SELECT,\n                validation: (val: Option) => Validation.required(val),\n                options: () => this.programWorkflows(),\n                condition: () => this.activeField === 'program_state',\n                unload: (val: Option) => this.patientProgram.setStateId(val.value)\n            }\n        },\n        getProgramEnrollmentField(): Field {\n            return {\n                id: \"program_enrollment\",\n                helpText: \"Please select a programme\",\n                type: FieldType.TT_SELECT,\n                condition: () => this.activeField === 'program_enrollment',\n                unload: (val: Option) => this.patientProgram.setProgramId(val.value),\n                options: () => this.allPrograms(),\n                validation: (val: any) => Validation.required(val),\n                config: {\n                    showKeyboard: true\n                }\n            }\n        },\n        getProgramOutcomeDateFields(): Array<Field> {\n            return generateDateFields({\n                id: 'program_outcome_date',\n                helpText: 'Outcome',\n                required: true,\n                minDate: () => HisDate.estimateDateFromAge(100),\n                maxDate: () => ProgramService.getSessionDate(),\n                condition: () => this.activeField === 'program_enrollment',\n                estimation: {\n                    allowUnknown: true,\n                    estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n                },\n                computeValue: (date: string) => this.patientProgram.setProgramDate(date)\n            }, ProgramService.getSessionDate())\n        },\n        getProgramSelectionField(): Field {\n            const btnVisibilityCondition = (form: any) => {\n                return !isEmpty(form.program_selection)\n            }\n            return {\n                id: 'program_selection',\n                helpText: 'Programs',\n                type: FieldType.TT_PROGRAM_SELECTION,\n                onload: (context: any) => {\n                    this.activeField = 'program_selection'\n                    this.programSelectionFieldContext = context\n                },\n                onValue: (val: Option) => {\n                    if (val) {\n                        this.activeProgram = val.other\n                        this.patientProgram.setProgramId(val.value)\n                        this.patientProgram.setPatientProgramId(val.other.patient_program_id)\n                        this.patientProgram.setProgramDate(\n                            HisDate.toStandardHisFormat(val.other.date_enrolled)\n                        )\n                    }\n                    return true\n                },\n                validation: (val: any) => Validation.required(val),\n                options: () => this.patientPrograms(),\n                config: {\n                    onVoidState: this.onVoidState,\n                    hiddenFooterBtns: [\n                        'Back',\n                        'Next',\n                        'Clear'\n                    ],\n                    footerBtns: [\n                        {\n                            name: 'Void Program',\n                            slot: 'end',\n                            color: 'danger',\n                            state: {\n                                visible: {\n                                    default: (_: any, form: any) => btnVisibilityCondition(form),\n                                    onValue: (_: any, form: any) => btnVisibilityCondition(form)\n                                }\n                            },\n                            onClick:  async () => {\n                                await this.onVoidProgram()\n                            }\n                        },\n                        {\n                            name: 'Update state',\n                            slot: 'end',\n                            state: {\n                                visible: {\n                                    default: (_: any, form: any) => btnVisibilityCondition(form),\n                                    onValue: (_: any, form: any) => btnVisibilityCondition(form)\n                                }\n                            },\n                            onClick: async () => {\n                                await this.onUpdateState()\n                            }\n                        },\n                        {\n                            name: 'Enroll',\n                            color: 'success',\n                            slot: 'end',\n                            onClick: () => {\n                                this.fieldComponent = 'program_enrollment'\n                            }\n                        }\n                    ] \n                }\n            }\n        }\n    }\n})\n","import { render } from \"./ProgramManagement.vue?vue&type=template&id=e0f23fb6&ts=true\"\nimport script from \"./ProgramManagement.vue?vue&type=script&lang=ts\"\nexport * from \"./ProgramManagement.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { optionsActionSheet } from '@/utils/ActionSheets'\n\nexport default async function popVoidReason(callback: Function, size = 'action-sheet-modal') {\n    const modal = await optionsActionSheet(\n        'Are you sure you want to void record?',\n        'Please specify reason for voiding this record',\n        [\n          'Mistake/ Wrong Entry',\n          'Duplicate',\n          'System Error' \n        ],\n        [\n            { name: 'Cancel', slot:'start'},\n            { name: 'Void', color: 'danger', slot:'end', role: 'action'}\n        ],\n        '',\n        size\n    )\n    if (modal.selection && modal.action === 'Void') {\n        await callback(modal.selection)\n    }\n}\n","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @param refDate \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface, refDate=''): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [_, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, _, day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport async function getVillagesByName(name='a', page=1): Promise<Option[]> {\n    const villages = await LocationService.getVillagesByName(name, page)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport function getLandmarks(): Option[] {\n    const landmarks = [\n        'Catholic Church',\n        'CCAP',\n        'Seventh Day',\n        'Mosque',\n        'Primary School',\n        'Borehole',\n        'Secondary School',\n        'College',\n        'Market',\n        'Football Ground',\n        'Other'\n    ]\n\n    return landmarks.map(landmark =>({\n        label: landmark,\n        value: landmark,\n        other: {\n            code: landmark\n        }\n    }))\n}\n"],"sourceRoot":""}