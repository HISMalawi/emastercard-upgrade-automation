{"version":3,"sources":["webpack:///./src/apps/SPINE/services/patient_referral_service.ts","webpack:///./src/apps/SPINE/services/patient_outcome_service.ts","webpack:///./src/apps/SPINE/views/encounters/DischargePatient.vue","webpack:///./src/apps/SPINE/views/encounters/DischargePatient.vue?0ce8","webpack:///./src/utils/HisFormHelpers/commons.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["PatientReferralService","AppEncounterService","constructor","patientID","providerID","super","PatientOutcomeService","_defineComponent","__name","setup","__props","referralService","dischargeService","fields","ref","goToNextTask","patientDashboardUrl","useEncounter","providerId","patientId","value","getOutcomeField","getFacilityField","getInternalSectionsField","async","onSubmit","_fdata","cdata","createEncounter","outcomeObs","resolveObs","saveObservationList","referralObs","isEmpty","id","helpText","type","FieldType","TT_SELECT","validation","Validation","required","computedValue","v","tag","obs","buildValueCoded","options","label","buildValueText","condition","f","outcome_status","_","filter","getFacilities","config","showKeyboard","isFilterDataViaApi","LocationService","getInternalSections","footerBtns","name","slot","color","onClick","c","field","length","toastWarning","filtered","some","i","toLowerCase","alertConfirmation","data","createInternalSection","toUpperCase","listData","toastDanger","_ctx","_cache","_openBlock","_createBlock","_unref","IonPage","default","_withCtx","_createVNode","HisStandardForm","cancelDestinationPath","onFinishAction","skipSummary","__exports__","values","Object","d","reduce","accum","cur","Array","isArray","concat","push","Promise","all","mapStrToOptions","map","option","mapObjToOptions","other","mapToYesNoOptions","checkedOptions","hasUnknown","_checkedValue$value","checkedValue","find","yesNoUnknownOptions","yesNoOptions","facilities","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id","getVillagesByName","page","getLandmarks","landmarks","landmark","code"],"mappings":"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","file":"js/chunk-0f68ebc1.7ea087a4.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class PatientReferralService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 114, providerID) \n    }\n}","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class PatientOutcomeService extends AppEncounterService {\n  constructor(patientID: number, providerID: number) {\n    super(patientID, 40, providerID) \n  }\n}\n","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nimport { ref } from 'vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { getFacilities } from '@/utils/HisFormHelpers/LocationFieldOptions';\nimport { PatientReferralService } from '@/apps/SPINE/services/patient_referral_service'\nimport { PatientOutcomeService } from '@/apps/SPINE/services/patient_outcome_service';\nimport { LocationService } from \"@/services/location_service\";\nimport { resolveObs } from '@/utils/HisFormHelpers/commons';\nimport useEncounter from '@/composables/useEncounter';\nimport { isEmpty } from 'lodash';\nimport { alertConfirmation, toastDanger, toastWarning } from '@/utils/Alerts';\nimport { IonPage } from '@ionic/vue';\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'DischargePatient',\n  setup(__props) {\n\nlet referralService: PatientReferralService;\nlet dischargeService: PatientOutcomeService;\nconst fields = ref<Array<Field>>([]);\n\nconst { goToNextTask, patientDashboardUrl } = useEncounter((providerId, patientId) => {\n  dischargeService = new PatientOutcomeService(patientId, providerId);\n  referralService = new PatientReferralService(patientId, providerId)\n  fields.value = [\n    getOutcomeField(),\n    getFacilityField(),\n    getInternalSectionsField()\n  ];\n});\n\n\nasync function onSubmit(_fdata: any, cdata: any) {\n  await dischargeService.createEncounter();\n  const outcomeObs = await resolveObs({...cdata}, 'outcome');\n  await dischargeService.saveObservationList(outcomeObs);\n  const referralObs = await resolveObs({...cdata}, 'referral')\n  if(!isEmpty(referralObs)) {\n    await referralService.createEncounter()\n    await referralService.saveObservationList(referralObs);\n  }\n  goToNextTask() \n}\n\nfunction getOutcomeField (): Field {\n  return {\n    id: 'outcome_status',\n    helpText: 'Select Discharge Outcome',\n    type: FieldType.TT_SELECT,\n    validation: (value: any) => Validation.required(value),\n    computedValue: (v: Option) => ({\n      tag: 'outcome',\n      obs: dischargeService.buildValueCoded(\"outcome\", v.value)\n    }),\n    options: () => [\n      { label: \"Referred (Within the Facility)\", value: \"Patient transferred internally\"},\n      { label: \"Dead\", value: \"Died in treatment\"},\n      { label: \"Abscorded\", value: \"Absconded\"},\n      { label: \"Alive (Discharged home)\", value: \"Discharged home\"},\n      { label: \"Transferred (Another health facility)\", value: \"Discharged to another facility\"}\n    ]\n  }\n}\n\nfunction getFacilityField (): Field {\n  return {\n    id: 'facility_name',\n    helpText: 'Select Facility name',\n    type: FieldType.TT_SELECT,\n    validation: (value: any) => Validation.required(value),\n    computedValue: (v: Option) => ({\n      tag: 'referral',\n      obs: referralService.buildValueText('Referred', v.label)\n    }),\n    condition: (f: any) => f.outcome_status.value === \"Discharged to another facility\",\n    options: (_: any, filter='') => getFacilities(filter),\n    config: {\n        showKeyboard: true,\n        isFilterDataViaApi: true\n    }\n  }\n}\n\nfunction getInternalSectionsField(): Field {\n  return {\n    id: 'internal_sections',\n    helpText: 'Select Ward/internal section',\n    type: FieldType.TT_SELECT,\n    validation: (value: any) => Validation.required(value),\n    computedValue: (v: Option) => ({\n      tag: 'referral',\n      obs: referralService.buildValueText('Specialist clinic', v.label)\n    }),\n    condition: (f: any) =>f.outcome_status.value === \"Patient transferred internally\",\n    options: () => LocationService.getInternalSections(),\n    config: { \n      showKeyboard: true,\n      footerBtns: [{\n        name: 'Add Section',\n        slot: 'end',\n        color: 'success',\n        onClick: async (f: any, c: any, field: any) => {\n            if (typeof field.filter != 'string' || field.filter.length < 3) {\n                return toastWarning(`Please enter a valid section name`)\n            }\n            if (field.filtered.some((i: Option) => i.label.toLowerCase() === field.filter.toLowerCase())) {\n                return toastWarning(`Section already existing`)\n            }\n            if ((await alertConfirmation(`Do you want to add internal section?`))) {\n                const data = await LocationService.createInternalSection(field.filter.toUpperCase())\n                if (data) {\n                    field.filter = data.name\n                    field.listData = [{label: data.name, value: data.id}, ...field.listData]\n                } else {\n                    toastDanger(`Unable to add ${field.filter}`)\n                }\n            }\n        }\n      }]\n    }\n  }\n}\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createBlock(_unref(IonPage), null, {\n    default: _withCtx(() => [\n      _createVNode(HisStandardForm, {\n        cancelDestinationPath: _unref(patientDashboardUrl),\n        fields: fields.value,\n        onFinishAction: onSubmit,\n        skipSummary: \"\"\n      }, null, 8, [\"cancelDestinationPath\", \"fields\"])\n    ]),\n    _: 1\n  }))\n}\n}\n\n})","import script from \"./DischargePatient.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./DischargePatient.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { Option } from \"@/components/Forms/FieldInterface\"\nimport { find } from \"lodash\"\n\nexport function resolveObs(obs: any, tag = '') {\n  const values: any = Object.values(obs)\n    .filter((d: any) => d && (d.tag === tag || tag === ''))\n    .reduce((accum: any, cur: any) => {\n      const data = cur.obs ? cur.obs : cur\n      if (Array.isArray(data)) {\n        accum = accum.concat(data)\n      } else if (typeof data === 'function') {\n        accum.push(data())\n      } else {\n        accum.push(data)\n      }\n      return accum\n    }, [])\n  return Promise.all(values)\n}\n\nexport function mapStrToOptions(options: Array<string>): Array<Option> {\n  return options.map(option => ({ label: option, value: option }));\n}\n\nexport function mapObjToOptions(options: Array<Record<string, any>>, label = \"name\", value = \"name\"): Array<Option> {\n  return options.map(option => ({ label: option[label], value: option[value], other: option }));\n}\n\nexport function mapToYesNoOptions(options: Array<string>, checkedOptions?: Array<Option>, hasUnknown = false) {\n  return options.map(label => {\n    const checkedValue = find(checkedOptions, { label });\n    return {\n      label,\n      value: checkedValue?.value ?? \"\",\n      other: {\n        values: hasUnknown ? yesNoUnknownOptions() : yesNoOptions()\n      }\n    }\n  });\n}\n\nexport function yesNoUnknownOptions() {\n  return mapStrToOptions([\"Yes\", \"No\", \"Unknown\"]);\n}\n\nexport function yesNoOptions() {\n  return mapStrToOptions([\"Yes\", \"No\"]);\n}\n\nexport function toYesNoOption(label: string, other: any={}): Option {\n  return {\n      label,\n      value: '',\n      other: {\n          ...other,\n          values: yesNoOptions()\n      }\n  } \n}","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport async function getVillagesByName(name='a', page=1): Promise<Option[]> {\n    const villages = await LocationService.getVillagesByName(name, page)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport function getLandmarks(): Option[] {\n    const landmarks = [\n        'Catholic Church',\n        'CCAP',\n        'Seventh Day',\n        'Mosque',\n        'Primary School',\n        'Borehole',\n        'Secondary School',\n        'College',\n        'Market',\n        'Football Ground',\n        'Other'\n    ]\n\n    return landmarks.map(landmark =>({\n        label: landmark,\n        value: landmark,\n        other: {\n            code: landmark\n        }\n    }))\n}\n"],"sourceRoot":""}