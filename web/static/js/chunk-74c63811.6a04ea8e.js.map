{"version":3,"sources":["webpack:///./src/apps/ART/views/encounters/LabActivities.vue?3d92","webpack:///./src/apps/ART/views/encounters/LabActivities.vue","webpack:///./src/apps/ART/views/encounters/LabActivities.vue?9e5b","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","onOnFinish","onFinish","skipSummary","cancelDestinationPath","cancelDestination","defineComponent","mixins","EncounterMixinVue","components","HisStandardForm","data","fieldContext","watch","ready","handler","this","getFields","methods","nextTask","id","helpText","type","FieldType","TT_LAB_ORDERS","onload","options","async","orders","OrderService","getOrdersIncludingGivenResultStatus","patientID","VLOrders","formatLabs","label","value","other","values","config","printOrder","orderID","PatientPrintoutService","printLabOrderLbl","hiddenFooterBtns","footerBtns","name","size","slot","color","visible","onClick","isEmpty","launchOrderSelection","visibleOnStateChange","state","index","__exports__","FlowState","dformat","d","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","patient","providerID","facts","route","params","patient_id","parseInt","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","immediate","deep","computed","patientDashboardUrl","runflowState","states","username","split","provider","find","person_id","$router","push","EXIT","gotoPatientDashboard","findings","matchToGuidelines","finding","status","program","e","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","getBirthdate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","map","p","person","names","latestName","given_name","family_name","toOption","mapStrToOptions","items","i","path","yesNoOptions","toYesNoOption","mapOptions","option","yesNoUnknownOptions","resolveObs","obs","tag","Object","filter","reduce","accum","cur","Array","isArray","concat","Promise","all","inArray","arr","expression","length","validateSeries","condition","_resolveDynamicComponent","formType","activeField","onFinishAction","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","Boolean","default","String","required","formData","computedData","$emit","isCondition","ignored","undefined","prop","includes","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","some","title","description","text","info"],"mappings":"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","file":"js/chunk-74c63811.6a04ea8e.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    onOnFinish: _ctx.onFinish,\n    skipSummary: true,\n    cancelDestinationPath: _ctx.cancelDestination\n  }, null, 8, [\"fields\", \"onOnFinish\", \"cancelDestinationPath\"]))\n}","\nimport { defineComponent } from \"vue\";\nimport { FieldType } from \"@/components/Forms/BaseFormElements\";\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport EncounterMixinVue from \"../../../../views/EncounterMixin.vue\";\nimport { isEmpty } from \"lodash\";\nimport { OrderService } from \"@/services/order_service\";\nimport { PatientPrintoutService } from \"@/services/patient_printout_service\";\n\nexport default defineComponent({\n  mixins: [EncounterMixinVue],\n  components: { HisStandardForm },\n  data: () => ({\n    fields: [] as any,\n    fieldContext: {} as any,\n  }),\n  watch: {\n    ready: {\n      handler(ready: boolean) {\n        if (ready) {\n          this.fields = this.getFields() \n        }\n      }\n    }\n  },\n  methods: {\n    onFinish() {\n        this.nextTask()\n    },\n    getFields(): any {\n      return [\n        {\n          id: \"patient_lab_orders\",\n          helpText: \"Lab orders\",\n          type: FieldType.TT_LAB_ORDERS,\n          onload: (fieldContext: any) => {\n            this.fieldContext = fieldContext\n          },\n          options: async () => {\n            const orders: any = await OrderService.getOrdersIncludingGivenResultStatus(this.patientID);\n            const VLOrders = OrderService.formatLabs(orders);\n            return [\n              {\n                label: \"Lab orders\",\n                value: \"order trail\",\n                other: {\n                  values: VLOrders,\n                }\n              }\n            ]\n          },\n          config: {\n            printOrder: (orderID: number) => {\n              return new PatientPrintoutService(this.patientID).printLabOrderLbl(orderID)\n            },\n            hiddenFooterBtns: [\"Clear\"],\n            footerBtns: [\n              {\n                name: \"Order\",\n                size: \"large\",\n                slot: \"end\",\n                color: \"primary\",\n                visible: true,\n                onClick: async () => {\n                  if (!isEmpty(this.fieldContext)) {\n                    await this.fieldContext.launchOrderSelection()\n                  }\n                },\n                visibleOnStateChange: (state: Record<string, any>) => {\n                  return state.index === 0;\n                }\n              }\n            ]\n          }\n        }\n      ]\n    }\n  }\n});\n","import { render } from \"./LabActivities.vue?vue&type=template&id=129272ea&ts=true\"\nimport script from \"./LabActivities.vue?vue&type=script&lang=ts\"\nexport * from \"./LabActivities.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n"],"sourceRoot":""}