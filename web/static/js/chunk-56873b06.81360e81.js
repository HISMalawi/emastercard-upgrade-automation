(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-56873b06"],{"668a":function(e,t,n){"use strict";n.r(t);var i=n("7a23");function r(e,t,n,r,s,a){const o=Object(i["resolveComponent"])("his-standard-form"),d=Object(i["resolveComponent"])("ion-page");return Object(i["openBlock"])(),Object(i["createBlock"])(d,null,{default:Object(i["withCtx"])(()=>[(Object(i["openBlock"])(),Object(i["createBlock"])(o,{key:e.hisFormKey,activeField:e.fieldComponent,skipSummary:!0,fields:e.fields,onOnIndex:t[0]||(t[0]=t=>e.fieldComponent=""),onOnFinish:e.onFinish},null,8,["activeField","fields","onOnFinish"]))]),_:1})}var s=n("d95e"),a=n("7920"),o=n("2706"),d=n("d867"),u=n("2ef0"),c=n("76f1"),g=n("8ee8"),l=n("c84b"),p=n("b5e4"),h=Object(i["defineComponent"])({components:{HisStandardForm:a["a"],IonPage:d["IonPage"]},data:()=>({hisFormKey:0,fields:[],allDrugs:[],fieldComponent:"",service:{}}),created(){this.fields=this.getFields()},methods:{async onFinish(e,t){try{if(await l["a"].saveDrugSet(t))return Object(p["d"])("Drugset saved successfully"),this.$router.back();Object(p["e"])("Unable to save drugset")}catch(n){Object(p["e"])(""+n)}},getFields(){return[{id:"name",helpText:"Enter drug set name",type:s["b"].TT_TEXT,computedValue:e=>e.value,validation:e=>o["a"].validateSeries([()=>o["a"].required(e),()=>(""+e.value).match(/^([a-zA-Z_ ]{2,17})'?-?([a-zA-Z_ ]{1,17})$/)?null:["Enter a valid drug set name."]])},{id:"description",helpText:"Drug set description",type:s["b"].TT_TEXT,computedValue:e=>e.value,validation:e=>o["a"].validateSeries([()=>o["a"].required(e),()=>(""+e.value).match(/^([a-zA-Z_ ]{2,100})'?-?([a-zA-Z_ ]{1,100})$/)?null:["Enter a valid drug set description"]])},{id:"drug_selection",helpText:"Select drugs to add",type:s["b"].TT_MULTIPLE_SELECT,validation:e=>o["a"].required(e),config:{showKeyboard:!0},options:async()=>(Object(u["isEmpty"])(this.allDrugs)&&(this.allDrugs=(await c["a"].getDrugs({page_size:1e3})).map(e=>({label:e.name,value:e.id,other:{drug:e.name,quantity:0,frequency:""}}))),this.allDrugs)},{id:"drugs",helpText:"Set drugs",type:s["b"].TT_ANC_DRUGSET_INPUT,computedValue:e=>e.map(e=>e.other),validation:e=>o["a"].validateSeries([()=>o["a"].required(e),()=>e.map(e=>e.other.quantity&&e.other.frequency).every(Boolean)?null:["Data is not complete"]]),options:e=>e.drug_selection,config:{drugFrequencies:Object.keys(g["b"]).map(e=>({label:e,value:e}))}}]}}}),m=n("d959"),y=n.n(m);const _=y()(h,[["render",r]]);t["default"]=_},"71c3":function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var i=n("1c74");class r extends i["e"]{constructor(){super()}static create(e){return this.postJson("drug_orders",e)}static updateDispensationOrders(e){return this.postJson("dispensations",{program_id:this.getProgramID(),dispensations:e.map(e=>({date:this.getSessionDate(),drug_order_id:e["order_id"],quantity:e["quantity"]}))})}static getDrugOrderHistory(e){return this.getJson("drug_orders",{patient_id:e})}static getDrugOrders(e){return this.getJson("drug_orders",{patient_id:e,date:this.getSessionDate(),program_id:this.getProgramID()})}static getAllDrugOrders(e,t=1e3){return this.getJson("drug_orders",{patient_id:e,program_id:i["e"].getProgramID(),page_size:t})}static getLastDrugsReceived(e){return this.getJson(`patients/${e}/last_drugs_received`,{date:this.getSessionDate(),program_id:this.getProgramID()})}static getDrugDosages(e,t,n=this.getSessionDate()){const i={drug_id:t,date:n};return this.getJson(`programs/${this.getProgramID()}/patients/${e}/drug_doses`,i)}static getOrderByPatient(e,t){return this.getJson("/drug_orders",{patient_id:e,program_id:this.getProgramID(),...t})}}},"76f1":function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));var i=n("1c74");class r extends i["e"]{constructor(){super()}static getDrugs(e={}){return super.getJson("/drugs",e)}}},7920:function(e,t,n){"use strict";var i=n("7a23");function r(e,t,n,r,s,a){return Object(i["openBlock"])(),Object(i["createBlock"])(Object(i["resolveDynamicComponent"])(e.formType),{fields:e.fields,skipSummary:e.skipSummary,activeField:e.activeField,cancelDestinationPath:e.cancelDestinationPath,onOnFinish:e.onFinish,onFinish:e.onFinishAction,onOnIndex:e.onIndex},null,40,["fields","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinish","onOnIndex"])}var s=n("9441"),a=Object(i["defineComponent"])({name:"HisStandardForm",components:{TouchScreenForm:s["a"]},emits:["onFinish","onIndex"],data:()=>({formType:"touch-screen-form"}),props:{onFinishAction:{type:Function},skipSummary:{type:Boolean,default:!1},activeField:{type:String},fields:{type:Object,required:!0},cancelDestinationPath:{type:String,required:!1}},methods:{onFinish(e,t){this.$emit("onFinish",e,t)},onIndex(e){this.$emit("onIndex",e)}}}),o=n("d959"),d=n.n(o);const u=d()(a,[["render",r]]);t["a"]=u},"8ee8":function(e,t,n){"use strict";n.d(t,"b",(function(){return o})),n.d(t,"a",(function(){return d}));var i=n("cc6f"),r=n("71c3"),s=n("2ef0"),a=n("9283");const o={"Once a day (OD)":1,"Twice a day (BD)":2,"Three a day (TDS)":3,"Four times a day (QID)":4,"Five times a day (5X/D)":5,"Six times a day (Q4HRS)":6,"In the morning (QAM)":.5,"Once a week (QWK)":.14,"Once a month":.03,"Twice a month":.071};class d extends i["a"]{constructor(e,t){super(e,25,t)}vaccinationDrugObj(){return{drug_inventory_id:609,dose:.5,equivalent_daily_dose:.5,frequency:"Once a day (od)",start_date:this.date,auto_expire_date:this.date,instructions:"Once a day",units:"ml"}}async updateVaccinationOrder(){const e=await this.dispenseVaccinationDrug();if(!Object(s["isEmpty"])(e)){const t=e[0].order_id;return r["a"].updateDispensationOrders([{order_id:t,quantity:1}])}throw"Unable to dispense"}dispenseVaccinationDrug(){return this.createOrders([this.vaccinationDrugObj()])}createOrders(e){return r["a"].create({drug_orders:e,encounter_id:this.getEncounterID()})}async submitTreatment(e){await this.createEncounter();const t=await this.createOrders(e.map(e=>this.buildDrugOrderObj(e))),n=new i["a"](this.patientID,54,this.providerID);await n.createEncounter(),e.forEach(e=>{const n=o[e.frequency]*e.duration;t.forEach(t=>{t.drug_inventory_id===e.id&&(t.quantity=n)})}),await r["a"].updateDispensationOrders(t)}buildDrugOrderObj(e){const t=new Date(this.date),n=t.setDate(t.getDate()+parseInt(""+e.duration)),i=e.dose||o[e.frequency],r=parseFloat(i)*o[e.frequency];return{drug_inventory_id:e.id,dose:i,equivalent_daily_dose:r,frequency:e.frequency,start_date:this.date,auto_expire_date:a["c"].toStandardHisFormat(new Date(n)),instructions:e.drug_name+":"+e.dose+" "+e.units+" "+e.frequency+"days",units:e.units}}}},c84b:function(e,t,n){"use strict";n.d(t,"a",(function(){return r}));n("13d5"),n("14d9");var i=n("1c74");class r extends i["e"]{static saveDrugSet(e){const t={...e};return t["datetime"]=i["e"].getSessionDate(),this.postJson("/drug_sets",e)}static voidDrugSet(e){return this.void("/drug_sets/"+e,{date:this.getSessionDate()})}static async getDrugSets(){const e=await this.getJson("drug_sets");return e?Object.keys(e["set_names"]).reduce((t,n)=>{const i=e["set_names"][n],r=e["set_descriptions"][n],s=e["drug_sets"][n];return t.push({id:parseInt(n),name:i,description:r,drugs:Object.keys(s).reduce((e,t)=>[...e,{id:parseInt(t),...s[t],drug_name:s[t].drug_name,duration:parseInt(s[t].duration),frequency:s[t].frequency,units:s[t].units}],[])}),t},[]):[]}}}}]);
//# sourceMappingURL=chunk-56873b06.81360e81.js.map