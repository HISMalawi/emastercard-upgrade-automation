{"version":3,"sources":["webpack:///./src/components/Keyboard/KbLayouts.ts","webpack:///./src/apps/SPINE/services/hiv_status_service.ts","webpack:///./src/apps/SPINE/views/encounters/HIVStatus.vue","webpack:///./src/apps/SPINE/views/encounters/HIVStatus.vue?702e","webpack:///./src/components/Keyboard/HisKbConfigurations.ts","webpack:///./src/utils/HisFormHelpers/MultiFieldDateHelper.ts","webpack:///./src/utils/HisFormHelpers/MonthOptions.ts","webpack:///./src/utils/HisFormHelpers/commons.ts","webpack:///./src/utils/HisFormHelpers/LocationFieldOptions.ts"],"names":["DEFAULT_KEYPAD","PRESCRIPTION_KEYPAD","FLOAT_KEYPAD","VITALS_KEYPAD","DRUG_DISPENSER_KEYPAD","CD4_COUNT_PAD_LO","SYMBOLS","NUMBER_PAD_LO","NUMBER_ARROW_PAD_LO","MONTHLY_DAYS_LO","ALPHABETICAL_LO","QWERTY_LO","CHARACTERS_AND_NUMBERS_LO","NOTE_PAD_KEYBOARD","LOGIN_KEYBOARD","HIVStatusService","AppEncounterService","constructor","patientID","providerID","super","_defineComponent","__name","setup","__props","hivService","fields","ref","patientDashboardUrl","goToNextTask","useEncounter","providerId","patientId","patient","value","getHIVStatusField","getHivTestDateField","getTestLocationField","getCPTStartedField","getOnARTField","getArtStartDateField","getArtDefaultDateField","getCurrentArtLocationField","getARTAdviceField","async","onSubmit","_formData","computedData","encounter","createEncounter","toastWarning","data","resolveObs","obs","saveObservationList","id","helpText","type","FieldType","TT_SELECT","options","yesNoUnknownOptions","condition","f","received_arvs","computedValue","o","buildValueCoded","v","buildValueText","label","validation","val","Validation","required","test","_","filter","getFacilities","config","showKeyboard","isFilterDataViaApi","generateDateFields","minDate","_patient$getBirthdate","getBirthdate","maxDate","getDate","estimation","allowUnknown","estimationFieldType","EstimationFieldType","MONTH_ESTIMATE_FIELD","computeValue","date","isEstimate","buildDateObs","_patient$getBirthdate2","hiv_status","mapStrToOptions","_patient$getBirthdate3","getSessionDate","summaryLabel","defaultValue","getLocationName","_ctx","_cache","_openBlock","_createBlock","_unref","IonPage","default","_withCtx","_createVNode","HisStandardForm","cancelDestinationPath","onFinishAction","skipSummary","__exports__","SYMBOLS_CONFIG","NUMBERS_ONLY","NUMBERS_WITH_UNKNOWN","NUMBERS_WITH_ESTIMATE","NUMBERS_WITHOUT_NA_UNKNOWN","NUMBERS","MONTHLY_DAYS","A_TO_Z","QWERTY","KEY_BTN_NAV","btn","keyboard","getYearField","name","showUnknown","primaryFunctions","push","appearInSummary","TT_TEXT","customKeyboard","getMonthField","MonthOptions","getDayField","TT_MONTHLY_DAYS","getMonthDurationEstimateField","getAgeEstimateField","TT_NUMBER","keypad","appendLeadingZero","s","parseInt","getDefaultDate","form","field","datePart","year","month","day","split","d","HisDate","toStandardHisDisplayFormat","validateMinMax","computed","min","Date","max","fullDate","yearValue","monthValue","dayValue","dateIsEstimated","yearID","monthID","dayID","ageEstimateID","durationEstimateID","ageEstimate","durationEstimate","estimateMonthOrDay","allowUnknownMonthDay","datePartCondition","includes","buildHelpTextDate","part","parts","reduce","partValues","dpart","wl","undefined","join","init","updateHelpTextOnValue","proxyID","unload","toString","c","StandardValidations","match","isNaN","minYear","getYear","summaryMapValue","beforeNext","keyboardActions","valueEstimateCondition","estimateType","conditions","every","Boolean","ageEstimateRegex","dayjs","Service","subtract","AGE_ESTIMATE_FIELD","format","STANDARD_DATE_FORMAT","tag","values","Object","accum","cur","Array","isArray","concat","Promise","all","map","option","mapObjToOptions","other","mapToYesNoOptions","checkedOptions","hasUnknown","_checkedValue$value","checkedValue","find","yesNoOptions","facilities","LocationService","isEmpty","trim","facility","location_id","getLabFacilities","getLabs","getFacilityWards","wards","ward","getSpecialistClinics","clinics","clinic","getRegions","regions","region","region_id","getDistricts","regionID","districts","district","district_id","getTraditionalAuthorities","districtID","TAs","TA","traditional_authority_id","getVillages","traditionalAuthorityID","villages","village","village_id","getVillagesByName","page","getLandmarks","landmarks","landmark","code"],"mappings":"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","file":"js/chunk-4c645a45.a10f0df0.js","sourcesContent":["export const DEFAULT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['',  'Done', '']\n]\nexport const PRESCRIPTION_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del', '0', '.'],\n    ['Unknown', '', ''],\n]\nexport const FLOAT_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', '']\n]\nexport const VITALS_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['.', '0', 'Del'],\n    ['Clear',  '%', '/']\n]\nexport const DRUG_DISPENSER_KEYPAD = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['Del.', '0', 'Clear'],\n    // ['Reset',  'Close', 'Dispense']\n]\nexport const CD4_COUNT_PAD_LO = [\n    ['1', '2', '3', '<'],\n    ['4', '5', '6', '>'],\n    ['7', '8', '9', '='],\n    ['',  '0', '']\n]\n\nexport const SYMBOLS = [\n    ['1', '2', '3', '+', '-', '/', '*'],\n    ['4', '5', '6', '%', '=', '<', '>', 'Qwerty'],\n    ['7', '8', '9', '.', ','],\n    ['',  '0', '']\n]\n\nexport const NUMBER_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['',  '0', '']\n]\n\nexport const NUMBER_ARROW_PAD_LO = [\n    ['1', '2', '3'],\n    ['4', '5', '6'],\n    ['7', '8', '9'],\n    ['←',  '0', '→']\n]\n\nexport const MONTHLY_DAYS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7'],\n    ['8', '9', '10', '11', '12', '13', '14'],\n    ['15', '16', '17', '18', '19', '20', '21'],\n    ['22', '23', '24', '25', '26', '27', '28'],\n    ['29', '30', '31']\n]\n\nexport const ALPHABETICAL_LO = [\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\n\nexport const QWERTY_LO = [\n    ['q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p'],\n    ['a', 's', 'd', 'f', 'g', 'h', 'j', 'k', 'l', \"'\"],\n    ['z', 'x', 'c', 'v', 'b', 'n', 'm',',', '.', 'A-Z']\n]\n\nexport const CHARACTERS_AND_NUMBERS_LO = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0'],\n    ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', '-', '.'],\n    ['i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q'],\n    ['r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']\n]\nexport const NOTE_PAD_KEYBOARD = [\n    ['1', '2', '3', '4', '5', '6', '7', '8', '9', '0', 'Del'],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\", 'Clear'],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \".\", \"Caps\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"<\", \">\", \"/\", \"Enter\"], \n]\n\nexport const LOGIN_KEYBOARD =  [\n    [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"0\"],\n    [\"q\", \"w\", \"e\", \"r\", \"t\", \"y\", \"u\", \"i\", \"o\", \"p\"],\n    [\"a\", \"s\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"Del.\"],\n    [\"z\", \"x\", \"c\", \"v\", \"b\", \"n\", \"m\", \"Caps\", \"Login\"],\n];\n","import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class HIVStatusService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 39, providerID) \n    }\n}\n","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nimport { ref } from 'vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport Validation from '@/components/Forms/validations/StandardValidations';\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { getFacilities } from '@/utils/HisFormHelpers/LocationFieldOptions';\nimport { EstimationFieldType, generateDateFields } from '@/utils/HisFormHelpers/MultiFieldDateHelper';\nimport { toastWarning } from '@/utils/Alerts';\nimport { HIVStatusService } from '../../services/hiv_status_service';\nimport useEncounter from '@/composables/useEncounter';\nimport { mapStrToOptions, resolveObs, yesNoUnknownOptions } from '@/utils/HisFormHelpers/commons';\nimport { IonPage } from '@ionic/vue';\nimport { Patientservice } from '@/services/patient_service';\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'HIVStatus',\n  setup(__props) {\n\nlet hivService: HIVStatusService;\nconst fields = ref<Array<Field>>([]);\n\nconst { patientDashboardUrl, goToNextTask } = useEncounter((providerId, patientId, patient) => {\n  hivService = new HIVStatusService(patientId, providerId);\n  fields.value = [\n    getHIVStatusField(),\n    ...getHivTestDateField(patient),\n    getTestLocationField(),\n    getCPTStartedField(),\n    getOnARTField(),\n    ...getArtStartDateField(patient),\n    ...getArtDefaultDateField(patient),\n    getCurrentArtLocationField(),\n    getARTAdviceField(),\n  ];\n});\n\nasync function onSubmit(_formData: any, computedData: any){\n  const encounter = await hivService.createEncounter()\n  if (!encounter) return toastWarning('Unable to create encounter') \n  const data = await resolveObs({...computedData})\n  const obs = await hivService.saveObservationList(data)\n  if (!obs) return toastWarning('Unable to save observations')\n  goToNextTask()     \n}\n\nfunction getARTAdviceField(): Field {\n  return {\n    id: \"advised_to_visit_art\",\n    helpText: \"Advised to visit ART\",\n    type: FieldType.TT_SELECT,\n    options: yesNoUnknownOptions,\n    condition: (f: any) => f.received_arvs.value !== \"Yes\",\n    computedValue: (o: Option) => ({\n      obs: hivService.buildValueCoded(\"Advised to visit ART\", o.value)\n    })\n  }\n}\n\nfunction getCurrentArtLocationField(): Field {\n  return {\n    id: 'art_clinic_location',\n    helpText: 'ART clinic location',\n    type: FieldType.TT_SELECT,\n    computedValue: (v: Option) => ({ obs: hivService.buildValueText('ART clinic location', v.label) }),\n    validation: (val: any) => Validation.required(val),\n    condition: (f: any) => /Yes|Defaulter/i.test(f.received_arvs.value),\n    options: (_: any, filter='') => getFacilities(filter),\n    config: {\n        showKeyboard: true,\n        isFilterDataViaApi: true\n    }\n  }\n}\n\nfunction getArtStartDateField(patient: Patientservice): Array<Field> {\n  return generateDateFields({\n    id: 'date_started_art',\n    helpText: 'Started ART',\n    required: true,\n    condition: (f: any) => f.received_arvs.value === 'Yes',\n    minDate: () => `${patient?.getBirthdate() ?? ''}`,\n    maxDate: () => hivService.getDate(),\n    estimation: {\n        allowUnknown: true,\n        estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n    },\n    computeValue: (date: string, isEstimate: boolean) => hivService.buildDateObs('Date ART started', date, isEstimate) \n  })\n}\n\nfunction getArtDefaultDateField(patient: Patientservice): Array<Field> {\n  return generateDateFields({\n    id: 'date_defualted_art',\n    helpText: 'ART Default',\n    required: true,\n    condition: (f: any) => f.received_arvs.value === 'Defaulter',\n    minDate: () => `${patient?.getBirthdate() ?? ''}`,\n    maxDate: () => hivService.getDate(),\n    estimation: {\n        allowUnknown: true,\n        estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n    },\n    computeValue: (date: string, isEstimate: boolean) => hivService.buildDateObs('ART default date', date, isEstimate) \n  })\n}\n\nfunction getCPTStartedField(): Field {\n  return {\n    id: \"cpt_started\",\n    helpText: \"CPT Started\",\n    type: FieldType.TT_SELECT,\n    options: yesNoUnknownOptions,\n    condition: (f: any) => f.hiv_status.value === \"Reactive\",\n    computedValue: (o: Option) => ({\n      obs: hivService.buildValueCoded(\"CPT Started\", o.value)\n    })\n  }\n}\n\nfunction getOnARTField(): Field {\n  return {\n    id: 'received_arvs',\n    helpText: 'Started ART?',\n    type: FieldType.TT_SELECT,\n    computedValue: ({value}: Option) => ({ obs: hivService.buildValueCoded('ART Started', value) }),\n    validation: (v: any) => Validation.required(v),\n    options: () => mapStrToOptions([\n      \"Yes\",\n      \"No\",\n      \"Defaulter\",\n      \"Unknown\"\n    ]),\n    condition: (f: any) => f.hiv_status.value === \"Reactive\"\n  }\n}\n\nfunction getHIVStatusField(): Field {\n  return {\n    id: 'hiv_status',\n    helpText: 'HIV status',\n    type: FieldType.TT_SELECT,\n    validation: (value: any) => Validation.required(value),\n    computedValue: (v: Option) => ({ obs: hivService.buildValueText('HIV status', v.label) }),\n    options: () => mapStrToOptions([\n      \"Reactive\",\n      \"Non-reactive\",\n      \"Unknown\"\n    ])\n  }\n}\n\nfunction getHivTestDateField(patient: Patientservice) {\n  return generateDateFields({\n    id: 'hiv_test_date',\n    helpText: 'HIV Test',\n    required: true,\n    minDate: () => `${patient?.getBirthdate() ?? ''}`,\n    maxDate: () => HIVStatusService.getSessionDate(),\n    condition: (fields: any) => fields.hiv_status.value !== 'Unknown',\n    summaryLabel: 'HIV test date',\n    estimation: {\n      allowUnknown: true,\n      estimationFieldType: EstimationFieldType.MONTH_ESTIMATE_FIELD\n    },\n    computeValue: (date: string, isEstimate: boolean) => hivService.buildDateObs('HIV test date', date, isEstimate)\n  })\n}\n\nfunction getTestLocationField(): Field {\n  return {\n    id: 'test_location',\n    helpText: 'HIV test location',\n    type: FieldType.TT_SELECT,\n    validation: (value: any) => Validation.required(value),\n    defaultValue: () => HIVStatusService.getLocationName(),\n    computedValue: ({ label }: Option) => ({ obs: hivService.buildValueText('HIV test location', label) }),\n    condition: (fields: any) => fields.hiv_status.value !== 'Unknown',\n    options: (_: any, filter='') => getFacilities(filter),\n    config: {\n      showKeyboard: true,\n      isFilterDataViaApi: true\n    }\n  }\n}\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createBlock(_unref(IonPage), null, {\n    default: _withCtx(() => [\n      _createVNode(HisStandardForm, {\n        cancelDestinationPath: _unref(patientDashboardUrl),\n        fields: fields.value,\n        onFinishAction: onSubmit,\n        skipSummary: \"\"\n      }, null, 8, [\"cancelDestinationPath\", \"fields\"])\n    ]),\n    _: 1\n  }))\n}\n}\n\n})","import script from \"./HIVStatus.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./HIVStatus.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__","/**\n * Default keyboard configurations.\n * \n * Configuration consists of one or two keyboard layouts\n * to be displayed at once.\n */\n\nimport {\n    NUMBER_PAD_LO,\n    MONTHLY_DAYS_LO,\n    ALPHABETICAL_LO,\n    QWERTY_LO,\n    SYMBOLS,\n} from \"@/components/Keyboard/KbLayouts\";\n\nexport const SYMBOLS_CONFIG = [\n    SYMBOLS,\n    [\n        ['', 'Delete']\n    ]\n]\n\nexport const NUMBERS_ONLY = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS_WITH_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITH_ESTIMATE = [\n    NUMBER_PAD_LO,\n    [\n        ['N/A'],\n        ['Delete', 'Unknown']\n    ]\n]\n\nexport const NUMBERS_WITHOUT_NA_UNKNOWN = [\n    NUMBER_PAD_LO,\n    [\n        ['Delete']\n    ]\n]\n\nexport const NUMBERS = [\n    NUMBER_PAD_LO,\n    [\n        ['Unknown', 'Delete'],\n        ['Qwerty', 'A-Z'],\n    ]\n]\n\nexport const MONTHLY_DAYS = [\n    MONTHLY_DAYS_LO,\n    [\n        ['Unknown']\n    ]\n]\n\nexport const A_TO_Z = [\n    ALPHABETICAL_LO,\n    [\n        ['0-9', 'Delete'],\n        ['Qwerty', 'Unknown'],\n        ['', 'Space']\n    ]\n]\n\nexport const QWERTY = [\n    QWERTY_LO,\n    [\n        ['', 'Delete'],\n        ['?123', '0-9'],\n        ['Space', 'Unknown']\n    ]\n]\n\n/**\n * Navigation map for switching between different keyboard layouts\n */\nexport const KEY_BTN_NAV = [\n    {\n        btn: '0-9',\n        keyboard: NUMBERS\n    },\n    {\n        btn: '?123',\n        keyboard: SYMBOLS_CONFIG\n    },\n    {   \n        btn: 'A-Z',\n        keyboard: A_TO_Z \n    },\n    {\n        btn: 'Qwerty',\n        keyboard: QWERTY\n    }\n]\n","import { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport MonthOptions from \"@/utils/HisFormHelpers/MonthOptions\"\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport HisDate, { STANDARD_DATE_FORMAT } from \"@/utils/Date\"\nimport StandardValidations from \"@/components/Forms/validations/StandardValidations\"\nimport { NUMBER_PAD_LO } from \"@/components/Keyboard/KbLayouts\"\nimport { NUMBERS_WITHOUT_NA_UNKNOWN } from '../../components/Keyboard/HisKbConfigurations';\nimport dayjs from \"dayjs\"\nimport { Service } from \"@/services/service\"\n\nexport enum EstimationFieldType {\n    AGE_ESTIMATE_FIELD = \"age-estimate-field\",\n    MONTH_ESTIMATE_FIELD = \"month-period-estimate-field\"\n}\n\nexport interface EstimationInterface {\n    estimationFieldType?: EstimationFieldType;\n    allowUnknown: boolean; \n    allowUnknownMonthDay?: boolean;\n}\n\nexport interface DateFieldInterface {\n    id: string;\n    helpText: string;\n    init?: (f: any, c: any) => boolean | Promise<boolean>;\n    summaryLabel?: string;\n    condition?: (value: any) => Promise<boolean> | boolean;\n    required?: boolean;\n    defaultValue?: (form: any) => Promise<string| undefined> | string | undefined;\n    beforeNext?: (fullDate: string, f: any) => any;\n    minDate?(formData: any, computeForm: any): string;\n    maxDate?(formData: any, computeForm: any): string | null;\n    unload?(data: any, state: string, formData: any,  computeForm: any): void; \n    computeValue: (fullDate: string, isEstimate: boolean) => Promise<any> | any;\n    appearInSummary?: (value: Option) => Promise<boolean> | boolean;\n    estimation: EstimationInterface;\n    config?: any;\n}\n\nexport function getYearField(id: string, name: string, showUnknown=true): Field {\n    const primaryFunctions = []\n    if (showUnknown) primaryFunctions.push('UNKNOWN')\n    return {\n        id,\n        helpText: `${name} Year`,\n        appearInSummary: () => false,\n        type: FieldType.TT_TEXT,\n        config: {\n            customKeyboard: [\n                NUMBER_PAD_LO,\n                [\n                    primaryFunctions,\n                    ['DELETE']\n                ]\n            ]\n        }\n    }\n}\n\nexport function getMonthField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Month`,\n        appearInSummary: () => false,\n        type: FieldType.TT_SELECT,\n        options: () => MonthOptions\n    }\n}\n\nexport function getDayField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Day`,\n        type: FieldType.TT_MONTHLY_DAYS,\n        appearInSummary: () => false\n    }\n}\n\nexport function getMonthDurationEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Estimated period`,\n        type: FieldType.TT_SELECT,\n        appearInSummary: () => false,\n        options: () => ([\n            { label: '6 months ago', value: 180 },\n            { label: '12 months ago', value: 365 },\n            { label: '18 months ago', value: 540 },\n            { label: '24 months ago', value: 730 },\n            { label: 'Over 2 years ago', value: 730 }\n        ])\n    }\n}\n\nexport function getAgeEstimateField(id: string, name: string): Field {\n    return {\n        id,\n        helpText: `${name} Age Estimate`,\n        type: FieldType.TT_NUMBER,\n        appearInSummary: () => false,\n        config: {\n            keypad: NUMBERS_WITHOUT_NA_UNKNOWN\n        }\n    }\n}\n\nfunction appendLeadingZero(s: string) {\n    return parseInt(s) < 10 ? `0${s}` : s\n}\n\nasync function getDefaultDate(form: any, field: DateFieldInterface, datePart: 'Year' | 'Month' | 'Day') {\n    if (field.defaultValue) {\n        const date = await field.defaultValue(form)\n        if (date) {\n            const [year, month, day] = date.split('-')\n            switch(datePart) {\n                case 'Year':\n                    return year || ''\n                case 'Month':\n                    return parseInt(month) || ''\n                case 'Day':\n                    return parseInt(day) || ''    \n            }\n        }\n    }\n    return ''\n}\n\nfunction d(date: string) {\n    return HisDate.toStandardHisDisplayFormat(date)\n}\n\nfunction validateMinMax(date: string, field: DateFieldInterface, form: any, computed: any) {\n    if (field.minDate) {\n        const min = field.minDate(form, computed)\n        if (new Date(date) < new Date(min)) {\n            return [`${d(date)} is less than minimum date of ${d(min)}`]\n        }\n    }\n    if (field.maxDate) {\n        const max = field.maxDate(form, computed)\n        if (max && new Date(date) > new Date(max)) {\n            return [`${d(date)} is greater than max date of  ${d(max)}`]\n        }\n    }\n}\n/**\n * This Jungle of code generates Fields of Year, Month and Day.\n * \n * if you're brave please refactor this. Just dont break anything Ok!\n * @param field \n * @returns \n */\nexport function generateDateFields(field: DateFieldInterface): Array<Field> {\n    let fullDate = ''\n    let yearValue = ''\n    let monthValue = ''\n    let dayValue = ''\n    let dateIsEstimated = false\n\n    const yearID = `year_${field.id}`\n    const monthID = `month_${field.id}`\n    const dayID = `day_${field.id}`\n    const ageEstimateID = `age_estimate_${field.id}`\n    const durationEstimateID = `duration_estimate_${field.id}`\n\n    const year = getYearField(yearID, field.helpText, field.estimation.allowUnknown)\n    const month = getMonthField(monthID, field.helpText)\n    const day = getDayField(dayID, field.helpText)\n\n    const ageEstimate = getAgeEstimateField(ageEstimateID, field.helpText)\n    const durationEstimate = getMonthDurationEstimateField(durationEstimateID, field.helpText)\n\n    const estimateMonthOrDay = typeof field.estimation.allowUnknownMonthDay === 'boolean'\n        && field.estimation.allowUnknownMonthDay\n\n    const datePartCondition = (f: any) => {\n        if (f[yearID] && f[yearID].value) {\n            if (['Unknown'].includes(f[yearID].value)) {\n                return false\n            }\n        }\n        return field.condition ? field.condition(f) : true\n    }\n    /**\n     * Generates fulldate based on current date part, it's value and previously recorded date parts.\n     * @param value\n     * @param part\n     * @returns\n     */\n    const buildHelpTextDate = (value: any, part: 'month' | 'year' | 'day') => {\n        const parts = [\n            { type: 'year', value: yearValue, default: 'YYYY' },\n            { type: 'month', value: monthValue, default: 'MM' },\n            { type: 'day', value: dayValue, default: 'DD' },\n        ]\n        return parts.reduce((partValues: any, dpart: any) => {\n            const wl = [null, undefined, 'Unknown', '']\n            if (part === dpart.type) {\n                if (wl.includes(value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(value)\n                }\n            } else {\n                if (wl.includes(dpart.value)) {\n                    partValues.push(dpart.default)\n                } else {\n                    partValues.push(dpart.value)\n                }\n            }\n            return partValues\n        }, []).join('-')\n    }\n\n    if (typeof field.init === 'function') year.init = field.init\n    \n    // YEAR CONFIG\n    year.updateHelpTextOnValue = (data: any) => `${year.helpText} (${buildHelpTextDate(data?.label, 'year')})`\n\n    year.proxyID = field.id\n\n    year.unload = (v: Option) => yearValue = v.value.toString()\n \n    year.config = { ...year.config, ...field.config }\n\n    year.defaultValue = (f: any) => getDefaultDate(f, field, 'Year')\n\n    year.condition = (f: any) => field.condition \n        ? field.condition(f) \n        : true\n\n    year.validation = (v: Option, f: any, c: any) => {\n        if (field.required && StandardValidations.required(v)) {\n            return ['Year cannot be empty']\n        }\n        const year = v ? v.value : ''\n        if (!field.estimation.allowUnknown \n            && year.toString().match(/unknown/i)) {\n            return ['Value unknown is not permitted']\n        }\n    \n        if (year && !['Unknown'].includes(year as string)\n            && isNaN(year as number)\n            || year as number < 1900) {\n            return ['Invalid Year']\n        }\n\n        if (year && typeof field.minDate === 'function') {\n            const minYear = HisDate.getYear(field.minDate(f, c)) \n            if (parseInt(year as any) < minYear) {\n                return [`Year of ${year} is less than Minimum year of ${minYear}`]\n            }\n        }\n\n        if (year && typeof field.maxDate === 'function') {\n            const max = field.maxDate(f, c)\n            if (max && year as number > HisDate.getYear(max)) {\n                return [`Year of ${year} exceeds Maximum year of ${HisDate.getYear(max)}`]\n            }\n        }\n\n        return null\n    }\n    /**\n     * Year Proxy field will be our reference point of \n     * how data should appear on the summary\n     * @returns \n     */\n    year.summaryMapValue = () => ({\n        label: field.summaryLabel || field.helpText, \n        value: fullDate ? d(fullDate) : 'Unknown'\n    })\n\n    // To avoid the year from appearing on the summary, \n    // match the ref against the proxyID itself\n    year.appearInSummary = (_: any, ref: string) => ref === field.id\n\n    /**\n     * This helps to keep computeValue of the dateProxy up-to-date when year changes\n     * @param val \n     * @returns \n     */\n    year.computedValue = (val: Option) => {\n        if (fullDate) {\n            const [, month, day] = fullDate.split('-')\n            fullDate = `${val.value}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n        if (val && val.value === 'Unknown') {\n            fullDate = ''\n            return field.computeValue('Unknown', false)\n        }\n    }\n\n    // MONTH CONFIG\n    month.updateHelpTextOnValue = (data: any) => `${month.helpText} (${buildHelpTextDate(data?.label, 'month')})`\n\n    month.proxyID = field.id\n\n    month.unload = (v: Option) => monthValue = appendLeadingZero(v.value.toString())\n\n    month.condition = (f: any) =>  datePartCondition(f)\n\n    month.validation = (v: Option) => StandardValidations.required(v)\n\n    month.defaultValue = (f: any) => getDefaultDate(f, field, 'Month')\n\n    // Add Unknown value to trigger default estimated Month\n    if (estimateMonthOrDay) {\n        month.options = () => [...MonthOptions, { label: 'Unknown', value: 'Unknown'}]\n    }\n\n    /**\n     *\n     * This helps to keep compute value up to date when month changes\n     * @param val\n     * @returns\n     */\n    month.computedValue = (val: Option, f: any) => {\n        // Estimate Month and Day when Month Value is Unknown\n        if (`${val.value}`.match(/unknown/i)) {\n            fullDate = `${f[yearID].value}-07-15`\n            return field.computeValue(fullDate, true)\n        }\n        // Default date behaviour\n        if (fullDate) {\n            const [year, , day] = fullDate.split('-')\n            const month = appendLeadingZero(`${val.value}`)\n            fullDate = `${year}-${month}-${day}`\n            return field.computeValue(fullDate, false)\n        }\n    }\n    // DAY CONFIG\n    day.proxyID = field.id\n\n    day.updateHelpTextOnValue = (data: any) => `${day.helpText} (${buildHelpTextDate(data?.label, 'day')})`\n\n    day.condition = (f: any) => !`${f[monthID].value}`.match(/unknown/i) && datePartCondition(f) \n\n    day.validation =  (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Day is required for date']\n        }\n        dateIsEstimated = `${v.value}`.match(/unknown/i) ? true : false\n        // Use 15 as default value if day is estimated\n        dayValue = dateIsEstimated ? '15' :  appendLeadingZero(`${v.value}`)\n        fullDate = `${yearValue}-${monthValue}-${dayValue}`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    day.defaultValue = (f: any) => getDefaultDate(f, field, 'Day')\n\n    day.computedValue = () => {\n        return field.computeValue(fullDate, dateIsEstimated)\n    }\n\n    day.unload = (d: any, s: any, f: any, c: any) => {\n        if (field.unload) field.unload(d, s, f, c)\n    }\n\n    day.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    day.config = { \n        // Monthly days shown on the Day component depends on this configuration\n        // to show approprite days based on specific year and month calendar\n        year: (f: any) => f[yearID].value,\n        month: (f: any) => f[monthID].value\n    }\n    // If not configured to do estimates, dont show Unknown Button which appears by default\n    // on MonthlyDay component.\n    if (!estimateMonthOrDay) day.config.keyboardActions = []\n\n    const valueEstimateCondition = (f: any, estimateType: EstimationFieldType) => {\n        const conditions = [\n            f[yearID].value === 'Unknown',\n            field.condition ? field.condition(f) : true,\n            field.estimation.estimationFieldType === estimateType\n        ]\n        return conditions.every(Boolean)\n    }\n\n    // AGE ESTIMATE CONFIG\n    ageEstimate.proxyID = field.id\n\n    ageEstimate.validation = (v: Option, f: any, c: any) => {\n        if (v && v.value as number > 300) {\n            return ['Age estimate is too high and exceeding hard limit of 300']\n        }\n        if (isNaN(parseInt(v.value.toString()))) {\n            return ['Please enter a valid number']\n        }\n        const ageEstimateRegex = /^(12[0-7]|1[01][0-9]|[1-9]?[0-9])$/\n        if(!v.value.toString().match(ageEstimateRegex) ){\n            return ['Not a valid age estimate'] \n        }\n        const year = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'years')\n            .year()\n        fullDate = `${year}-07-15`\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    ageEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.AGE_ESTIMATE_FIELD\n    ) \n\n    ageEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    ageEstimate.beforeNext = (v: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    // DURATION ESTIMATE\n    durationEstimate.proxyID = field.id\n\n    durationEstimate.validation = (v: Option, f: any, c: any) => {\n        if (StandardValidations.required(v)) {\n            return ['Please select an estimate']\n        }\n        fullDate = dayjs(Service.getSessionDate())\n            .subtract(v.value as number, 'day')\n            .format(STANDARD_DATE_FORMAT)\n        return validateMinMax(fullDate, field, f, c)\n    }\n\n    durationEstimate.condition = (form: any) => valueEstimateCondition(\n        form, EstimationFieldType.MONTH_ESTIMATE_FIELD\n    )\n\n    durationEstimate.computedValue = () => field.computeValue(fullDate, true)\n\n    durationEstimate.beforeNext = (_: any, f: any) => {\n        return !field.beforeNext \n            ? true \n            : field.beforeNext(fullDate, f)\n    }\n\n    return [\n        year,\n        month,\n        day,\n        ageEstimate,\n        durationEstimate\n    ]\n}\n","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","import { Option } from \"@/components/Forms/FieldInterface\"\nimport { find } from \"lodash\"\n\nexport function resolveObs(obs: any, tag = '') {\n  const values: any = Object.values(obs)\n    .filter((d: any) => d && (d.tag === tag || tag === ''))\n    .reduce((accum: any, cur: any) => {\n      const data = cur.obs ? cur.obs : cur\n      if (Array.isArray(data)) {\n        accum = accum.concat(data)\n      } else if (typeof data === 'function') {\n        accum.push(data())\n      } else {\n        accum.push(data)\n      }\n      return accum\n    }, [])\n  return Promise.all(values)\n}\n\nexport function mapStrToOptions(options: Array<string>): Array<Option> {\n  return options.map(option => ({ label: option, value: option }));\n}\n\nexport function mapObjToOptions(options: Array<Record<string, any>>, label = \"name\", value = \"name\"): Array<Option> {\n  return options.map(option => ({ label: option[label], value: option[value], other: option }));\n}\n\nexport function mapToYesNoOptions(options: Array<string>, checkedOptions?: Array<Option>, hasUnknown = false) {\n  return options.map(label => {\n    const checkedValue = find(checkedOptions, { label });\n    return {\n      label,\n      value: checkedValue?.value ?? \"\",\n      other: {\n        values: hasUnknown ? yesNoUnknownOptions() : yesNoOptions()\n      }\n    }\n  });\n}\n\nexport function yesNoUnknownOptions() {\n  return mapStrToOptions([\"Yes\", \"No\", \"Unknown\"]);\n}\n\nexport function yesNoOptions() {\n  return mapStrToOptions([\"Yes\", \"No\"]);\n}\n\nexport function toYesNoOption(label: string, other: any={}): Option {\n  return {\n      label,\n      value: '',\n      other: {\n          ...other,\n          values: yesNoOptions()\n      }\n  } \n}","import {LocationService} from \"@/services/location_service\"\nimport { Option } from \"@/components/Forms/FieldInterface\"\nimport { isEmpty } from \"lodash\"\n\nexport async function getFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getFacilities({name: filter})\n    return facilities.filter((f: any) => !isEmpty(f) && f.name.trim() !='')\n        .map((facility: any) => ({\n            label: facility.name,\n            value: facility.location_id,\n            other: facility\n        }))\n}\n\nexport async function getLabFacilities(filter=''): Promise<Option[]> {\n    const facilities = await LocationService.getLabs({'search_name': filter})\n    return facilities.map((facility: any) => ({\n            label: facility,\n            value: facility\n        }))\n}\n\nexport async function getFacilityWards(filter=''): Promise<Option[]> {\n    const wards = await LocationService.getFacilities({\n        name: filter,\n        tag: 'Facility adult sections'\n    })\n\n    return wards.map((ward: any) => ({\n        label: ward.name,\n        value: ward.name,\n        other: ward\n    }))\n}\n\nexport async function getSpecialistClinics(): Promise<Option[]> {\n    const clinics = await LocationService.getSpecialistClinics()\n    return clinics.map((clinic: any) => ({\n        label: clinic.name,\n        value: clinic.name,\n        other: clinic\n    }))\n}\n\nexport async function getRegions(): Promise<Option[]> {\n    const regions = await LocationService.getRegions()\n    return regions.map((region: any) => ({\n        label: region.name,\n        value: region.region_id,\n        other: region\n    }))\n}\n\nexport async function getDistricts(regionID: number): Promise<Option[]> {\n    const districts = await LocationService.getDistricts(regionID)\n    return districts.map((district: any) => ({\n        label: district.name,\n        value: district.district_id,\n        other: district\n    }))\n}\n\nexport async function getTraditionalAuthorities(districtID: number, name=''): Promise<Option[]> {\n    const TAs = await LocationService.getTraditionalAuthorities(districtID, name)\n    return TAs.map((TA: any) => ({\n        label: TA.name,\n        value: TA.traditional_authority_id,\n        other: TA\n    }))\n}\n\nexport async function getVillages(traditionalAuthorityID: number, name=''): Promise<Option[]> {\n    const villages = await LocationService.getVillages(traditionalAuthorityID, name)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport async function getVillagesByName(name='a', page=1): Promise<Option[]> {\n    const villages = await LocationService.getVillagesByName(name, page)\n    return villages.map((village: any) => ({\n        label: village.name,\n        value: village.village_id,\n        other: village\n    }))\n}\n\nexport function getLandmarks(): Option[] {\n    const landmarks = [\n        'Catholic Church',\n        'CCAP',\n        'Seventh Day',\n        'Mosque',\n        'Primary School',\n        'Borehole',\n        'Secondary School',\n        'College',\n        'Market',\n        'Football Ground',\n        'Other'\n    ]\n\n    return landmarks.map(landmark =>({\n        label: landmark,\n        value: landmark,\n        other: {\n            code: landmark\n        }\n    }))\n}\n"],"sourceRoot":""}