{"version":3,"sources":["webpack:///./src/views/Example.vue?1ba8","webpack:///./src/components/FormElements/Presets/MonthOptions.ts","webpack:///./src/views/Example.vue","webpack:///./src/views/Example.vue?336d"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_openBlock","_createBlock","fields","activeField","onOnFinish","onFinish","label","value","defineComponent","components","HisStandardForm","data","created","this","getFields","methods","formData","console","log","id","helpText","type","FieldType","TT_DISPENSATION_INPUT","config","toolbarInfo","options","other","TT_TEXT","beforeNext","confirmation","confirm","TT_MULTIPLE_SELECT","showKeyboard","onValueUpdate","listData","isChecked","map","i","noneIndex","findIndex","disableIndex","disabled","validation","description","color","text","show","footerBtns","name","size","visible","slot","visibleOnStateChange","state","index","onClick","alert","TT_WEIGHT_CHART","labels","values","hiddenFooterBtns","TT_NUMBER","TT_SELECT","requireNext","MonthOptions","TT_MONTHLY_DAYS","condition","conditional_data","fdata","__exports__"],"mappings":"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","file":"js/chunk-2d22ca72.436c7c47.js","sourcesContent":["import { resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n\n  return (_openBlock(), _createBlock(_component_his_standard_form, {\n    fields: _ctx.fields,\n    activeField: _ctx.activeField,\n    onOnFinish: _ctx.onFinish\n  }, null, 8, [\"fields\", \"activeField\", \"onOnFinish\"]))\n}","export default ([\n    {\n        label: 'Jan',\n        value: 1\n    },\n    {\n        label: 'Feb',\n        value: 2\n    },\n    {\n        label: 'Mar',\n        value: 3\n    },\n    {\n        label: 'Apr',\n        value: 4\n    },\n    {\n        label: 'May',\n        value: 5\n    },\n    {\n        label: 'Jun',\n        value: 6\n    },\n    {\n        label: 'Jul',\n        value: 7\n    },\n    {\n        label: 'Aug',\n        value: 8\n    },\n    {\n        label: 'Sep',\n        value: 9\n    },\n    {\n        label: 'Oct',\n        value: 10\n    },\n    {\n        label: 'Nov',\n        value: 11\n    },\n    {\n        label: 'Dec',\n        value: 12\n    }\n])","\nimport { defineComponent } from \"vue\";\nimport { Field, Option } from \"@/components/Forms/FieldInterface\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport HisStandardForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport MonthOptions from \"@/components/FormElements/Presets/MonthOptions\"\nimport { findIndex } from \"lodash\"\n\nexport default defineComponent({\n  components: { HisStandardForm },\n  data: () => ({\n    activeField: '',\n    fields: [] as Array<Field>\n  }),\n  created() {\n    this.fields = this.getFields()\n  },\n  methods: {\n    onFinish(formData: any) {\n      console.log(formData)\n    },\n    getFields(): Array<Field> {\n      return [\n        {\n          id: 'dispense',\n          helpText: 'Dispensation',\n          type: FieldType.TT_DISPENSATION_INPUT,\n          config: {\n            toolbarInfo: [\n              { label: 'Name', value: 'Test patient' },\n              { label: 'Gender', value: 'Female' },\n              { label: 'Date Of Birth', value: '12/May/1994' }\n            ]\n          },\n          options: () => [\n            {\n              label: 'TDF300/3TC300/DTG50',\n              value: 0,\n              other: {\n                'amounted_needed': 30\n              }\n            },\n            {\n              label: 'Cotrimoxazole (960mg)',\n              value: 0,\n              other: {\n                'amounted_needed': 30\n              }\n            },\n            {\n              label: 'Rifapentine (150mg)',\n              value: 0,\n              other: {\n                'amounted_needed': 30\n              }\n            },\n            {\n              label: 'INH or H (Isoniazid 100mg tablet)',\n              value: 0,\n              other: {\n                'amounted_needed': 30\n              }\n            }\n          ]\n        },\n        {\n          id: 'hello_world',\n          helpText: 'BeforeNext',\n          type: FieldType.TT_TEXT,\n          beforeNext: () => {\n            const confirmation = confirm('Do you want to continue')\n            return confirmation\n          }\n        },\n        {\n          id: \"onvalue_hooks_multiple_select\",\n          helpText: \"Dynamically toggling values\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          config: {\n            showKeyboard: false\n          },\n          onValueUpdate: (listData: Array<Option>, value: Option) => {\n            if (value.isChecked && value.label === 'None') {\n              return listData.map(i => {\n                if (i.label != 'None') \n                  i.isChecked = false\n                return i\n              })\n            } else if (value.label != 'None' && value.isChecked) {\n              const noneIndex = findIndex(listData, {label: 'None'})\n              listData[noneIndex].isChecked = false\n            }\n\n            if (value.isChecked && value.label === 'Disable') {\n              const disableIndex = findIndex(listData, {label: 'Disable'})\n              listData[disableIndex].disabled = true\n            }\n            if (value.isChecked && value.label === 'Enable') {\n              const disableIndex = findIndex(listData, {label: 'Disable'})\n              listData[disableIndex].disabled = false\n            }\n            return listData\n          },\n          validation(value: any): null | Array<string> {\n            return !value ? [\"Value is required\"] : null;\n          },\n          options:()=> ([\n            {\n              label: \"Foo\",\n              value: \"Foo\",\n              description: {\n                color: 'danger',\n                text: 'Optional description'\n              }\n            },\n            {\n              label: \"This is prechecked by default\",\n              value: \"pre_checked\",\n            },\n            {\n              label: \"Bar\",\n              value: \"Bar\",\n              description: {\n                color: 'warning',\n                text: 'This has discription of different color'\n              }\n            },\n            {\n              label: \"Enable\",\n              value: \"enabled\",\n              description: {\n                color: 'secondary',\n                text: 'I only appear when checked',\n                show: 'onChecked'\n              }\n            },\n            {\n              label: \"Disable\",\n              value: \"disable\",\n            },\n            {\n              label: \"None\",\n              value: \"None\",\n            }\n          ]),\n        },\n        {\n          id: \"name_field\",\n          helpText: \"What is your name\",\n          type: FieldType.TT_TEXT,\n          validation(value: any): null | Array<string> {\n            return !value ? [\"Value is required\"] : null;\n          }\n        },\n        {\n          id: \"custom_btn\",\n          helpText: \"Show custom button\",\n          type: FieldType.TT_TEXT,\n          config: {\n            footerBtns: [\n              {\n                name: 'Void',\n                color: 'danger',\n                size: 'large',\n                visible: false,\n                slot: '',\n                visibleOnStateChange: (state: any) => {\n                  return state.index === 1\n                },\n                onClick: () => {\n                  alert('Record has been voided!')\n                }\n              },\n              {\n                name: 'Custom Something',\n                color: 'primary',\n                size: 'large',\n                visible: false,\n                slot: 'end',\n                visibleOnStateChange: (state: any) => {\n                  return state.index === 1\n                },\n                onClick: () => {\n                  alert('YaY! Custom Button Clicked')\n                }\n              },\n            ]\n          }\n        },\n        {\n          id: \"patient_chart\",\n          helpText: \"Patient Chart\",\n          type: FieldType.TT_WEIGHT_CHART,\n          options: () => ([{\n            label: 'Patient weight',\n            value: 54,\n            other: {\n              labels: ['10 Jan', '11 June', '8 Aug'],\n              values: [65, 38, 89, 57]\n            }\n          }])\n        },\n        {\n          id: 'hide_default_btns',\n          helpText: 'Default buttons have been hidden',\n          type: FieldType.TT_TEXT,\n          config: {\n            hiddenFooterBtns: [\n              'Clear',\n              'Cancel'\n            ]\n          }\n        },\n        {\n          id: 'skip_next_field',\n          helpText: 'Skip Next Field with custom button',\n          type: FieldType.TT_TEXT,\n          config: {\n            footerBtns: [\n              {\n                name: 'Skip Dates',\n                color: 'light',\n                size: 'large',\n                visible: false,\n                slot: 'end',\n                visibleOnStateChange: (state: any) => {\n                  return state.index === 3\n                },\n                onClick: () => {\n                  this.activeField = 'multiple_select'\n                }\n              }\n            ]\n          }\n        },\n        {\n          id: \"year\",\n          helpText: \"Year of birth\",\n          type: FieldType.TT_NUMBER\n        },\n        {\n          id: \"month\",\n          helpText: \"Month of birth\",\n          type: FieldType.TT_SELECT,\n          requireNext: false,\n          options: () => MonthOptions,\n          config: {\n            showKeyboard: false\n          }\n        },\n        {\n          id: \"day\",\n          helpText: \"Day of birth\",\n          type: FieldType.TT_MONTHLY_DAYS\n        },\n        {\n          id: \"multiple_select\",\n          helpText: \"Select Multiple values\",\n          type: FieldType.TT_MULTIPLE_SELECT,\n          config: {\n            showKeyboard: false\n          },\n          validation(value: any): null | Array<string> {\n            return !value ? [\"Value is required\"] : null;\n          },\n          options:()=> ([\n            {\n              label: \"Foo\",\n              value: \"Foo\",\n              description: {\n                color: 'danger',\n                text: 'Optional description'\n              }\n            },\n            {\n              label: \"This is prechecked by default\",\n              value: \"pre_checked\",\n              isChecked: true\n            },\n            {\n              label: \"Bar\",\n              value: \"Bar\",\n              description: {\n                color: 'warning',\n                text: 'This has discription of different color'\n              }\n            },\n            {\n              label: \"Baz\",\n              value: \"Baz\",\n              description: {\n                color: 'secondary',\n                text: 'I only appear when checked',\n                show: 'onChecked'\n              }\n            },\n            {\n              label: \"Bar\",\n              value: \"Bar\",\n            }\n          ]),\n        },\n        {\n          id: \"conditional_data\",\n          helpText: \"Conditionally display next question\",\n          type: FieldType.TT_SELECT,\n          requireNext: false,\n          validation(value: any): null | Array<string>{\n            return !value ? [\"Value is required\"] : null;\n          },\n          options: ()=> ([\n            {\n              label: \"Show Games\",\n              value: \"Show Games\",\n            },\n            {\n              label: \"Show Music\",\n              value: \"Show Music\",\n            },\n          ]),\n        },\n        {\n          id: \"music_presentation\",\n          helpText: \"Showing Music\",\n          type: FieldType.TT_SELECT,\n          validation(value: any): null | Array<string> {\n            return !value ? [\"Value is required\"] : null;\n          },\n          condition(formData: any) {\n            return formData.conditional_data.value === \"Show Music\";\n          },\n          options: ()=> ([\n            {\n              label: \"No Music\",\n              value: \"No Music\",\n            },\n          ]),\n        },\n        {\n          id: \"games_presentation\",\n          helpText: \"Showing Games\",\n          type: FieldType.TT_SELECT,\n          validation(value: any): null | Array<string> {\n            return !value ? [\"Value is required\"] : null;\n          },\n          condition(formData: any) {\n            return formData.conditional_data.value === \"Show Games\";\n          },\n          options: ()=>([\n            {\n              label: \"No Games\",\n              value: \"No Games\",\n            },\n          ]),\n        },\n        {\n          id: \"does_not_require_next\",\n          helpText: \"Click on value to proceed\",\n          type: FieldType.TT_SELECT,\n          requireNext: false,\n          validation(value: any): null | Array<string> {\n            return !value ? [\"Value is required\"] : null;\n          },\n          options: ()=>([\n            {\n              label: \"Duke\",\n              value: \"Duke\",\n            },\n            {\n              label: \"Dork\",\n              value: \"Dork\",\n            },\n          ]),\n        },\n        {\n          id: \"option_params\",\n          helpText: \"Console.log Prop sent via options\",\n          type: FieldType.TT_SELECT, \n          options: (fdata: any) => {\n            console.log(fdata)\n            return []\n          }\n        },\n        {\n          id: \"validated\",\n          helpText: \"Value is Required before next\",\n          type: FieldType.TT_SELECT,\n          validation(value: any): null | Array<string> {\n            return !value ? [\"Value is required\"] : null;\n          },\n          options: ()=>([\n            {\n              label: \"Fur\",\n              value: \"Fur\",\n            },\n            {\n              label: \"Fume\",\n              value: \"Fame\",\n            },\n          ]),\n        },\n      ]\n    }\n  }\n});\n","import { render } from \"./Example.vue?vue&type=template&id=27a9c28e&ts=true\"\nimport script from \"./Example.vue?vue&type=script&lang=ts\"\nexport * from \"./Example.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}