{"version":3,"sources":["webpack:///./src/apps/ANC/Views/Encounters/Obsteric.vue?14da","webpack:///./src/apps/ANC/Services/anc_obsteric_service.ts","webpack:///./src/apps/ANC/Views/Encounters/Obsteric.vue","webpack:///./src/apps/ANC/Views/Encounters/Obsteric.vue?d349","webpack:///./src/guidelines/encounter_guidelines.ts","webpack:///./src/views/EncounterMixin.vue","webpack:///./src/views/EncounterMixin.vue?37b1","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/utils/GuidelineEngine.ts","webpack:///./src/components/Forms/BaseFormElements.ts","webpack:///./src/components/FormElements lazy ^\\.\\/.*\\.vue$ namespace object"],"names":["render","_ctx","_cache","$props","$setup","$data","$options","_component_his_standard_form","_resolveComponent","_component_ion_page","_openBlock","_createBlock","default","_withCtx","_createVNode","fields","skipSummary","onFinishAction","onFinish","cancelDestinationPath","cancelDestination","_","AncObstericService","AppEncounterService","constructor","patientID","providerID","super","this","para","gravida","nextGravida","getFirstValueNumber","defineComponent","components","IonPage","mixins","EncounterMixinVue","data","service","watch","ready","initData","getFields","immediate","methods","computedData","obs","resolveObs","createEncounter","saveObservationList","nextTask","id","helpText","type","FieldType","TT_NUMBER","defaultValue","beforeNext","async","parseInt","v","value","alertConfirmation","computedValue","buildValueNumber","validation","validateSeries","Validation","required","rangeOf","condition","f","TT_ANC_PREGNANCY_INPUT_CONFIG","config","hiddenFooterBtns","pregnancyCount","TT_ANC_PREGNANCY_DETAILS_INPUT","abortionCount","known_pregnancies","some","p","isChecked","inArray","i","label","filter","d","other","map","options","knownAbortions","num","push","getNumberOrdinal","field","minY","patient","getBirthdate","split","maxY","getDate","TT_SELECT","buildValueText","mapStrToOptions","buildValueCoded","successfulPregnancyData","rowTitles","onValueUpdate","rowItems","forEach","disabled","TT_TEXT","match","includes","customKeyboard","onUnknownEstimateField","mapOptions","noChars","yesNoOptions","TT_AGE_INPUT","TT_MULTI_SELECT_GRID","hasMissingValues","Boolean","onClick","option","listData","l","visible","__exports__","FlowState","dformat","HisDate","toStandardHisDisplayFormat","ENCOUNTER_GUIDELINES","priority","actions","alert","outcomeStartDate","action","infoActionSheet","name","slot","color","GO_TO_PATIENT_DASHBOARD","CHANGE_PATIENT_OUTCOME","CONTINUE","conditions","outcome","startDate","sessionDate","birthDate","CHANGE_SESSION_DATE","selection","providers","encounterName","apiDate","modal","optionsActionSheet","role","flowState","SET_PROVIDER","isBdeMode","isBDE","HisStandardForm","facts","handler","route","params","patient_id","Store","get","then","patientData","setEncounterFacts","checkEncounterGuidelines","deep","computed","patientDashboardUrl","runflowState","state","states","username","provider","find","person_id","$router","EXIT","gotoPatientDashboard","findings","matchToGuidelines","index","finding","status","program","e","console","error","toastDanger","ProgramService","getSessionDate","getCachedApiDate","$route","toString","toUpperCase","sort","a","b","usernameA","usernameB","isEmpty","person","names","latestName","given_name","family_name","toOption","items","path","toYesNoOption","values","yesNoUnknownOptions","tag","Object","reduce","accum","cur","Array","isArray","concat","Promise","all","arr","expression","length","_resolveDynamicComponent","formType","activeField","onOnFinish","onOnIndex","onIndex","TouchScreenForm","emits","props","Function","String","formData","$emit","isCondition","ignored","undefined","prop","every","sortByPriority","sortByWeight","weight","guidelines","target","targetEvent","sortBy","matches","guidelineIndex","targetValidations","title","description","text","info","COMPONENT_REFS","TT_BARCODE","TT_NOTE","TT_CARD_SELECTOR","TT_MULTIPLE_SELECT","TT_MONTHLY_DAYS","TT_ART_REGIMEN_SELECTION","TT_NEXT_VISIT_INTERVAL_SELECTION","TT_TABLE_VIEWER","TT_DOSAGE_INPUT","TT_YES_NO","TT_MULTIPLE_YES_NO","TT_WEIGHT_CHART","TT_VITALS_ENTRY","TT_APPOINTMENTS_ENTRY","TT_COMPLAINTS_PICKER","TT_CLINIC_HOLIDAY_PICKER","TT_SUMMARY","TT_ART_STAGING_SUMMARY","TT_ADHERENCE_INPUT","TT_LAB_ORDERS","TT_PERSON_RESULT_VIEW","TT_PROGRAM_SELECTION","TT_DATE_PICKER","TT_RELATION_SELECTION","TT_FILING_NUMBER_VIEW","TT_PERSON_MATCH_VIEW","TT_FULL_DATE","TT_BATCH_ENTRY","TT_BATCH_VERIFICATION","TT_BATCH_MOVEMENT","TT_IP_ADDRESS","TT_TEXT_BANNER","TT_DISPENSATION_INPUT","TT_DATA_TABLE","TT_GROUP_SELECTOR","TT_ANC_LMP_DATE_INPUT","TT_DRUG_TRANSFER_IN","TT_GRID_SELECTOR","TT_ANC_DRUGSET_INPUT","TT_RADIOLOGY_PICKER","TT_PRESCRIPTION_INPUT","TT_INFINITE_SCROLL_MULTIPLE_SELECT","TT_DRUG_DISPENSER","webpackAsyncContext","req","__webpack_require__","o","resolve","Error","code","ids","slice","keys","module","exports"],"mappings":"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","file":"js/chunk-7abaef5d.8580ed11.js","sourcesContent":["import { resolveComponent as _resolveComponent, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createBlock(_component_ion_page, null, {\n    default: _withCtx(() => [\n      _createVNode(_component_his_standard_form, {\n        fields: _ctx.fields,\n        skipSummary: true,\n        onFinishAction: _ctx.onFinish,\n        cancelDestinationPath: _ctx.cancelDestination\n      }, null, 8, [\"fields\", \"onFinishAction\", \"cancelDestinationPath\"])\n    ]),\n    _: 1\n  }))\n}","import { AppEncounterService } from \"@/services/app_encounter_service\";\n\nexport class AncObstericService extends AppEncounterService {\n    para: number;\n    gravida: number;\n    nextGravida: number;\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 82, providerID)\n        this.para = 0\n        this.gravida = 0\n        this.nextGravida = 0\n    }\n\n    async initData() {\n        this.para = (await this.getFirstValueNumber('Parity')) || 0\n        this.gravida = (await this.getFirstValueNumber('Gravida')) || 0\n        this.nextGravida = this.gravida > 0 ? this.gravida + 1 : 0\n    }\n}\n","\nimport EncounterMixinVue from '@/views/EncounterMixin.vue'\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { defineComponent } from 'vue'\nimport { AncObstericService } from \"@/apps/ANC/Services/anc_obsteric_service\"\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport { IonPage } from \"@ionic/vue\"\nimport { ObsValue } from '@/services/observation_service'\nimport { alertConfirmation } from '@/utils/Alerts'\nimport { getNumberOrdinal } from \"@/utils/Strs\"\n\nexport default defineComponent({\n  components: { IonPage },\n  mixins: [EncounterMixinVue],\n  data: () => ({\n    service: {} as any\n  }),\n  watch: {\n    ready: {\n      async handler(ready: boolean) {\n        if (ready) {\n            this.service = new AncObstericService(this.patientID, this.providerID)\n\t\t\tawait this.service.initData()\n            this.fields = this.getFields()\n        } \n      },\n      immediate: true\n    }\n  },\n  methods: {\n    async onFinish(_: any, computedData: any) {\n      const obs = await this.resolveObs(computedData)\n      await this.service.createEncounter()\n      await this.service.saveObservationList(obs as ObsValue[])\n      this.nextTask()\n    },\n    getFields(): Field[] {\n        return [\n            {\n                id: 'gravida',\n                helpText: 'Gravida',\n                type: FieldType.TT_NUMBER,\n\t\t\t\tdefaultValue: () => this.service.nextGravida > 0 ? this.service.nextGravida : null,\n                beforeNext: async (v: Option) => {\n                    if (parseInt(`${v.value}`) > 9) {\n                        if (!(await alertConfirmation(\n\t\t\t\t\t\t\t'The value is greater than maximum 9. Are you sure about this value?'\n\t\t\t\t\t\t\t))) {\n                            return false\n                        }\n                    }\n                    return true\n                },\n                computedValue: (v: Option) => this.service.buildValueNumber('Gravida', v.value),\n                validation: (v: Option) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, this.service.nextGravida || 1, 19)\n                ])\n            },\n            {\n                id: 'para',\n                helpText: 'Para',\n                type: FieldType.TT_NUMBER,\n                condition: (f: any) => f.gravida.value > 1,\n                computedValue: (v: Option) => this.service.buildValueNumber('Parity', v.value), \n                validation: (v: Option, f: any) => this.validateSeries([\n                    () => Validation.required(v),\n                    () => Validation.rangeOf(v, this.service.para, f.gravida.value - 1)\n                ])\n            },\n            {\n                id: 'known_pregnancies',\n                helpText: 'Pregnancies with available information',\n                type: FieldType.TT_ANC_PREGNANCY_INPUT_CONFIG,\n                condition: (f: any) => f.gravida.value > 1 && f.para.value > 0,\n                config: {\n\t\t\t\t\thiddenFooterBtns: ['Clear'],\n\t\t\t\t\tpregnancyCount: (f: any) => f.para.value\n                }\n            },\n            {\n\t\t\t\tid: 'pregnancy_details',\n\t\t\t\thelpText: 'Pregnancy details',\n\t\t\t\ttype: FieldType.TT_ANC_PREGNANCY_DETAILS_INPUT,\n\t\t\t\tcondition: (f: any) => {\n\t\t\t\t\tconst abortionCount = (parseInt(`${f.gravida.value}`) - parseInt(`${f.para.value}`)) - 1\n\t\t\t\t\treturn f.gravida.value > 1 && (abortionCount >= 1 || f.known_pregnancies.some(\n\t\t\t\t\t\t(p: Option) => p.isChecked\n\t\t\t\t\t))\n\t\t\t\t},\n\t\t\t\tvalidation: (v: Option[]) => this.validateSeries([\n\t\t\t\t\t() => Validation.required(v),\n\t\t\t\t\t() => this.inArray(v, (i: Option) => i.label === '_INCOMPLETE_RECORD_ERROR_')\n\t\t\t\t\t\t? ['Pregnancy details incomplete!!']\n\t\t\t\t\t\t: null\n\t\t\t\t]),\n\t\t\t\tconfig: {\n\t\t\t\t\thiddenFooterBtns: ['Clear']\n\t\t\t\t},\n\t\t\t\tcomputedValue: (v: Option[]) => v.filter(d => d?.other?.obs || false).map((d: Option) => d.other.obs),\n\t\t\t\toptions: (f: any) => {\n\t\t\t\t\tconst abortionCount = (parseInt(`${f.gravida.value}`) - parseInt(`${f.para.value}`)) - 1\n\t\t\t\t\tconst knownAbortions: Option[] = []\n\t\t\t\t\tfor(let i=0; i < abortionCount; ++i) {\n\t\t\t\t\t\tconst num = i + 1\n\t\t\t\t\t\tknownAbortions.push({\n\t\t\t\t\t\t\tlabel: `<span style=\"color:red;\">${num}<sup>${getNumberOrdinal(num)}</sup> Abortion</span>`,\n\t\t\t\t\t\t\tvalue: -1,\n\t\t\t\t\t\t\tother: {\n\t\t\t\t\t\t\t\tdata: [\n\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: 'Year of abortion',\n\t\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'year',\n\t\t\t\t\t\t\t\t\t\t\t\thelpText: 'Year of abortion',\n\t\t\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_NUMBER,\n\t\t\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueNumber('Year of abortion', v.value)\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst [minY] = this.patient.getBirthdate().split('-')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tconst [maxY] = this.service.getDate().split('-')\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn Validation.rangeOf(v, minY, maxY)\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: 'Place of abortion',\n\t\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'place_of_abortion',\n\t\t\t\t\t\t\t\t\t\t\t\thelpText: 'Place of abortion',\n\t\t\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t// concept taken as is from old anc system\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueText('Place of birth', v.value)\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v)\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.mapStrToOptions([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Health facility\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"In transit\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"TBA\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Home\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Other\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: 'Type of abortion',\n\t\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'type_of_abortion',\n\t\t\t\t\t\t\t\t\t\t\t\thelpText: 'Type of abortion',\n\t\t\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueCoded('Type of Abortion', v.value)\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v)\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.mapStrToOptions([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Complete abortion\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Incomplete abortion\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: 'Procedure done',\n\t\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'procedure_done',\n\t\t\t\t\t\t\t\t\t\t\t\thelpText: 'Procedure done',\n\t\t\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v)\n\t\t\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueText('Procedure done', v.value)\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.mapStrToOptions([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Manual Vacuum Aspiration (MVA)\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"Evacuation\", \n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\"None\"\n\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlabel: 'Gestation (weeks)',\n\t\t\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\t\t\tid: 'gestation_weeks',\n\t\t\t\t\t\t\t\t\t\t\t\thelpText: 'Gestation (weeks)',\n\t\t\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_NUMBER,\n\t\t\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueNumber('Gestation', v.value)\n\t\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\t\t\t\t() => Validation.rangeOf(v, 0, 28)\n\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t})\n\t\t\t\t\t}\n\t\t\t\t\tconst successfulPregnancyData = (f.known_pregnancies || []).filter((p: Option) => p.isChecked).map((p: Option) => {\n\t\t\t\t\t\tconst data: any = []\n\t\t\t\t\t\tconst rowTitles = []\n\t\t\t\t\t\tfor(let i=0; i < p.value; ++i) {\n\t\t\t\t\t\t\trowTitles.push(`${i+1}<sup>${getNumberOrdinal(i+1)}</sup> born in ${p.label} pregnancy`)\n\t\t\t\t\t\t\tdata.push([\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Year of birth',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'year',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Year of birth',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_NUMBER,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueNumber('Year of Birth', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t\t\t\t\tconst [minY] = this.patient.getBirthdate().split('-')\n\t\t\t\t\t\t\t\t\t\t\t\tconst [maxY] = this.service.getDate().split('-')\n\t\t\t\t\t\t\t\t\t\t\t\treturn Validation.rangeOf(v, minY, maxY) \n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Place of birth',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'place_of_birth',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Place of birth',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueText('Place of birth', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => Validation.required(v), \n\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.mapStrToOptions([\n\t\t\t\t\t\t\t\t\t\t\t\t\"Health facility\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"In transit\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"TBA\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Home\"\n\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Gestation (weeks)',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'gestation_weeks',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Gestation (weeks)',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_NUMBER,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueNumber('Gestation', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\t\t() => Validation.rangeOf(v, 24, 42)\n\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Method of delivery',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'method_of_delivery',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Method of delivery',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueText('Method of delivery', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.mapStrToOptions([\n\t\t\t\t\t\t\t\t\t\t\t\t\"Spontaneous Vertex\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Caesarean Section\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Vacuum extraction delivery\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Breech\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Forceps\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Others\"\n\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Condition at birth',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'condition_at_birth',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Condition at birth',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueText('Condition at Birth', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tonValueUpdate: (v: Option, rowItems: any) => {\n\t\t\t\t\t\t\t\t\t\t\trowItems.forEach((i: any) => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (i.label === 'Alive now') {\n\t\t\t\t\t\t\t\t\t\t\t\t\ti.required = v.value === 'Alive'\n\t\t\t\t\t\t\t\t\t\t\t\t\ti.disabled = v.value != 'Alive'\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.mapStrToOptions([\n\t\t\t\t\t\t\t\t\t\t\t\t\"Alive\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Macerated Still Birth (MSB)\", \n\t\t\t\t\t\t\t\t\t\t\t\t\"Fresh Still Birth (FSB)\"\n\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Birth weight',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\trequired: true,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'birth_weight',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Birth weight',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_TEXT,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueText('Birth weight', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\t\t() => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (v.value != 'Unknown' && !(`${v.value}`.match(/^\\d{1,3}\\.\\d{1,5}$/))) {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn [`Invalid weight ${v.value}. Don't forget decimal point`]\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\treturn null\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\t() => !['N/A', 'Unknown'].includes(`${v.value}`) \n\t\t\t\t\t\t\t\t\t\t\t\t? Validation.rangeOf(v, 1, 5) \n\t\t\t\t\t\t\t\t\t\t\t\t: null,\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\tconfig: {\n\t\t\t\t\t\t\t\t\t\t\tcustomKeyboard: [\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t['1', '2', '3'],\n\t\t\t\t\t\t\t\t\t\t\t\t\t['4', '5', '6'],\n\t\t\t\t\t\t\t\t\t\t\t\t\t['7', '8', '9'],\n\t\t\t\t\t\t\t\t\t\t\t\t\t['', '0', '.']\n\t\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\t\t[\n\t\t\t\t\t\t\t\t\t\t\t\t\t['Unknown', 'Delete']\n\t\t\t\t\t\t\t\t\t\t\t\t]\n\t\t\t\t\t\t\t\t\t\t\t],\n\t\t\t\t\t\t\t\t\t\t\tonUnknownEstimateField: () => { \n\t\t\t\t\t\t\t\t\t\t\t\treturn {\n\t\t\t\t\t\t\t\t\t\t\t\t\tid: 'birth_weight_estimate',\n\t\t\t\t\t\t\t\t\t\t\t\t\thelpText: 'Birth weight estimate',\n\t\t\t\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => Validation.required(v),\n\t\t\t\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\treturn this.mapOptions([\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Normal',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Big baby',\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t'Small baby'\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\t\tnoChars: false\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Alive now',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\tdisabled: true,\n\t\t\t\t\t\t\t\t\trequired: false,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'alive_now',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Alive now',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_SELECT,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueCoded('Alive', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tonValueUpdate: (v: Option, rowItems: any) => {\n\t\t\t\t\t\t\t\t\t\t\trowItems.forEach((i: any) => {\n\t\t\t\t\t\t\t\t\t\t\t\tif (i.label === 'Age at death') {\n\t\t\t\t\t\t\t\t\t\t\t\t\ti.required = v.value === 'No'\n\t\t\t\t\t\t\t\t\t\t\t\t\ti.disabled = v.value === 'Yes'\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v)\n\t\t\t\t\t\t\t\t\t\t]),\n\t\t\t\t\t\t\t\t\t\toptions: () => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.yesNoOptions()\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlabel: 'Age at death',\n\t\t\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\t\t\tdisabled: true,\n\t\t\t\t\t\t\t\t\trequired: false,\n\t\t\t\t\t\t\t\t\tfield: {\n\t\t\t\t\t\t\t\t\t\tid: 'age_at_death',\n\t\t\t\t\t\t\t\t\t\thelpText: 'Age at death',\n\t\t\t\t\t\t\t\t\t\ttype: FieldType.TT_AGE_INPUT,\n\t\t\t\t\t\t\t\t\t\tcomputedValue: (v: Option) => {\n\t\t\t\t\t\t\t\t\t\t\treturn this.service.buildValueText('Age at Death', v.value)\n\t\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\t\tvalidation: (v: Option) => this.validateSeries([\n\t\t\t\t\t\t\t\t\t\t\t() => Validation.required(v)\n\t\t\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t])\n\t\t\t\t\t\t}\n\t\t\t\t\t\tp.label = `${p.label} delivery`\n\t\t\t\t\t\tp.other = { data, rowTitles }\n\t\t\t\t\t\treturn p\n\t\t\t\t\t})\n\t\t\t\t\treturn [...successfulPregnancyData, ...knownAbortions] as Option[]\n\t\t\t\t}\n            },\n\t\t\t{\n\t\t\t\tid: 'previous_complications',\n\t\t\t\thelpText: 'Previous complications',\n\t\t\t\ttype: FieldType.TT_MULTI_SELECT_GRID,\n\t\t\t\tcondition: (f: any) => f.gravida.value > 1,\n\t\t\t\tvalidation: (v: Option[]) => this.validateSeries([\n\t\t\t\t\t() => Validation.required(v),\n\t\t\t\t\t() => {\n\t\t\t\t\t\tconst hasMissingValues = v.map(v => v.value==='').some(Boolean)\n\t\t\t\t\t\treturn hasMissingValues \n\t\t\t\t\t\t\t? ['Please complete Complication selection!!'] \n\t\t\t\t\t\t\t: null\n\t\t\t\t\t}\n\t\t\t\t]),\n\t\t\t\tcomputedValue: (v: Option[]) => {\n\t\t\t\t\treturn v.filter(d => d.value != '')\n\t\t\t\t\t\t.map(d => this.service.buildValueCoded(d.label, d.value))\n\t\t\t\t},\n\t\t\t\tconfig: {\n\t\t\t\t\thiddenFooterBtns: ['Clear']\n\t\t\t\t},\n\t\t\t\toptions: () => {\n\t\t\t\t\treturn [\n\t\t\t\t\t\t{ \n\t\t\t\t\t\t\tlabel: 'Episiotomy', \n\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\tother: {\n\t\t\t\t\t\t\t\toptions: this.yesNoOptions()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ \n\t\t\t\t\t\t\tlabel: 'Hemorrhage', \n\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\tother: {\n\t\t\t\t\t\t\t\toptions: this.mapStrToOptions([\n\t\t\t\t\t\t\t\t\t'No',\n\t\t\t\t\t\t\t\t\t'APH',\n\t\t\t\t\t\t\t\t\t'PPH'\n\t\t\t\t\t\t\t\t])\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{ \n\t\t\t\t\t\t\tlabel: 'Pre-eclampsia', \n\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\tother: {\n\t\t\t\t\t\t\t\tonClick: (option: Option, listData: Option[]) => {\n\t\t\t\t\t\t\t\t\tlistData.forEach(l => {\n\t\t\t\t\t\t\t\t\t\tif (l.label === 'Eclampsia') {\n\t\t\t\t\t\t\t\t\t\t\tl.other.visible = option.value === 'Yes'\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\toptions: this.yesNoOptions()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tlabel: 'Eclampsia',\n\t\t\t\t\t\t\tvalue: '',\n\t\t\t\t\t\t\tother: {\n\t\t\t\t\t\t\t\tvisible: false,\n\t\t\t\t\t\t\t\toptions: this.yesNoOptions()\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t]\n\t\t\t\t}\n\t\t\t}\n        ]\n    }\n  }\n})\n","import { render } from \"./Obsteric.vue?vue&type=template&id=20b9633a&ts=true\"\nimport script from \"./Obsteric.vue?vue&type=script&lang=ts\"\nexport * from \"./Obsteric.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { infoActionSheet, optionsActionSheet } from \"@/utils/ActionSheets\";\nimport { GuideLineInterface } from \"@/utils/GuidelineEngine\";\nimport HisDate from '@/utils/Date'\n\nexport enum FlowState {\n    SET_PROVIDER = 'SET_PROVIDER',\n    CHANGE_SESSION_DATE = 'change_session_date',\n    GO_TO_PATIENT_DASHBOARD = 'go_to_patient_dashboard',\n    CHANGE_PATIENT_OUTCOME = 'change_outcome',\n    CONTINUE = 'continue',\n    EXIT = 'exit'\n}\nconst dformat = (d: string) => HisDate.toStandardHisDisplayFormat(d)\n\nexport const ENCOUNTER_GUIDELINES: Record<string, GuideLineInterface> = {\n    \"Warn if attempting to create new encounters for a deceased patient\": {\n        priority: 1,\n        actions: {\n            alert: async ({ outcomeStartDate }: any) => {\n                const action = await infoActionSheet(\n                    'Data Integrity Issue Found',\n                    `Patient died on ${dformat(outcomeStartDate)}`,\n                    'Proceeding with this outcome might affect accuracy of some reports',\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'primary'},\n                        { name: 'Change outcome', slot: 'end', color: 'primary'},\n                        { name: 'Continue Anyway', slot: 'end', color: 'danger'}\n                    ]\n                )\n                return action === 'Cancel'\n                    ? FlowState.GO_TO_PATIENT_DASHBOARD\n                    : action === 'Change outcome'\n                    ? FlowState.CHANGE_PATIENT_OUTCOME\n                    : FlowState.CONTINUE\n            }\n        },\n        conditions: {\n            outcome(outcome: string) {\n                return outcome === 'Patient died'\n            },\n            outcomeStartDate(startDate: string, { sessionDate }: any) {\n                return sessionDate >= startDate\n            }\n        }\n    },\n    \"A patient's date of birth must not be less than Session Date\": {\n        priority: 2,\n        actions: {\n            alert: async ({ birthDate, sessionDate}: any) => {\n                const action = await infoActionSheet(\n                    'Data integrity issue found', '',\n                    `Session date ${dformat(sessionDate)} is less than birth date of ${dformat(birthDate)}`,\n                    [\n                        { name: 'Cancel', slot: 'end', color: 'danger'},\n                        { name: 'Change session date', slot: 'end', color: 'success'}\n                    ]\n                )\n                return action === 'Change session date'\n                    ? FlowState.CHANGE_SESSION_DATE\n                    : FlowState.GO_TO_PATIENT_DASHBOARD\n            }\n        },\n        conditions: {\n            birthDate(birthDate: string, { sessionDate }: any) {\n                return sessionDate < birthDate\n            }\n        }\n    },\n    \"Select Encounter provider when in back data entry\": {\n        priority: 3,\n        actions: {\n            selection: async ({ providers, encounterName, sessionDate, apiDate }: any) => {\n                const modal = await optionsActionSheet(\n                    `Please select a provider for ${encounterName}`,\n                    `BDE: ${dformat(sessionDate)} | Current: ${dformat(apiDate)}`,\n                    providers,\n                    [\n                        { name: 'Cancel', color: 'danger', slot: 'start', role: 'default'},\n                        { name: 'Confirm', slot: 'end', role: 'action' }\n                    ]\n                )\n                return modal.action === 'Cancel' \n                    ? { value: -1, flowState: FlowState.GO_TO_PATIENT_DASHBOARD }\n                    : { value: modal.selection, flowState: FlowState.SET_PROVIDER }\n            }\n        },\n        conditions: {\n            isBdeMode(isBDE: boolean) {\n                return isBDE\n            }\n        }\n    }\n}","\nimport { defineComponent } from 'vue'\nimport { Field, Option } from '@/components/Forms/FieldInterface'\nimport { ProgramService } from \"@/services/program_service\"\nimport { find, isEmpty } from \"lodash\"\nimport { nextTask } from \"@/utils/WorkflowTaskHelper\"\nimport { ENCOUNTER_GUIDELINES, FlowState } from \"@/guidelines/encounter_guidelines\"\nimport { matchToGuidelines } from \"@/utils/GuidelineEngine\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { toastDanger } from '@/utils/Alerts'\nimport Store from \"@/composables/ApiStore\"\n\nexport default defineComponent({\n    components: { HisStandardForm },\n    data: () => ({\n        patient: {} as any,\n        fields: [] as Array<Field>,\n        patientID: '' as any,\n        providerID: -1 as number,\n        providers: [] as any,\n        facts: {\n            sessionDate: '' as string,\n            apiDate: '' as string,\n            encounterName: 'N/A' as string,\n            providers: [] as Array<any>,\n            isBdeMode: false as boolean,\n            birthDate: '' as string,\n            outcome: '' as string,\n            outcomeStartDate: '' as string\n        },\n        ready: false\n    }),\n    watch: {\n       '$route': {\n            handler(route: any) {\n                if(route.params.patient_id && this.patientID != route.params.patient_id) {\n                    this.patientID = parseInt(route.params.patient_id);\n                    Store.get('ACTIVE_PATIENT', { patientID: this.patientID})\n                        .then(patientData => {\n                            this.patient = patientData\n                            this.setEncounterFacts().then(() => {\n                                this.checkEncounterGuidelines().then(() => {\n                                    this.ready = true\n                                })\n                            })\n                        })\n                    }\n            },\n            immediate: true,\n            deep: true\n        }\n    },\n    computed: {\n        cancelDestination(): string {\n            return this.patientDashboardUrl()\n        }\n    },\n    methods: {\n        runflowState(state: FlowState, params=null) {\n            const states: any = {}\n            states[FlowState.SET_PROVIDER] = (selection: any) => {\n                const [ username ] = selection.split(' ')\n                const provider = find(this.providers, { username })\n                if (provider) this.providerID = provider.person_id\n                return FlowState.CONTINUE\n            }\n            states[FlowState.CHANGE_SESSION_DATE] = () => { \n                this.$router.push(`/session/date?patient_dashboard_redirection_id=${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.CHANGE_PATIENT_OUTCOME] = () => {\n                this.$router.push(`/patient/programs/${this.patientID}`)\n                return FlowState.EXIT\n            }\n            states[FlowState.GO_TO_PATIENT_DASHBOARD] = () => {\n                this.gotoPatientDashboard()\n                return FlowState.EXIT\n            }\n            if (state in states) {\n                return states[state](params)\n            }\n        },\n        async checkEncounterGuidelines() {\n            const findings = matchToGuidelines(this.facts, ENCOUNTER_GUIDELINES)\n            for(const index in findings) {\n                const finding = findings[index]\n                if (finding?.actions?.alert) {\n                    const status = this.runflowState((await finding?.actions?.alert(this.facts)))\n                    if (status === FlowState.EXIT) return\n                }\n                if (finding?.actions?.selection) {\n                    const selection = await finding?.actions?.selection(this.facts)\n                    this.runflowState(selection.flowState, selection.value)\n                }\n            }\n        },\n        async setEncounterFacts() {\n            try {\n                const program = await Store.get('PATIENT_PROGRAM', { patientID: this.patientID })\n                this.facts.outcome = program.outcome\n                this.facts.outcomeStartDate = program.startDate\n            } catch (e) {\n                console.error(e)\n                toastDanger(`${e}`)\n            }\n            this.facts.sessionDate = ProgramService.getSessionDate()\n            this.facts.apiDate = ProgramService.getCachedApiDate() as string\n            this.facts.isBdeMode = ProgramService.isBDE() as boolean\n            this.facts.birthDate = this.patient.getBirthdate()\n            this.facts.encounterName = this.$route.name \n                ? this.$route.name.toString().toUpperCase()\n                : 'N/A'\n            if (ProgramService.isBDE()) {\n                this.providers = await Store.get('PROVIDERS')\n                this.facts.providers = this.providers\n                    .sort((a: any, b: any) => {\n                        const usernameA = a.username.toUpperCase()\n                        const usernameB = b.username.toUpperCase()\n                        return usernameA < usernameB ? -1 : usernameA > usernameB  ? 1 : 0\n                    })\n                    .map((p: any) => {\n                        let name = `${p.username}`\n                        if (!isEmpty(p?.person?.names)) {\n                            const [ latestName ] = p.person?.names || []\n                            name += ` (${latestName.given_name} ${latestName.family_name})`\n                        }\n                        return name\n                    })\n            }\n        },\n        toOption(label: string, other={}) {\n            return {\n                label,\n                value: label,\n                other\n            }\n        },\n        mapStrToOptions(items: string[]) {\n            return items.map(i => ({label: i, value: i}))\n        },\n        patientDashboardUrl(): string {\n            return `/patient/dashboard/${this.patientID}`\n        },\n        gotoPatientDashboard() {\n            return this.$router.push({path: this.patientDashboardUrl()})\n        },\n        nextTask() {\n            return nextTask(this.patientID, this.$router)\n        },\n        yesNoOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" }\n            ]\n        },\n        toYesNoOption(label: string, other: any={}): Option {\n            return {\n                label,\n                value: '',\n                other: {\n                    ...other,\n                    values: this.yesNoOptions()\n                }\n            } \n        },\n        mapOptions(options: Array<string>) {\n            return options.map((option) => {\n                return { label: option, value: option }\n            });\n        },\n        yesNoUnknownOptions(): Option[] {\n            return [\n                { label: \"Yes\", value: \"Yes\" },\n                { label: \"No\", value: \"No\" },\n                { label: \"Unknown\", value: \"Unknown\" }\n            ]\n        },\n        resolveObs(obs: any, tag='') {\n            const values: any = Object.values(obs)\n                .filter((d: any) => d && (d.tag === tag || tag === ''))\n                .reduce((accum: any, cur: any) => { \n                    const data = cur.obs ? cur.obs : cur\n                    if (Array.isArray(data)) {\n                        accum = accum.concat(data)\n                    } else if (typeof data === 'function') {\n                        accum.push(data())\n                    } else {\n                        accum.push(data)\n                    }\n                    return accum\n                    }, [])\n            return Promise.all(values)\n        },\n        inArray(arr: Array<any>, expression: (i: any) => boolean): boolean {\n            try {\n                return arr.filter((i: any) => expression(i)).length > 0\n            } catch (e) {\n                return false\n            }\n        },\n        validateSeries(conditions: Array<any>){\n            try {\n                for(const i in conditions) {\n                    const condition = conditions[i]()\n\n                    if (condition) return condition\n                }\n            } catch (e) {\n                return [e]\n            }\n        }\n    }\n})\n","import script from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./EncounterMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/andrew-dev/Projects/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","/**\n * Compares patient facts against a predefined guideline Object.\n*/\nexport interface DescriptionInterface {\n    color?: 'primary' | 'secondary' | 'danger' | 'warning';\n    info: Function;\n    text?: string;\n    show: 'onChecked' | 'always';\n}\n\nexport interface GuideLineInterface {\n    title?: string;\n    concept?: string;\n    weight?: number;\n    priority?: number;\n    conditions: Record<string, Function>;\n    actions?: Record<string, any>; //TODO: should <key, Function>\n    data?: Record<string, any>;\n    description?: DescriptionInterface;\n    target?: string;\n    targetEvent?: string;\n}\n\n/**\n * Match the facts with guidelines\n * @param facts \n * @param conditions \n * @returns \n */\nfunction isCondition(facts: Record<string, any>, conditions: Record<string, Function>): boolean {\n    const state = [] \n    const ignored = [-1, '', null, undefined]\n\n    for(const prop in conditions) {\n        if (!(prop in facts)) \n            continue\n        \n        const value = facts[prop]\n        if (ignored.includes(value)) {\n            state.push(false)\n            continue\n        }\n\n        state.push(conditions[prop](value, facts))\n    }\n    return state.every(Boolean)\n}\n\n/**\n * Sort guidelines in the order of importance/relevance\n * @param findings \n * @returns \n */\nfunction sortByPriority(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.priority && b.priority) && a.priority < b.priority ? -1 : 1)\n}\n\nfunction sortByWeight(findings: GuideLineInterface[]) {\n    return findings.sort((a, b) => (a.weight && b.weight) && a.weight > b.weight ? -1 : 1)\n}\n\nexport function logFindingsByWeight(guidelines: Record<string, GuideLineInterface>) {\n    const findings: any = Object.keys(guidelines).map(i => ({ name: i, weight: guidelines[i].weight}))\n    console.log(sortByWeight(findings).map((i: any) => `${i.weight} -> ${i.name}`))\n}\n\n/**\n * Check the guideline for matching facts and return matching object \n * @param facts: key value pair for used for searching in guidelines\n * @param guidelines: A dictionary containing fixed rules/validations that conforms to GuideLineInterface\n * @param target: Used for matching a target defined in a guidlines before executing conditions\n * @param targetEvent: used for matching a target event in a guideline before executing conditions\n * @returns\n */\nexport function matchToGuidelines(\n    facts: Record<string, any>, \n    guidelines: Record<string, GuideLineInterface>,\n    target='', \n    targetEvent='',\n    sortBy='priority' as 'priority' | 'weight'): Array<GuideLineInterface> {\n    const matches = []\n    for(const guidelineIndex in guidelines) {\n        const data: GuideLineInterface = guidelines[guidelineIndex]\n        const targetValidations = [\n            (data.target && target && data.target != target),\n            (data.targetEvent && targetEvent \n                && data.targetEvent != targetEvent)\n        ]\n\n        if (targetValidations.some(Boolean)) {\n            continue\n        }\n\n        if (isCondition(facts, data.conditions)) {\n            data.title = guidelineIndex\n            if (data.description) {\n                data.description.text = data.description.info(facts)\n            }\n            matches.push(data)\n        }\n    }\n    return sortBy === 'priority' ? sortByPriority(matches) : sortByWeight(matches)\n}\n","/**\n * Map all formElements/components defined in \"@/components/FormElements\" \n * in the Enum below by their file name.\n * \n * Next step is to add FieldType entry in COMPONENT_REFS in the \n * Array below the FieldType Enum\n */\nexport enum FieldType {\n    TT_MULTI_SELECT_GRID= 'HisMultiSelectGrid',\n    TT_AGE_INPUT='HisAgeInput',\n    TT_GROUP_SELECTOR = 'HisGroupSelector',\n    TT_DATA_TABLE = 'HisDataTable',\n    TT_GRID_SELECTOR = 'HisGridSelector',\n    TT_NOTE = 'HisNote',\n    TT_BARCODE = 'HisBarcodeInput',\n    TT_MONTHLY_DAYS=\"HisMonthlyDays\",\n    TT_TEXT=\"HisTextInput\",\n    TT_NUMBER = \"HisNumberInput\",\n    TT_DATETIME=\"datetime\",\n    TT_SELECT=\"HisSelect\",\n    TT_MULTIPLE_SELECT=\"HisMultipleSelect\",\n    TT_ART_REGIMEN_SELECTION=\"HisArtRegimenSelection\",\n    TT_NEXT_VISIT_INTERVAL_SELECTION=\"HisNextVisitInterval\",\n    TT_TABLE_VIEWER=\"HisTableViewer\",\n    TT_DOSAGE_INPUT=\"HisDosageInput\",\n    TT_YES_NO=\"YesNoSelect\",\n    TT_MULTIPLE_YES_NO=\"MultiYesNoSelect\",\n    TT_SUMMARY=\"HisSummary\",\n    TT_WEIGHT_CHART = \"HisWeightChart\",\n    TT_VITALS_ENTRY=\"HisVitalsEntry\",\n    TT_ADHERENCE_INPUT = \"HisAdherenceInput\",\n    TT_ART_STAGING_SUMMARY = \"ArtStagingSummary\",\n    TT_LAB_ORDERS = \"HisLabOrders\",\n    TT_APPOINTMENTS_ENTRY = \"HisAppointments\",\n    TT_DISPENSATION_INPUT = 'DrugDispensationSelection',\n    TT_PROGRAM_SELECTION = 'ProgramSelection',\n    TT_DATE_PICKER = 'HisDatePicker',\n    TT_PERSON_RESULT_VIEW = 'PersonSearchView',\n    TT_RELATION_SELECTION = 'RelationsSelection',\n    TT_FILING_NUMBER_VIEW = 'FilingNumberView',\n    TT_CARD_SELECTOR = 'HisCardSelector',\n    TT_PERSON_MATCH_VIEW = 'PersonMatchView',\n    TT_FULL_DATE = 'HisDateInput',\n    TT_BATCH_ENTRY = 'HisBatchEntry',\n    TT_BATCH_VERIFICATION = 'HisBatchVerification',\n    TT_BATCH_MOVEMENT = 'HisBatchMovement',\n    TT_COMPLAINTS_PICKER = 'HisComplaintsPicker',\n    TT_RADIOLOGY_PICKER = 'HisRadiologyPicker',\n    TT_IP_ADDRESS = 'HisIPAddress',\n    TT_TEXT_BANNER = 'HisTextBanner',\n    TT_DRUG_DISPENSER = 'GeneralDrugDispenser',\n    TT_CLINIC_HOLIDAY_PICKER = 'HisClinicHolidayPicker',\n    TT_ANC_PREGNANCY_INPUT_CONFIG = 'AncPregnancyInfoConfig',\n    TT_ANC_PREGNANCY_DETAILS_INPUT = 'AncPregnancyDetailsInput',\n    TT_ANC_LMP_DATE_INPUT = 'AncLmpDateInput',\n    TT_ANC_DRUGSET_INPUT = 'AncDrugSetInput',\n    TT_DRUG_TRANSFER_IN = 'DrugTransferInput',\n    TT_PRESCRIPTION_INPUT = 'HisPrescriptionInput',\n    TT_INFINITE_SCROLL_MULTIPLE_SELECT=\"HisInfiniteScrollMultipleSelect\"\n}\n\n// Register FieldTypes here that will be registered at runtime\nexport const COMPONENT_REFS: FieldType[] = [\n    FieldType.TT_MULTI_SELECT_GRID,\n    FieldType.TT_AGE_INPUT,\n    FieldType.TT_BARCODE,\n    FieldType.TT_NOTE,\n    FieldType.TT_SELECT,\n    FieldType.TT_CARD_SELECTOR,\n    FieldType.TT_MULTIPLE_SELECT,\n    FieldType.TT_TEXT,\n    FieldType.TT_NUMBER,\n    FieldType.TT_MONTHLY_DAYS,\n    FieldType.TT_ART_REGIMEN_SELECTION,\n    FieldType.TT_NEXT_VISIT_INTERVAL_SELECTION,\n    FieldType.TT_TABLE_VIEWER,\n    FieldType.TT_DOSAGE_INPUT,\n    FieldType.TT_YES_NO,\n    FieldType.TT_MULTIPLE_YES_NO,\n    FieldType.TT_WEIGHT_CHART,\n    FieldType.TT_VITALS_ENTRY,\n    FieldType.TT_APPOINTMENTS_ENTRY,\n    FieldType.TT_COMPLAINTS_PICKER,\n    FieldType.TT_CLINIC_HOLIDAY_PICKER,\n    FieldType.TT_SUMMARY,\n    FieldType.TT_ART_STAGING_SUMMARY,\n    FieldType.TT_ADHERENCE_INPUT,\n    FieldType.TT_LAB_ORDERS,\n    FieldType.TT_PERSON_RESULT_VIEW,\n    FieldType.TT_PROGRAM_SELECTION,\n    FieldType.TT_DATE_PICKER,\n    FieldType.TT_RELATION_SELECTION,\n    FieldType.TT_FILING_NUMBER_VIEW,\n    FieldType.TT_PERSON_MATCH_VIEW,\n    FieldType.TT_FULL_DATE,\n    FieldType.TT_BATCH_ENTRY,\n    FieldType.TT_BATCH_VERIFICATION,\n    FieldType.TT_BATCH_MOVEMENT,\n    FieldType.TT_IP_ADDRESS,\n    FieldType.TT_TEXT_BANNER,\n    FieldType.TT_DISPENSATION_INPUT,\n    FieldType.TT_DATA_TABLE,\n    FieldType.TT_GROUP_SELECTOR,\n    FieldType.TT_ANC_PREGNANCY_INPUT_CONFIG,\n    FieldType.TT_ANC_PREGNANCY_DETAILS_INPUT,\n    FieldType.TT_ANC_LMP_DATE_INPUT,\n    FieldType.TT_DRUG_TRANSFER_IN,\n    FieldType.TT_GRID_SELECTOR,\n    FieldType.TT_ANC_DRUGSET_INPUT,\n    FieldType.TT_RADIOLOGY_PICKER,\n    FieldType.TT_PRESCRIPTION_INPUT,\n    FieldType.TT_INFINITE_SCROLL_MULTIPLE_SELECT,\n    FieldType.TT_DRUG_DISPENSER\n]\n","var map = {\n\t\"./AncDrugSetInput.vue\": [\n\t\t\"c99f\",\n\t\t\"TouchFormElement0\"\n\t],\n\t\"./AncLmpDateInput.vue\": [\n\t\t\"101a\",\n\t\t\"TouchFormElement1\"\n\t],\n\t\"./AncPregnancyDetailsInput.vue\": [\n\t\t\"b043\",\n\t\t\"TouchFormElement2\"\n\t],\n\t\"./AncPregnancyInfoConfig.vue\": [\n\t\t\"262e\",\n\t\t\"TouchFormElement3\"\n\t],\n\t\"./ArtStagingSummary.vue\": [\n\t\t\"43db\",\n\t\t\"TouchFormElement4\"\n\t],\n\t\"./BaseTextInput.vue\": [\n\t\t\"36ad\",\n\t\t\"TouchFormElement5\"\n\t],\n\t\"./DrugDispensationSelection.vue\": [\n\t\t\"05d5\",\n\t\t\"TouchFormElement6\"\n\t],\n\t\"./DrugTransferInput.vue\": [\n\t\t\"de42\",\n\t\t\"TouchFormElement7\"\n\t],\n\t\"./FieldMixin.vue\": [\n\t\t\"51c8\",\n\t\t\"TouchFormElement8\"\n\t],\n\t\"./FilingNumberView.vue\": [\n\t\t\"c650\",\n\t\t\"TouchFormElement9\"\n\t],\n\t\"./GeneralDrugDispenser.vue\": [\n\t\t\"7737\",\n\t\t\"TouchFormElement10\"\n\t],\n\t\"./HisAdherenceInput.vue\": [\n\t\t\"f2c3\",\n\t\t\"TouchFormElement11\"\n\t],\n\t\"./HisAgeInput.vue\": [\n\t\t\"c05f\",\n\t\t\"TouchFormElement12\"\n\t],\n\t\"./HisAppointments.vue\": [\n\t\t\"b2eb\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement13\"\n\t],\n\t\"./HisArtRegimenSelection.vue\": [\n\t\t\"47b9\",\n\t\t\"TouchFormElement14\"\n\t],\n\t\"./HisBarcodeInput.vue\": [\n\t\t\"dd65\",\n\t\t\"TouchFormElement15\"\n\t],\n\t\"./HisBatchEntry.vue\": [\n\t\t\"f2ab\",\n\t\t\"chunk-fb7a1668\",\n\t\t\"TouchFormElement16\"\n\t],\n\t\"./HisBatchMovement.vue\": [\n\t\t\"5148\",\n\t\t\"chunk-fb7a1668\",\n\t\t\"TouchFormElement17\"\n\t],\n\t\"./HisBatchVerification.vue\": [\n\t\t\"7b0f\",\n\t\t\"chunk-fb7a1668\",\n\t\t\"TouchFormElement18\"\n\t],\n\t\"./HisCardSelector.vue\": [\n\t\t\"0734\",\n\t\t\"TouchFormElement19\"\n\t],\n\t\"./HisClinicHolidayPicker.vue\": [\n\t\t\"4030\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement20\"\n\t],\n\t\"./HisComplaintsPicker.vue\": [\n\t\t\"82d1\",\n\t\t\"TouchFormElement21\"\n\t],\n\t\"./HisDataTable.vue\": [\n\t\t\"a6ba\",\n\t\t\"TouchFormElement22\"\n\t],\n\t\"./HisDateInput.vue\": [\n\t\t\"374c\",\n\t\t\"TouchFormElement23\"\n\t],\n\t\"./HisDatePicker.vue\": [\n\t\t\"9b30\",\n\t\t\"chunk-366b6f0a\",\n\t\t\"TouchFormElement24\"\n\t],\n\t\"./HisDosageInput.vue\": [\n\t\t\"b34c\",\n\t\t\"TouchFormElement25\"\n\t],\n\t\"./HisGridSelector.vue\": [\n\t\t\"112a\",\n\t\t\"TouchFormElement26\"\n\t],\n\t\"./HisGroupSelector.vue\": [\n\t\t\"81cf\",\n\t\t\"TouchFormElement27\"\n\t],\n\t\"./HisIPAddress.vue\": [\n\t\t\"2a82\",\n\t\t\"TouchFormElement28\"\n\t],\n\t\"./HisInfiniteScrollMultipleSelect.vue\": [\n\t\t\"52a3\",\n\t\t\"TouchFormElement29\"\n\t],\n\t\"./HisLabOrders.vue\": [\n\t\t\"e614\",\n\t\t\"TouchFormElement30\"\n\t],\n\t\"./HisMonthlyDays.vue\": [\n\t\t\"69cf\",\n\t\t\"TouchFormElement31\"\n\t],\n\t\"./HisMultiSelectGrid.vue\": [\n\t\t\"0fa3\",\n\t\t\"TouchFormElement32\"\n\t],\n\t\"./HisMultipleSelect.vue\": [\n\t\t\"2fd5\",\n\t\t\"chunk-8a3b8db0\",\n\t\t\"TouchFormElement33\"\n\t],\n\t\"./HisNextVisitInterval.vue\": [\n\t\t\"3126\",\n\t\t\"TouchFormElement34\"\n\t],\n\t\"./HisNote.vue\": [\n\t\t\"c927\",\n\t\t\"TouchFormElement35\"\n\t],\n\t\"./HisNumberInput.vue\": [\n\t\t\"5e75\",\n\t\t\"TouchFormElement36\"\n\t],\n\t\"./HisPrescriptionInput.vue\": [\n\t\t\"87e5\",\n\t\t\"TouchFormElement37\"\n\t],\n\t\"./HisRadiologyPicker.vue\": [\n\t\t\"adc7\",\n\t\t\"chunk-3c642140\",\n\t\t\"TouchFormElement38\"\n\t],\n\t\"./HisSelect.vue\": [\n\t\t\"d11f\",\n\t\t\"TouchFormElement39\"\n\t],\n\t\"./HisSummary.vue\": [\n\t\t\"e0bd\",\n\t\t\"TouchFormElement40\"\n\t],\n\t\"./HisTableViewer.vue\": [\n\t\t\"8904\",\n\t\t\"TouchFormElement41\"\n\t],\n\t\"./HisTextBanner.vue\": [\n\t\t\"952c\",\n\t\t\"TouchFormElement42\"\n\t],\n\t\"./HisTextInput.vue\": [\n\t\t\"6ef9\",\n\t\t\"TouchFormElement43\"\n\t],\n\t\"./HisVitalsEntry.vue\": [\n\t\t\"e333\",\n\t\t\"TouchFormElement44\"\n\t],\n\t\"./HisWeightChart.vue\": [\n\t\t\"26a1\",\n\t\t\"TouchFormElement45\"\n\t],\n\t\"./MultiYesNoSelect.vue\": [\n\t\t\"5fd1\",\n\t\t\"TouchFormElement46\"\n\t],\n\t\"./PersonMatchView.vue\": [\n\t\t\"6591\",\n\t\t\"TouchFormElement47\"\n\t],\n\t\"./PersonSearchView.vue\": [\n\t\t\"28b2\",\n\t\t\"TouchFormElement48\"\n\t],\n\t\"./ProgramSelection.vue\": [\n\t\t\"e3b4\",\n\t\t\"TouchFormElement49\"\n\t],\n\t\"./RelationsSelection.vue\": [\n\t\t\"0e57\",\n\t\t\"TouchFormElement50\"\n\t],\n\t\"./SelectMixin.vue\": [\n\t\t\"82a9\",\n\t\t\"TouchFormElement51\"\n\t],\n\t\"./YesNoSelect.vue\": [\n\t\t\"71f2\",\n\t\t\"TouchFormElement52\"\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(1).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = \"f159\";\nmodule.exports = webpackAsyncContext;"],"sourceRoot":""}