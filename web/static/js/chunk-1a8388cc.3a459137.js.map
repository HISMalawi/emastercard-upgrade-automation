{"version":3,"sources":["webpack:///./src/apps/SPINE/services/chronic_conditions_service.ts","webpack:///./src/apps/SPINE/views/encounters/ChronicConditions.vue","webpack:///./src/apps/SPINE/views/encounters/ChronicConditions.vue?e62b","webpack:///./src/utils/HisFormHelpers/commons.ts"],"names":["ChronicConditionsService","AppEncounterService","constructor","patientID","providerID","super","_defineComponent","__name","setup","__props","fields","ref","conditionsService","goToNextTask","patientDashboardUrl","useEncounter","provider","patient","value","getConditionsField","getAdditionalConditionsField","getBMIField","getOtherConditionsField","async","onSubmit","_fdata","cdata","createEncounter","obs","resolveObs","saveObservationList","id","helpText","type","FieldType","TT_MULTIPLE_YES_NO","computedValue","options","buildConditionObs","checkedOptions","mapToYesNoOptions","TT_SELECT","o","buildValueText","label","mapStrToOptions","TT_TEXT","v","isEmpty","map","buildValueCoded","option","child","_ctx","_cache","_openBlock","_createBlock","_unref","IonPage","default","_withCtx","_createVNode","HisStandardForm","cancelDestinationPath","onFinishAction","skipSummary","_","__exports__","tag","values","Object","filter","d","reduce","accum","cur","data","Array","isArray","concat","push","Promise","all","mapObjToOptions","other","hasUnknown","_checkedValue$value","checkedValue","find","yesNoUnknownOptions","yesNoOptions"],"mappings":"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","file":"js/chunk-1a8388cc.3a459137.js","sourcesContent":["import { AppEncounterService } from \"@/services/app_encounter_service\"\n\nexport class ChronicConditionsService extends AppEncounterService {\n    constructor(patientID: number, providerID: number) {\n        super(patientID, 58, providerID) \n    }\n}","import { defineComponent as _defineComponent } from 'vue'\nimport { unref as _unref, createVNode as _createVNode, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nimport { ref } from 'vue'\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport { Field, Option } from '@/components/Forms/FieldInterface';\nimport { FieldType } from '@/components/Forms/BaseFormElements';\nimport { IonPage } from '@ionic/vue';\nimport useEncounter from \"@/composables/useEncounter\";\nimport { mapStrToOptions, mapToYesNoOptions, resolveObs } from '@/utils/HisFormHelpers/commons';\nimport { ChronicConditionsService } from '../../services/chronic_conditions_service';\nimport isEmpty from 'lodash/isEmpty';\n\n\nexport default /*#__PURE__*/_defineComponent({\n  __name: 'ChronicConditions',\n  setup(__props) {\n\nconst fields = ref<Array<Field>>([]);\nlet conditionsService: ChronicConditionsService;\n\nconst { goToNextTask, patientDashboardUrl } = useEncounter((provider, patient) => {\n  conditionsService = new ChronicConditionsService(patient, provider);\n  fields.value = [\n    getConditionsField(),\n    getAdditionalConditionsField(),\n    getBMIField(),\n    getOtherConditionsField(),\n  ]\n});\n\nasync function onSubmit(_fdata: any, cdata: any) {\n  await conditionsService.createEncounter();\n  const obs = await resolveObs(cdata);\n  await conditionsService.saveObservationList(obs);\n  goToNextTask();\n}\n\nfunction getConditionsField(): Field {\n  return {\n    id: 'conditions',\n    helpText: \"Condition\",\n    type: FieldType.TT_MULTIPLE_YES_NO,\n    computedValue: (options: Array<Option>) => buildConditionObs(options),\n    options: (_fdata: any, checkedOptions: Array<Option>) => mapToYesNoOptions(\n      [\n        \"Cancer\",\n        \"Diabetes\",\n        \"HIV\",\n        \"Chronic Heart condition\",\n        \"Chronic liver disease\",\n      ],\n      checkedOptions,\n      true\n    )\n  }\n}\n\nfunction getAdditionalConditionsField(): Field {\n  return {\n    id: 'additional_conditions',\n    helpText: \"Condition continued...\",\n    type: FieldType.TT_MULTIPLE_YES_NO,\n    options: (_fdata: any, checkedOptions: Array<Option>) => mapToYesNoOptions(\n      [\n        \"TB\",\n        \"Asthma\",\n        \"Epilepsy\",\n        \"Kidney Disease\",\n      ], \n      checkedOptions,\n      true\n    ),\n    computedValue: (options: Array<Option>) => buildConditionObs(options)\n  }\n}\n\nfunction getBMIField(): Field {\n  return {\n    id: 'bmi',\n    helpText: \"Select BMI range\",\n    type: FieldType.TT_SELECT,\n    computedValue: (o: Option) => ({ obs: conditionsService.buildValueText(\"BMI\", o.label) }),\n    options: () => mapStrToOptions([\n        \"< 18.5\",\n        \"18.5 - 24.9\",\n        \"25 - 29.9\",\n        \">= 30\"\n      ]),\n  }\n}\n\nfunction getOtherConditionsField(): Field {\n  return {\n    id: 'other',\n    helpText: \"Other (Specify)\",\n    type: FieldType.TT_TEXT,\n    computedValue: (v: Option) => {\n      if(isEmpty(v)) return null;\n      return { obs: conditionsService.buildValueText(\"Other (specify)\", v.label) }\n    },\n  }\n}\n\nfunction buildConditionObs(options: Array<Option>) {\n  if(isEmpty(options)) return null;\n  return {\n    obs: options.map(async (option) => ({\n      ...(await conditionsService.buildValueCoded(\"Condition\", option.label)),\n      child: [await conditionsService.buildValueCoded(option.label, option.value)]\n    }))\n  }\n}\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createBlock(_unref(IonPage), null, {\n    default: _withCtx(() => [\n      _createVNode(HisStandardForm, {\n        cancelDestinationPath: _unref(patientDashboardUrl),\n        fields: fields.value,\n        onFinishAction: onSubmit,\n        skipSummary: true\n      }, null, 8, [\"cancelDestinationPath\", \"fields\"])\n    ]),\n    _: 1\n  }))\n}\n}\n\n})","import script from \"./ChronicConditions.vue?vue&type=script&lang=ts&setup=true\"\nexport * from \"./ChronicConditions.vue?vue&type=script&lang=ts&setup=true\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { Option } from \"@/components/Forms/FieldInterface\"\nimport { find } from \"lodash\"\n\nexport function resolveObs(obs: any, tag = '') {\n  const values: any = Object.values(obs)\n    .filter((d: any) => d && (d.tag === tag || tag === ''))\n    .reduce((accum: any, cur: any) => {\n      const data = cur.obs ? cur.obs : cur\n      if (Array.isArray(data)) {\n        accum = accum.concat(data)\n      } else if (typeof data === 'function') {\n        accum.push(data())\n      } else {\n        accum.push(data)\n      }\n      return accum\n    }, [])\n  return Promise.all(values)\n}\n\nexport function mapStrToOptions(options: Array<string>): Array<Option> {\n  return options.map(option => ({ label: option, value: option }));\n}\n\nexport function mapObjToOptions(options: Array<Record<string, any>>, label = \"name\", value = \"name\"): Array<Option> {\n  return options.map(option => ({ label: option[label], value: option[value], other: option }));\n}\n\nexport function mapToYesNoOptions(options: Array<string>, checkedOptions?: Array<Option>, hasUnknown = false) {\n  return options.map(label => {\n    const checkedValue = find(checkedOptions, { label });\n    return {\n      label,\n      value: checkedValue?.value ?? \"\",\n      other: {\n        values: hasUnknown ? yesNoUnknownOptions() : yesNoOptions()\n      }\n    }\n  });\n}\n\nexport function yesNoUnknownOptions() {\n  return mapStrToOptions([\"Yes\", \"No\", \"Unknown\"]);\n}\n\nexport function yesNoOptions() {\n  return mapStrToOptions([\"Yes\", \"No\"]);\n}\n\nexport function toYesNoOption(label: string, other: any={}): Option {\n  return {\n      label,\n      value: '',\n      other: {\n          ...other,\n          values: yesNoOptions()\n      }\n  } \n}"],"sourceRoot":""}