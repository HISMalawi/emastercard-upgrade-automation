{"version":3,"sources":["webpack:///./src/apps/ART/views/reports/ReportMixin.vue","webpack:///./src/apps/ART/views/reports/ReportMixin.vue?42ba","webpack:///./src/apps/ART/services/reports/art_report_service.ts","webpack:///./src/components/Forms/HisStandardForm.vue?f008","webpack:///./src/components/Forms/HisStandardForm.vue","webpack:///./src/components/Forms/HisStandardForm.vue?6820","webpack:///./src/apps/ART/services/reports/patient_report_service.ts","webpack:///./src/apps/ART/views/reports/inconsistencies/PatientVisitStats.vue?672a","webpack:///./src/apps/ART/views/reports/inconsistencies/PatientVisitStats.vue","webpack:///./src/apps/ART/views/reports/inconsistencies/PatientVisitStats.vue?2400"],"names":["defineComponent","data","fields","report","reportReady","period","startDate","endDate","customFileName","drillDownCache","methods","formatGender","gender","upCaseGender","toUpperCase","test","toDate","date","HisDate","toStandardHisDisplayFormat","sortByArvNumber","attr","sort","a","b","this","getArvInt","e","console","error","arv","prfx","art","arvNumStr","split","arvNumInt","parseInt","tdARV","params","table","td","sortValue","confirmPatient","patient","$router","push","title","columns","asyncRows","canExport","modal","modalController","create","component","DrilldownTable","cssClass","componentProps","showFilters","rowsPerPage","paginated","showReportStamp","footerColor","onFinish","dismiss","present","rows","rowParser","getDefaultDrillDownTable","thTxt","async","ARV_NUM_INDEX","t","tableRows","map","id","index","isArray","defaultRow","num","key","oldIndex","rest","Patientservice","findByID","row","getArvNumber","getGender","tdDate","getBirthdate","toString","tdBtn","path","Promise","all","runTableDrill","drilldownData","drill","values","length","tdLink","getQuaterOptions","quarters","ArtReportService","getReportQuarters","q","label","name","value","start","other","getDateDurationFields","useQuarter","setCustomQuarterPeriod","maxQuarter","maxDate","Service","getSessionDate","minDate","helpText","type","FieldType","TT_SELECT","condition","validation","val","Validation","required","options","items","generateDateFields","f","quarter","estimation","allowUnknown","computeValue","unload","d","s","c","end_date","_","start_date","__exports__","constructor","super","programID","getProgramID","getDateIntervalPeriod","setStartDate","setEndDate","setQuarter","getReport","url","getJson","buildRequest","getMaternalStatus","patientIds","reportDefinition","Url","parameterizeObjToString","postJson","config","payload","year","daysInMonth","m","dayjs","startMonth","endMonth","qtr","end","qtrBounds","getQuarterBounds","getFullYear","Date","qtrName","maxQuarters","qtrs","currDate","currYear","curYr","getMonth","getDate","currentQtr","getQtrByDate","i","buildQtrObj","render","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createBlock","_resolveDynamicComponent","formType","skipSummary","activeField","cancelDestinationPath","onOnFinish","onFinishAction","onOnIndex","onIndex","components","TouchScreenForm","emits","props","Function","Boolean","default","String","Object","formData","computedData","$emit","AGE_GROUPS","PatientReportService","getBookedAppointments","getViralLoadResults","range","getOtherOutcome","outcome","getPatientVisitTypes","getClientsDueForVl","getClientRentention","getExternalConsultationClients","getMissedAppointments","getPregnantWomen","getArchivingCandidates","getIncompleteVisits","_hoisted_1","class","_component_his_standard_form","_resolveComponent","_component_ion_title","_component_ion_toolbar","_component_ion_header","_component_ApexChart","_component_view_port","_component_ion_content","_component_ion_button","_component_ion_footer","_component_ion_page","_createElementBlock","_Fragment","_withDirectives","_createVNode","onPeriod","_vShow","canShowReport","_withCtx","_createTextVNode","_createElementVNode","width","height","chartType","chartOptions","series","onClick","pointSelection","color","slot","size","_createCommentVNode","ApexChart","IonPage","IonHeader","IonTitle","IonToolbar","IonContent","IonFooter","IonButton","ViewPort","HisStandardForm","mixins","ReportMixin","patientPresent","guardianPresent","bothPresent","text","yaxis","plotAreaHeight","xaxis","created","conf","presentLoading","res","buildSeries","loadingController","loading","message","backdropDismiss","dataPointIndex","seriesIndex","sIndex","raw","visitDates","uniq","keys","setValueGroup","group","comparator","entries","filter","v","patient_present","guardian_present","sortSeries","valueGroup","getTime","sortData","guardian"],"mappings":"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","file":"js/chunk-373eba62.6801c7d1.js","sourcesContent":["\nimport { Service } from \"@/services/service\"\nimport { defineComponent } from 'vue'\nimport { Field } from '@/components/Forms/FieldInterface'\nimport { generateDateFields } from \"@/utils/HisFormHelpers/MultiFieldDateHelper\"\nimport { Patientservice } from \"@/services/patient_service\"\nimport HisDate from \"@/utils/Date\"\nimport { modalController } from \"@ionic/vue\";\nimport DrilldownTable from \"@/apps/ART/views/reports/BasicReportTemplate.vue\"\nimport { ArtReportService } from \"@/apps/ART/services/reports/art_report_service\"\nimport { FieldType } from \"@/components/Forms/BaseFormElements\"\nimport { Option } from '@/components/Forms/FieldInterface'\nimport Validation from \"@/components/Forms/validations/StandardValidations\"\nimport table from \"@/components/DataViews/tables/ReportDataTable\"\nimport { isArray } from \"lodash\"\nimport { toGenderString } from \"@/utils/Strs\"\n\nexport default defineComponent({\n    data: () => ({\n        fields: [] as Array<Field>,\n        report: {} as any,\n        reportReady: false as boolean,\n        period: '' as string,\n        startDate: '' as string,\n        endDate: '' as string,\n        customFileName: '' as string,\n        drillDownCache: {} as Record<number, Array<any>>\n    }),\n    methods: {\n        formatGender(gender: string) {\n            const upCaseGender = `${gender}`.toUpperCase()\n            if (upCaseGender === 'M' || upCaseGender === 'MALE') {\n                return 'Male'\n            }\n            if (upCaseGender === 'F' || upCaseGender === 'FEMALE') {\n                return 'Female'\n            }\n            if (/fbf|fnp|fp/i.test(gender)) {\n                return upCaseGender\n            }\n            return gender\n        },\n        toDate(date: string) {\n            return HisDate.toStandardHisDisplayFormat(date)\n        },\n        sortByArvNumber(data: Array<any>, attr='arv_number') {\n            try {\n                return data.sort((a: any, b: any) => this.getArvInt(a[attr]) > this.getArvInt(b[attr]) ? 1 : -1)\n            } catch(e) {\n                console.error(e)\n                return data\n            }\n        },\n        getArvInt(arv: string) {\n            if (typeof arv === 'string') {\n                const [prfx, art, arvNumStr] = arv.split('-')\n                const arvNumInt = parseInt(arvNumStr)\n                return typeof arvNumInt === 'number' ? arvNumInt : 0 \n            }\n            return 0\n        },\n        tdARV(arv: string, params={}) {\n            return table.td(arv, { sortValue: this.getArvInt(arv), ...params})\n        },\n        confirmPatient(patient: number) {\n            return this.$router.push(`/patients/confirm?person_id=${patient}`)\n        },\n        async drilldownAsyncRows(title: string, columns: Array<any>, asyncRows: Function, canExport=true) {\n            const modal = await modalController.create({\n                component: DrilldownTable,\n                cssClass: 'large-modal',\n                componentProps: { \n                    title, \n                    columns, \n                    asyncRows,\n                    canExport,\n                    showFilters: true,\n                    rowsPerPage: 50,\n                    paginated: true,\n                    showReportStamp: false,\n                    footerColor: 'light',\n                    onFinish: () => modalController.dismiss()\n                }\n            })\n            modal.present()\n        },\n        async drilldownData(title: string, columns: Array<any>, rows: Array<any>, rowParser: any) {\n            const modal = await modalController.create({\n                component: DrilldownTable,\n                cssClass: 'large-modal',\n                componentProps: { \n                    title, \n                    columns, \n                    rows,\n                    rowParser,\n                    rowsPerPage: 50,\n                    showFilters: true,\n                    paginated: true,\n                    showReportStamp: false,\n                    footerColor: 'light',\n                    onFinish: () => modalController.dismiss()\n                }\n            })\n            modal.present()\n        },\n        getDefaultDrillDownTable() {\n            const columns = [\n                [\n                    table.thTxt('ARV number'), \n                    table.thTxt('Gender'),\n                    table.thTxt('Birth Date'), \n                    table.thTxt('Actions')\n                ]\n            ]\n            const rowParser = async (tableRows: Array<any[]>) => {\n                let ARV_NUM_INDEX = 0\n                const t = tableRows.map(async (defaultRow: Array<any>) => {\n                    let id: any = null\n                    let index: null | number = null\n                    if (isArray(defaultRow)) {\n                        const [num, key ] = defaultRow\n                        index = num\n                        if (key in this.drillDownCache) {\n                            const [oldIndex, ...rest] = this.drillDownCache[key]\n                            return [index, ...rest] // Assign new index number and maintain patient record\n                        }\n                    } else {\n                        id = defaultRow\n                        if (id in this.drillDownCache) {\n                            return this.drillDownCache[id]\n                        }\n                    }\n    \n                    const data = await Patientservice.findByID(id)\n                    const patient = new Patientservice(data)\n                    const row = []\n                    if (index) {\n                        ARV_NUM_INDEX = 1\n                        row.push(index)\n                    } \n                    row.push(this.tdARV(patient.getArvNumber()))\n                    row.push(table.td(this.formatGender(patient.getGender())))\n                    row.push(table.tdDate(patient.getBirthdate().toString()))\n                    row.push(table.tdBtn('Show', async () => {\n                        await modalController.dismiss({})\n                        this.$router.push({ path: `/patient/dashboard/${id}`})\n                    }))\n                    this.drillDownCache[id] = row\n                    return row\n                })\n                const rows = await Promise.all(t)\n                return rows.sort((a: any, b: any) => \n                        a[ARV_NUM_INDEX].sortValue > b[ARV_NUM_INDEX].sortValue \n                        ? 1 : -1)\n            }\n            return { rowParser, columns }\n        },\n        runTableDrill(data: any, title='Drilldown patients') {\n            const { columns, rowParser } = this.getDefaultDrillDownTable()\n            this.drilldownData(title, columns, data, rowParser)\n        },\n        drill(values: Array<number>, title='Drill table') {\n            if (values && values.length > 0) {\n                return table.tdLink(\n                    values.length, \n                    () => this.runTableDrill(values, title)\n                )\n            }\n            return table.td(0)\n        },\n        getQuaterOptions() {\n            const quarters = ArtReportService.getReportQuarters()\n            return quarters.map((q: any) => ({\n                label: q.name, value: q.start, other: q\n            }))\n        },\n        getDateDurationFields(\n            useQuarter=false, \n            setCustomQuarterPeriod=false, \n            maxQuarter=5, \n            maxDate=Service.getSessionDate() as string | null,\n        ): Array<Field> {\n            const minDate = '2000-01-01'\n            return [\n                {\n                    id: 'quarter',\n                    helpText: 'Select Quarter',\n                    type: FieldType.TT_SELECT,\n                    condition: () => useQuarter,\n                    validation: (val: Option) => Validation.required(val),\n                    options: () => {\n                        const quarters = ArtReportService.getReportQuarters(maxQuarter)\n                        let items: Array<Option> = quarters.map((q: any) => ({\n                            label: q.name,\n                            value: q.start,\n                            other: q\n                        }))\n                        if (setCustomQuarterPeriod) {\n                            items = [\n                                {\n                                    label: 'Set custom period',\n                                    value: 'custom_period',\n                                    other: {}\n                                },\n                                ...items\n                            ]\n                        }\n                        return items\n                    }\n                },\n                ...generateDateFields({\n                    id: 'start_date',\n                    helpText: 'Start',\n                    required: true,\n                    condition: (f: any) => f.quarter && f.quarter.value === 'custom_period' || !useQuarter,\n                    minDate: () => minDate,\n                    maxDate: () => maxDate,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string) => date \n                }),\n                ...generateDateFields({\n                    id: 'end_date',\n                    helpText: 'End',\n                    required: true,\n                    condition: (f: any) => f.quarter && f.quarter.value === 'custom_period' || !useQuarter,\n                    unload: (d: any, s: any, f: any, c: any) => {\n                        if (s === 'next') {\n                            this.endDate = c.end_date\n                        }\n                    },\n                    minDate: (_: any, c: any) => c.start_date,\n                    maxDate: () => maxDate,\n                    estimation: {\n                        allowUnknown: false\n                    },\n                    computeValue: (date: string) => date\n                })\n            ]\n        }\n    }\n})\n","import script from \"./ReportMixin.vue?vue&type=script&lang=ts\"\nexport * from \"./ReportMixin.vue?vue&type=script&lang=ts\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { Service } from \"@/services/service\";\nimport HisDate from \"@/utils/Date\"\nimport Url from \"@/utils/Url\";\nimport dayjs from \"dayjs\";\n\nexport interface QuarterInterface {\n    name: string;\n    start: string;\n    end: string;\n}\n\nexport class ArtReportService extends Service {\n    programID: number;\n    startDate: string;\n    endDate: string;\n    date: string;\n    quarter: string\n    constructor() {\n        super()\n        this.endDate = ''\n        this.startDate = ''\n        this.quarter = ''\n        this.date = Service.getSessionDate()\n        this.programID = Service.getProgramID()\n    }\n\n    getDateIntervalPeriod() {\n        return `${HisDate.toStandardHisDisplayFormat(this.startDate)} - ${HisDate.toStandardHisDisplayFormat(this.endDate)}`\n    }\n\n    setStartDate(startDate: string) {\n        this.startDate = startDate\n    }  \n\n    setEndDate(endDate: string) {\n        this.endDate = endDate\n    }\n\n    setQuarter(quarter: string) {\n        this.quarter = quarter\n    }\n\n    getReport(url: string, params={}) {\n        return Service.getJson(url, this.buildRequest(params))\n    }\n\n    getMaternalStatus(patientIds: number[], reportDefinition = 'pepfar') {\n        const params = Url.parameterizeObjToString(this.buildRequest({ 'report_definition': reportDefinition }))\n        return Service.postJson(`vl_maternal_status?${params}`, {\n            'patient_ids': patientIds\n        })\n    }\n\n    buildRequest(config: Record<string, any> = {}) {\n        const payload: any = {'date': this.date, 'program_id': this.programID}\n        if (this.startDate && this.endDate) {\n            payload['start_date'] = this.startDate\n            payload['end_date'] = this.endDate\n        }\n        if (this.quarter) {\n            payload['quarter'] = this.quarter\n        }\n        return { ...payload, ...config }\n    }\n\n    static getQuarterBounds(year: number) {\n        const daysInMonth = (m: string) => dayjs(`${year}-${m}-01`).daysInMonth()\n        const startMonth = (m: string) => `${year}-${m}-01 00:00`\n        const endMonth = (m: string) => `${year}-${m}-${daysInMonth(m)} 00:00`\n\n        return {\n            'Q1': {\n                qtr: 1,\n                start: startMonth('01'),\n                end: endMonth('03')\n            },\n            'Q2': {\n                qtr: 2,\n                start: startMonth('04'),\n                end: endMonth('06')\n            },\n            'Q3': {\n                qtr: 3,\n                start: startMonth('07'),\n                end: endMonth('09')\n            },\n            'Q4': {\n                qtr: 4,\n                start: startMonth('10'),\n                end: endMonth('12')\n            }\n        }\n    }\n\n    static getQtrByDate(date: Date) {\n        const qtrBounds: any = this.getQuarterBounds(date.getFullYear())\n        for(const qtr in qtrBounds) {\n            const { start, end } = qtrBounds[qtr]\n            if (date >= new Date(start) && date <= new Date(end)) {\n                return qtrBounds[qtr]\n            }\n        }\n        return null\n    }\n\n    static buildQtrObj(qtrName: string, year: number): QuarterInterface {\n        const qtrBounds: any = this.getQuarterBounds(year)\n        const { start, end } = qtrBounds[qtrName]\n        return {\n            start,\n            end,\n            name: `${qtrName} ${year}`,\n        }\n    }\n\n    static getReportQuarters(maxQuarters=5) {\n        const qtrs: QuarterInterface[] = [];\n        let currDate = new Date();\n        let currYear = currDate.getFullYear();\n        const curYr = currYear\n        \n        currDate = new Date(`${curYr}-${currDate.getMonth() + 1}-${currDate.getDate()} 00:00`);\n        const currentQtr = this.getQtrByDate(currDate);\n        let qtr = currentQtr.qtr;\n        let i = 0;\n\n        if (qtr === 4) qtrs.push(this.buildQtrObj('Q1', currYear + 1))\n\n        while (i < maxQuarters) {\n          // Add following quarter\n          if (i === 0 && qtr < 4) qtrs.push(this.buildQtrObj(`Q${qtr + 1}`, currYear))\n\n          qtrs.push(this.buildQtrObj(`Q${qtr}`, currYear))\n          qtr = qtr > 0 ? (qtr -= 1) : qtr;\n          currYear = qtr == 0 ? currYear - 1 : currYear;\n          qtr =  qtr == 0 ? ( qtr += 4) : qtr;\n          i++;\n        }\n        return qtrs;\n    }\n}\n","import { resolveDynamicComponent as _resolveDynamicComponent, openBlock as _openBlock, createBlock as _createBlock } from \"vue\"\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  return (_openBlock(), _createBlock(_resolveDynamicComponent(_ctx.formType), {\n    fields: _ctx.fields,\n    skipSummary: _ctx.skipSummary,\n    activeField: _ctx.activeField,\n    cancelDestinationPath: _ctx.cancelDestinationPath,\n    onOnFinish: _ctx.onFinish,\n    onFinish: _ctx.onFinishAction,\n    onOnIndex: _ctx.onIndex\n  }, null, 40, [\"fields\", \"skipSummary\", \"activeField\", \"cancelDestinationPath\", \"onOnFinish\", \"onFinish\", \"onOnIndex\"]))\n}","\nimport TouchScreenForm from \"@/components/Forms/TouchScreenForm.vue\";\nimport { defineComponent, PropType } from \"vue\";\nimport { Field } from \"./FieldInterface\";\n\nexport default defineComponent({\n    name: \"HisStandardForm\",\n    components: { TouchScreenForm },\n    emits: [\n        'onFinish',\n        'onIndex'\n    ],\n    data: () => ({\n        formType: 'touch-screen-form' as string\n    }),\n    props: {\n        onFinishAction: {\n            type: Function\n        },\n        skipSummary: {\n            type: Boolean,\n            default: false\n        },\n        activeField: {\n            type: String\n        },\n        fields: {\n            type: Object as PropType<Field[]>,\n            required: true\n        },\n        cancelDestinationPath: {\n            type: String,\n            required: false,\n        }\n    },\n    methods: {\n        onFinish(formData: any, computedData: any) {\n            this.$emit('onFinish', formData, computedData)\n        },\n        onIndex(i: number) {\n            this.$emit('onIndex', i)\n        }\n    }\n})\n","import { render } from \"./HisStandardForm.vue?vue&type=template&id=6daa0375&ts=true\"\nimport script from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\nexport * from \"./HisStandardForm.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { ArtReportService } from \"./art_report_service\";\n\nexport const AGE_GROUPS = [\n    '<1 year',\n    '1-4 years', \n    '5-9 years', \n    '10-14 years', \n    '15-19 years', \n    '20-24 years', \n    '25-29 years', \n    '30-34 years', \n    '35-39 years', \n    '40-44 years', \n    '45-49 years', \n    '50-54 years',\n    '55-59 years',\n    '60-64 years',\n    '65-69 years',\n    '70-74 years',\n    '75-79 years',\n    '80-84 years',\n    '85-89 years',\n    '90 plus years'\n]\n\nexport class PatientReportService extends ArtReportService {\n    constructor() {\n        super()\n    }\n    \n    getBookedAppointments(date: string) {\n        return ArtReportService.getJson(`programs/${this.programID}/scheduled_appointments`, { date })\n    }\n\n    getViralLoadResults(range: string) {\n        return this.getReport(`/programs/${this.programID}/reports/high_vl_patients`, { range })\n    }\n\n    getOtherOutcome(outcome: string) {\n        return this.getReport('patient_outcome_list', { outcome })\n    }\n\n    getPatientVisitTypes() {\n        return this.getReport('patient_visit_types')\n    }\n\n    getClientsDueForVl() {\n        return this.getReport('clients_due_vl')\n    }\n\n    getClientRentention() {\n        return this.getReport(`/programs/${this.programID}/reports/retention`)\n    }\n\n    getExternalConsultationClients() {\n        return this.getReport(`${this.programID}/external_consultation_clients`)\n    }\n\n    getMissedAppointments() {\n        return this.getReport('missed_appointments')\n    }\n\n    getPregnantWomen() {\n        return this.getReport(`/programs/${this.programID}/reports/pregnant_patients`)\n    }\n\n    getArchivingCandidates() {\n        return ArtReportService.getJson(`programs/${this.programID}/reports/archiving_candidates`, { \n            'start_date': this.date\n        })\n    }\n\n    getIncompleteVisits() {\n        return this.getReport('incomplete_visits', {\n            \"tool_name\": \"INCOMPLETE VISITS\",\n        })\n    }\n}\n","import { resolveComponent as _resolveComponent, vShow as _vShow, createVNode as _createVNode, withDirectives as _withDirectives, createTextVNode as _createTextVNode, withCtx as _withCtx, createElementVNode as _createElementVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\"\n\nconst _hoisted_1 = { class: \"view-port-content\" }\n\nexport function render(_ctx: any,_cache: any,$props: any,$setup: any,$data: any,$options: any) {\n  const _component_his_standard_form = _resolveComponent(\"his-standard-form\")!\n  const _component_ion_title = _resolveComponent(\"ion-title\")!\n  const _component_ion_toolbar = _resolveComponent(\"ion-toolbar\")!\n  const _component_ion_header = _resolveComponent(\"ion-header\")!\n  const _component_ApexChart = _resolveComponent(\"ApexChart\")!\n  const _component_view_port = _resolveComponent(\"view-port\")!\n  const _component_ion_content = _resolveComponent(\"ion-content\")!\n  const _component_ion_button = _resolveComponent(\"ion-button\")!\n  const _component_ion_footer = _resolveComponent(\"ion-footer\")!\n  const _component_ion_page = _resolveComponent(\"ion-page\")!\n\n  return (_openBlock(), _createElementBlock(_Fragment, null, [\n    _withDirectives(_createVNode(_component_his_standard_form, {\n      onOnFinish: _ctx.onPeriod,\n      skipSummary: true,\n      fields: _ctx.fields\n    }, null, 8, [\"onOnFinish\", \"fields\"]), [\n      [_vShow, !_ctx.canShowReport]\n    ]),\n    (_ctx.canShowReport)\n      ? (_openBlock(), _createBlock(_component_ion_page, { key: 0 }, {\n          default: _withCtx(() => [\n            _createVNode(_component_ion_header, null, {\n              default: _withCtx(() => [\n                _createVNode(_component_ion_toolbar, null, {\n                  default: _withCtx(() => [\n                    _createVNode(_component_ion_title, null, {\n                      default: _withCtx(() => [\n                        _createTextVNode(\" Patient visit report \")\n                      ]),\n                      _: 1\n                    })\n                  ]),\n                  _: 1\n                })\n              ]),\n              _: 1\n            }),\n            _createVNode(_component_ion_content, null, {\n              default: _withCtx(() => [\n                _createVNode(_component_view_port, null, {\n                  default: _withCtx(() => [\n                    _createElementVNode(\"div\", _hoisted_1, [\n                      _createVNode(_component_ApexChart, {\n                        width: _ctx.width,\n                        height: _ctx.height,\n                        type: _ctx.chartType,\n                        options: _ctx.chartOptions,\n                        series: _ctx.series,\n                        onClick: _ctx.pointSelection\n                      }, null, 8, [\"width\", \"height\", \"type\", \"options\", \"series\", \"onClick\"])\n                    ])\n                  ]),\n                  _: 1\n                })\n              ]),\n              _: 1\n            }),\n            _createVNode(_component_ion_footer, null, {\n              default: _withCtx(() => [\n                _createVNode(_component_ion_toolbar, { color: \"dark\" }, {\n                  default: _withCtx(() => [\n                    _createVNode(_component_ion_button, {\n                      slot: \"end\",\n                      size: \"large\",\n                      \"router-link\": \"/\",\n                      color: \"success\"\n                    }, {\n                      default: _withCtx(() => [\n                        _createTextVNode(\" Finish \")\n                      ]),\n                      _: 1\n                    })\n                  ]),\n                  _: 1\n                })\n              ]),\n              _: 1\n            })\n          ]),\n          _: 1\n        }))\n      : _createCommentVNode(\"\", true)\n  ], 64))\n}","\nimport { defineComponent } from 'vue'\nimport {\n    IonPage,\n    IonHeader,\n    IonTitle,\n    IonToolbar,\n    IonContent,\n    IonFooter,\n    IonButton,\n    loadingController\n} from \"@ionic/vue\"\nimport ViewPort from \"@/components/DataViews/ViewPort.vue\"\nimport { PatientReportService } from \"@/apps/ART/services/reports/patient_report_service\"\nimport HisStandardForm from \"@/components/Forms/HisStandardForm.vue\";\nimport ReportMixin from \"@/apps/ART/views/reports/ReportMixin.vue\"\nimport { uniq } from 'lodash';\nimport ApexChart from \"vue3-apexcharts\";\n\nexport default defineComponent({\n    components: {\n        ApexChart,\n        IonPage,\n        IonHeader,\n        IonTitle,\n        IonToolbar,\n        IonContent,\n        IonFooter,\n        IonButton,\n        ViewPort,\n        HisStandardForm\n    },\n    mixins: [ReportMixin],\n    data: () => ({\n        chartType: 'area',\n        height: '100%',\n        width: '100%',\n        canShowReport: false,\n        report: {} as any,\n        series: [] as any,\n        patientPresent: {} as any,\n        guardianPresent: {} as any,\n        bothPresent: {} as any,\n        chartOptions: {\n            title : {\n                text: \"HIV Reception encounters\"\n            },\n            yaxis: {\n                title: { \n                    text: \"Number of clients\"\n                },\n                plotAreaHeight: 800,\n            },\n            xaxis: {\n                type: 'datetime'\n            }\n        } as any\n    }),\n    created() {\n        this.fields = this.getDateDurationFields()\n    },\n    methods: {\n        async onPeriod(_: any, conf: any) {\n            await this.presentLoading()\n            this.canShowReport = true\n            this.report = new PatientReportService()\n            this.report.setStartDate(conf.start_date)\n            this.report.setEndDate(conf.end_date)\n            const res = await this.report.getPatientVisitTypes()\n            this.series = this.buildSeries(res)\n            loadingController.dismiss()\n        },\n        async presentLoading() {\n            const loading = await loadingController\n                .create({\n                    message: 'Please wait...',\n                    backdropDismiss: false\n                })\n            await loading.present()\n        },\n        pointSelection(e: any, c: any, config: any) {\n            try {\n                const { dataPointIndex, seriesIndex } = config\n                const sIndex = seriesIndex <= 0 ? 0 : seriesIndex\n                this.runTableDrill(this.series[sIndex].raw[dataPointIndex])\n            } catch (e) {\n                //TODO\n            }\n        },\n        buildSeries(data: any) {\n            const visitDates: string[] = uniq(Object.keys(data))\n            const setValueGroup = (\n                date: string,\n                group: Record<string, any>,\n                comparator: any) => {\n\n                if (!(date in group)) group[date] = []\n\n                const values = Object.entries(data[date])\n                    .filter(([_, v]: any) => comparator(\n                        v.patient_present,\n                        v.guardian_present\n                    ))\n                    .map(([patient]) => patient)\n\n                group[date] = [...group[date], ...values]\n                return group\n            }\n\n            const sortSeries = (valueGroup: any) => {\n                return visitDates.map((date: string) => [\n                    new Date(date).getTime(), \n                    valueGroup[date].length\n                ])\n            }\n\n            const sortData = (valueGroup: any) => visitDates.map((date: string) => valueGroup[date])\n    \n            for(const date in data) {\n                setValueGroup(date, this.patientPresent, (patient: any, guardian: any) => {\n                    return patient && !guardian\n                })\n                setValueGroup(date, this.guardianPresent, (patient: any, guardian: any) => {\n                    return !patient && guardian\n                })\n                setValueGroup(date, this.bothPresent, (patient: any, guardian: any) => {\n                    return patient && guardian\n                })\n            }\n\n            return [\n                {\n                    name: 'Patient present',\n                    raw: sortData(this.patientPresent),\n                    data: sortSeries(this.patientPresent)\n                },\n                {\n                    name: 'Guardian present',\n                    raw: sortData(this.guardianPresent),\n                    data: sortSeries(this.guardianPresent)\n                },\n                {\n                    name: 'Both patient and guardian present',\n                    raw: sortData(this.bothPresent),\n                    data: sortSeries(this.bothPresent)\n                }\n            ]\n        }\n    }\n})\n","import { render } from \"./PatientVisitStats.vue?vue&type=template&id=2fbacc90&ts=true\"\nimport script from \"./PatientVisitStats.vue?vue&type=script&lang=ts\"\nexport * from \"./PatientVisitStats.vue?vue&type=script&lang=ts\"\n\nimport exportComponent from \"/home/daniel/local-repos/HIS-Core/node_modules/@vue/cli-service/node_modules/vue-loader-v16/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__"],"sourceRoot":""}