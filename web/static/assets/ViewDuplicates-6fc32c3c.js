import{l as r}from"./loader-e999eb6f.js";import{_ as I}from"./ReportTable.vue_vue_type_style_index_0_lang-249fd9fa.js";import{t as s,a as P}from"./toasts-743fb4bf.js";import{P as B}from"./patient_identifier_service-1603d410.js";import{d as F,r as n,f as S,h as T,i as $,j as N,al as C,am as G,o as R}from"./index-3e0cb99e.js";import{D as V}from"./DrilldownTable-dd52757c.js";import{P as k}from"./patient_service-ffa68f62.js";import{t as x}from"./Strs-0c962638.js";import{t as j}from"./his_date-ef6ecbd4.js";import{d as z}from"./dde-7105490d.js";import"./exports-fe4ce8cd.js";import"./index-3327c456.js";import"./vue-datepicker-0049170e.js";import"./common-abc2f84d.js";import"./arrays-1b521787.js";import"./Date-744f46f5.js";const ae=F({__name:"ViewDuplicates",setup(A){const p=n([]),u=S(),i=n(),l=new B,d=n([]),w=[{path:"identifier",label:"Identifier"},{path:"count",label:"Count"}],y=T(()=>[{id:"identifier",label:"Select Identifier type",type:"select",gridSize:5,options:d.value}]),b=[{label:"View Patients",action:e=>{var f,h,v,_;const t=n([]),c="Patients with ".concat((f=i.value)==null?void 0:f.label,": ").concat(e.identifier),D=[{path:"person.names[0].given_name",label:"First Name"},{path:"person.names[0].family_name",label:"Last Name"},{path:"person.gender",label:"Gender",formatter:x},{path:"person.birthdate",label:"Date of Birth",formatter:j}],m=[{label:"View",action:a=>u.push("/patients/".concat(a.patient_id))}];return((h=i.value)==null?void 0:h.value)===C&&z.value&&m.push({label:"Re-assign",action:async a=>{try{return await l.reassignNPID(a.patient_id),P("Identifier re-assigned successfully"),u.push("/patients/".concat(a.patient_id))}catch(o){console.error(o),s("Failed to re-assign identifier")}}}),r.show(),k.findByOtherID((_=(v=i.value)==null?void 0:v.value)!=null?_:-1,e.identifier).then(a=>{var o;r.hide(),t.value.push(...(o=a.data)!=null?o:[])}).catch(a=>{s("Failed to load patients"),console.error(a)}),G.show(V,{title:c,columns:D,rows:t.value,rowActionButtons:m})}}];async function g({identifier:e}){var t;try{r.show(),i.value=e,p.value=(t=await l.getDuplicateIndentifiers(e.value))!=null?t:[]}catch(c){s("Failed to load report data"),console.error(c)}finally{r.hide()}}return $(async()=>{try{const e=await l.getIdentifierTypes();d.value=e.map(t=>({label:t.name,value:t.patient_identifier_type_id,other:t}))}catch(e){console.error(e),s("Failed to load identifier types")}}),(e,t)=>(R(),N(I,{title:"Duplicates Identifiers",columns:w,rows:p.value,"custom-filters":y.value,"row-action-buttons":b,onGenerate:g},null,8,["rows","custom-filters"]))}});export{ae as default};
