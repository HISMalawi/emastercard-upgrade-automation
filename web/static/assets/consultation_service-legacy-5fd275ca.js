!function(){function t(t,e,r){return(e=function(t){var e=function(t,e){if("object"!=typeof t||!t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var a=r.call(t,e||"default");if("object"!=typeof a)return a;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"==typeof e?e:e+""}(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}System.register(["./program_service-legacy-4ea294da.js","./common-legacy-0d7df615.js","./index-legacy-aa705205.js","./his_date-legacy-45d6bc67.js","./encounter_types-legacy-dd9af3d0.js","./patient_service-legacy-2c2e282c.js","./index-legacy-6a8cc98f.js"],(function(e,r){"use strict";var a,i,s,n,o,u,d,c;return{setters:[t=>{a=t.P},t=>{i=t.i},t=>{s=t.P},t=>{n=t.a},t=>{o=t.e},t=>{u=t.O,d=t.C},t=>{c=t.G}],execute:function(){class r{static create(t){const e={...t};return"program_id"in e||Object.assign(e,{program_id:s}),"encounter_datetime"in e||Object.assign(e,{encounter_datetime:n()}),c.postJson("/encounters",e)}static voidEncounter(t,e="Unknown"){return c.void(`/encounters/${t}`,{reason:e})}static getSavedEncounters(t,e=s){return c.getJson(`programs/${e}/patients/${t}/saved_encounters`)}static getEncounters(t,e={}){return c.getJson("/encounters",{program_id:s,patient_id:t,paginate:!1,...e})}}e("E",r);class l extends u{constructor(e,r,a){super(),t(this,"encounterTypeID",void 0),t(this,"programID",void 0),t(this,"encounterID",void 0),t(this,"providerID",void 0),t(this,"patientID",void 0),t(this,"date",void 0),this.encounterTypeID=r,this.patientID=e,this.encounterID=0,this.date=a,this.providerID=c.getUserID(),this.programID=s}getDate(){return this.date}setDate(t){this.date=t}setEncounterID(t){this.encounterID=t}getEncounterID(){return this.encounterID}getFirstValueCoded(t){return l.getFirstValueCoded(this.patientID,t,this.date)}getFirstValueNumber(t){return l.getFirstValueNumber(this.patientID,t,this.date)}getFirstValueDatetime(t){return l.getFirstValueDatetime(this.patientID,t,this.date)}async buildObs(t,e){const r={...e,person_id:this.patientID,obs_datetime:this.date};return r.concept_id=await d.getConceptID(t),"string"==typeof e.value_coded&&(r.value_coded=await d.getConceptID(e.value_coded)),r}buildValueText(t,e){return l.buildValueText(t,e,this.date)}buildValueCoded(t,e){return l.buildValueCoded(t,e,this.date)}buildGroupValueCoded(t,e,r){return l.buildGroupValueCoded(t,e,r,this.date)}buildOptionsGroupObs(t,e){return Promise.all(e.map((async e=>this.buildGroupValueCoded(t,e.label,e.isChecked?"Yes":"No"))))}buildValueNumber(t,e,r=null,a=null){return l.buildValueNumber(t,e,this.date,r,a)}buildValueDate(t,e){return l.buildValueDate(t,e,this.date)}buildValueDateEstimated(t,e){return this.buildObs(t,{value_datetime:e,value_text:"Estimated"})}buildDateObs(t,e,r){return/unknown/i.test(e)?this.buildValueText(t,"Unknown"):r?this.buildValueDateEstimated(t,e):this.buildValueDate(t,e)}async saveObservationList(t){return u.saveObsArray(this.encounterID,t)}async saveValueTextObs(t,e){const r=await u.buildValueText(t,e,this.date);return this.saveObs(r)}async saveValueCodedObs(t,e){const r=await u.buildValueCoded(t,e,this.date);return this.saveObs(r)}async saveValueNumericObs(t,e,r=null){const a=await u.buildValueNumber(t,e,this.date,r);return this.saveObs(a)}async saveValueDatetimeObs(t,e){const r=await u.buildValueDate(t,e,this.date);return this.saveObs(r)}async createEncounter(){const t={encounter_type_id:this.encounterTypeID,patient_id:this.patientID,encounter_datetime:this.date};-1!=this.providerID&&(t.provider_id=this.providerID);const e=await r.create(t);if(e)return this.encounterID=e.data.encounter_id,e.data}saveObs(t){return l.saveObs(this.encounterID,t)}}e("A",l);e("P",class extends a{constructor(e){super(),t(this,"patientId",void 0),t(this,"programId",void 0),t(this,"stateId",void 0),t(this,"patientProgramId",void 0),t(this,"programDate",void 0),t(this,"stateDate",void 0),t(this,"removedStates",["Pre-ART (Continue)","On antiretrovirals","Treatment never started","Transferred internally","Discharged uninfected","Exposed Child (Continue)","Patient transferred in"]),this.patientId=e,this.patientProgramId=-1,this.programId=s,this.stateId=-1,this.programDate=n(),this.stateDate=""}getProgramId(){return this.programId}getStateDate(){return this.stateDate}getProgramDate(){return this.programDate}getPatientProgramId(){return this.patientProgramId}getPrograms(){return a.getPatientPrograms(this.patientId)}async getProgram(){const t={patientID:-1,programID:-1,program:"N/A",outcome:"N/A",startDate:"",endDate:""},e=await this.getPrograms();if(i(e))return t;const r=e.data.filter((t=>t.program.program_id===s)).map((t=>{const e=t.patient_states;let r="",a="",s="N/A";if(!i(e)){const t=e.length-1;r=e[t].start_date,a=e[t].end_date,s=e[t].name}return{patientID:t.patient_id,programID:t.program_id,program:t.program.name,outcome:s,startDate:r,endDate:a}}));return i(r)?t:r[0]}getProgramStates(){return a.getPatientStates(this.patientId,this.programId)}async getProgramOutcomes(){const t=(await a.getProgramWorkflows(this.programId)).data;return t.length>0?t[0].states:[]}voidProgram(t){return a.voidProgram(this.patientProgramId,t)}voidState(t){return a.voidState(this.patientId,this.programId,this.stateId,t)}enrollProgram(){return a.enrollProgram(this.patientId,this.programId,this.programDate)}async transferOutEncounter(t,e=""){const r=new l(this.patientId,o.EXIT_FROM_HIV_CARE,this.stateDate);if(!(await r.createEncounter()))throw"Unable to transfer out encounter";return e&&await r.saveValueTextObs("Reason for transfer out",e),r.saveValueTextObs("Transfer to",t.name)}updateState(){return a.createState(this.patientId,this.programId,{state:this.stateId,date:this.stateDate})}setProgramDate(t){this.programDate=t}setStateDate(t){this.stateDate=t}setPatientProgramId(t){this.patientProgramId=t}setProgramId(t){this.programId=t}setStateId(t){this.stateId=t}});e("V",class extends l{constructor(t,e=n()){super(t,o.VITALS,e)}});e("C",class extends l{constructor(t,e=n()){super(t,o.HIV_CLINIC_CONSULTATION,e)}getFamilyPlanningMethods(){return["ORAL CONTRACEPTIVE PILLS","DEPO-PROVERA","INTRAUTERINE CONTRACEPTION","CONTRACEPTIVE IMPLANT","MALE CONDOMS","FEMALE CONDOMS","TUBAL LIGATION","NONE"]}})}}}))}();
