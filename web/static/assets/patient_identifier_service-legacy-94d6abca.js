System.register(["./index-legacy-63d88c8f.js"],(function(e,t){"use strict";var i,r;return{setters:[e=>{i=e.K,r=e.ar}],execute:function(){e("P",class{static create(e,t,r){return i.postJson("patient_identifiers",{identifier:r,identifier_type:t,patient_id:e})}static update(e,t){return i.putJson(`patient_identifiers/${e}`,{identifier:t})}async getIdentifierTypes(){const e=await i.getJson("types/patient_identifiers");if(e.ok&&e.data)return e.data;throw new Error(e.errorMessage||"Failed to fetch identifier types")}async getDuplicateIndentifiers(e){const t=await i.getJson("search/identifiers/duplicates",{type_id:e});if(t.ok&&t.data)return t.data;throw new Error(t.errorMessage||"Failed to fetch duplicate identifiers")}async getMultipleIdentifiers(e){const t=await i.getJson("search/identifiers/multiples",{type_id:e});if(t.ok&&t.data)return t.data;throw new Error(t.errorMessage||"Failed to fetch multiple identifiers")}async voidMultipleIdentifiers(e,t,r){const s=await i.void("void_multiple_identifiers",{identifiers:e,reason:t,identifier_type:r});if(!s.ok)throw new Error(s.errorMessage||"Failed to void the ID")}async reassignNPID(e){const t=await i.postJson(`/patients/${e}/npid`,{program_id:r});if(!t.ok)throw new Error(t.errorMessage||"Failed to reassign NPID")}})}}}));
