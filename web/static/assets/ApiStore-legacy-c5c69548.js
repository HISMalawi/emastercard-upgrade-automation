!function(){function t(t,e,a){var r;return(e="symbol"==typeof(r=function(t,e){if("object"!=typeof t||!t)return t;var a=t[Symbol.toPrimitive];if(void 0!==a){var r=a.call(t,e||"default");if("object"!=typeof r)return r;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(e,"string"))?r:r+"")in t?Object.defineProperty(t,e,{value:a,enumerable:!0,configurable:!0,writable:!0}):t[e]=a,t}System.register(["./program_service-legacy-a2774ffc.js","./common-legacy-42ce034b.js","./index-legacy-aa705205.js","./his_date-legacy-f511c580.js","./form-legacy-14cfe3a7.js","./index-legacy-5fd00317.js","./user_service-legacy-e7c827a3.js","./patient_service-legacy-68412ff5.js","./services-legacy-03115b96.js"],(function(e,a){"use strict";var r,n,i,s,o,u,d,l,c,I,N,O,E;return{setters:[t=>{r=t.P},t=>{n=t.i},t=>{i=t.P},t=>{s=t.a,o=t.d},t=>{u=t.C,d=t.O},t=>{l=t.l,c=t.al,I=t.S},t=>{N=t.U},t=>{O=t.P},t=>{E=t.S}],execute:function(){class a{static create(t){const e={...t};return"program_id"in e||Object.assign(e,{program_id:i}),"encounter_datetime"in e||Object.assign(e,{encounter_datetime:s()}),l.postJson("/encounters",e)}static voidEncounter(t,e="Unknown"){return l.void(`/encounters/${t}`,{reason:e})}static getSavedEncounters(t,e=i){return l.getJson(`programs/${e}/patients/${t}/saved_encounters`)}static getEncounters(t,e={}){return l.getJson("/encounters",{program_id:i,patient_id:t,paginate:!1,...e})}}e("E",a);class h{static buildLabOrders(t,e){return e.map((e=>{const a=u.getCachedConceptID(e.reason,!0),r={accession_number:e.accessionNumber,encounter_id:t.encounter_id,tests:[{concept_id:e.concept_id}],reason_for_test_id:a,target_lab:E.getLocationName(),date:s(),requesting_clinician:E.getUserName()};return e.specimenConcept&&(r.specimen={concept_id:e.specimenConcept}),r}))}static saveOrdersArray(t,e){return this.create({encounter_id:t,orders:e})}constructor(){}static create(t){return l.postJson("/lab/orders",t)}static getOrders(t,e={}){return l.getJson("/lab/orders",{patient_id:t,...e})}static getSpecimens(t){return l.getJson("/lab/specimen_types",{test_type:t})}}e("O",h);class g extends d{constructor(e,a,r=-1){super(),t(this,"encounterTypeID",void 0),t(this,"programID",void 0),t(this,"encounterID",void 0),t(this,"providerID",void 0),t(this,"patientID",void 0),t(this,"date",void 0),this.encounterTypeID=a,this.patientID=e,this.encounterID=0,this.date=d.getSessionDate(),this.providerID=r,this.programID=i}getDate(){return this.date}setDate(t){this.date=t}setEncounterID(t){this.encounterID=t}getEncounterID(){return this.encounterID}getFirstValueCoded(t){return g.getFirstValueCoded(this.patientID,t,this.date)}getFirstValueNumber(t){return g.getFirstValueNumber(this.patientID,t,this.date)}getFirstValueDatetime(t){return g.getFirstValueDatetime(this.patientID,t,this.date)}async buildObs(t,e){const a={...e,person_id:this.patientID,obs_datetime:this.date};return a.concept_id=await u.getConceptID(t),"string"==typeof e.value_coded&&(a.value_coded=await u.getConceptID(e.value_coded)),a}buildValueText(t,e){return g.buildValueText(t,e,this.date)}buildValueCoded(t,e){return g.buildValueCoded(t,e,this.date)}buildGroupValueCoded(t,e,a){return g.buildGroupValueCoded(t,e,a,this.date)}buildValueCodedFromConceptId(t,e){return g.buildValueCodedFromConceptId(t,e,this.date)}buildValueNumber(t,e,a=null,r=null){return g.buildValueNumber(t,e,a,r,this.date)}buildValueDate(t,e){return g.buildValueDate(t,e,this.date)}buildValueDateEstimated(t,e){return this.buildObs(t,{value_datetime:e,value_text:"Estimated"})}buildDateObs(t,e,a){return/unknown/i.test(e)?this.buildValueText(t,"Unknown"):a?this.buildValueDateEstimated(t,e):this.buildValueDate(t,e)}async saveObservationList(t){return d.saveObsArray(this.encounterID,t)}async saveValueTextObs(t,e){const a=await d.buildValueText(t,e);return this.saveObs(a)}async saveValueCodedObs(t,e){const a=await d.buildValueCoded(t,e);return this.saveObs(a)}async saveValueNumericObs(t,e,a=null){const r=await d.buildValueNumber(t,e,a);return this.saveObs(r)}async saveValueDatetimeObs(t,e){const a=await d.buildValueDate(t,e,d.getSessionDate());return this.saveObs(a)}async createEncounter(){const t={encounter_type_id:this.encounterTypeID,patient_id:this.patientID,encounter_datetime:this.date};-1!=this.providerID&&(t.provider_id=this.providerID);const e=await a.create(t);if(e)return this.encounterID=e.data.encounter_id,e.data}saveObs(t){return g.saveObs(this.encounterID,t)}}e("A",g);e("P",class extends r{constructor(e){super(),t(this,"patientId",void 0),t(this,"programId",void 0),t(this,"stateId",void 0),t(this,"patientProgramId",void 0),t(this,"programDate",void 0),t(this,"stateDate",void 0),t(this,"removedStates",["Pre-ART (Continue)","On antiretrovirals","Treatment never started","Transferred internally","Discharged uninfected","Exposed Child (Continue)","Patient transferred in"]),this.patientId=e,this.patientProgramId=-1,this.programId=i,this.stateId=-1,this.programDate=s(),this.stateDate=""}getProgramId(){return this.programId}getStateDate(){return this.stateDate}getProgramDate(){return this.programDate}getPatientProgramId(){return this.patientProgramId}getPrograms(){return r.getPatientPrograms(this.patientId)}async getProgram(){const t={patientID:-1,programID:-1,program:"N/A",outcome:"N/A",startDate:"",endDate:""},e=await this.getPrograms();if(n(e))return t;const a=e.data.filter((t=>t.program.program_id===i)).map((t=>{const e=t.patient_states;let a="",r="",i="N/A";if(!n(e)){const t=e.length-1;a=e[t].start_date,r=e[t].end_date,i=e[t].name}return{patientID:t.patient_id,programID:t.program_id,program:t.program.name,outcome:i,startDate:a,endDate:r}}));return n(a)?t:a[0]}getProgramStates(){return r.getPatientStates(this.patientId,this.programId)}async getProgramOutcomes(){const t=(await r.getProgramWorkflows(this.programId)).data;return t.length>0?t[0].states:[]}voidProgram(t){return r.voidProgram(this.patientProgramId,t)}voidState(t){return r.voidState(this.patientId,this.programId,this.stateId,t)}enrollProgram(){return r.enrollProgram(this.patientId,this.programId,this.programDate)}printTransferout(t){}async transferOutEncounter(t,e=""){const a=new g(this.patientId,119);a.setDate(this.stateDate);if(!(await a.createEncounter()))throw"Unable to transfer out encounter";return e&&await a.saveValueTextObs("Reason for transfer out",e),a.saveValueTextObs("Transfer to",t.name)}updateState(){return r.createState(this.patientId,this.programId,{state:this.stateId,date:this.stateDate})}setProgramDate(t){this.programDate=t}setStateDate(t){this.stateDate=t}setPatientProgramId(t){this.patientProgramId=t}setProgramId(t){this.programId=t}setStateId(t){this.stateId=t}});e("V",class extends g{constructor(t,e){super(t,6,e)}isNotEmptyandNumber(t){return`${t.value}`.match(/^-?\d+\.?\d*$/)?null:[`Invalid entry for ${t.label}`]}isNotEmptyandFloat(t){var e;return`${t.value}`.match(/^\d{1,3}\.\d{1,5}$/)?null:[`Invalid entry for ${t.label}. Don't forget to add a decimal. e.g. 56.2 ${(null===(e=t.other)||void 0===e?void 0:e.modifier)||""}`]}checkMinMax(t,e,a){const r=[];var n,i;parseFloat(`${t.value}`)<e&&r.push([`${t.label} entered is less than minimum ${e} ${(null==t||null===(n=t.other)||void 0===n?void 0:n.modifier)||""}`]);parseFloat(`${t.value}`)>a&&r.push([`${t.label} entered is greater than maximum ${a} ${(null==t||null===(i=t.other)||void 0===i?void 0:i.modifier)||""}`]);return r.length>0?r:null}validateAll(t){const e=[];return t.map((t=>{const a=this.validator(t);return Array.isArray(a)?e.push(a):null})),e.length>0?e:null}mergeErrors(t){const e=[];return t.forEach((t=>{Array.isArray(t)&&e.push(t)})),e.length>0?e:null}isValidBPReading(t){const e=[],a=`${t.value}`.match(/^\d{1,3}\/\d{1,3}$/g)?null:["Invalid BP reading"];if(e.push(a),null==a){const a=`${t.value}`.split("/"),r={label:"Systolic",value:a[0]},n={label:"Diastolic",value:a[1]};e.push(this.checkMinMax(n,30,200)),e.push(this.checkMinMax(r,40,250))}return this.mergeErrors(e)}validator(t){const e=[{name:"Weight",validator:t=>{const e=this.isNotEmptyandFloat(t),a=this.checkMinMax(t,2,250);return this.mergeErrors([e,a])}},{name:"Height",validator:t=>{const e=[];return e.push(this.isNotEmptyandNumber(t)),e.push(this.checkMinMax(t,40,220)),this.mergeErrors(e)}},{name:"BP",validator:t=>this.isValidBPReading(t)},{name:"Temp",validator:t=>{const e=this.isNotEmptyandNumber(t),a=this.checkMinMax(t,30,42);return this.mergeErrors([e,a])}},{name:"SP02",validator:t=>{const e=this.checkMinMax(t,40,100);return this.mergeErrors([e])}},{name:"Pulse",validator:t=>{const e=this.checkMinMax(t,50,120);return this.mergeErrors([e])}}].filter((e=>e.name===t.label));return e.length>0?e[0].validator(t):null}});e("C",class extends g{constructor(t,e){super(t,53,e)}getFamilyPlanningMethods(){return["ORAL CONTRACEPTIVE PILLS","DEPO-PROVERA","INTRAUTERINE CONTRACEPTION","CONTRACEPTIVE IMPLANT","MALE CONDOMS","FEMALE CONDOMS","TUBAL LIGATION","NONE"]}async getTptTreatmentStatus(){return l.getJson(`/patients/${this.patientID}/tpt_status`)}async patientHitMenopause(){const t=await d.getFirstObs(this.patientID,"Why does the woman not use birth control");return!(!t||"string"!=typeof(null==t?void 0:t.value_text))&&(!!t.value_text.match(/menopause/i)&&g.obsInValidPeriod(t))}async hasTreatmentHistoryObs(){const t=await d.getFirstObs(this.patientID,"Previous TB treatment history");return t&&g.obsInValidPeriod(t)}getDrugSideEffects(){return l.getJson(`programs/${i}/patients/${this.patientID}/medication_side_effects`,{date:this.date})}getClient(){return g.getFirstValueCoded(this.patientID,"Patient present")}async clientLastScreened(){const t=await l.getJson("last_cxca_screening_details",{id:this.patientID,date:this.date});return!n(t)}async clientDueForCxCa(){const t=await l.getJson("last_cxca_screening_details",{id:this.patientID,date:this.date});if(!n(t)){const e=t.date_screened;return o(this.date).diff(e,"years")>=1}return!0}async clientHasHadAHysterectomy(){if("Hysterectomy"===await g.getFirstValueCoded(this.patientID,"Reason for NOT offering CxCa"))return!0;return"Hysterectomy"===await g.getFirstValueText(this.patientID,"Treatment")}async getTLObs(){const t=t=>t&&"Tubal ligation"===t.value_coded&&g.obsInValidPeriod(t),e=await g.getFirstObs(this.patientID,"Family planning");if(t(e))return t(e);return t(await g.getFirstObs(this.patientID,"Method of family planning"))}async getPreviousDrugs(){const t=await l.getJson(`patients/${this.patientID}/drugs_received`);if(!t)return;const e={};return t.data.forEach((t=>{e[t.drug_inventory_id]=t})),e}familyPlanningMethods(t,e){const a={"ORAL CONTRACEPTIVE PILLS":{"DEPO-PROVERA":"N","INTRAUTERINE CONTRACEPTION":"N","CONTRACEPTIVE IMPLANT":"N","MALE CONDOMS":"Y","FEMALE CONDOMS":"Y","RYTHM METHOD":"N","TUBAL LIGATION":"N",VASECTOMY:"N"},"DEPO-PROVERA":{"ORAL CONTRACEPTIVE PILLS":"N","INTRAUTERINE CONTRACEPTION":"N","CONTRACEPTIVE IMPLANT":"N","MALE CONDOMS":"Y","FEMALE CONDOMS":"Y","RYTHM METHOD":"N","TUBAL LIGATION":"N",VASECTOMY:"N"},"INTRAUTERINE CONTRACEPTION":{"ORAL CONTRACEPTIVE PILLS":"N","DEPO-PROVERA":"N","CONTRACEPTIVE IMPLANT":"N","MALE CONDOMS":"Y","FEMALE CONDOMS":"Y","RYTHM METHOD":"N","TUBAL LIGATION":"N",VASECTOMY:"N"},"CONTRACEPTIVE IMPLANT":{"ORAL CONTRACEPTIVE PILLS":"N","DEPO-PROVERA":"N","INTRAUTERINE CONTRACEPTION":"N","MALE CONDOMS":"Y","FEMALE CONDOMS":"Y","RYTHM METHOD":"N","TUBAL LIGATION":"N",VASECTOMY:"N"},"MALE CONDOMS":{"ORAL CONTRACEPTIVE PILLS":"Y","DEPO-PROVERA":"Y","INTRAUTERINE CONTRACEPTION":"Y","CONTRACEPTIVE IMPLANT":"Y","FEMALE CONDOMS":"Y","RYTHM METHOD":"Y","TUBAL LIGATION":"N",VASECTOMY:"Y"},"FEMALE CONDOMS":{"ORAL CONTRACEPTIVE PILLS":"Y","DEPO-PROVERA":"Y","INTRAUTERINE CONTRACEPTION":"Y","CONTRACEPTIVE IMPLANT":"Y","MALE CONDOMS":"Y","RYTHM METHOD":"Y","TUBAL LIGATION":"N",VASECTOMY:"Y"},"RYTHM METHOD":{"ORAL CONTRACEPTIVE PILLS":"N","DEPO-PROVERA":"N","INTRAUTERINE CONTRACEPTION":"N","MALE CONDOMS":"Y","FEMALE CONDOMS":"Y","CONTRACEPTIVE IMPLANT":"N","TUBAL LIGATION":"N",VASECTOMY:"N"},"TUBAL LIGATION":{"ORAL CONTRACEPTIVE PILLS":"N","DEPO-PROVERA":"N","INTRAUTERINE CONTRACEPTION":"N","MALE CONDOMS":"N","FEMALE CONDOMS":"N","CONTRACEPTIVE IMPLANT":"N","RYTHM METHOD":"N",VASECTOMY:"N"},VASECTOMY:{"ORAL CONTRACEPTIVE PILLS":"N","DEPO-PROVERA":"Y","INTRAUTERINE CONTRACEPTION":"N","MALE CONDOMS":"Y","FEMALE CONDOMS":"N","CONTRACEPTIVE IMPLANT":"Y","RYTHM METHOD":"N","TUBAL LIGATION":"N"},NONE:{"ORAL CONTRACEPTIVE PILLS":"N","DEPO-PROVERA":"N","INTRAUTERINE CONTRACEPTION":"N","MALE CONDOMS":"N","FEMALE CONDOMS":"N","CONTRACEPTIVE IMPLANT":"N","RYTHM METHOD":"N","TUBAL LIGATION":"N"}}[t];return e.map((t=>"N"===a[t.label]?{label:t.label,value:t.value,isChecked:!1,disabled:!0}:{label:t.label,value:t.value,isChecked:t.isChecked,disabled:!1}))}});class T{static isLoggedIn(){return!!sessionStorage.apiKey}cachingIsEnabled(){const t=this.getAppConf("dataCaching");return"boolean"!=typeof t||t}getAppConf(t){const e=sessionStorage.getItem("appConf");if(e)try{return JSON.parse(e)[t]}catch(a){console.error(a)}return null}isLoggedIn(){return!!sessionStorage.apiKey}}function p(){return(new T).cachingIsEnabled()}const m={CURRENT_LOCATION:{get:async()=>c.getCurrentFacility(),canReloadCache:t=>!p()||n(t.state)},ACTIVE_PATIENT:{get:async t=>{const e=await O.findByID(t.patientID);return e?new O(e.data):{}},canReloadCache:({state:t,params:e})=>!p()||!(!n(t)&&"number"==typeof e.patientID&&"function"==typeof(null==t?void 0:t.getID)&&t.getID()===e.patientID)},PROVIDERS:{get:()=>N.getUsers(),canReloadCache:t=>!p()||n(t.state)},PATIENT_LAB_ORDERS:{get:t=>"number"==typeof t.patientID?h.getOrders(t.patientID):[],canReloadCache:({params:t,state:e})=>!p()||!(t.patientID&&Array.isArray(e)&&e.length&&e[0].patient_id===t.patientID)}},A=I({}),C=I({});e("S",{async get(t,e={}){const a=m;if(t in a){var r,n;const s=e||{};if("function"==typeof(null===(r=a[t])||void 0===r?void 0:r.canReloadCache)&&null!==(n=a[t])&&void 0!==n&&n.canReloadCache({params:s,state:A.value[t]})){var i;if(!C.value[t])C.value[t]=null===(i=a[t])||void 0===i?void 0:i.get(s);A.value[t]=await C.value[t],C.value[t]=void 0}return A.value[t]}throw`Store ${t} not found`},set:(t,e)=>(A.value[t]=e,A.value[t]),invalidate(t){A.value[t]=void 0},invalidateAll(){Object.keys(A.value).forEach((t=>{A.value[t]=void 0}))}})}}}))}();
