var I=Object.defineProperty;var f=(r,a,t)=>a in r?I(r,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):r[a]=t;var u=(r,a,t)=>(f(r,typeof a!="symbol"?a+"":a,t),t);import{ap as i,H as o,r as m,h as O,a6 as w}from"./index-9908b3ca.js";import{o as v}from"./arrays-1b521787.js";import{a as g,c as V}from"./his_date-945fca6a.js";import{e as D}from"./encounter_types-1e88a09d.js";import{O as d,C as b}from"./patient_service-a95ef97a.js";class C{static create(a){const t={...a};return"program_id"in t||Object.assign(t,{program_id:i}),"encounter_datetime"in t||Object.assign(t,{encounter_datetime:g()}),o.postJson("/encounters",t)}static voidEncounter(a,t="Unknown"){return o.void("/encounters/".concat(a),{reason:t})}static getSavedEncounters(a,t=i){return o.getJson("programs/".concat(t,"/patients/").concat(a,"/saved_encounters"))}static getEncounters(a,t={}){return o.getJson("/encounters",{program_id:i,patient_id:a,paginate:!1,...t})}}class n extends d{constructor(t,e,s){super();u(this,"encounterTypeID");u(this,"programID");u(this,"encounterID");u(this,"providerID");u(this,"patientID");u(this,"date");this.encounterTypeID=e,this.patientID=t,this.encounterID=0,this.date=s,this.providerID=o.getProviderID(),this.programID=i}getDate(){return this.date}setDate(t){this.date=t}setEncounterID(t){this.encounterID=t}getEncounterID(){return this.encounterID}getFirstValueCoded(t){return n.getFirstValueCoded(this.patientID,t,this.date)}getFirstValueNumber(t){return n.getFirstValueNumber(this.patientID,t,this.date)}getFirstValueDatetime(t){return n.getFirstValueDatetime(this.patientID,t,this.date)}async buildObs(t,e){const s={...e,person_id:this.patientID,obs_datetime:this.date};return s.concept_id=await b.getConceptID(t),typeof e.value_coded=="string"&&(s.value_coded=await b.getConceptID(e.value_coded)),s}buildValueText(t,e){return n.buildValueText(t,e,this.date)}buildValueCoded(t,e){return n.buildValueCoded(t,e,this.date)}buildGroupValueCoded(t,e,s){return n.buildGroupValueCoded(t,e,s,this.date)}buildOptionsGroupObs(t,e){return Promise.all(e.map(async s=>this.buildGroupValueCoded(t,s.label,s.isChecked?"Yes":"No")))}buildValueNumber(t,e,s=null,c=null){return n.buildValueNumber(t,e,this.date,s,c)}buildValueDate(t,e){return n.buildValueDate(t,e,this.date)}buildValueDateEstimated(t,e){return this.buildObs(t,{value_datetime:e,value_text:"Estimated"})}buildDateObs(t,e,s){return/unknown/i.test(e)?this.buildValueText(t,"Unknown"):s?this.buildValueDateEstimated(t,e):this.buildValueDate(t,e)}async saveObservationList(t){return d.saveObsArray(this.encounterID,t)}async saveValueTextObs(t,e){const s=await d.buildValueText(t,e,this.date);return this.saveObs(s)}async saveValueCodedObs(t,e){const s=await d.buildValueCoded(t,e,this.date);return this.saveObs(s)}async saveValueNumericObs(t,e,s=null){const c=await d.buildValueNumber(t,e,this.date,s);return this.saveObs(c)}async saveValueDatetimeObs(t,e){const s=await d.buildValueDate(t,e,this.date);return this.saveObs(s)}async createEncounter(){const t={encounter_type_id:this.encounterTypeID,patient_id:this.patientID,encounter_datetime:this.date};this.providerID!=-1&&(t.provider_id=this.providerID);const e=await C.create(t);if(e)return this.encounterID=e.data.encounter_id,e.data}saveObs(t){return n.saveObs(this.encounterID,t)}}const T=["Pre-ART (Continue)","On antiretrovirals","Treatment never started","Transferred internally","Discharged uninfected","Exposed Child (Continue)","Patient transferred in"],p=m([]),h=m(new Map),l=m(-1),y=O(()=>p.value.findIndex(r=>r.value===i)>=0);w(p,r=>{r.forEach(async a=>{const t=await P(a.value);h.value.set(a.value,t)})});async function E(r,a=i){var e;const t=await o.getJson("/programs/".concat(a,"/patients/").concat(l.value,"/visit?date=").concat(r));if(!t.ok)throw new Error((e=t.errorMessage)!=null?e:"Unable to load program information");return t.data}async function _(){var a,t;const r=await o.getJson("patients/".concat(l.value,"/programs"));if(!r.ok)throw new Error((a=r.errorMessage)!=null?a:"Failed to load patient programs");p.value=v((t=r.data)!=null?t:[],"program.name","program_id")}async function P(r=i){var s;const a=await o.getJson("programs/".concat(r,"/workflows"));if(!a.ok)throw new Error((s=a.errorMessage)!=null?s:"Failed to load program outcomes");const t=a.data.length>0?a.data[0].states:[],e=r===i?t.filter(c=>!T.includes(c.name)):t;return v(e,"name","program_workflow_state_id")}async function N(r,a){var e;const t=await o.void("patient_programs/".concat(r,"/"),{reason:a});if(!t.ok)throw new Error((e=t.errorMessage)!=null?e:"Unable to void patient program")}async function M(r,a,t=i){var s;const e=await o.void("programs/".concat(t,"/patients/").concat(l.value,"/states/").concat(r),{reason:a});if(!e.ok)throw new Error((s=e.errorMessage)!=null?s:"Unable to void patient program outcome")}async function $(r,a,t=i){var s;const e=await o.postJson("programs/".concat(t,"/patients/").concat(l.value,"/states"),{state:r,date:V(a)});if(!e.ok)throw new Error((s=e.errorMessage)!=null?s:"Unable to update patient program outcome")}function L(r=i){return h.value.has(r)}async function k(r,a=i){var e;const t=await o.postJson("/patients/".concat(l.value,"/programs"),{program_id:a,date_enrolled:r});if(!t.ok)throw new Error((e=t.errorMessage)!=null?e:"Unable to enroll patient into the the program")}function J(r){return l.value=r,{patientPrograms:p,programStates:h,hasArtProgram:y,fetchPatientPrograms:_,getProgramInfo:E,enrollPatient:k,voidProgram:N,voidState:M,updateState:$,hasProgram:L}}class G extends n{constructor(a,t=g()){super(a,D.VITALS,t)}}class B extends n{constructor(a,t=g()){super(a,D.HIV_CLINIC_CONSULTATION,t)}getFamilyPlanningMethods(){return["ORAL CONTRACEPTIVE PILLS","DEPO-PROVERA","INTRAUTERINE CONTRACEPTION","CONTRACEPTIVE IMPLANT","MALE CONDOMS","FEMALE CONDOMS","TUBAL LIGATION","NONE"]}}export{n as A,B as C,C as E,G as V,J as u};
