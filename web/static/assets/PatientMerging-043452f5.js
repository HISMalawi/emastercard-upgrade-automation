import{d as N,c as P,a,b as l,t as c,ae as A,o as _,h as M,i as S,j as H,af as E,f as F,ac as z,F as G,ag as K,D as T,J as u,g as w,w as p,e as g,L as I,y as U,H as B}from"./index-b34da4cb.js";import{P as h}from"./patient_service-8bb3b4cd.js";import{_ as R}from"./_plugin-vue_export-helper-c27b6911.js";import{b as j}from"./toasts-5a6b8805.js";import"./patient_identifier_service-5ba3bc09.js";import"./his_date-3774cb27.js";import"./index-95d3a767.js";import"./Date-c5ff4f23.js";import"./common-abc2f84d.js";const L=N({props:{patient:{type:Object,required:!0},isActive:{type:Boolean}},computed:{stateClass(){return{"active-card-color":this.isActive,"inactive-card-color":!this.isActive}}}});function J(r,n,m,b,C,v){return _(),P("div",{class:A(["his-card clickable",r.stateClass])},[a("li",null,[a("ul",null,[n[0]||(n[0]=l(" NPID : ")),a("b",null,c(r.patient.npid),1)]),a("ul",null,[n[1]||(n[1]=l(" Arv# : ")),a("b",null,c(r.patient.arvNum),1)]),a("ul",null,[n[2]||(n[2]=l(" Name : ")),a("b",null,c(r.patient.name),1)]),a("ul",null,[n[3]||(n[3]=l(" Birth date : ")),a("b",null,c(r.patient.birthdate),1)]),a("ul",null,[n[4]||(n[4]=l(" Gender : ")),a("b",null,c(r.patient.gender),1)]),a("ul",null,[n[5]||(n[5]=l(" Home District : ")),a("b",null,c(r.patient.homeDistrict),1)]),a("ul",null,[n[6]||(n[6]=l(" Home Village : ")),a("b",null,c(r.patient.homeVillage),1)]),a("ul",null,[n[7]||(n[7]=l(" Current District : ")),a("b",null,c(r.patient.currentDistrict),1)]),a("ul",null,[n[8]||(n[8]=l(" Current Village : ")),a("b",null,c(r.patient.currentVillage),1)])])],2)}const Q=R(L,[["render",J],["__scopeId","data-v-db98b469"]]),O=N({components:{IonGrid:M,IonRow:S,IonCol:H,PatientCard:Q,IonSearchbar:E},setup(){const r=F(),{facility:n}=T(),m=z([{category:"primary",query:"",results:[]},{category:"secondary",query:"",results:[]}]),b=G(()=>m.every(e=>e.results.length>0&&e.results.some(i=>i.isChecked))),C=async e=>e.match(/^(\w+-ARV-\w+)$/)?{type:"arv_number",value:e}:e.match(/^(\d+)$/)?{type:"arv_number",value:"".concat(n.code,"-ARV-").concat(e)}:{type:"name",value:e},v=e=>{const i={},t=e.split(" ").filter(d=>/\S/.test(d));return t.length>0&&(i.given_name=t[0],t[1]&&(i.family_name=t[1]),t[2]&&(i.middle_name=t[1],i.family_name=t[2])),i};return{patients:m,enableMergeBtn:b,searchPatient:async e=>{if(e.query)try{const{type:i,value:t}=await C(e.query);let d;i==="name"?d=(await h.search(v(t))).data:i==="arv_number"?d=(await h.findByOtherID(4,t)).data:d=[],e.results=d.map((s,D)=>{const o=new h(s);return{index:D,id:o.getID(),name:o.getFullName(),docID:o.getDocID(),birthdate:o.getBirthdate(),arvNum:o.getArvNumber(),npid:o.getNationalID(),gender:o.getGender(),homeDistrict:o.getHomeDistrict(),homeVillage:o.getHomeVillage(),currentDistrict:o.getCurrentDistrict(),currentVillage:o.getCurrentVillage(),isChecked:!1}})}catch(i){console.log("".concat(i))}},onPatient:(e,i)=>{if(i==="primary")m[0].results.forEach(t=>{t.id===e.id?t.isChecked=!t.isChecked:t.isChecked=!1}),e.isChecked&&m[1].results.forEach(t=>{t.id===e.id&&(t.isChecked=!1)});else{if(e.isChecked)return e.isChecked=!1;e.isChecked=!m[0].results.some(t=>t.isChecked&&t.id===e.id)}},merge:async()=>{var e;if(await K("Are you sure you want to merge these patients?"))try{const i=m[0].results.find(s=>s.isChecked),t=await h.mergePatients({primary:{patient_id:i.id,doc_id:i.docID},secondary:m[1].results.filter(s=>s.isChecked).map(s=>({patient_id:s.id,doc_id:s.docID}))});if(!t.ok)throw new Error("Unable to merge Patients");const d=(e=t.data)==null?void 0:e.patient_id;r.push("/patient/".concat(d))}catch(i){j("".concat(i))}}}}});const W={class:"ion-margin-start"};function X(r,n,m,b,C,v){const $=u("ion-button"),k=u("ion-col"),V=u("ion-card-title"),e=u("ion-searchbar"),i=u("ion-card-header"),t=u("patient-card"),d=u("ion-card-content"),s=u("ion-card"),D=u("ion-row"),o=u("ion-grid");return _(),w(o,null,{default:p(()=>[g(D,null,{default:p(()=>[g(k,{size:"12",class:"padding"},{default:p(()=>[a("h2",W,[n[1]||(n[1]=l(" Patient Merging ")),g($,{class:"ion-float-right ion-margin-end",disabled:!r.enableMergeBtn,onClick:r.merge},{default:p(()=>n[0]||(n[0]=[l(" Merge Selected Patients ")])),_:1},8,["disabled","onClick"])])]),_:1}),(_(!0),P(B,null,I(r.patients,f=>(_(),w(k,{size:"6",key:f.category},{default:p(()=>[g(s,null,{default:p(()=>[g(i,{color:"light"},{default:p(()=>[g(V,{class:"ion-margin-bottom"},{default:p(()=>[l(c(f.category)+" patients ",1)]),_:2},1024),g(e,{style:{width:"100%",height:"45px"},class:"box-input ion-no-padding ion-margin-end",placeholder:"Type Name or ARV Number and press enter",modelValue:f.query,"onUpdate:modelValue":y=>f.query=y,onKeyup:U(y=>r.searchPatient(f),["enter"])},null,8,["modelValue","onUpdate:modelValue","onKeyup"])]),_:2},1024),g(d,{color:"light",style:{height:"70vh","overflow-y":"auto"}},{default:p(()=>[(_(!0),P(B,null,I(f.results,(y,q)=>(_(),w(t,{onClick:Y=>r.onPatient(y,f.category),key:q,patient:y,isActive:y.isChecked},null,8,["onClick","patient","isActive"]))),128))]),_:2},1024)]),_:2},1024)]),_:2},1024))),128))]),_:1})]),_:1})}const se=R(O,[["render",X]]);export{se as default};
